@Test public void testEquals() { SortedIntArray s1 = new SortedIntArray(1, 3, 7); SortedIntArray s2 = new SortedIntArray(3, 1, 7); SortedIntArray s3 = new SortedIntArray(1, 3); assertEquals(s1.hashCode(), s2.hashCode()); assertTrue(s1.equals(s2)); assertTrue(s2.equals(s1)); assertFalse(s1.equals(s3)); assertFalse(s3.equals(s1)); assertFalse(s1.hashCode() == s3.hashCode()); }
@Test @RunWithCustomExecutor public void givenSipWithAURefToBDOThenExtractKO() throws Exception { VitamThreadUtils.getVitamSession().setTenantId(TENANT_ID); prepareResponseOKForAdminManagementClientFindIngestContracts(INGEST_CONTRACT_NO_CHECK); final InputStream sedaLocal = new FileInputStream(PropertiesUtils.findFile("sip-ko-bdo-ref-group.xml")); when(workspaceClient.getObject(any(), eq("SIP/manifest.xml"))) .thenReturn(Response.status(Status.OK).entity(sedaLocal).build()); handlerIO.addOutIOParameters(out); final ItemStatus response = handler.execute(params, handlerIO); assertEquals(StatusCode.KO, response.getGlobalStatus()); }
@Test public void testVertex() throws Exception { String query = "MATCH (n)-->(m:Person)"; QueryHandler queryHandler = new QueryHandler(query); LeafNode nNode = new FilterAndProjectVerticesNode(null, "n", queryHandler.getPredicates().getSubCNF("n"), Sets.newHashSet()); LeafNode mNode = new FilterAndProjectVerticesNode(null, "m", queryHandler.getPredicates().getSubCNF("m"), Sets.newHashSet()); QueryPlan queryPlan = new QueryPlan(nNode); QueryPlanEstimator estimator = new QueryPlanEstimator(queryPlan, queryHandler, STATS); assertThat(estimator.getCardinality(), is(11L)); queryPlan = new QueryPlan(mNode); estimator = new QueryPlanEstimator(queryPlan, queryHandler, STATS); assertThat(estimator.getCardinality(), is(6L)); }
@Test public void afterError_maxRetriesExceeded() { Request<?> request = getRequest(); AWSRequestMetrics metrics = getMetrics(3); metrics.addPropertyWith(MaxRetriesExceeded, true); request.setAWSRequestMetrics(metrics); requestHandler.afterError(request, getResponse(request), new IOException("")); ApiCallMonitoringEvent event = getCapturedEvent(ApiCallMonitoringEvent.class); assertThat(event.getMaxRetriesExceeded(), is(1)); }
@Test public void onProcessForDocumentListPresenterWillDoNothingIfHistoryNotChanged() { HistoryToken token = new HistoryToken(); service.processForDocumentListPresenter(token); verifyZeroInteractions(documentListPresenter); }
@Test public void testHexFormat() throws Exception { VType number = VDouble.of(65535.0, Alarm.none(), Time.now(), display); String text = FormatOptionHandler.format(number, FormatOption.HEX, 4, true); System.out.println(text); assertThat(text, equalTo("0xFFFF V")); text = FormatOptionHandler.format(number, FormatOption.HEX, 8, true); System.out.println(text); assertThat(text, equalTo("0x0000FFFF V")); text = FormatOptionHandler.format(number, FormatOption.HEX, 16, true); System.out.println(text); assertThat(text, equalTo("0x000000000000FFFF V")); }
@Test public void testGetTrack1() throws Throwable { CardHolder cardHolder = new CardHolder("testCardHolderPan", "4Cha"); cardHolder.setTrack1("testCardHolderTrack1"); String result = cardHolder.getTrack1(); assertEquals("testCardHolderTrack1", result, "result"); }
@Test public void flip() { RunContainer rc = new RunContainer(); rc.flip((char) 1); assertTrue(rc.contains((char) 1)); rc.flip((char) 1); assertFalse(rc.contains((char) 1)); }
@Test public void deal() { Deque<Card> jdkShuffle = this.jdkDeck.shuffle(new Random(1)); Set<Card> jdkHand = this.jdkDeck.deal(jdkShuffle, 5); Assert.assertEquals(5, jdkHand.size()); Assert.assertEquals(47, jdkShuffle.size()); }
@Test public void testCompareEquivalentOneNullOneBNodeContext() { statement1 = valueFactory.createStatement( testSubjectUri1, testPredicateUri1, testObjectUri1, null); statement2 = valueFactory.createStatement( testSubjectUri1, testPredicateUri1, testObjectUri1, testContextBNode1); assertTrue(testComparator.compare(statement1, statement2) < 0); assertTrue(testComparator.compare(statement2, statement1) > 0); }
@Test public void filterResultsWithOneColumnButNotString() { List<Object> results = Collections.singletonList(23); assertSame(results, this.filter.filterResults(results)); }
@Test public void cdataParsing() throws Exception { input = getClass().getClassLoader().getResourceAsStream( "test/oai_dc-CDATA.xml"); parser = new RecordParser(context, "oai_dc"); XmlReader reader = new XmlReader(input); Record record = parser.parse(reader); assertEquals(1,record.getMetadata().getValue().searcher().findAll("dc.title").size()); assertEquals("Article Title-additional CDATA",record.getMetadata().getValue().searcher().findOne("dc.title")); }
@Test(expected = CannotDisseminateFormatException.class) public void cannotDisseminateFormat() throws Exception { theItemRepository().withItem(item().withDefaults().withIdentifier("1")); aContext().withMetadataFormat(EXISTING_METADATA_FORMAT, identity()); underTest.handle(a(request().withVerb(ListIdentifiers) .withMetadataPrefix("abcd"))); }
@Test public void shouldSaveProject() { Project proj1 = createProjectAndTasks(3); service.saveProject(proj1); System.out.printf("***** proj1=%s\n", proj1); assertNotNull( proj1.getId()); assertFalse( proj1.getTasks().isEmpty()); assertThat( proj1.getTasks().size(), is(3)); for ( Task task: proj1.getTasks()) { assertNotNull( task.getId()); assertThat( task.getProject().getId(), is( proj1.getId()) ); } }
@Test public void testSpdyWindowUpdateFrame() throws Exception { short type = 9; byte flags = 0; int length = 8; int streamId = RANDOM.nextInt() & 0x7FFFFFFF; int deltaWindowSize = RANDOM.nextInt() & 0x7FFFFFFF | 0x01; ByteBuf buf = Unpooled.buffer(SPDY_HEADER_SIZE + length); encodeControlFrameHeader(buf, type, flags, length); buf.writeInt(streamId); buf.writeInt(deltaWindowSize); delegate.readWindowUpdateFrame(streamId, deltaWindowSize); replay(delegate); decoder.decode(buf); verify(delegate); assertFalse(buf.isReadable()); }
@Test public void testSettingRetryIntervalCanSuccessfulRetry() throws Exception { ParsecAsyncHttpRequest request = new ParsecAsyncHttpRequest.Builder() .setCriticalGet(true) .setUrl(baseUrl + "/500") .addRetryStatusCode(500) .setMaxRetries(2) .build(); client = new ParsecAsyncHttpClient.Builder() .setRetryIntervalInMilliSeconds(100) .build(); Response response = client.execute(request).get(); assertNotNull(response.getHeaderString(ParsecClientDefine.HEADER_HOST)); }
@Test public void stringBetween() { when(predicateLeaf.getColumnName()).thenReturn(COL0); when(predicateLeaf.getOperator()).thenReturn(Operator.BETWEEN); when(predicateLeaf.getLiteralList()).thenReturn(Arrays.asList((Object) "foo", "bar")); StructTypeInfo structTypeInfo = new StructTypeInfoBuilder().add(COL0, TypeInfoFactory.stringTypeInfo).build(); EvaluatorFactory factory = new EvaluatorFactory(structTypeInfo); Evaluator<?> evaluator = factory.newInstance(predicateLeaf); assertThat(evaluator, instanceOf(BetweenEvaluator.class)); }
@Test(expected = MethodNotFoundException.class) public void invokeOverriddenMethodWithNullParameterThrowsIAE() throws Exception { ClassWithOverloadedMethods tested = new ClassWithOverloadedMethods(); Child child = null; Whitebox.invokeMethod(tested, "overloaded", 2, child); }
@Test public void testPrefix() { Assert.assertEquals(TalkService.prefix("blah blah"), "Talk: blah blah"); }
@Test public void testGlobalSettings() throws Exception { Logger logger = mock( Logger.class ); executor.enableLogging( logger ); InvocationRequest req = new DefaultInvocationRequest(); executor.setupRequest( req, null, "-gs custom-settings.xml" ); assertEquals( "custom-settings.xml", req.getGlobalSettingsFile().getPath() ); req = new DefaultInvocationRequest(); executor.setupRequest( req, null, "--global-settings other-settings.xml" ); assertEquals( "other-settings.xml", req.getGlobalSettingsFile().getPath() ); }
@Test public void testInitFromRequest_oauthDefaults() throws Exception { FakeHttpServletRequest req = new FakeHttpServletRequest(); OAuthArguments args = new OAuthArguments(AuthType.OAUTH, req); assertEquals(UseToken.ALWAYS, args.getUseToken()); }
@Test public void testGetType_String() { assertEquals(String.class, TypeUtil.getType("Hello World!")); }
@Test public void testSslRequestWithComponentKeystore() throws InterruptedException, IOException { Context context = new Context(); context.put("port", String.valueOf(selectedPort = getFreePort())); context.put("bind", "0.0.0.0"); context.put("ssl", "true"); context.put("keystore", "src/test/resources/server.p12"); context.put("keystore-password", "password"); context.put("keystore-type", "PKCS12"); Configurables.configure(source, context); doSslRequest(); }
@Test public void testArrayOfIntegers() throws Exception { FilterFactoryImpl ff = new FilterFactoryImpl(); Function func = ff.function("array", ff.literal(1), ff.literal(2)); assertTrue(func.evaluate(new Object(), Integer[].class) instanceof Integer[]); }
@Test @InRequestScope public void testExecuteWithPageSize() throws Exception { int offset = 76; int countPerPage = 25; GetTransUnitList action = GetTransUnitList .newAction(new GetTransUnitActionContext(document) .withFindMessage("FiLe").withFilterUntranslated(true) .withFilterFuzzy(true).withFilterHasError(true) .withOffset(offset).withCount(countPerPage)); prepareActionAndMockLocaleService(action); GetTransUnitListResult result = handler.execute(action, null); assertThat(result.getTargetPageIndex()).isEqualTo(3); }
@Test public void testCompareToWhenItemAndObjectAreEqual() { final DecisionNavigatorItem item = new DecisionNavigatorItem("123"); final Object object = new DecisionNavigatorItem("123"); final int result = item.compareTo(object); assertEquals(0, result); }
@Test public void testWithTag() { Tag expected = new BasicTag("key", "value"); DefaultPlaceholderId id = new DefaultPlaceholderId("foo", REGISTRY).withTag(expected); Iterator<Tag> tags = id.resolveToId().tags().iterator(); Assertions.assertTrue(tags.hasNext(), "tags empty"); Assertions.assertEquals(expected, tags.next()); }
@Test public void get3DCoordinateCoverage_EmptyAtomContainer() { IAtomContainer container = new AtomContainer(); Assert.assertEquals(GeometryTools.CoordinateCoverage.NONE, GeometryTools.get3DCoordinateCoverage(container)); Assert.assertEquals(GeometryTools.CoordinateCoverage.NONE, GeometryTools.get3DCoordinateCoverage((IAtomContainer) null)); }
@Test public void testGenerateLoreIpsumHtml2Writer() throws IOException { LOG.debug("Generate new Lore Ipsum as full html paragraph with PrintWriter:"); LoremIpsum ipsum = new LoremIpsum(); StringWriter writer = new StringWriter(); ipsum.generateParagraphsFullHtml(writer, 2048, true); LOG.debug(writer.toString()); LOG.debug("End Test."); }
@Test public void shouldCommitTx() { Switch origSwitch = Switch.builder().switchId(TEST_SWITCH_ID).build(); txManager.doInTransaction(() -> repository.createOrUpdate(origSwitch)); Switch foundSwitch = repository.findById(TEST_SWITCH_ID).get(); assertEquals(origSwitch.getDescription(), foundSwitch.getDescription()); repository.delete(foundSwitch); assertEquals(0, repository.findAll().size()); }
@Deprecated @Test public void ontologyWhenDateAsEnumConversionThenOK() throws Exception { JsonNode data = JsonHandler.createObjectNode() .put("enum", "2000-01-01"); ObjectNode updatedData = ontologyValidator.verifyAndReplaceFields(data); assertThat(updatedData).isEqualTo(data); }
@Test( expected = HostNotFoundException.class ) public void testGetResourceHostById() throws Exception { assertEquals( resourceHost, localPeer.getResourceHostById( RESOURCE_HOST_ID ) ); localPeer.getResourceHostById( UUID.randomUUID().toString() ); }
@Test(expected = ExpressionException.class) public void testExp_EnumInvalid2() { ExpressionFactory.exp("a = enum:BOGUS"); }
@Test public void generate() throws Exception { MCRObjectID testID1 = MCRObjectID.getInstance("junit_test_00004711"); MCRObject mcrObject1 = new MCRObject(); mcrObject1.setId(testID1); MCRObjectID testID2 = MCRObjectID.getInstance("my_test_00000815"); MCRObject mcrObject2 = new MCRObject(); mcrObject2.setId(testID2); assertEquals(TEST_DOI_PREFIX + "/4711", doiGenerator.generate(mcrObject1, null).asString()); assertEquals(TEST_DOI_PREFIX + "/my.815", doiGenerator.generate(mcrObject2, null).asString()); }
@Test public void cancelNonExistingJob() { try { mJobMaster.cancel(1); Assert.fail("cannot cancel non-existing job"); } catch (JobDoesNotExistException e) { Assert.assertEquals(ExceptionMessage.JOB_DOES_NOT_EXIST.getMessage(1), e.getMessage()); } }
@Test public void testValidateComponent_withNullInput() { Assert.assertEquals("Missing component configuration", MicroPipelineValidationResult.MISSING_COMPONENT_CONFIGURATION, new MicroPipelineValidator().validateComponent(null, Collections.<String>emptySet(), Collections.<String>emptySet())); }
@Test public void deserializeISO4217ToMoney() throws IOException { final String moneyIso4217 = "\"EUR 19.99\""; final Money actual = ObjectMapperProvider.INSTANCE.mapper().readValue(moneyIso4217, Money.class); final Money expected = Money.of(CurrencyUnit.EUR, new BigDecimal("19.99")); assertEquals(expected, actual); }
@Test public void constructor_whenViewWidthIs0_shouldSetThresholdTo100() throws Exception { stub(view.getWidth()).toReturn(0); subject = new AdAlertGestureListener(view, adConfiguration); assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100); }
@Test public void testExpandComponent() { assertThat(InterfaceRangeMember.expandComponent("0"), equalTo(ImmutableList.of(0))); assertThat(InterfaceRangeMember.expandComponent("[0-0]"), equalTo(ImmutableList.of(0))); assertThat(InterfaceRangeMember.expandComponent("[0]"), equalTo(ImmutableList.of(0))); assertThat(InterfaceRangeMember.expandComponent("[0-2]"), equalTo(ImmutableList.of(0, 1, 2))); assertThat(InterfaceRangeMember.expandComponent("[0,2,4]"), equalTo(ImmutableList.of(0, 2, 4))); }
@Test(expected = StreamException.class) public void streamExceptionClosesChildChannel() throws Exception { LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream); assertTrue(inboundHandler.isChannelActive()); StreamException cause = new StreamException(inboundStream.id(), Http2Error.PROTOCOL_ERROR, "baaam!"); Http2FrameStreamException http2Ex = new Http2FrameStreamException( inboundStream, Http2Error.PROTOCOL_ERROR, cause); codec.onHttp2FrameStreamException(http2Ex); parentChannel.runPendingTasks(); assertFalse(inboundHandler.isChannelActive()); inboundHandler.checkException(); }
@Test public void test_createSTSRole_successfully() { String token = "5PDrOhsy4ig8L3EpsJZSLAMg"; AWSStsRole awsStsRole = new AWSStsRole(); awsStsRole.setAccount_id("account_id1"); awsStsRole.setSts_role("sts_role1"); String jsonStr = "{ \"account_id\": \"account_id1\", \"sts_role\": \"sts_role1\"}"; Response response = getMockResponse(HttpStatus.NO_CONTENT, true, ""); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body("{\"messages\":[\"STS Role created successfully \"]}"); when(reqProcessor.process("/auth/aws/config/sts/create",jsonStr, token)).thenReturn(response); when(JSONUtil.getJSON(awsStsRole)).thenReturn(jsonStr); ResponseEntity<String> responseEntity = awsAuthService.createSTSRole(awsStsRole, token); assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }
@Test public void emptyTargetValueDoesNothing() throws Exception { when(mockCheck.isEnabled()).thenReturn(true); Map<String, Optional<BigDecimal>> targetValues = new HashMap<String, Optional<BigDecimal>>(); targetValues.put("target", Optional.<BigDecimal>absent()); when(mockTargetChecker.check(mockCheck)).thenReturn(targetValues); checkRunner.run(); }
@Test public void schedule_runnable_at_fixed_rate_passes_through_to_delegate_with_tracing_wrapper() { Runnable origTaskMock = mock(Runnable.class); ScheduledFuture<?> expectedResultMock = mock(ScheduledFuture.class); doReturn(expectedResultMock).when(executorServiceMock) .scheduleAtFixedRate(any(Runnable.class), anyLong(), anyLong(), any(TimeUnit.class)); TracingState expectedTracingState = generateTracingStateOnCurrentThread(); ScheduledFuture<?> result = instance.scheduleAtFixedRate(origTaskMock, 10L, 10L, TimeUnit.SECONDS); assertThat(result).isSameAs(expectedResultMock); verify(executorServiceMock).scheduleAtFixedRate(runnableCaptor.capture(), eq(10L), eq(10L), eq(TimeUnit.SECONDS)); Runnable actualTask = runnableCaptor.getValue(); verifyRunnableWithTracingWrapper(actualTask, origTaskMock, expectedTracingState); verifyNoMoreInteractions(executorServiceMock); }
@Test public void testRange() { expectExactMessage(HCE, PREFIX + "Ten must be within the 1..5 range.", () -> check.range(10, 1, 5, "Ten") ); check.range(0, 0, 0, "0-0-0"); check.range(1, 0, 1, "1-0-1"); check.range(1, 1, 1, "1-1-1"); check.range(5, 1, 8, "5-1-8"); }
@Test void testGetUri() { assertThat(this.deviceEntity.getID(), equalTo("abc123")); }
@Test public void testMatchesStatusNullStatus() { BgpSessionStatusQuestion q = new BgpSessionStatusQuestion(null, null, null, null); for (BgpSessionStatus status : BgpSessionStatus.values()) { assertTrue(status.toString(), q.matchesStatus(status)); } }
@Test(expected = NullPointerException.class) public void testConnectFailed() { JaxWsProxySelector ps = new JaxWsProxySelector(ProxySelector.getDefault()); ps.connectFailed(null, null, null); }
@Test public void should_Run_Updaters_when_NoNodeConfFiles() throws Exception { webpackFile.delete(); mainPackageFile.delete(); process(); assertNotNull(DevModeHandler.getDevModeHandler()); }
@Test public void testDiffEntryPoint() { column1.setEntryPointName("entryPoint1"); column2.setEntryPointName("entryPoint2"); checkSingleDiff(FIELD_ENTRY_POINT_NAME, "entryPoint1", "entryPoint2", column1, column2); assertNotEquals(column1, column2); }
@Test public void saveDescriptorWhenDescriptorDidNotExist() throws Exception { WikiDescriptor descriptor = new WikiDescriptor("wikiId", "wikiAlias"); boolean result = mocker.getComponentUnderTest().saveDescriptor(descriptor); assertFalse(result); verify(authorizationManager).hasAccess(eq(Right.ADMIN), eq(currentUserRef), eq(new WikiReference("mainWiki"))); verify(wikiDescriptorManager, never()).saveDescriptor(descriptor); }
@Test public void parseXmlWithInvalidInterfaceTypeShouldFailed() { try { validator.validate("/plugin/register-with-invalid-interface-type.xml"); assertTrue(false); } catch (WecubeCoreException e) { assertThat(e.getMessage()).contains("XML validation failed"); } }
@Test public void testGetGraphComputeAction() { GraphComputeResponse.GraphComputeAction action = unitGraphComputePlugin.getGraphComputeAction(); Assertions.assertThat(action).isEqualTo(GraphComputeResponse.GraphComputeAction.UNIT); }
@Test void path() { RelationshipDelete RelationshipDelete = new RelationshipDelete(metaResource, metaResourceField, relatedMetaResource); Assert.assertEquals("/ResourcePath/{id}/relationships/someRelatedResource", RelationshipDelete.path()); }
@Test void testToDatabaseColumn() { assertThat(converter.convertToDatabaseColumn(EntityId.of(10L, 10L, 10L, ACCOUNT))).isEqualTo(2814792716779530L); }
@Test void shouldTruncateOffsetSeconds() { OffsetTime time = OffsetTime.of( 14, 55, 50, 0, ZoneOffset.ofHoursMinutesSeconds( 2, 15, 45 ) ); OffsetTime truncatedTime = TemporalUtil.truncateOffsetToMinutes( time ); assertEquals( OffsetTime.of( 14, 55, 5, 0, ZoneOffset.ofHoursMinutes( 2, 15 ) ), truncatedTime ); }
@Test public void testChangePassword() throws IOException, GeneralSecurityException, PasswordException { File encryptedFile = new File(testDir, "encrypted"); OutputStream outputStream = new EncryptedOutputStream(new FileOutputStream(encryptedFile), FileEncryptionTestUtil.deriveKey(password)); outputStream.write(plainText); outputStream.close(); byte[] newPassword = "new password".getBytes(); FileEncryptionUtil.changePassword(encryptedFile, password, FileEncryptionTestUtil.deriveKey(newPassword)); InputStream inputStream = new EncryptedInputStream(new FileInputStream(encryptedFile), newPassword); byte[] decryptedText = Util.readBytes(inputStream); assertArrayEquals(plainText, decryptedText); encryptedFile.delete(); }
@Test(timeout = 5000) public void testConcurrentRegister() throws InterruptedException, ExecutionException { ExecutorService threadpool = Executors.newCachedThreadPool(); ExecutorCompletionService<RegisterApplicationMasterResponse> compSvc = new ExecutorCompletionService<>(threadpool); Object syncObj = MockResourceManagerFacade.getRegisterSyncObj(); synchronized (syncObj) { LOG.info("Starting first register thread"); compSvc.submit(new ConcurrentRegisterAMCallable()); try { LOG.info("Test main starts waiting for the first thread to block"); syncObj.wait(); LOG.info("Test main wait finished"); } catch (Exception e) { LOG.info("Test main wait interrupted", e); } } LOG.info("Starting second register thread"); compSvc.submit(new ConcurrentRegisterAMCallable()); LOG.info("Let first blocked register thread move on"); synchronized (syncObj) { syncObj.notifyAll(); } RegisterApplicationMasterResponse response = compSvc.take().get(); Assert.assertNotNull(response); response = compSvc.take().get(); Assert.assertNotNull(response); threadpool.shutdown(); }
@Test public void testSegment() { System.out.println("Segment"); MathEx.setSeed(19650218); WinsorScaler scaler = WinsorScaler.fit(Segment.x, 0.01, 0.99); double[][] x = scaler.transform(Segment.x); double[][] testx = scaler.transform(Segment.testx); int p = x[0].length; int k = MathEx.max(Segment.y) + 1; System.out.format("----- Online Learning -----%n"); MLP model = new MLP(p, Layer.sigmoid(50), Layer.mle(k, OutputFunction.SOFTMAX) ); model.setLearningRate(0.2); model.setMomentum(0.2); int error = 0; for (int epoch = 1; epoch <= 30; epoch++) { System.out.format("----- epoch %d -----%n", epoch); int[] permutation = MathEx.permutate(x.length); for (int i : permutation) { model.update(x[i], Segment.y[i]); } int[] prediction = Validation.test(model, testx); error = Error.of(Segment.testy, prediction); System.out.println("Test Error = " + error); } assertEquals(36, error); System.out.format("----- Mini-Batch Learning -----%n"); model = new MLP(p, Layer.sigmoid(50), Layer.mle(k, OutputFunction.SOFTMAX) ); model.setLearningRate(0.3); model.setMomentum(0.0); int batch = 20; double[][] batchx = new double[batch][]; int[] batchy = new int[batch]; for (int epoch = 1; epoch <= 11; epoch++) { System.out.format("----- epoch %d -----%n", epoch); int[] permutation = MathEx.permutate(x.length); int i = 0; for (; i < x.length-batch;) { for (int j = 0; j < batch; j++, i++) { batchx[j] = x[permutation[i]]; batchy[j] = Segment.y[permutation[i]]; } model.update(batchx, batchy); } for (; i < x.length; i++) { model.update(x[permutation[i]], Segment.y[permutation[i]]); } int[] prediction = Validation.test(model, testx); error = Error.of(Segment.testy, prediction); System.out.println("Test Error = " + error); } assertEquals(33, error); }
@Test public void format() { Object value = mock(Object.class); when(value.toString()).thenReturn("123"); assertEquals("123", formatter.format(value)); }
@Test public void assertGetChildrenKeys() { assertNull(REPOSITORY.getChildrenKeys("/sharding/test")); }
@Test public void testGetHttpClientNoProxy() throws SmartlingApiException { CloseableHttpClient closeableHttpClient = mock(CloseableHttpClient.class); PowerMockito.when(httpClientBuilder.build()).thenReturn(closeableHttpClient); assertNotNull(httpClientFactory.getHttpClient(null, null)); verify(httpClientBuilder, never()).setProxy(any(HttpHost.class)); verify(httpClientBuilder, never()).setDefaultCredentialsProvider(any(CredentialsProvider.class)); verify(httpClientBuilder).build(); verify(httpClientBuilder).setSSLContext(context); }
@Test void updatePaymentCancellationTppRedirectUri_failure_wrongPaymentId() { when(securityDataService.decryptId(WRONG_ENCRYPTED_PAYMENT_ID)).thenReturn(Optional.of(WRONG_DECRYPTED_PAYMENT_ID)); when(updatePaymentStatusAfterSpiService.updatePaymentCancellationTppRedirectUri(eq(WRONG_DECRYPTED_PAYMENT_ID), eq(tppRedirectUri))) .thenReturn(CmsResponse.<Boolean>builder() .payload(false) .build()); CmsResponse<Boolean> actual = updatePaymentStatusAfterSpiServiceInternalEncrypted.updatePaymentCancellationTppRedirectUri(WRONG_ENCRYPTED_PAYMENT_ID, tppRedirectUri); assertTrue(actual.isSuccessful()); assertFalse(actual.getPayload()); verify(securityDataService, times(1)).decryptId(WRONG_ENCRYPTED_PAYMENT_ID); verify(updatePaymentStatusAfterSpiService, times(1)).updatePaymentCancellationTppRedirectUri(eq(WRONG_DECRYPTED_PAYMENT_ID), eq(tppRedirectUri)); }
@Test public void unknownHostDiscover() throws Exception { AtomicReference<Throwable> throwableRef = new AtomicReference<>(); Publisher<ServiceDiscovererEvent<InetAddress>> publisher = client.dnsQuery("unknown.com"); final CountDownLatch latch = new CountDownLatch(1); ServiceDiscovererTestSubscriber<InetAddress> subscriber = new ServiceDiscovererTestSubscriber<>(latch, throwableRef, Long.MAX_VALUE); toSource(publisher).subscribe(subscriber); latch.await(); assertThat("Unexpected exception during DNS lookup.", throwableRef.get(), instanceOf(UnknownHostException.class)); assertThat(subscriber.activeCount(), equalTo(0)); assertThat(subscriber.inactiveCount(), equalTo(0)); }
@Test public void build_success() { ConstraintViolation violation = mock(ConstraintViolation.class); ErrorDescriptor errorDescriptor = checkParametersExpressionContainerValidator.build(violation); assertEquals(new ErrorDescriptor().setErrorCode(QUERY_WHERE_PARAMETERS_EXPRESSION_NOT_VALID), errorDescriptor); }
@Test public void Should_createImmutableReceiverChains() throws Exception { IObject description = mock(IObject.class); List<IObject> steps = new LinkedList<>(); List<IObject> exceptionals = new LinkedList<>(); Object chainId = "chain"; IReceiverChain exceptionalChain1 = mock(IReceiverChain.class); IReceiverChain exceptionalChain2 = mock(IReceiverChain.class); IMessageReceiver receiver1 = mock(IMessageReceiver.class); IMessageReceiver receiver2 = mock(IMessageReceiver.class); IObject step1 = mock(IObject.class); IObject step2 = mock(IObject.class); when(description.getValue(same(IOC.resolve(fieldNameKey, "steps")))).thenReturn(steps); when(description.getValue(same(IOC.resolve(fieldNameKey, "exceptional")))).thenReturn(exceptionals); steps.add(step1); steps.add(step2); IObject exceptional1 = mock(IObject.class); when(exceptional1.getValue(same(IOC.resolve(fieldNameKey, "class")))).thenReturn(Exception.class.getCanonicalName()); when(exceptional1.getValue(same(IOC.resolve(fieldNameKey, "chain")))).thenReturn("ex_ch1"); IObject exceptional2 = mock(IObject.class); when(exceptional2.getValue(same(IOC.resolve(fieldNameKey, "class")))).thenReturn(Error.class.getCanonicalName()); when(exceptional2.getValue(same(IOC.resolve(fieldNameKey, "chain")))).thenReturn("ex_ch2"); when(chainStorageMock.resolve("ex_ch_1id")).thenReturn(exceptionalChain1); when(chainStorageMock.resolve("ex_ch_2id")).thenReturn(exceptionalChain2); exceptionals.add(exceptional1); exceptionals.add(exceptional2); when(IOC.resolve(same(chainIdKey), eq("ex_ch1"))).thenReturn("ex_ch_1id"); when(IOC.resolve(same(chainIdKey), eq("ex_ch2"))).thenReturn("ex_ch_2id"); when(IOC.resolve(same(receiverIdKey), same(step1))).thenReturn("rec1"); when(IOC.resolve(same(receiverIdKey), same(step2))).thenReturn("rec2"); when(routerMock.route("rec1")).thenReturn(receiver1); when(routerMock.route("rec2")).thenReturn(receiver2); IReceiverChain chain = new ImmutableReceiverChainResolutionStrategy().resolve(chainId, description, chainStorageMock, routerMock); assertNotNull(chain); }
@Test public void testList() { List<Integer> list = list(); assertEquals(0, list.size()); }
@Test public void testTrim() { String expected = "ABS ADF"; String value = " ABS ADF "; String actual = TextUtils.trim(value); assertEquals(expected, actual); }
@Test public void testUnsupportedCharset() { try { function.execute(Arrays.asList("foo", "UNKNOWN"), context); Assert.fail("Missing exception due to unsupported charset encoding"); } catch (CitrusRuntimeException e) { Assert.assertTrue(e.getCause().getClass().equals(UnsupportedEncodingException.class)); } }
@Test public void resurrectExpiredAndIncrement() { ManualClock clock = new ManualClock(); ServoRegistry registry = Servo.newRegistry(clock); Counter c = registry.counter("test"); clock.setWallTime(60000 * 30); registry.getMonitors(); Assertions.assertTrue(c.hasExpired()); c.increment(); Assertions.assertEquals(1, c.count()); Assertions.assertEquals(1, registry.counter("test").count()); clock.setWallTime(60000 * 60); registry.getMonitors(); Assertions.assertTrue(c.hasExpired()); c.increment(); Assertions.assertEquals(1, c.count()); Assertions.assertEquals(1, registry.counter("test").count()); }
@Test public void encodeHttpResponseComplete() throws Exception { ProtocolCodecSessionEx session = new ProtocolCodecSessionEx(); IoBufferAllocatorEx<?> allocator = session.getBufferAllocator(); ProtocolEncoder encoder = new HttpResponseEncoder(allocator); ProtocolEncoderOutput encoderOut = session.getEncoderOutput(); HttpResponseMessage httpResponse = new HttpResponseMessage(); httpResponse.setVersion(HttpVersion.HTTP_1_1); httpResponse.setStatus(HttpStatus.SUCCESS_OK); IoBufferEx data = allocator.wrap(ByteBuffer.wrap("Hello, world".getBytes())); httpResponse.setContent(new HttpContentMessage(data, true)); encoder.encode(session, httpResponse, encoderOut); encoderOut.mergeAll(); IoBufferEx buf = (IoBufferEx) session.getEncoderOutputQueue().poll(); assertEquals("HTTP/1.1 200 OK\r\n" + "Content-Length: 12\r\n" + "\r\n" + "Hello, world", buf.getString(Charset.forName("UTF-8").newDecoder())); }
@Test public void getApiaryWithDataSourcesUnavailable_firesOnDataUnavailable() { goBeesRepository.getApiary(APIARY_ID, getApiaryCallback); setApiaryNotAvailable(goBeesLocalDataSource, APIARY_ID); verify(getApiaryCallback).onDataNotAvailable(); }
@Test void toTuple16OfNullables() { final Function<Integer, Tuple16OfNullables<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer>> mapper = TuplesOfNullables.toTupleOfNullables(i -> i + 0, i -> i + 1, i -> i + 2, i -> i + 3, i -> i + 4, i -> i + 5, i -> i + 6, i -> i + 7, i -> i + 8, i -> i + 9, i -> i + 10, i -> i + 11, i -> i + 12, i -> i + 13, i -> i + 14, i -> i + 15); assertTuple(mapper.apply(0), 16); }
@Test void getArtifactVersion( ) throws IOException, URISyntaxException { MavenContentHelper mavenContentHelper = new MavenContentHelper( ); MavenMetadataReader reader = new MavenMetadataReader( ); mavenContentHelper.setMetadataReader( reader ); Path testRepoPath = Paths.get( Thread.currentThread( ).getContextClassLoader( ).getResource( "repositories/metadata-repository" ).toURI() ); FilesystemStorage storage = new FilesystemStorage( testRepoPath, new DefaultFileLockManager( ) ); assertArtifactVersion( mavenContentHelper, "1.0-alpha-11-SNAPSHOT", storage.getAsset( "org/apache/archiva/metadata/tests/snap_shots_1/1.0-alpha-11-SNAPSHOT" ) , "1.0-alpha-11-SNAPSHOT", "1.0-alpha-11-SNAPSHOT"); assertArtifactVersion( mavenContentHelper, "1.0-alpha-11-20070316.175232-11", storage.getAsset( "org/apache/archiva/metadata/tests/snap_shots_a/1.0-alpha-11-SNAPSHOT" ) , "", "1.0-alpha-11-SNAPSHOT"); assertArtifactVersion( mavenContentHelper, "2.2-20070316.153953-10", storage.getAsset( "org/apache/archiva/metadata/tests/snap_shots_b/2.2-SNAPSHOT" ) , "", "2.2-SNAPSHOT"); }
@Test public void testReset() { final Flags flags = new Flags(8); assertThat(flags.reset(), is(flags)); assertThat(flags.get(), is(0)); }
@Test public void parseStudent_ValidAttendanceJson_ParsesCorrectly() { ResponseParser responseParser = new ResponseParser(); Student student = responseParser.parseStudent("{\"name\":\"name\",\"status\":\"success\"}", "{\"griddata\":[{\"Latt\":\"10 / 10\",\"Patt\":\"Not Applicable\",\"subject\":\"Subject I\",\"subjectcode\":\"SUB001\"},{\"Latt\":\"Not Applicable\",\"Patt\":\"20 / 20\",\"subject\":\"Subject II\",\"subjectcode\":\"SUB002\"}]}"); HashMap<String, Subject> subjects = student.subjects; assertEquals(2, subjects.size()); assertEquals("Subject I", subjects.get("SUB001").name); assertEquals("SUB001", subjects.get("SUB001").code); assertEquals(10, subjects.get("SUB001").theoryPresent); assertEquals(10, subjects.get("SUB001").theoryTotal); assertEquals(0, subjects.get("SUB001").labPresent); assertEquals(0, subjects.get("SUB001").labTotal); assertEquals("Subject II", subjects.get("SUB002").name); assertEquals("SUB002", subjects.get("SUB002").code); assertEquals(0, subjects.get("SUB002").theoryPresent); assertEquals(0, subjects.get("SUB002").theoryTotal); assertEquals(20, subjects.get("SUB002").labPresent); assertEquals(20, subjects.get("SUB002").labTotal); }
@Test public void testUpdatePortPair() { testCreatePortPair(); final TenantId tenantId2 = TenantId.tenantId("2"); final String name2 = "PortPair2"; final String description2 = "PortPair2"; final String ingress2 = "d5555555-24fc-4fae-af4b-321c5e2eb3d1"; final String egress2 = "a6666666-4a56-2a6e-cd3a-9dee4e2ec345"; portPair = portPairBuilder.setId(portPairId).setTenantId(tenantId2).setName(name2) .setDescription(description2).setIngress(ingress2).setEgress(egress2).build(); assertThat(portPairMgr.updatePortPair(portPair), is(true)); }
@Test public void testPlanGenerator() throws InjectionException, IOException, URISyntaxException, ClassNotFoundException { final MISTQueryBuilder queryBuilder = new MISTQueryBuilder(); queryBuilder.setApplicationId(TestParameters.SUPER_GROUP_ID); queryBuilder.socketTextStream(TestParameters.LOCAL_TEXT_SOCKET_SOURCE_CONF) .flatMap(s -> Arrays.asList(s.split(" "))) .filter(s -> s.startsWith("A")) .map(s -> new Tuple2<>(s, 1)) .reduceByKey(0, String.class, (Integer x, Integer y) -> x + y) .textSocketOutput(TestParameters.HOST, TestParameters.SINK_PORT); final MISTQuery query = queryBuilder.build(); final Tuple<List<AvroVertex>, List<Edge>> serializedDag = query.getAvroOperatorDag(); final AvroDag.Builder avroDagBuilder = AvroDag.newBuilder(); final AvroDag avroChainedDag = avroDagBuilder .setAppId(TestParameters.SUPER_GROUP_ID) .setQueryId(TestParameters.QUERY_ID) .setJarPaths(new ArrayList<>()) .setAvroVertices(serializedDag.getKey()) .setEdges(serializedDag.getValue()) .build(); final JavaConfigurationBuilder jcb = Tang.Factory.getTang().newConfigurationBuilder(); jcb.bindNamedParameter(TaskHostname.class, "127.0.0.1"); final Injector injector = Tang.Factory.getTang().newInjector(jcb.build()); final ConfigDagGenerator configDagGenerator = injector.getInstance(ConfigDagGenerator.class); final DagGenerator dagGenerator = injector.getInstance(DagGenerator.class); final Tuple<String, AvroDag> tuple = new Tuple<>("query-test", avroChainedDag); final DAG<ConfigVertex, MISTEdge> configDag = configDagGenerator.generate(tuple.getValue()); final ExecutionDag executionDag = dagGenerator.generate(configDag, new LinkedList<>()); final DAG<ExecutionVertex, MISTEdge> dag = executionDag.getDag(); final Set<ExecutionVertex> sources = dag.getRootVertices(); Assert.assertEquals(1, sources.size()); Assert.assertTrue(sources.iterator().next() instanceof PhysicalSource); final PhysicalSource source = (PhysicalSource)sources.iterator().next(); final Map<ExecutionVertex, MISTEdge> nextOps = dag.getEdges(source); Assert.assertEquals(1, nextOps.size()); final PhysicalOperator flatMapOp = (PhysicalOperator)nextOps.entrySet().iterator().next().getKey(); final PhysicalOperator filterOp = (PhysicalOperator)dag.getEdges(flatMapOp).entrySet().iterator().next().getKey(); final PhysicalOperator mapOp = (PhysicalOperator)dag.getEdges(filterOp).entrySet().iterator().next().getKey(); final PhysicalOperator reduceByKeyOp = (PhysicalOperator)dag.getEdges(mapOp) .entrySet().iterator().next().getKey(); final PhysicalSink sink = (PhysicalSink)dag.getEdges(reduceByKeyOp) .entrySet().iterator().next().getKey(); Assert.assertTrue(flatMapOp.getOperator() instanceof FlatMapOperator); Assert.assertTrue(filterOp.getOperator() instanceof FilterOperator); Assert.assertTrue(mapOp.getOperator() instanceof MapOperator); Assert.assertTrue(reduceByKeyOp.getOperator() instanceof ReduceByKeyOperator); Assert.assertTrue(sink.getSink() instanceof NettyTextSink); }
@Test public void createIntrospectRequest() throws AuthorizationException { IntrospectRequest request = HttpRequestBuilder.newIntrospectRequest() .providerConfiguration(mConfiguration) .introspect(ACCESS_TOKEN, TokenTypeHint.ACCESS_TOKEN) .config(mConfig) .createRequest(); assertNotNull(request); assertTrue(request.toString().contains(RequestType.INTROSPECT.toString())); }
@Test public void inTest() { Expr e = factory.in(factory.none(), factory.list()); assertTrue(e instanceof E_OneOf); }
@Test public void givenWorkspaceNotExistWhenExecuteThenReturnResponseFATAL() { final ItemStatus response = plugin.execute(params, action); assertEquals(response.getGlobalStatus(), StatusCode.FATAL); }
@Frutilla( Given = "multiple 'given' sentences", When = "are added", Then = "all sentences exist" ) @Test public void testGivenMultiple() throws Exception { given(GIVEN).and(ONE).and(TWO); assertHas(ONE); assertHas(TWO); }
@Test public void testConfigSetLazyRegen() { boolean lazyRegen = true; JobConfig config = RegenProductEntitlementCertsJob.createJobConfig() .setLazyRegeneration(lazyRegen); JobArguments args = config.getJobArguments(); assertNotNull(args); assertEquals(1, args.size()); String argKey = args.keySet().iterator().next(); assertNotNull(argKey); assertFalse(argKey.isEmpty()); assertEquals(lazyRegen, args.getAsBoolean(argKey)); }
@Test public void shouldGetMap() { final Map<String, Object> map = ElementHelper.asMap("1", "this", "2", 6l, "3", "other", "4", 1); assertEquals(4, map.size()); assertEquals("this", map.get("1")); assertEquals(6l, map.get("2")); assertEquals("other", map.get("3")); assertEquals(1, map.get("4")); }
@Test public void digitsShouldFailWhenArgumentIsNotInValidRange() { HOTPBuilder builder = new HOTPBuilder(RFC4226TestVectors.KEY); try { builder.digits(5); fail("Should have failed since digits argument is in invalid range!"); } catch (IllegalArgumentException ignore) { } try { builder.digits(9); fail("Should have failed since digits argument is outside the valid range!"); } catch (IllegalArgumentException ignore) { } }
@Test public void test_parseAdjustableDate_defaulting() { ImmutableList<String> headers = ImmutableList.of("DTE", "CNV", "CAL"); ImmutableList<String> firstRow = ImmutableList.of("2019-03-01", "F", "GBLO"); CsvRow row = CsvFile.of(headers, ImmutableList.of(firstRow)).row(0); assertThat(CsvLoaderUtils.parseAdjustableDate(row, "DTE", "CNV", "CAL", FOLLOWING, Currency.EUR)).isEqualTo(AdjustableDate.of( LocalDate.of(2019, 3, 1), BusinessDayAdjustment.of(FOLLOWING, HolidayCalendarIds.GBLO))); }
@Test public void shouldReportEmpty() { assertThat(map.isEmpty(), is(true)); }
@Test public void testResolve() { final List<LookupResult> lookupResults = resolver.resolve(SERVICE); Assert.assertNotNull("lookupResults", lookupResults); Assert.assertEquals("num results", 1, lookupResults.size()); final LookupResult lookupResult = lookupResults.get(0); Assert.assertEquals("host", memcachedInstance.Node.Address, lookupResult.host()); Assert.assertEquals("port", memcachedInstance.Service.Port, lookupResult.port()); Assert.assertEquals("getResolvedCluster", lookupResults, resolver.getResolvedCluster()); }
@Test public void testRenderContext() { Request request = createMock(Request.class); container.renderContext(request); replay(container, request); wrapper.renderContext(request); verify(container, request); }
@Test public void testSetNavBarLeftItem() throws Exception { mockSetter(); module.setNavBarLeftItem("{}",callback); }
@Test public void testGenerateTweetsIDSCSVFromAllJSONFiltered() throws UnknownHostException { Boolean downloadLimited = true; String queryString = "{ \"constraints\": [ { \"queryType\": \"date_query\", \"comparator\": \"is_before\", \"timestamp\": 1427375693 }," + " { \"queryType\": \"date_query\", \"comparator\": \"is_after\", \"timestamp\": 1427352427 } ] }"; Response response = persister4TaggerAPI.generateTweetsIDSCSVFromAllJSONFiltered(queryString, existedCollectionCode, downloadLimited, userName); assertEquals(200, response.getStatus()); assertEquals(true, response.hasEntity()); assertEquals(false, response.bufferEntity()); queryString = "{ \"constraints\": [ { \"queryType\": \"date_query\", \"comparator\": \"is_before\", \"timestamp\": 1427375693 }, " + "{ \"queryType\": \"date_query\", \"comparator\": \"is_after\", \"timestamp\": 1427352427 }, " + "{ \"queryType\": \"classifier_query\", \"classifier_code\": \"informative_pray_personal\", \"label_code\": \"praying\", \"comparator\": \"is\", \"min_confidence\": 0.8 }, " + "{ \"queryType\": \"classifier_query\", \"classifier_code\": \"informative_pray_personal\", \"label_code\": \"030_info\", \"comparator\": \"is_not\" }, " + "{ \"queryType\": \"classifier_query\", \"classifier_code\": \"informative_pray_personal\", \"label_code\": null, \"comparator\": \"has_confidence\", \"min_confidence\": 0.5 } ] }"; response = persister4TaggerAPI.generateTweetsIDSCSVFromAllJSONFiltered(queryString, existedCollectionCode, downloadLimited, userName); assertEquals(200, response.getStatus()); assertEquals(true, response.hasEntity()); assertEquals(false, response.bufferEntity()); }
@Test void testInverseCumulativeProbabilityMethod() { final double precision = 0.000000000000001; Assertions.assertEquals(1, diceDistribution.inverseCumulativeProbability(0)); Assertions.assertEquals(1, diceDistribution.inverseCumulativeProbability((1d - Double.MIN_VALUE) / 6d)); Assertions.assertEquals(2, diceDistribution.inverseCumulativeProbability((1d + precision) / 6d)); Assertions.assertEquals(2, diceDistribution.inverseCumulativeProbability((2d - Double.MIN_VALUE) / 6d)); Assertions.assertEquals(3, diceDistribution.inverseCumulativeProbability((2d + precision) / 6d)); Assertions.assertEquals(3, diceDistribution.inverseCumulativeProbability((3d - Double.MIN_VALUE) / 6d)); Assertions.assertEquals(4, diceDistribution.inverseCumulativeProbability((3d + precision) / 6d)); Assertions.assertEquals(4, diceDistribution.inverseCumulativeProbability((4d - Double.MIN_VALUE) / 6d)); Assertions.assertEquals(5, diceDistribution.inverseCumulativeProbability((4d + precision) / 6d)); Assertions.assertEquals(5, diceDistribution.inverseCumulativeProbability((5d - precision) / 6d)); Assertions.assertEquals(6, diceDistribution.inverseCumulativeProbability((5d + precision) / 6d)); Assertions.assertEquals(6, diceDistribution.inverseCumulativeProbability((6d - precision) / 6d)); Assertions.assertEquals(6, diceDistribution.inverseCumulativeProbability(1d)); }
@Test public void testRender() throws Exception { final String json = "{\n" + " \"x\" : 0.0, \"y\" : 0.0, \"width\" : 400, \"height\" : 100, \"scale\" : 1.0,\n" + " \"tileSpecs\" : [ {\n" + " \"tileId\" : \"tile_a.1.0\",\n" + " \"z\" : 1.0, \"minX\" : 0.0, \"minY\" : 0.0, \"maxX\" : 199.0, \"maxY\" : 99.0, \"width\" : 200.0, \"height\" : 100.0,\n" + " \"mipmapLevels\" : { \"0\" : { \"imageUrl\" : \"src/test/resources/stitch-test/col0075_row0021_cam1.png\" } },\n" + " \"transforms\" : { \"type\" : \"list\", \"specList\" : [ \n" + " { \"className\" : \"mpicbg.trakem2.transform.AffineModel2D\", \"dataString\" : \"1 0 0 1 0 0\" } ]\n" + " }\n" + " }, {\n" + " \"tileId\" : \"tile_b.1.0\",\n" + " \"z\" : 1.0, \"minX\" : 190.0, \"minY\" : 0.0, \"maxX\" : 389.0, \"maxY\" : 99.0, \"width\" : 200.0, \"height\" : 100.0,\n" + " \"mipmapLevels\" : { \"0\" : { \"imageUrl\" : \"src/test/resources/stitch-test/col0076_row0021_cam0.png\" } },\n" + " \"transforms\" : { \"type\" : \"list\", \"specList\" : [ \n" + " { \"className\" : \"mpicbg.trakem2.transform.AffineModel2D\", \"dataString\" : \"1 0 0 1 190 0\" } ]\n" + " }\n" + " } ]\n" + "}"; final RenderParameters renderParameters = RenderParameters.parseJson(json); final BufferedImage bufferedImage = renderParameters.openTargetImage(); final Color boxColor = Color.GREEN; final BoundingBoxRenderer renderer = new BoundingBoxRenderer(renderParameters, boxColor); renderer.render(bufferedImage); final int[][] boxPoints = { {0, 0}, {99, 0}, {99, 99}, {0, 99}, {90, 0} }; for (final int[] point : boxPoints) { Assert.assertEquals("invalid color for box point " + Arrays.toString(point), boxColor.getRGB(), bufferedImage.getRGB(point[0], point[1])); } final int[][] spacePoints = { {10, 10}, {110, 10} }; for (final int[] point : spacePoints) { Assert.assertEquals("invalid color for space point " + Arrays.toString(point), 0, bufferedImage.getRGB(point[0], point[1])); } }
@Test public void testLsun() { Dataset<? extends Instance> lsun = FakeDatasets.lsun(); assertEquals(400, lsun.size()); assertEquals(2, lsun.attributeCount()); assertEquals("1", lsun.get(0).classValue()); assertEquals("1", lsun.get(1).classValue()); assertEquals("3", lsun.get(399).classValue()); }
@Test void isConsentExpired_dedicatedWithTransactions_fullyUsed_shouldReturnTrue() { aisConsentTransaction.setNumberOfTransactions(2); when(aisConsentTransactionRepository.findByConsentIdAndResourceId(CONSENT_ID, RESOURCE_ID, PageRequest.of(0, 1))) .thenReturn(Collections.singletonList(aisConsentTransaction)); when(aisConsentUsageRepository.countByConsentIdAndResourceId(CONSENT_ID, RESOURCE_ID)) .thenReturn(4); AisConsent aisConsent = buildAisConsent(null, null, accountReference, null, null); cmsConsent.setAspspAccountAccesses(aisConsent.getAspspAccountAccesses()); when(cmsAisConsentMapper.mapToAisConsent(cmsConsent)).thenReturn(aisConsent); boolean isExpired = oneOffConsentExpirationService.isConsentExpired(cmsConsent, CONSENT_ID); assertTrue(isExpired); }
@Test public void testNoTermination() { TagValue t = new TagValue("\r\n\tp=ciao; s=cips; v=DKIM1\r\n\t"); Assert.assertEquals("DKIM1", t.getValue("v")); }
@Test public void testDeleteCatalogEntry_WithoutOwnerGroup() { when(commonTestCatalogEntryMock.getOwnerGroup()).thenReturn(null); catalogService.deleteCatalogEntry(commonTestCatalogEntryMock); verify(catalogDaoMock).deleteCatalogEntry(commonTestCatalogEntryMock); SecurityGroup ownerGroup = commonTestCatalogEntryMock.getOwnerGroup(); verify(securityManagerMock, never()).deleteSecurityGroup(ownerGroup); }
@Test public void calculateTotalsForOtherFundingTest() { BigDecimal expected = new BigDecimal(100243); assertEquals(expected, otherFunding.getTotal()); }
@Test public void get() { assertEquals(counter.get(), INIT_VALUE); counter = new Counter(); assertEquals(counter.get(), 0); }
@Test public void testTimeMonitor() throws InterruptedException { final String label="sql"; double total=0; double min=Double.MAX_VALUE; double max=Double.MIN_VALUE; for (int i = 1; i <= 10; i++) { Monitor mon=MonitorFactory.start(label); Thread.sleep(10); mon.stop(); double loopValue = mon.getLastValue(); if (loopValue<min) { min=loopValue; } if (loopValue>max) { max=loopValue; } total+=loopValue; assertThat(mon.getLabel()).isEqualTo(label); assertThat(mon.getUnits()).isEqualTo("ms."); assertThat(mon.getHits()).isEqualTo(i); assertThat(mon.getTotal()).isEqualTo(total); assertThat(mon.getAvg()).isEqualTo(total/i); assertThat(mon.getMin()).isEqualTo(min); assertThat(mon.getMax()).isEqualTo(max); assertThat(mon.getLastValue()).isEqualTo(loopValue); assertThat(mon.getActive()).isEqualTo(0); assertThat(mon.getMaxActive()).isEqualTo(1); assertThat(mon.getStdDev()).isGreaterThanOrEqualTo(0); if (i>1) { assertThat(mon.getFirstAccess().before(new Date())).isTrue(); assertThat(mon.getLastAccess().after(mon.getFirstAccess())).isTrue(); } } }
@Test(expected = IllegalArgumentException.class) public void testSerializeThrowsExceptionOnUnknownType() { RecordSerializer.serialize("test", ColumnTypes.ANYTYPE); }
@Test public void testequalChars1() { CharacterComparator OffByN = new OffByN(5); assertFalse(OffByN.equalChars('a', 'b')); }
@Test void setJSONB() { Criteria criteria = new Criteria().addField("id").setJSONB(false).setOperation("=").setVal("123"); assertThat(criteria, isSql("id = '123'")); }
@Test public void dispose() { TestHelper.checkDisposed(MaybeSubject.create()); }
@Test public void validTypeTest() { assertEquals(work, work.validateType()); }
@Test public void testGetString() { assertEquals(null, subject.get("really strange missing key")); }
@Test public void testClose() { cache.putItem(ITEM_A_A); gcs.close(); verify(gcsDelegate).close(); assertThat(cache.getAllItemsRaw()).isEmpty(); }
@Test public void testRetrieveArchivedTask() { testRetrieveArchivedTask(true); }
@Test(expected = IllegalArgumentException.class) public void visitFileFailedNull2() { simple.visitFileFailed(null, new IOException()); }
@Test public void testGetFieldType() { final Class<ReassignmentsEditorFieldType> expectedResult = ReassignmentsEditorFieldType.class; final Class<ReassignmentsEditorFieldType> result = reassignmentsEditorFieldProviderUnderTest.getFieldType(); assertEquals(expectedResult, result); }
@Test public void shouldQueryLocalAndRemoteKVStateStoreGivenAllQuery() { Query<String, Long> all = new QueryBuilder(STORE_NAME).keyValue().all(); PreparedQuery<String, Long> query = all.prepare(); distributed = new DistributedQuery<>(client, query); when(streams.applicationServer()).thenReturn("local:1234"); when(streams.getLocalServerInfo()) .thenReturn(Optional.of(newServerInfo("local", true))); when(streams.getAllMetadataForStore(any())) .thenReturn(Arrays.asList( newServerInfo("local", true), newServerInfo("remote", false)) ); ReadOnlyKeyValueStore store = mock(ReadOnlyKeyValueStore.class); when(store.all()).thenReturn(new InMemoryKeyValueIterator<>("key", 42L)); when(streams.getLocalKeyValueStore(matches(STORE_NAME))).thenReturn(new LocalStoreAccessor<>(() -> store)); QueryResult<String, Long> result = distributed.query(streams, Queried.immediately()); assertNotNull(result); assertEquals(QueryStatus.SUCCESS, result.getStatus()); assertEquals(newServerInfo("local", true).hostAndPort(), result.getServer()); GlobalResultSet<String, Long> rs = result.getResult(); List<SuccessResultSet<String, Long>> success = rs.getSuccess(); assertEquals(2, success.size()); assertEquals(1, success.get(0).getTotal()); assertEquals(1, success.get(0).getTotal()); assertEquals(42L, success.get(0).getRecords().get(0).value()); assertEquals(42L, success.get(1).getRecords().get(0).value()); }
@Test void shouldThrowForDivideLongByNegative() { Throwable exception = assertThrows(ArithmeticException.class, () -> v(5).divide(-5)); assertEquals("divide unsigned by negative", exception.getMessage()); }
@Test public void testGetNonExsitingFolder() { when(nodeDAO.getNode("a")).thenReturn(null); assertNull(services.getNode("a")); reset(nodeDAO); }
@Test public void resolve() { assertNull(Version.resolve(null, null, null)); String version = "1.0"; assertEquals(version, Version.resolve(version, null, null)); version = "1.0-SNAPSHOT"; assertEquals(version, Version.resolve(version, null, null)); version = "3.0.5.RELEASE"; assertEquals(version, Version.resolve(version, null, null)); version = "[, 1.0 ]"; assertEquals("1.0", Version.resolve(version, null, null)); version = "(,1.0]"; assertEquals("1.0", Version.resolve(version, null, null)); version = "[0.1,1.0]"; assertEquals("1.0", Version.resolve(version, null, null)); version = "(0.1,1.0]"; assertEquals("1.0", Version.resolve(version, null, null)); version = "[,1.0-SNAPSHOT]"; assertEquals("1.0-SNAPSHOT", Version.resolve(version, null, null)); version = "(,1.0-SNAPSHOT]"; assertEquals("1.0-SNAPSHOT", Version.resolve(version, null, null)); version = "[0.1,1.0-SNAPSHOT]"; assertEquals("1.0-SNAPSHOT", Version.resolve(version, null, null)); version = "(0.1,1.0-SNAPSHOT]"; assertEquals("1.0-SNAPSHOT", Version.resolve(version, null, null)); version = "[1.10.1]"; assertEquals("1.10.1", Version.resolve(version, null, null)); version = "(1.10.1)"; assertNull("1.10.1", Version.resolve(version, null, null)); version = "[,1.4.3)"; assertEquals("1.4.3-rc1", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(,1.4.3)"; assertEquals("1.4.3-rc1", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.3-rc1,1.4.3)"; assertEquals("1.4.3-rc1", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "( 1.4.3-rc1 ,1.4.3)"; assertNull(Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[,1.4.4-rc1)"; assertEquals("1.4.3", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(,1.4.4-rc1)"; assertEquals("1.4.3", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.4-rc1,1.4.4)"; assertEquals("1.4.4-rc1", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(1.4.4,1.4.4)"; assertNull(Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.2,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(1.4.2,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.3-rc1,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(1.4.3-rc1,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.3,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(1.4.3,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.4-rc1,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(1.4.4-rc1,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.4.4,)"; assertEquals("1.4.4", Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "(1.4.4,)"; assertNull(Version.resolve(version, "classpath:mock-mvn-repo/javax/mail/mail", null)); version = "[1.0,2.0),[3.0,)"; try { Version.resolve(version, null, null); fail("Expecting a Version.UnsupportedRangeSet exception"); } catch (Version.UnsupportedRangeSet vurs) { } version = "(1.0,2.0],(3.0,]"; try { Version.resolve(version, null, null); fail("Expecting a Version.UnsupportedRangeSet exception"); } catch (Version.UnsupportedRangeSet vurs) { } version = "(,1.0],[1.2,)"; try { Version.resolve(version, null, null); fail("Expecting a Version.UnsupportedRangeSet exception"); } catch (Version.UnsupportedRangeSet vurs) { } version = "(,1.1),(1.1,)"; try { Version.resolve(version, null, null); fail("Expecting a Version.UnsupportedRangeSet exception"); } catch (Version.UnsupportedRangeSet vurs) { } version = "(,)"; try { Version.resolve(version, null, null); fail("Expecting a Version.Invalid exception"); } catch (Version.Invalid vurs) { } version = "(,]"; try { Version.resolve(version, null, null); fail("Expecting a Version.Invalid exception"); } catch (Version.Invalid vurs) { } version = "[,)"; try { Version.resolve(version, null, null); fail("Expecting a Version.Invalid exception"); } catch (Version.Invalid vurs) { } version = "[,]"; try { Version.resolve(version, null, null); fail("Expecting a Version.Invalid exception"); } catch (Version.Invalid vurs) { } }
@SuppressWarnings("deprecation") @Test public void testCreateInstance() { Assert.assertTrue(ReaderFactory.createInstance(FormatType.JSON) instanceof JsonReader); Assert.assertTrue(ReaderFactory.createInstance(FormatType.XML) instanceof XmlReader); thrown.expect(IllegalStateException.class); thrown.expectMessage("Server response has a bad format type: " + FormatType.RAW); ReaderFactory.createInstance(FormatType.RAW); }
@Test public void testHasClassOk() { when(fluentList.attributes("class")).thenReturn(Lists.newArrayList("some-class", "unknown-class")); listAssert.hasClass("some-class"); }
@Test public void testListObjectsAllObjectsMultiplePages() { MockS3ChangeLogStore store = new MockS3ChangeLogStore(null); ArrayList<S3ObjectSummary> objectList1 = new ArrayList<>(); S3ObjectSummary objectSummary = new S3ObjectSummary(); objectSummary.setKey("iaas"); objectList1.add(objectSummary); objectSummary = new S3ObjectSummary(); objectSummary.setKey("iaas.athenz"); objectList1.add(objectSummary); ArrayList<S3ObjectSummary> objectList2 = new ArrayList<>(); objectSummary = new S3ObjectSummary(); objectSummary.setKey("cd"); objectList2.add(objectSummary); objectSummary = new S3ObjectSummary(); objectSummary.setKey("cd.docker"); objectList2.add(objectSummary); ArrayList<S3ObjectSummary> objectList3 = new ArrayList<>(); objectSummary = new S3ObjectSummary(); objectSummary.setKey("platforms"); objectList3.add(objectSummary); objectSummary = new S3ObjectSummary(); objectSummary.setKey("platforms.mh2"); objectList3.add(objectSummary); ObjectListing objectListing = mock(ObjectListing.class); when(objectListing.getObjectSummaries()) .thenReturn(objectList1) .thenReturn(objectList2) .thenReturn(objectList3); when(objectListing.isTruncated()) .thenReturn(true) .thenReturn(true) .thenReturn(false); when(store.awsS3Client.listObjects(any(ListObjectsRequest.class))).thenReturn(objectListing); when(store.awsS3Client.listNextBatchOfObjects(any(ObjectListing.class))).thenReturn(objectListing); ArrayList<String> domains = new ArrayList<>(); store.listObjects(store.awsS3Client, domains, 0); assertEquals(domains.size(), 6); assertTrue(domains.contains("iaas")); assertTrue(domains.contains("iaas.athenz")); assertTrue(domains.contains("cd")); assertTrue(domains.contains("cd.docker")); assertTrue(domains.contains("platforms")); assertTrue(domains.contains("platforms.mh2")); }
@Test public void testSetGenerator() throws Exception { GenerateUniqueMetadataValueService service = new GenerateUniqueMetadataValueService(); assertNotNull(service.getGenerator()); assertEquals(GuidGenerator.class, service.getGenerator().getClass()); PlainIdGenerator gen = new PlainIdGenerator(); service.setGenerator(gen); assertEquals(gen, service.getGenerator()); try { service.setGenerator(null); fail(); } catch (IllegalArgumentException expected) { } assertEquals(gen, service.getGenerator()); }
@Test public void testRedefineLocal() throws Exception { Initialization initialization = new Initialization(); initialization.entryPoint = EntryPoint.Default.REDEFINE_LOCAL.name(); assertThat(initialization.getEntryPoint(classLoaderResolver, BAR, QUX, BAZ, JAR), is((EntryPoint) EntryPoint.Default.REDEFINE_LOCAL)); verifyZeroInteractions(classLoaderResolver); }
@Test public void testCreateDispatcherChain_GetValueFromChangedModelObject() { PropertyDispatcher defaultDispatcher = propertyDispatcherFactory .createDispatcherChain(pmo, BoundProperty.of("foo").withModelAttribute(TestModelObject.PROPERTY_MODEL_PROP), PropertyBehaviorProvider.NO_BEHAVIOR_PROVIDER); TestModelObject newModelObject = new TestModelObject(); pmo.setModelObject(newModelObject); newModelObject.setModelProp("testNewValue"); Object modelProp = defaultDispatcher.pull(Aspect.of("")); assertThat(modelProp, is("testNewValue")); }
@Test public void testProcessApidInfo2() throws Exception { String apidList = "1200;2400"; String gapList = "10"; String expected = "Apid#: 1200; Apid#: 2400; "; String apidInfo = MetadataBuilder.processApidInfo(apidList, gapList); Assert.assertEquals(expected, apidInfo); }
@Test public void invokeLowercaseString() { FunctionTestUtil.assertResult(stringLowerCaseFunction.invoke("teststring"), "teststring"); }
@Test public void configTest() { Map<String, String> options = new HashMap<>(); options.put("otel.disruptor.blocking", "false"); options.put("otel.disruptor.buffer.size", "1234"); options.put("otel.disruptor.num.retries", "56"); options.put("otel.disruptor.sleeping.time", "78"); IncrementSpanProcessor incrementSpanProcessor = new IncrementSpanProcessor(REQUIRED, REQUIRED); DisruptorAsyncSpanProcessor.Builder config = DisruptorAsyncSpanProcessor.newBuilder(incrementSpanProcessor); DisruptorAsyncSpanProcessor.Builder spy = Mockito.spy(config); spy.fromConfigMap(options, ConfigBuilderTest.getNaming()); Mockito.verify(spy).setBlocking(false); Mockito.verify(spy).setBufferSize(1234); }
@Test public void chargingStationLocationImprovedEventAddressEmptyCoordinates() { chargingStationRepository.createOrUpdate(getRegisteredAndConfiguredChargingStation()); eventHandler.handle(new ChargingStationLocationImprovedEvent(CHARGING_STATION_ID, null, ADDRESS, ACCESSIBILITY, IDENTITY_CONTEXT)); ChargingStation cs = getTestChargingStationFromRepository(); assertEquals(ADDRESS.getAddressLine1(), cs.getAddress()); assertEquals(ADDRESS.getPostalCode(), cs.getPostalCode()); assertEquals(ADDRESS.getRegion(), cs.getRegion()); assertEquals(ADDRESS.getCity(), cs.getCity()); assertEquals(ADDRESS.getCountry(), cs.getCountry()); assertEquals(ACCESSIBILITY.name(), cs.getAccessibility()); }
@Test public void testFixedHumanString() { Types.FixedType fixed3 = Types.FixedType.ofLength(3); Transform<byte[], byte[]> identity = Transforms.identity(fixed3); Assert.assertEquals("Should base64-encode binary", "AQID", identity.toHumanString(new byte[] {1, 2, 3})); }
@Test public void testProcessItemsExactMultipleOfBlockSize() throws Exception { TestBlockProcessor bp100 = new TestBlockProcessor( 100 ); bp100.process( 100 * 5 ); assertTrue( blocksDone == 5 ); assertTrue( itemsDone == 100 * 5 ); }
@Test public void testPreservingAromaticity() throws Exception { IAtomContainer molecule = builder.newInstance(IAtomContainer.class); molecule.addAtom(builder.newInstance(IAtom.class, "F")); molecule.addAtom(builder.newInstance(IAtom.class, "C")); molecule.addBond(0, 1, IBond.Order.SINGLE); molecule.addAtom(builder.newInstance(IAtom.class, "C")); molecule.addBond(1, 2, IBond.Order.DOUBLE); molecule.addAtom(builder.newInstance(IAtom.class, "C")); molecule.addBond(2, 3, IBond.Order.SINGLE); molecule.addAtom(builder.newInstance(IAtom.class, "C")); molecule.addBond(3, 4, IBond.Order.DOUBLE); molecule.addAtom(builder.newInstance(IAtom.class, "C")); molecule.addBond(4, 5, IBond.Order.SINGLE); molecule.addAtom(builder.newInstance(IAtom.class, "C")); molecule.addBond(5, 6, IBond.Order.DOUBLE); molecule.addBond(6, 1, IBond.Order.SINGLE); addExplicitHydrogens(molecule); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule); lpcheck.saturate(molecule); boolean isAromatic = Aromaticity.cdkLegacy().apply(molecule); Assert.assertTrue("Molecule is expected to be marked aromatic!", isAromatic); Assert.assertTrue("Bond is expected to be marked aromatic!", molecule.getBond(1).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", molecule.getBond(2).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", molecule.getBond(3).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", molecule.getBond(4).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", molecule.getBond(5).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", molecule.getBond(6).getFlag(CDKConstants.ISAROMATIC)); StructureResonanceGenerator gRI = new StructureResonanceGenerator(false); IAtomContainerSet setOfMolecules = gRI.getStructures(molecule); Assert.assertEquals(5, setOfMolecules.getAtomContainerCount()); IAtomContainer prod1 = setOfMolecules.getAtomContainer(1); Assert.assertTrue("Bond is expected to be marked aromatic!", prod1.getBond(1).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod1.getBond(2).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod1.getBond(3).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod1.getBond(4).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod1.getBond(5).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod1.getBond(6).getFlag(CDKConstants.ISAROMATIC)); IAtomContainer prod2 = setOfMolecules.getAtomContainer(2); Assert.assertTrue("Bond is expected to be marked aromatic!", prod2.getBond(1).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod2.getBond(2).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod2.getBond(3).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod2.getBond(4).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod2.getBond(5).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod2.getBond(6).getFlag(CDKConstants.ISAROMATIC)); IAtomContainer prod3 = setOfMolecules.getAtomContainer(3); Assert.assertTrue("Bond is expected to be marked aromatic!", prod3.getBond(1).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod3.getBond(2).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod3.getBond(3).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod3.getBond(4).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod3.getBond(5).getFlag(CDKConstants.ISAROMATIC)); Assert.assertTrue("Bond is expected to be marked aromatic!", prod3.getBond(6).getFlag(CDKConstants.ISAROMATIC)); }
@Test(expected = UnsupportedOperationException.class) public void testExport() { protocol.export(protocol.refer(IDemoService.class, registryUrl)); }
@Test @SuppressWarnings("unchecked") public void testCollectSuperclasses() { Collection<BindingStrategy> bindingStrategies = underTest .collectFromAggregates(Lists.newArrayList(MySubAgg1.class, MySubAgg2.class)); assertThat(((Map<?, ?>) Deencapsulation.getField(bindingStrategies.iterator() .next(), "constructorParamsMap")).size()).isEqualTo(3); }
@Test public void rollupSerializability() { Function<String, String> limiter = CardinalityLimiters.rollup(2); limiter.apply("a"); limiter.apply("b"); limiter.apply("c"); checkSerde(limiter); }
@Test public void parseText() throws SAXException, IOException { URL url = getClass().getResource("/jabberwocky.txt"); Document instruct = docBuilder.parse(getClass().getResourceAsStream( "/img/model-argb-transparent.xml")); StringWriter strWriter = new StringWriter(); PrintWriter logger = new PrintWriter(strWriter); Document result = ImageParser.parse(url.openConnection(), instruct.getDocumentElement(), logger); assertNull(result); assertTrue("Unexpected error message", strWriter.toString().startsWith("No image handlers available")); }
@Test public void testGetSwitchLacpGroup() { SwitchLacpGroup switchLacpGroup_Obj = null; try { if ( listOfLacpGroupNames == null ) { listOfLacpGroupNames = cumulusTorSwitchService_Obj.getSwitchLacpGroups( switchNode_Obj ); assertNotNull( "listOfLacpGroupNames is null. No Lacp Groups.", listOfLacpGroupNames ); } else { if ( listOfLacpGroupNames != null && !listOfLacpGroupNames.isEmpty() ) { logger.info( "Size of list of SwitchLacpGroups: " + listOfLacpGroupNames.size() ); for ( int i = 0; i < listOfLacpGroupNames.size(); i++ ) { switchLacpGroup_Obj = cumulusTorSwitchService_Obj.getSwitchLacpGroup( switchNode_Obj, listOfLacpGroupNames.get( i ) ); assertNotNull( "Switch Lacp Group is null", switchLacpGroup_Obj ); if ( switchLacpGroup_Obj != null ) { logger.info( "Object not null." ); logger.info( "Mode: " + switchLacpGroup_Obj.getMode() ); logger.info( "Name: " + switchLacpGroup_Obj.getName() ); logger.info( "Class: " + switchLacpGroup_Obj.getClass().toString() ); List<String> ports = switchLacpGroup_Obj.getPorts(); logger.info( "Ports below (size:" + ports.size() + ") of ports List" ); for ( int j = 0; j < ports.size(); j++ ) { logger.info( ports.get( j ) ); } } } } else { logger.info( "List of switch lacp groups is either null or empty" ); } } } catch ( Exception e ) { logger.info( "Error while getting a single switch lacp group" ); if ( PRINT_STACK_TRACE ) logger.debug( e.getStackTrace() ); if ( FAIL_ON_EXCEPTION ) { fail(); } } }
@Test void orThrow() { assertNotNull(instance.orThrow()); }
@Test public void invokeParamsCantBeCompared() { FunctionTestUtil.assertResultError( overlappedByFunction.invoke( new RangeImpl( Range.RangeBoundary.CLOSED, "a", "f", Range.RangeBoundary.CLOSED ), new RangeImpl( Range.RangeBoundary.CLOSED, 1, 2, Range.RangeBoundary.CLOSED ) ), InvalidParametersEvent.class ); }
@Test void testInvalidSize() { PropertyValidator validator = new PropertyValidator(VALIDATION_RULES); Map<String, Object> properties = Collections.emptyMap(); assertFalse(validator.isValidPropertiesMap(properties)); }
@Test public void testToggleTerrainLocked() { AbstractProjection.setTerrainLocked(false); assertFalse(AbstractProjection.isTerrainLocked()); AbstractProjection.toggleTerrainLocked(); assertTrue(AbstractProjection.isTerrainLocked()); AbstractProjection.toggleTerrainLocked(); assertFalse(AbstractProjection.isTerrainLocked()); }
@Test public void timeoutPostEntity() throws MalformedURLException, ODataClientException { thrown.expect(ODataClientTimeout.class); caller.doPostEntity(new HashMap<>(), buildUrlToCall(HTTP_CLIENT_TIMEOUT), "", JSON, JSON); }
@Test public void testGetNotificationsForUser() throws Exception { Long userId = 1L; QuestionStatusResource notUserStatus = new QuestionStatusResource(); notUserStatus.setAssigneeUserId(2L); notUserStatus.setNotified(false); QuestionStatusResource notifiedStatus = new QuestionStatusResource(); notifiedStatus.setAssigneeUserId(userId); notifiedStatus.setNotified(true); QuestionStatusResource notNotifiedStatus = new QuestionStatusResource(); notNotifiedStatus.setAssigneeUserId(userId); notNotifiedStatus.setNotified(false); Collection<QuestionStatusResource> questionStatuses = Lists.newArrayList(notUserStatus, notifiedStatus, notNotifiedStatus); List<QuestionStatusResource> returnedQuestionStatuses = service.getNotificationsForUser(questionStatuses, userId); assertEquals(returnedQuestionStatuses.size(), 1); assertEquals(returnedQuestionStatuses.get(0), notNotifiedStatus); }
@Test public void testTemplateUsingBasicFields() throws Exception { String templateName = "templateBasic"; String templateContent = null; String result = service.applyTemplate(templateName, templateContent, workflowInstance); Assert.assertEquals("Media package id: 3e7bb56d-2fcc-4efe-9f0e-d6e56422f557, workflow id: 1, " + "title: Test Media Package, series title: Fall 2013 Test, " + "date: 2013-11-19T15:20:00Z", result); }
@Test public void testRemoveSingleImageGroups() throws Exception { assertThat(cut.removeSingleImageGroups().build().getPostProcessingStages(), hasItem(instanceOf(RemoveSingleImageSetStage.class))); }
@Test public void testStripTrailingSlash() { assertNull(Strings.stripLeadingSlash(null)); assertEquals("string", Strings.stripTrailingSlash("string")); assertEquals( "stringWithTrailingSlash", Strings.stripTrailingSlash("stringWithTrailingSlash/")); }
@Test public void testRead() throws Exception { seekAndVerify(50); byte[] b = new byte[200]; blockStream.read(b, 0, 200); matchWithInputData(b, 50, 200); Assert.assertEquals(250, blockStream.getPos()); Assert.assertEquals(2, blockStream.getChunkIndex()); }
@Test public void testThreadNoConfig() { BroadcastMonitorThread thread = new BroadcastMonitorThread(); assert( thread.getWaitTime() > 0); testThread(thread); }
@Test public void indexOf() { int[] array = new int[]{0, 1, 2, 3}; int i = ArrayUtils.indexOf(array, 0); int i1 = ArrayUtils.indexOf(array, -1); int i2 = ArrayUtils.indexOf(array, 0, 1); Assert.assertEquals(0, i); Assert.assertEquals(-1, i1); Assert.assertEquals(-1, i2); }
@Test public void testParse() throws ParseException { System.out.println("SDP origin parse test..."); String[] origs = new String[] { "o=- 10 20 IN IP4 127.0.0.1", "o=-\t10\t20\tIN\tIP4\t127.0.0.1", " o=- 0 0 IN IP4 127.0.0.1", "o =- 0 0 IN IP4 127.0.0.1", "o = - 0 0 IN IP4 127.0.0.1", "o= - 0 0 IN IP4 127.0.0.1", "o=0 0 IN IP4 127.0.0.1", "o=- 0 IN IP4 127.0.0.1", "o=- 0 0 IP4 127.0.0.1", "o=- 0 0 IN 127.0.0.1", "o=- 0 0 IN IP4", }; int i = 0; Origin o; for (; i < 2; i++) { o = Origin.parse(origs[i]); assertEquals("-", o.getUsername()); assertEquals(10l, o.getSessionId()); assertEquals(20l, o.getVersion()); assertEquals("IN", o.getNetworkType()); assertEquals("IP4", o.getAddressType()); assertEquals("127.0.0.1", o.getAddress().getHostAddress()); } for (; i < origs.length; i++) { try { Origin.parse(origs[i]); fail("origin: \"" + origs[i] + "\" parsed without an exception"); } catch (ParseException ex) { } } }
@Test void testSuccessMerge() { when(eventProcessorController.mergeSegment(eq(TRACKING_EVENT_PROCESSOR), eq(0))).thenReturn(true); mergeRequestConsumer.get().accept(PlatformOutboundInstruction.newBuilder() .setInstructionId("goodInstructionId") .setMergeEventProcessorSegment(tep()) .build()); verify(axonServerConnectionManager).send(eq(BOUNDED_CONTEXT), eq(successResult())); }
@Test public void doesNotAddFrameNumbersToAudioError() { addError(_AUDIO_1_ID, 0, 0, "ec1", "em1"); addError(_AUDIO_1_ID, 0, 0, "ec1", "em1"); var mergedErrors = DetectionErrorUtil.getMergedDetectionErrors(_testJob); assertEquals(1, mergedErrors.size()); JsonIssueDetails issue = mergedErrors.get(_AUDIO_1_ID).iterator().next(); assertEquals("ec1", issue.getCode()); assertEquals(_TEST_ALGO1_NAME, issue.getSource()); assertEquals("em1", issue.getMessage()); }
@Test public void testQueryParamsCombinedWithUri() throws URISyntaxException { Map<String, Object> queryParamsMap = new HashMap<>(); queryParamsMap.put("q2", "2"); String uriWithParams = BASE_URL + "?q1=1"; String qualifiedQueryParams = UrlQueryParamsUtils.setQueryParams(uriWithParams, queryParamsMap); assertThat(qualifiedQueryParams, is(BASE_URL + "?q1=1&q2=2")); }
@Test public void verifyDefaultPropertyCanBeSetWhenValueEqualsDefaultValueWhenNoParentContextButOriginalValueSetShouldNotThrowException() throws ValidationException { String defaultValue = "defaultValue"; ContextEntity contextEntity = new ContextEntity(); ContextTypeEntity contextType = new ContextTypeEntity(); contextType.setName("Env"); contextEntity.setContextType(contextType); ResourceEditProperty resourceEditPropertyMock = mock(ResourceEditProperty.class); Mockito.when(resourceEditPropertyMock.getDefaultValue()).thenReturn(defaultValue); Mockito.when(resourceEditPropertyMock.getPropertyValue()).thenReturn(defaultValue); Mockito.when(resourceEditPropertyMock.getParent()).thenReturn(null); Mockito.when(resourceEditPropertyMock.getOriginalValue()).thenReturn("someOriginalValue"); service.verifyDefaultPropertyCanBeSet(resourceEditPropertyMock, contextEntity); assertTrue(true); }
@Test public void testFilterRemovesUndisplayableServices() throws SMSException, SSOException, AMConfigurationException { given(mockServiceSchemaManager.getPropertiesViewBeanURL()).willReturn(null); given(mockAttributeSchema.getI18NKey()).willReturn(null); testNameFilter = new SmsConsoleServiceNameFilter(mockDebug, mockServiceConfig, removeServices, supportedSchemaTypes, authenticationServices, mockServiceSchemaManagerFactory); testNameFilter.filter(servicesToFilter); assertThat(servicesToFilter).isEmpty(); }
@Test public void testWrongServiceName() { systemExitCapturer.runAndAssertExitCode(() -> tlsToolkitMain.doMain(new String[] {"fakeService"}), ExitCode.INVALID_ARGS); }
@Test public void testDay() { long now = 1164045917522L; now = correctBasedOnTimeZone(now); long expected = 1164067200000L; expected = correctBasedOnTimeZone(expected); long computed = TimeUtil.computeStartOfNextDay(now); assertEquals(expected - now, 1000 * (3600 * 5 + 60 * 54 + 42) + 478); assertEquals(expected, computed); }
@Test public void checkCoinNameExistOneContract() { HashMap<String, String> coins = new HashMap<>(); coins.put("Contract", ""); assertEquals("Contract(1)", checkCoinNameExist("Contract", coins)); }
@Test(expected = IllegalArgumentException.class) public void testIllegalArgumentException2() { IpAddressBuilder.getDefaultInstance("2001:0DB8::CD3/60"); }
@Test public void testSize() throws Throwable { int result = new ChannelPool().size(); assertEquals(0, result, "result"); }
@Test public void incompatibleRequirements_PropagatesAndManagedLocal() { PolicyUtil.require(exchange, TransactionPolicy.PROPAGATES_TRANSACTION); PolicyUtil.require(exchange, TransactionPolicy.MANAGED_TRANSACTION_LOCAL); exchange.setPhase(ExchangePhase.IN); try { handler.handleMessage(exchange); } catch (HandlerException handlerEx) { System.out.println(handlerEx.toString()); return; } Assert.fail("Expected a handler exception due to incompatible policy"); }
@Test public void testNonNullSpanContext() { val testChildSpanContext = noOpsTracer.buildSpan("testChildOperationName").asChildOf(testSpanContext); when(tracer.buildSpan("testChildOperationName")).thenReturn(testChildSpanContext); val resultChildSpan = utilUnderTest.startSpan("testChildOperationName", testSpanContext); Assert.assertEquals(testSpanContext.toTraceId(), resultChildSpan.context().toTraceId()); Assert.assertEquals(testSpanContext.toSpanId(), resultChildSpan.context().getParentId().toString()); }
@Test public void setActive() { instance.setActive(true); assertEquals(true, instance.isActive()); instance.setActive(false); assertEquals(false, instance.isActive()); }
@Test public void getDevicesOf() { mgr.setRole(NID_LOCAL, DEV_MASTER, MASTER); mgr.setRole(NID_LOCAL, DEV_OTHER, STANDBY); assertEquals("should be one device:", 1, mgr.getDevicesOf(NID_LOCAL).size()); mgr.setRole(NID_LOCAL, DEV_OTHER, MASTER); assertEquals("should be two devices:", 2, mgr.getDevicesOf(NID_LOCAL).size()); }
@Test public void testContainsAllCollection() { Collection<Double> doubles = new HashSet<>(); tDoubleArrayList.containsAll(doubles); verify(delegate).containsAll(doubles); }
@Test public void testDefaultValues() { Assert.assertNull(oRegisterInstanceRequest.getInstance()); }
@Test public void getSignedInt() { assertEquals( 0, AkServerUtil.getInt(byteArray(0x00, 0x00, 0x00, 0x00), 0)); assertEquals( 1, AkServerUtil.getInt(byteArray(0x01, 0x00, 0x00, 0x00), 0)); assertEquals( 2147483647, AkServerUtil.getInt(byteArray(0xFF, 0xFF, 0xFF, 0x7F), 0)); assertEquals(-2147483648, AkServerUtil.getInt(byteArray(0x00, 0x00, 0x00, 0x80), 0)); assertEquals( -2, AkServerUtil.getInt(byteArray(0xFE, 0xFF, 0xFF, 0xFF), 0)); assertEquals( -1, AkServerUtil.getInt(byteArray(0xFF, 0xFF, 0xFF, 0xFF), 0)); }
@Test public void testGetTreeTestPath() throws Exception { assertNotNull(acMgr.getTree(testPath, Permissions.NO_PERMISSION, false)); assertNotNull(acMgr.getTree(testPath, Permissions.NO_PERMISSION, true)); }
@Test public void test4() throws Exception { Cell1DDataset dataset = Cell1DDatasets.linearRange(new ArrayDouble(0,1,2,3,4,5,6,7,8,9,10), 0, 10); BufferedImage image = new BufferedImage(640, 480, BufferedImage.TYPE_3BYTE_BGR); AreaGraph2DRenderer renderer = new AreaGraph2DRenderer(640, 480); Graphics2D graphics = (Graphics2D) image.getGraphics(); renderer.draw(graphics, dataset); compareImages("bar1DChart.4", image); }
@Test public void getArrayOfDoubleWithStringParam_returnArray() throws Exception { Double[] value = valueWidget.getArrayOfDouble("1", 5d, 6d); Assertions.assertThat(value[0]).isEqualTo(1d); Assertions.assertThat(value[1]).isEqualTo(6d); }
@Test public void testLeaseDurationJsonRelativeTime() { LeaseDuration leaseDuration = LeaseDuration.of("7d", "0", "0"); Assert.assertEquals(leaseDuration, GSON.fromJson("{\"initial\":\"7d\",\"max\":\"0\",\"step\":\"0\"}", LeaseDuration.class)); }
@Test public void testDecodePositions() throws IOException { SsaDecoder decoder = new SsaDecoder(); byte[] bytes = TestUtil.getByteArray(ApplicationProvider.getApplicationContext(), POSITIONS); Subtitle subtitle = decoder.decode(bytes, bytes.length, false); Cue firstCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(0))); assertWithMessage("Cue.position").that(firstCue.position).isEqualTo(0.5f); assertWithMessage("Cue.lineType").that(firstCue.lineType).isEqualTo(Cue.LINE_TYPE_FRACTION); assertWithMessage("Cue.line").that(firstCue.line).isEqualTo(0.25f); Cue secondCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(2))); assertWithMessage("Cue.position").that(secondCue.position).isEqualTo(0.25f); assertWithMessage("Cue.line").that(secondCue.line).isEqualTo(0.25f); Cue thirdCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(4))); assertWithMessage("Cue.position").that(thirdCue.position).isEqualTo(0.25f); Cue fourthCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(6))); assertWithMessage("Cue.position").that(fourthCue.position).isEqualTo(0.5f); assertWithMessage("Cue.line").that(fourthCue.line).isEqualTo(0.25f); Cue fifthCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(8))); assertWithMessage("Cue.position").that(fifthCue.position).isEqualTo(0.5f); assertWithMessage("Cue.line").that(fifthCue.line).isEqualTo(0.5f); assertWithMessage("Cue.positionAnchor") .that(fifthCue.positionAnchor) .isEqualTo(Cue.ANCHOR_TYPE_MIDDLE); assertWithMessage("Cue.lineAnchor").that(fifthCue.lineAnchor).isEqualTo(Cue.ANCHOR_TYPE_END); assertWithMessage("Cue.textAlignment") .that(fifthCue.textAlignment) .isEqualTo(Layout.Alignment.ALIGN_CENTER); Cue sixthCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(10))); assertWithMessage("Cue.position").that(sixthCue.position).isEqualTo(0.5f); assertWithMessage("Cue.line").that(sixthCue.line).isEqualTo(0.5f); assertWithMessage("Cue.positionAnchor") .that(sixthCue.positionAnchor) .isEqualTo(Cue.ANCHOR_TYPE_END); assertWithMessage("Cue.lineAnchor").that(sixthCue.lineAnchor).isEqualTo(Cue.ANCHOR_TYPE_START); assertWithMessage("Cue.textAlignment") .that(sixthCue.textAlignment) .isEqualTo(Layout.Alignment.ALIGN_OPPOSITE); }
@Test public void shouldAddTimelineEventWhenDeliveryPlanHappens() throws Exception { FormSubmission submission = mock(FormSubmission.class); when(submission.entityId()).thenReturn("entity id 1"); when(submission.getFieldValue("deliveryFacilityName")).thenReturn("Delivery Facility Name"); when(submission.getFieldValue("transportationPlan")).thenReturn("Transportation Plan"); when(submission.getFieldValue("birthCompanion")).thenReturn("Birth Companion"); when(submission.getFieldValue("ashaPhoneNumber")).thenReturn("Asha Phone"); when(submission.getFieldValue("phoneNumber")).thenReturn("1234567890"); when(submission.getFieldValue("reviewedHRPStatus")).thenReturn("HRP Status"); when(submission.getFieldValue("submissionDate")).thenReturn("2012-01-01"); service.deliveryPlan(submission); verify(allTimelineEvents).add(forDeliveryPlan("entity id 1", "Delivery Facility Name", "Transportation Plan", "Birth Companion", "Asha Phone", "1234567890", "HRP Status", "2012-01-01")); }
@Test @Ignore public void shouldInVisibleWarningWhenUserChoseTheInventory() throws Exception { LMISTestApp.getInstance().setCurrentTimeMillis(100000); SingleClickButtonListener.isViewClicked = false; when(stockMovementRepository.listLastFiveStockMovements(anyLong())).thenReturn(newArrayList(new StockMovementItem())); when(stockMovementRepository.queryFirstStockMovementByStockCardId(anyLong())).thenReturn(new StockMovementItem()); when(stockRepository.list()).thenReturn(newArrayList(new StockCard())); selectPeriodActivity.refreshDate(inventoryList); shadowOf(selectPeriodActivity.vgContainer).performItemClick(2); assertThat(selectPeriodActivity.tvSelectPeriodWarning.getVisibility(), is(View.INVISIBLE)); Subscriber subscriber = new TestSubscriber(); Observable observable = selectPeriodActivity.presenter.correctDirtyObservable(Constants.Program.MMIA_PROGRAM); observable.subscribe(subscriber); selectPeriodActivity.nextBtn.performClick(); }
@Test public void prepareHeaders_userAgentIgnored() { Metadata m = new Metadata(); m.put(GrpcUtil.USER_AGENT_KEY, "batmobile"); ClientCallImpl.prepareHeaders(m, decompressorRegistry, Codec.Identity.NONE, false); assertThat(m.get(GrpcUtil.USER_AGENT_KEY)).isNotNull(); }
@Test public void testToCombinedFormatLong() { assertEquals("1972-01-01/001T00:00:00.123", TimeEncoding.toCombinedFormat(j1972)); }
@Test public void hexStringToByteArrayShouldReturnCorrectByteArray() { assertThat(Strings.hexStringToByteArray(null)).isNull(); assertThat(Strings.hexStringToByteArray("00")).isEqualTo(new byte[]{ 0 }); assertThat(Strings.hexStringToByteArray("010203")).isEqualTo(new byte[]{ 1, 2, 3 }); assertThat(Strings.hexStringToByteArray("CAFEBABE")).isEqualTo(new byte[]{ -54, -2, -70, -66 }); }
@Test public void fillExternalChanges() throws Exception { DocumentStore store = new MemoryDocumentStore(); JournalEntry entry = JOURNAL.newDocument(store); Set<Path> paths = Sets.newHashSet(); addRandomPaths(paths); entry.modified(paths); Revision r1 = new Revision(1, 0, 1); Revision r2 = new Revision(2, 0, 1); Revision r3 = new Revision(3, 0, 1); UpdateOp op = entry.asUpdateOp(r2); assertTrue(store.create(JOURNAL, Collections.singletonList(op))); StringSort sort = JournalEntry.newSorter(); StringSort inv = JournalEntry.newSorter(); JournalEntry.fillExternalChanges(sort, inv, r2, r3, store); assertEquals(0, sort.getSize()); assertEquals(0, inv.getSize()); JournalEntry.fillExternalChanges(sort, inv, r1, r2, store); assertEquals(paths.size(), sort.getSize()); assertEquals(0, inv.getSize()); sort.close(); sort = JournalEntry.newSorter(); JournalEntry.fillExternalChanges(sort, inv, r1, r3, store); assertEquals(paths.size(), sort.getSize()); assertEquals(0, inv.getSize()); sort.close(); inv.close(); }
@Test(expectedExceptions = GoodDataException.class, expectedExceptionsMessageRegExp = ".*timeout.*") public void pollShouldThrowExceptionWhenOverTimeout() throws Exception { PollHandler<?, ?> handler = mock(PollHandler.class); service.poll(handler, 5, TimeUnit.SECONDS); }
@Test public void onEnterScope() throws Exception { ScreenListener listener = mock(ScreenListener.class); screenTracker.addListener(listener); screenTracker.onEnterScope("scope", mock(View.class)); verify(listener).onScreenChanged(any()); }
@Test void jvm_vitals() { uaaMetricsEmitter.emitJvmVitals(); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.cpu.load"), and(geq(0L), leq(100L))); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.thread.count"), and(gt(1L), leq(1000L))); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.heap.init"), gt(0L)); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.heap.committed"), gt(0L)); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.heap.used"), gt(0L)); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.non-heap.init"), gt(0L)); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.non-heap.committed"), gt(0L)); Mockito.verify(statsDClient).gauge(eq("vitals.jvm.non-heap.used"), gt(0L)); }
@Test public void throwsWhenFilenameDoesNotStartWithANumber() throws Exception { FilenameParser parser = new FilenameParser(); try { parser.extractIdFromFilename("blah blah blah"); fail("expected exception"); } catch (UnrecognisedFilenameException e) { assertEquals("Could not extract a change script number from filename: blah blah blah", e.getMessage() ); } }
@Test public void isBlankTest() { Assert.assertTrue(StringUtils.isBlank("")); Assert.assertTrue(StringUtils.isBlank(null)); Assert.assertFalse(StringUtils.isBlank("12334")); Assert.assertTrue(StringUtils.isBlank(" ")); }
@Test public void shouldRestoreDraftInventoryWithLDraftLotItems() throws Exception { ArrayList<InventoryViewModel> inventoryViewModels = getStockCardViewModels(); ArrayList<DraftInventory> draftInventories = new ArrayList<>(); DraftInventory draftInventory = new DraftInventory(); draftInventory.setStockCard(stockCardWithIdNine); draftInventory.setQuantity(20L); LotMovementViewModel lotMovementViewModel1 = new LotMovementViewModelBuilder().setLotNumber("test").setExpiryDate("Sep 2016").setQuantity("10").build(); LotMovementViewModel lotMovementViewModel2 = new LotMovementViewModelBuilder().setLotNumber("testNew").setExpiryDate("Sep 2016").setQuantity("10").build(); inventoryViewModels.get(0).setExistingLotMovementViewModelList(newArrayList(lotMovementViewModel1)); DraftLotItem draftLotItem1 = new DraftLotItem(lotMovementViewModel1, stockCardWithIdNine.getProduct(), false); DraftLotItem draftLotItem2 = new DraftLotItem(lotMovementViewModel2, stockCardWithIdNine.getProduct(), true); draftInventory.setDraftLotItemListWrapper(newArrayList(draftLotItem1, draftLotItem2)); draftInventories.add(draftInventory); when(mockInventoryRepository.queryAllDraft()).thenReturn(draftInventories); presenter.getInventoryViewModelList().addAll(inventoryViewModels); presenter.restoreDraftInventory(); assertThat(inventoryViewModels.get(0).getNewLotMovementViewModelList().get(0).getLotNumber(), is("testNew")); assertThat(inventoryViewModels.get(0).getExistingLotMovementViewModelList().get(0).getLotNumber(), is("test")); }
@Test public void testUserActionListsByType() throws Exception { createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session123", "mp", "me", "127.0.0.1", 10, 20); Assert.assertEquals(1, service.getViews("mp")); Assert.assertEquals(0, service.getViews("other")); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 0, 1); verifyUserActionListsByType("other", 0, 0, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 1, 1); verifyUserActionListsByType("other", 0, 0, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 0, 1, 0, 1); verifyUserActionListsByType("other", 0, 1, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 0, 1, 1, 1); verifyUserActionListsByType("other", 0, 1, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 10, 1); verifyUserActionListsByType("other", 0, 0, 10, 0); createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session123", "mp", "me", "127.0.0.1", 20, 30); Assert.assertEquals(1, service.getViews("mp")); Assert.assertEquals(0, service.getViews("other")); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 0, 1); verifyUserActionListsByType("other", 0, 0, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 1, 1); verifyUserActionListsByType("other", 0, 0, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 0, 1, 0, 1); verifyUserActionListsByType("other", 0, 1, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 0, 1, 1, 1); verifyUserActionListsByType("other", 0, 1, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 10, 1); verifyUserActionListsByType("other", 0, 0, 10, 0); createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session123", "mp", "me", "127.0.0.1", 40, 50); Assert.assertEquals(1, service.getViews("mp")); Assert.assertEquals(0, service.getViews("other")); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 2, 0, 0, 2); verifyUserActionListsByType("other", 0, 0, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 1, 2); verifyUserActionListsByType("other", 0, 0, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 1, 0, 2); verifyUserActionListsByType("other", 0, 1, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 1, 1, 2); verifyUserActionListsByType("other", 0, 1, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 2, 0, 10, 2); verifyUserActionListsByType("other", 0, 0, 10, 0); createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session123", "mp", "me", "127.0.0.1", 50, 60); Assert.assertEquals(1, service.getViews("mp")); Assert.assertEquals(0, service.getViews("other")); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 2, 0, 0, 2); verifyUserActionListsByType("other", 0, 0, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 0, 1, 2); verifyUserActionListsByType("other", 0, 0, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 1, 0, 2); verifyUserActionListsByType("other", 0, 1, 0, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 1, 1, 1, 2); verifyUserActionListsByType("other", 0, 1, 1, 0); verifyUserActionListsByType(UserTrackingServiceImpl.FOOTPRINT_KEY, 2, 0, 10, 2); verifyUserActionListsByType("other", 0, 0, 10, 0); }
@Test public void clear() { DeferredScalarSubscription<Integer> ds = new DeferredScalarSubscription<Integer>(new TestSubscriber<Integer>()); ds.value = 1; ds.clear(); assertEquals(DeferredScalarSubscription.FUSED_CONSUMED, ds.get()); assertNull(ds.value); }
@Test public void testPrefixIgnoresEnvIfConsumerHasNone() throws Exception { owner.setContentPrefix("/someorg/$env/"); certServiceAdapter.createX509Certificate(consumer, owner, pool, entitlement, product, new HashSet<>(), getProductModels(product, new HashSet<>(), "prefix", entitlement), new BigInteger("1234"), keyPair, true); verify(mockedPKI).createX509Certificate(any(String.class), argThat(new ListContainsContentUrl("/someorg/$env" + CONTENT_URL, CONTENT_ID)), any(Set.class), any(Date.class), any(Date.class), any(KeyPair.class), any(BigInteger.class), nullable(String.class)); }
@Test public void testChannelCloseBeforeWriteComplete() { writeListener.listen(conn.write(publisher)); Buffer hello1 = newBuffer("Hello1"); publisher.onNext(hello1); publisher.onNext(TRAILER.duplicate()); pollChannelAndVerifyWrites("Hello1", TRAILER_MSG); channel.pipeline().fireChannelInactive(); channel.close(); publisher.onComplete(); writeListener.verifyCompletion(); }
@Test public void testFetchResultsReturnsNull() { Search search = new Search(); search.setStatus(SearchStatusEnum.FINISHED); search.setNumFound(100); search.setTotalCount(100); when(mySearchCacheSvc.fetchByUuid(eq("0000-1111"))).thenReturn(Optional.of(search)); when(mySearchResultCacheSvc.fetchResultPids(any(), anyInt(), anyInt())).thenReturn(null); try { mySvc.getResources("0000-1111", 0, 10, null); fail(); } catch (ResourceGoneException e) { assertEquals("Search ID \"0000-1111\" does not exist and may have expired", e.getMessage()); } }
@Test public void testGenerateJavaCode() { DataValueGenerator dvg = new DataValueGenerator(); JavaBeanInterface jbi = dvg.heapInstance(JavaBeanInterface.class); jbi.setByte((byte) 1); jbi.setChar('2'); jbi.setShort((short) 3); jbi.setInt(4); jbi.setFloat(5); jbi.setLong(6); jbi.setDouble(7); jbi.setFlag(true); assertEquals(1, jbi.getByte()); assertEquals('2', jbi.getChar()); assertEquals(3, jbi.getShort()); assertEquals(4, jbi.getInt()); assertEquals(5.0, jbi.getFloat(), 0); assertEquals(6, jbi.getLong()); assertEquals(7.0, jbi.getDouble(), 0.0); assertTrue(jbi.getFlag()); }
@Test public void putNullPresenterThrowsNullPointerExceptino() { MvpPresenter presenter = Mockito.mock(MvpPresenter.class); Activity activity = Mockito.mock(Activity.class); Application application = Mockito.mock(Application.class); Mockito.when(activity.getApplication()).thenReturn(application); try { PresenterManager.putPresenter(null, "123", presenter); Assert.fail("Exception expected"); } catch (NullPointerException e) { } try { PresenterManager.putPresenter(activity, null, presenter); Assert.fail("Exception expected"); } catch (NullPointerException e) { } try { PresenterManager.putPresenter(activity, "123", null); Assert.fail("Exception expected"); } catch (NullPointerException e) { } }
@Test public void shouldSaveDataPoint() { Item salary = new Item(); salary.setTitle("Salary"); salary.setAmount(new BigDecimal(9100)); salary.setCurrency(Currency.USD); salary.setPeriod(TimePeriod.MONTH); Item grocery = new Item(); grocery.setTitle("Grocery"); grocery.setAmount(new BigDecimal(500)); grocery.setCurrency(Currency.RUB); grocery.setPeriod(TimePeriod.DAY); Item vacation = new Item(); vacation.setTitle("Vacation"); vacation.setAmount(new BigDecimal(3400)); vacation.setCurrency(Currency.EUR); vacation.setPeriod(TimePeriod.YEAR); Saving saving = new Saving(); saving.setAmount(new BigDecimal(1000)); saving.setCurrency(Currency.EUR); saving.setInterest(new BigDecimal(3.2)); saving.setDeposit(true); saving.setCapitalization(false); Account account = new Account(); account.setIncomes(ImmutableList.of(salary)); account.setExpenses(ImmutableList.of(grocery, vacation)); account.setSaving(saving); final Map<Currency, BigDecimal> rates = ImmutableMap.of( Currency.EUR, new BigDecimal("0.8"), Currency.RUB, new BigDecimal("80"), Currency.USD, BigDecimal.ONE ); when(ratesService.convert(any(Currency.class),any(Currency.class),any(BigDecimal.class))) .then(i -> ((BigDecimal)i.getArgument(2)) .divide(rates.get(i.getArgument(0)), 4, RoundingMode.HALF_UP)); when(ratesService.getCurrentRates()).thenReturn(rates); when(repository.save(any(DataPoint.class))).then(returnsFirstArg()); DataPoint dataPoint = statisticsService.save("test", account); final BigDecimal expectedExpensesAmount = new BigDecimal("17.8861"); final BigDecimal expectedIncomesAmount = new BigDecimal("298.9802"); final BigDecimal expectedSavingAmount = new BigDecimal("1250"); final BigDecimal expectedNormalizedSalaryAmount = new BigDecimal("298.9802"); final BigDecimal expectedNormalizedVacationAmount = new BigDecimal("11.6361"); final BigDecimal expectedNormalizedGroceryAmount = new BigDecimal("6.25"); assertEquals(dataPoint.getId().getAccount(), "test"); assertEquals(dataPoint.getId().getDate(), Date.from(LocalDate.now().atStartOfDay().atZone(ZoneId.systemDefault()).toInstant())); assertTrue(expectedExpensesAmount.compareTo(dataPoint.getStatistics().get(StatisticMetric.EXPENSES_AMOUNT)) == 0); assertTrue(expectedIncomesAmount.compareTo(dataPoint.getStatistics().get(StatisticMetric.INCOMES_AMOUNT)) == 0); assertTrue(expectedSavingAmount.compareTo(dataPoint.getStatistics().get(StatisticMetric.SAVING_AMOUNT)) == 0); ItemMetric salaryItemMetric = dataPoint.getIncomes().stream() .filter(i -> i.getTitle().equals(salary.getTitle())) .findFirst().get(); ItemMetric vacationItemMetric = dataPoint.getExpenses().stream() .filter(i -> i.getTitle().equals(vacation.getTitle())) .findFirst().get(); ItemMetric groceryItemMetric = dataPoint.getExpenses().stream() .filter(i -> i.getTitle().equals(grocery.getTitle())) .findFirst().get(); assertTrue(expectedNormalizedSalaryAmount.compareTo(salaryItemMetric.getAmount()) == 0); assertTrue(expectedNormalizedVacationAmount.compareTo(vacationItemMetric.getAmount()) == 0); assertTrue(expectedNormalizedGroceryAmount.compareTo(groceryItemMetric.getAmount()) == 0); assertEquals(rates, dataPoint.getRates()); verify(repository, times(1)).save(dataPoint); }
@Test public void testCalculateOccurrenceRatio() throws Exception { setUpNormal(); FunctionalDependencyRanking ranking = new FunctionalDependencyRanking(functionalDependencyResults, tableInformationMap); FunctionalDependencyResult result = functionalDependencyResults.get(0); ranking.calculateOccurrenceRatios(result); assertEquals(0.4, result.getDeterminantOccurrenceRatio(), 0.001); assertEquals(1, result.getDependantOccurrenceRatio(), 0.001); }
@Test public void getProjectByGroupId() throws Exception { List<Project> list = projectDao.getProjectByGroupId(58L); System.out.println("getProjectByGroupId :-------> " + list); Assert.assertTrue(list.size() > 0); }
@Test public void testGetMethodNotAccessible() { assertThrows(() -> UtilReflection.getMethod(Verbose.class, "getMessage", "test"), UtilReflection.ERROR_METHOD + "getMessage"); }
@Test public void addLine() { Annotation instance = new Annotation("testfile.tst"); instance.addLine("1.0", "Author", true); assertEquals(instance.size(), 1); instance.addLine(null, null, true); }
@Test public void testMultipleClassLoaders() { UUID uuid = UUID.randomUUID(); String uuidString = uuid.toString(); ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader(); UUID coercedFromPrimaryClassLoader = CoerceUtil.coerce(uuidString, UUID.class); assertEquals(uuid, coercedFromPrimaryClassLoader); try { Thread.currentThread().setContextClassLoader(new SecondaryClassLoader()); UUID coercedFromSecondaryClassLoader = CoerceUtil.coerce(uuidString, UUID.class); assertEquals(uuid, coercedFromSecondaryClassLoader); } finally { Thread.currentThread().setContextClassLoader(originalClassLoader); } }
@Test void testWriteBytesTo() { byte[] dest = new byte[4]; HASH_ABCD.writeBytesTo(dest, 0, 4); assertArrayEquals(new byte[]{(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd}, dest); }
@Test public void onInstructionListShown_listenerReturnsTrue() { InstructionListListener instructionListListener = mock(InstructionListListener.class); NavigationViewEventDispatcher eventDispatcher = buildDispatcher(instructionListListener); eventDispatcher.onInstructionListVisibilityChanged(true); verify(instructionListListener, times(1)).onInstructionListVisibilityChanged(true); }
@Test public void parseStandard() throws Exception { assertThat(InChINumbersTools.parseUSmilesNumbers("AuxInfo=1/0/N:3,2,1/rA:3OCC/rB:s1;s2;/rC:;;;", mock(3)), is(new long[]{3, 2, 1})); }
@Test public void bundle_clean_partial() { BasicProject project = project("simple") .withContents(it -> it.copy(Paths.get("src/test/data/base-package"))); assertThat(project.getContents().find("etc/data.txt"), is(not(Optional.empty()))); project.getContents().clean("etc/data.txt"); assertThat(project.getContents().find("etc/data.txt"), is(Optional.empty())); assertThat(project.getContents().find("etc"), is(not(Optional.empty()))); assertThat(Files.isDirectory(project.getContents().getDirectory()), is(true)); project.getContents().clean("MISSING"); }
@Test(expected = IllegalArgumentException.class) public void testAddNull() { OutlinePageDestinations victim = new OutlinePageDestinations(); victim.addPage(null, "Title1"); }
@Test public void testDropSuffixWithEmptyString() { String string = StringUtil.dropSuffix("", "^Fahs"); assertEquals("", string); }
@Test public void getAddress_Returns_Address() { final String expected = address; final String actual = evnt.getDescription(); Assert.assertEquals(actual, expected); }
@Test void toAttributesShouldReturnEmptyWhenEmptyRawAttributeMap() { ImmutableMap<String, ByteBuffer> attrMap = ImmutableMap.of(); assertThat(EnqueuedMailsDaoUtil.toAttributes(attrMap)) .isEmpty(); }
@Test public void test_joinList() throws Exception { List<String> list = Arrays.asList(); assertEquals("", CollectionUtils.join(list, "/")); list = Arrays.asList("x"); assertEquals("x", CollectionUtils.join(list, "-")); list = Arrays.asList("a", "b"); assertEquals("a/b", CollectionUtils.join(list, "/")); }
@Test public void getWhitelistedEquitableValuesPredicate() { logger.info("getWhitelistedEquitableValuesPredicate - enter"); constraintsMap.put("age", EquatableValueSet.newBuilder(allocator, Types.MinorType.INT.getType(), true, true).addAll(ImmutableList.of(20, 25, 30, 35)).build()); String expectedPredicate = "age:(20 OR 25 OR 30 OR 35)"; QueryBuilder builder = ElasticsearchQueryUtils.getQuery(constraintsMap); String actualPredicate = builder.queryName(); logger.info("Predicates - Expected: {}, Actual: {}", expectedPredicate, actualPredicate); assertEquals("Predicates do not match", expectedPredicate, actualPredicate); logger.info("getWhitelistedEquitableValuesPredicate - exit"); }
@Test public void shouldThrowExceptionWhenGettingIfKeyIsNull() throws CacheOperationFailedException { exception.expect(CacheOperationFailedException.class); cache.getNamedOperation(null, advancedUser); }
@Test public void testTaskPromptsUserIfIotPackageExists() { when(myChecker.getInstalledIotLauncherApps(myEmbeddedDevice)).thenReturn(Collections.singleton(OTHER_PACKAGE_NAME)); UninstallIotLauncherAppsTask task = new UninstallIotLauncherAppsTask(PACKAGE_NAME, myChecker, myPrompt); task.run(myExecutor, myEmbeddedDevice, myLaunchStatus, myPrinter); verify(myPrompt).showQuestionPrompt(Mockito.anyString()); }
@Test public void shouldSuccessfulSendDatapoint() { Datapoint datapoint = new Datapoint("metric", timestamp, Collections.emptyMap(), 123); MockedSources sources = new MockedSources(); Testing.withTrackedCluster(clusterParam, (cluster) -> { OpenTsdbTopology topology = new OpenTsdbTopology(makeLaunchEnvironment()); sources.addMockData(OpenTsdbTopology.OTSDB_SPOUT_ID, new Values(null, datapoint)); completeTopologyParam.setMockedSources(sources); StormTopology stormTopology = topology.createTopology(); Map result = Testing.completeTopology(cluster, stormTopology, completeTopologyParam); }); mockServer.verify(REQUEST, VerificationTimes.exactly(1)); }
@Test public void testExpressionIsValidSQl() { assertFalse( expressionIsValidSQl( "10 == 10; delete from table" ) ); assertFalse( expressionIsValidSQl( "select from table" ) ); assertTrue( expressionIsValidSQl( "\"abcdef12345\" < 30" ) ); assertTrue( expressionIsValidSQl( "\"abcdef12345\" >= \"bcdefg23456\"" ) ); assertTrue( expressionIsValidSQl( "\"DO0v7fkhUNd\" > -30000 and \"DO0v7fkhUNd\" < 30000" ) ); assertTrue( expressionIsValidSQl( "\"oZg33kd9taw\" == 'Female'" ) ); assertTrue( expressionIsValidSQl( "\"oZg33kd9taw\" == 'Female' and \"qrur9Dvnyt5\" <= 5" ) ); }
@Test public void onActivityResult() { mBackupProvidersManager.onActivityResult(0, 0, null); verify(mNoneBackupProvider).onActivityResult(0, 0, null); }
@Test public void testFindDomainBounds() { AbstractXYItemRenderer renderer = new ClusteredXYBarRenderer(); XYDataset dataset = createSampleDataset1(); Range r = renderer.findDomainBounds(dataset); assertEquals(0.9, r.getLowerBound(), EPSILON); assertEquals(13.1, r.getUpperBound(), EPSILON); renderer = new ClusteredXYBarRenderer(0.0, true); r = renderer.findDomainBounds(dataset); assertEquals(0.8, r.getLowerBound(), EPSILON); assertEquals(13.0, r.getUpperBound(), EPSILON); assertNull(renderer.findDomainBounds(null)); }
@Test public void testApply() { Object[] result = analyzer.apply("AbC").toArray(); assertEquals("abc", result[0]); }
@Test(expected = NullPointerException.class) public void testJobUpdateNull() throws P4JavaException { jobDelegator.updateJob(null); }
@Test public void testSavePatientListShouldUsePrivileges() throws Exception { Context.getUserContext().getAuthenticatedUser().removeRole(Context.getUserService().getRole("System Developer")); PatientList pList = new PatientList(); pList.setName("TestList3"); pList.setDescription("Third Test List"); pList.setCreator(Context.getUserContext().getAuthenticatedUser()); pList.setDateCreated(new java.util.Date()); pList.setUuid("68547121-1b70-465c-99ee-c9dfd95e7d30"); pList.setRetired(Boolean.FALSE); pList.setSearchQuery("test Query"); try { s.savePatientList(pList); fail("No privileges required for savePatientList"); } catch (APIAuthenticationException e) { Context.getUserContext().addProxyPrivilege("Add Patient Lists"); Context.getUserContext().addProxyPrivilege("View Patient Lists"); Context.getUserContext().addProxyPrivilege("View Users"); s.savePatientList(pList); } }
@Test public void testGetTermByLocaleId() { log.debug("testGetTermByLocaleId"); List<HGlossaryEntry> entryList = dao.getEntriesByLocale(LocaleId.EN_US, 0, 1, "", null, GlossaryUtil.GLOBAL_QUALIFIED_NAME); assertThat(entryList.size()).isEqualTo(1); }
@Test public void testFilterUpgradeOptionsUpgradeRequestEmpty() { UpgradeV4Request request = new UpgradeV4Request(); UpgradeV4Response response = new UpgradeV4Response(); ImageInfoV4Response imageInfo = new ImageInfoV4Response(); imageInfo.setImageId(IMAGE_ID); imageInfo.setCreated(1); imageInfo.setComponentVersions(creatExpectedPackageVersions()); ImageInfoV4Response lastImageInfo = new ImageInfoV4Response(); lastImageInfo.setImageId(IMAGE_ID_LAST); lastImageInfo.setCreated(2); lastImageInfo.setComponentVersions(creatExpectedPackageVersions()); response.setUpgradeCandidates(List.of(imageInfo, lastImageInfo)); underTest.filterUpgradeOptions(response, request); assertEquals(1, response.getUpgradeCandidates().size()); assertEquals(IMAGE_ID_LAST, response.getUpgradeCandidates().get(0).getImageId()); }
@Test public void testGetLocalTimeAsCalendarForNegative() { Calendar localTime = calc.getLocalTimeAsCalendar(BigDecimal.valueOf(-10.0D), Calendar.getInstance()); assertEquals(14, localTime.get(Calendar.HOUR_OF_DAY)); assertEquals(0, localTime.get(Calendar.MINUTE)); }
@Test public void testGetArtrifactFileFromProjectDependencies() throws Exception { MyMojo mojo = new MyMojo(); mojo.project = mock(MavenProject.class); Artifact artifact1 = mock(Artifact.class); when(artifact1.getArtifactId()).thenReturn("artifact1"); when(artifact1.getType()).thenReturn("jar"); File kitten = new File("kitten"); File puppies = new File("puppies"); Artifact artifact2 = mock(Artifact.class); when(artifact2.getArtifactId()).thenReturn("artifact2"); when(artifact2.getType()).thenReturn("kitten"); when(artifact2.getFile()).thenReturn(kitten); Artifact artifact2a = mock(Artifact.class); when(artifact2a.getArtifactId()).thenReturn("artifact2"); when(artifact2a.getType()).thenReturn("puppies"); when(artifact2a.getFile()).thenReturn(puppies); Artifact artifact3 = mock(Artifact.class); when(artifact3.getArtifactId()).thenReturn("artifact3"); when(artifact3.getType()).thenReturn("putty"); when(mojo.project.getArtifacts()).thenReturn(ImmutableSet.of( artifact1, artifact2, artifact2a, artifact3 )); assertThat(DependencyFinder.getArtifactFileFromProjectDependencies(mojo, "artifact2", "kitten")).isNotNull().isEqualTo(kitten); assertThat(DependencyFinder.getArtifactFileFromProjectDependencies(mojo, "artifact2", "puppies")).isNotNull().isEqualTo(puppies); assertThat(DependencyFinder.getArtifactFileFromProjectDependencies(mojo, "artifact4", "puppies")).isNull(); assertThat(DependencyFinder.getArtifactFileFromProjectDependencies(mojo, "artifact2", "bird")).isNull(); }
@Test public void testIsConstraintValuePredicateWhenConstraintValueIsNotPredicate() { when(plugin.constraintValue()).thenReturn(BaseSingleFieldConstraint.TYPE_LITERAL); assertFalse(page.isConstraintValuePredicate()); }
@Test public void validateSource() { init(); setSource(new IdentifierToken("a"), Tokens.PLUS); assertNull(prop.get()); assertSync(); addSource(new IdentifierToken("b")); assertTrue(prop.get() instanceof PlusExpr); assertSync(); }
@Test(expected = StackTooSmallException.class) public void testSSTORE_3() { program = getProgram("602255"); try { vm.step(program); vm.step(program); } finally { assertTrue(program.isStopped()); } }
@Test public void TestGetPosition_VpnProfileExtistingOpenvpn_returnPositionZero() throws JSONException, ConfigParser.ConfigParseError, IOException { Provider provider = getProvider(null, null, null, null, null, "ptdemo_three_mixed_gateways.json"); JSONObject eipServiceJson = provider.getEipServiceJson(); JSONObject gateway1 = eipServiceJson.getJSONArray(GATEWAYS).getJSONObject(0); MockHelper.mockProviderObserver(provider); mockStatic(PreferenceHelper.class); when(PreferenceHelper.getUsePluggableTransports(any(Context.class))).thenReturn(false); GatewaysManager gatewaysManager = new GatewaysManager(mockContext); VpnConfigGenerator configGenerator = new VpnConfigGenerator(provider.getDefinition(), secrets, gateway1, 3); VpnProfile profile = configGenerator.createProfile(OPENVPN); profile.mGatewayIp = "37.218.247.60"; assertEquals(0, gatewaysManager.getPosition(profile)); }
@Test public void fetchSchedulerJobForComputationalResourceWithException() { doThrow(new ResourceNotFoundException("Scheduler job data not found for user with exploratory with " + "computational resource")).when(schedulerJobService) .fetchSchedulerJobForComputationalResource(anyString(), anyString(), anyString(), anyString()); final Response response = resources.getJerseyTest() .target("/infrastructure_provision/exploratory_environment/scheduler/projectName/explName/compName") .request() .header("Authorization", "Bearer " + TOKEN) .get(); assertEquals(HttpStatus.SC_NOT_FOUND, response.getStatus()); assertEquals(MediaType.APPLICATION_JSON, response.getHeaderString(HttpHeaders.CONTENT_TYPE)); verify(schedulerJobService).fetchSchedulerJobForComputationalResource(USER.toLowerCase(), "projectName", "explName", "compName"); verifyNoMoreInteractions(schedulerJobService); }
@Test(expected = IllegalArgumentException.class) public void testPutAsyncNullKey() { CouchbaseTableWriteFunction<JsonObject> writeFunction = createAndInit(); writeFunction.putAsync(null, JsonObject.create()); }
@Test public void shouldLoginWithUserAndPasswordSyncUsingOAuthTokenEndpoint() throws Exception { mockAPI.willReturnSuccessfulLogin(); final Credentials credentials = client .login(SUPPORT_AUTH0_COM, "some-password") .execute(); assertThat(credentials, is(notNullValue())); final RecordedRequest request = mockAPI.takeRequest(); assertThat(request.getPath(), is("/oauth/token")); assertThat(request.getHeader("Accept-Language"), is(getDefaultLocale())); Map<String, String> body = bodyFromRequest(request); assertThat(body, hasEntry("client_id", CLIENT_ID)); assertThat(body, hasEntry("grant_type", "password")); assertThat(body, hasEntry("username", SUPPORT_AUTH0_COM)); assertThat(body, hasEntry("password", "some-password")); assertThat(body, not(hasKey("realm"))); assertThat(body, not(hasKey("connection"))); assertThat(body, not(hasKey("scope"))); assertThat(body, not(hasKey("audience"))); }
@Test(expected = ApsSystemException.class) public void getUser_8() throws Exception { when(this.userManager.getUser(Mockito.anyString(), Mockito.anyString())).thenThrow(new ApsSystemException("System error")); this.authenticationProviderManager.getUser("test_user", "password"); }
@Test public void testGetAggregator() throws DoesNotExistException { Mockito.when(response.getStatus()).thenReturn(200); Mockito.when(response.readEntity(Aggregator.class)).thenReturn(new Aggregator()); Aggregator aggregator = aa.getAggregator("A0r0"); Assert.assertNotNull(aggregator); }
@Test void distinctValues() { final MapStream<String, Integer> ms = MapStream.of(entry("jedan", 1), entry("Eins", 1)); assertEquals(1, ms.distinctValues().count()); }
@Test public void testOnCanvasElementUpdatedBusinessKnowledgeModel() { final BusinessKnowledgeModel bkm = new BusinessKnowledgeModel(); final CanvasElementUpdatedEvent event = new CanvasElementUpdatedEvent(canvasHandler, node); when(node.getContent()).thenReturn(definition); when(definition.getDefinition()).thenReturn(bkm); setupExpression(bkm.asHasExpression(), bkm, toolbarStateHandler, false); testedEditor.handleCanvasElementUpdated(event); verify(view).setExpressionNameText(optionalHasNameCaptor.capture()); verify(view).refresh(); final Optional<HasName> optionalHasName = optionalHasNameCaptor.getValue(); assertTrue(optionalHasName.isPresent()); assertEquals(bkm, optionalHasName.get()); }
@Test public void and() { String fiql = new UserFiqlSearchConditionBuilder(). is("fullname").equalTo("*o*").and("fullname").equalTo("*i*").query(); assertEquals("fullname==*o*;fullname==*i*", fiql); AttrCond fullnameLeafCond1 = new AttrCond(AttrCond.Type.LIKE); fullnameLeafCond1.setSchema("fullname"); fullnameLeafCond1.setExpression("%o%"); AttrCond fullnameLeafCond2 = new AttrCond(AttrCond.Type.LIKE); fullnameLeafCond2.setSchema("fullname"); fullnameLeafCond2.setExpression("%i%"); SearchCond andCond = SearchCond.getAnd( SearchCond.getLeaf(fullnameLeafCond1), SearchCond.getLeaf(fullnameLeafCond2)); assertEquals(andCond, SearchCondConverter.convert(VISITOR, fiql)); }
@Test void testMissingAnnotation() { final Parameter parameter = Mockito.mock(Parameter.class); Mockito.when(parameter.getDeclaredAnnotation(FHIRParameter.class)).thenReturn(null); Mockito.when(parameter.getRawType()).thenAnswer(answer -> Patient.class); assertNull(factory.getValueFactory(parameter), "Should not have factory"); }
@Test public void testInstanceGetterField() throws Exception { testGetter(instanceGetter, FieldAccessor.of(instanceGetter.getDeclaredField(FOO))); }
@Test public void testKeys() { subject.put(FIRST_TEST_KEY, CACHE_ACTION); final Set<String> expectedKeys = new LinkedHashSet<>(); expectedKeys.add(FIRST_TEST_KEY); final Set<String> keys = subject.keys(); assertEquals(expectedKeys, keys); }
@Test public void shouldGetProductInfoWhenSystemHasManyJars() { System.setProperty("java.class.path", "src/test/resources/gateway.server-5.0.0.7.jar" + System.getProperty("path.separator") + "src/test/resources/gateway.server-5.0.0.8.jar" + System.getProperty("path.separator") + "src/test/resources/gateway.server-5.0.0.9.jar" + System.getProperty("path.separator") + "src/test/resources/gateway.server-noMF.jar" + System.getProperty("path.separator") + "src/test/resources/gateway.server-noAttrs.jar" + System.getProperty("path.separator") + "src/test/resources/gateway.server-missing.jar"); productInfo = getProductInfoInstance(); Assert.assertEquals("5.0.0.9 Beta", productInfo.getVersion()); Assert.assertEquals("Kaazing WebSocket Gateway", productInfo.getTitle()); Assert.assertEquals("Test.Gateway", productInfo.getEdition()); }
@Test public void ensureV3CertificateCreationOkWhenConsumerSupportsV3Dot1Certs() throws Exception { consumer.setFact("system.certificate_version", X509V3ExtensionUtil.CERT_VERSION); subscription.getProduct().setAttribute(Product.Attributes.RAM, "4"); subscription.getProduct().setAttribute(Product.Attributes.ROLES, "role1, role2 "); DefaultEntitlementCertServiceAdapter entAdapter = this.initCertServiceAdapter(); entAdapter.createX509Certificate(consumer, owner, pool, entitlement, product, new HashSet<>(), getProductModels(product, new HashSet<>(), "prefix", entitlement), new BigInteger("1234"), keyPair, true); }
@Test public void parseLEInt() { assertArrayEquals(new byte[]{21, -51, 91, 7}, EndianNumbers.parseLEInt(123456789)); }
@Test public void testOrchestration_G0Context() { setMockContextFactoryToReturnG0(); OutboundDocSubmissionDeferredResponseDelegate delegate = createOutboundDocSubmissionDeferredResponseDelegate(); OutboundDocSubmissionDeferredResponseOrchestratable dsOrchestratable = createOutboundDocSubmissionDeferredResponseOrchestratable(delegate); XDRAcknowledgementType response = ((OutboundDocSubmissionDeferredResponseOrchestratable) delegate .process(dsOrchestratable)).getResponse(); context.assertIsSatisfied(); assertNotNull(response); assertEquals(RESPONSE_ID_G0, response.getMessage().getStatus()); }
@Test public void loadEditableDescription() throws Exception { Account account = service.createViaEmail("abc99", "bar@gmail.com", "pppwww", lc); assertEquals("", service.loadEditableDescription(account)); service.updateDescription(account, "Hi I am a <*developer*>"); assertEquals("Hi I am a &lt;*developer*&gt;", service.loadEditableDescription(account)); }
@Test public void testGetDescription() { assertThat(field.getDescription()).isEqualTo(description); }
@Test public void assertGetTableTypes() { assertNull(metaData.getTableTypes()); }
@Test public void Verify_GetUsers_With_LastIdQueried_Null() { mockApiForSuccess(); TestObserver<List<User>> observer = userRepositoryUT.getUsers(null, false).test(); observer.awaitTerminalEvent(); observer.assertNoErrors(); observer.assertValueCount(1); List<User> users = observer.values().get(0); assertEquals(users.get(0).id(), 1); }
@Test(expected = InvalidParseOperationException.class) public void testInvalidParseOperationExceptionWithEmptyKey() throws InvalidParseOperationException, InvalidCreateOperationException { final Map<String, String> queryMap = new HashMap(); queryMap.put("", "value"); dslQueryHelper.createSelectDSLQuery(queryMap); }
@Test public void testDifferentCookieStringsCombination() { List<HttpCookie> cookies = Arrays.asList(cookieC, cookieD, cookieA, cookieB); String combinedHeader = cookieC.toString() + ";" + cookieD.toString() + ";" + cookieA.toString(); String cookieBStr = cookieB.toString(); Assert.assertEquals(CookieUtil.decodeCookies(Arrays.asList(combinedHeader, cookieBStr)), cookies); }
@Test public void shouldGetDefaultWithBuilder() { StringBinding stringBinding = MapBindings.get(file1.videoProperty()).thenOrDefault("nonExistingField", "Alice").asStringBinding(); assertEquals("Alice", stringBinding.get()); }
@Test public void openDocumentWithPasswordAES128() throws TaskIOException { assertNotNull(new DefaultPdfSourceOpener().open(PdfStreamSource.newInstanceWithPassword( getClass().getClassLoader().getResourceAsStream("pdf/encrypted_AES128_user_pwd.pdf"), "my source", "test"))); }
@Test public void shouldDefaultToGENERIC_SERVICE_ERRORIfMessageIsNotValidApiErrorEnumName() { BindingResult bindingResult = mock(BindingResult.class); List<ObjectError> errorsList = Collections.singletonList(new FieldError("someObj", "someField", UUID.randomUUID().toString())); when(bindingResult.getAllErrors()).thenReturn(errorsList); BindException ex = new BindException(bindingResult); ApiExceptionHandlerListenerResult result = listener.shouldHandleException(ex); validateResponse(result, true, Collections.singletonList(testProjectApiErrors.getGenericServiceError())); }
@Test public void testClassifyDefaultOutputValues() { ClassifyByRangeProcess cp = new ClassifyByRangeProcess(); SimpleFeatureCollection result = cp.execute( fc, "value", new String[] {"2", "5", "10"}, null, null, null, false, "class", null); assertEquals(3, result.size()); SimpleFeatureIterator iterator = result.features(); SimpleFeature ft = iterator.next(); assertEquals("1", ft.getAttribute("class")); ft = iterator.next(); assertEquals("3", ft.getAttribute("class")); }
@Test public final void testSES1770regression() throws Exception { when(manager.hasRepositoryConfig(null)).thenThrow(new NullPointerException()); WorkbenchRequest req = mock(WorkbenchRequest.class); when(req.getParameter(anyString())).thenReturn(SESAME.NIL.toString()); HttpServletResponse resp = mock(HttpServletResponse.class); when(resp.getOutputStream()).thenReturn(mock(ServletOutputStream.class)); servlet.service(req, resp, ""); }
@Test(expected = Exception.class) public void testaddLinkInformation() throws Exception { ospfNbr = new OspfNbrImpl(ospfArea, createOspfInterface(), Ip4Address.valueOf("10.10.10.10"), Ip4Address.valueOf("10.226.165.100"), 2, topologyForDeviceAndLink); List topTlv = new ArrayList(); topTlv.add(new RouterTlv(new TlvHeader())); ospfInterface.addLinkInformation(new OspfRouterImpl(), new OspfLinkTedImpl()); assertThat(ospfInterfaceChannelHandler, is(notNullValue())); }
@Test public void testCorpusChristi() { BoundingBox item = new BoundingBox(27.696581, -97.243682999999, 27.688781, -97.253063); BoundingBox shouldWork = new BoundingBox(27.72243591897344, -97.24737167358398, 27.63730702015522, -97.30916976928711); Assert.assertTrue(shouldWork.overlaps(item, 4)); }
@Test public void getAuthenticatedExperimentsByName() throws Exception { when(authorization.getUser("foo")).thenReturn(username); when(experiments.getExperiments(applicationName)).thenReturn(experimentList); authorizedExperimentGetter.getAuthorizedExperimentsByName("foo", applicationName); verify(authorization).getUser("foo"); verify(authorization).checkUserPermissions(username, applicationName, READ); verify(experiments).getExperiments(applicationName); }
@Test public void testHasMessage() { assertFalse(this.grc.hasMessage()); this.grc.setMessage("Hello"); assertTrue(this.grc.hasMessage()); }
@Test public void testCenter_Delim() { assertThat( StringUtils.center( "centerMe", 20, "*" ) , is( "******centerMe******" ) ); assertThat( StringUtils.center( "centerMe", 4, "*" ) , is( "centerMe" ) ); assertThat( StringUtils.center( " centerMe", 20, "*" ) , is( "** centerMe**" ) ); }
@Test public void testWhenOptionIsDefinedInMultipleSuperInterfacesMeetsGroupRequirement() { RightOptions rightOpts = PipelineOptionsFactory.as(RightOptions.class); rightOpts.setFoo("true"); rightOpts.setBoth("bar"); LeftOptions leftOpts = PipelineOptionsFactory.as(LeftOptions.class); leftOpts.setFoo("Untrue"); leftOpts.setBoth("Raise the"); rightOpts.setRunner(CrashingRunner.class); leftOpts.setRunner(CrashingRunner.class); PipelineOptionsValidator.validate(JoinedOptions.class, rightOpts); PipelineOptionsValidator.validate(JoinedOptions.class, leftOpts); }
@Test public void testResolve() throws Exception { UrlRewriteProcessor rewriter = EasyMock.createNiceMock( UrlRewriteProcessor.class ); ServletContext context = EasyMock.createNiceMock( ServletContext.class ); EasyMock.expect( context.getServletContextName() ).andReturn( "test-cluster-name" ).anyTimes(); EasyMock.expect( context.getInitParameter( "test-init-param-name" ) ).andReturn( "test-init-param-value" ).anyTimes(); EasyMock.expect( context.getAttribute( UrlRewriteServletContextListener.PROCESSOR_ATTRIBUTE_NAME ) ).andReturn( rewriter ).anyTimes(); FilterConfig config = EasyMock.createNiceMock( FilterConfig.class ); EasyMock.expect( config.getInitParameter( "test-filter-init-param-name" ) ).andReturn( "test-filter-init-param-value" ).anyTimes(); EasyMock.expect( config.getServletContext() ).andReturn( context ).anyTimes(); HttpServletRequest request = EasyMock.createNiceMock( HttpServletRequest.class ); HttpServletResponse response = EasyMock.createNiceMock( HttpServletResponse.class ); EasyMock.replay( rewriter, context, config, request, response ); UrlRewriteResponse rewriteResponse = new UrlRewriteResponse( config, request, response ); List<String> names = rewriteResponse.resolve( "test-filter-init-param-name" ); assertThat( names.size(), is( 1 ) ); assertThat( names.get( 0 ), is( "test-filter-init-param-value" ) ); }
@Test public void loadDataObjectTest() { MainDataObjectEditor objectEditor = createObjectEditor(); objectEditor.onContextChange(context); DataObject dataObject = context.getDataObject(); verify(view, times(1)).setName(dataObject.getName()); verify(view, times(1)).setPackageName(dataObject.getPackageName()); verify(view, times(1)).initSuperClassList(anyList(), eq(dataObject.getSuperClassName())); verify(view, times(1)).setLabel(AnnotationValueHandler.getStringValue(dataObject, Label.class.getName(), "value")); verify(view, times(1)).setDescription(AnnotationValueHandler.getStringValue(dataObject, Description.class.getName(), "value")); assertFalse(objectEditor.isReadonly()); }
@Test public void enrichEdmInternalSuccessfully() throws Exception { byte[] FILE_DATA = Files.readAllBytes(Paths.get("src/test/resources/Item_35834473_test.xml")); StormTaskTuple tuple = new StormTaskTuple(TASK_ID, TASK_NAME, SOURCE_VERSION_URL, FILE_DATA, new HashMap<String, String>(), null); String fileContent = new String(tuple.getFileData()); when(enrichmentWorker.process(eq(fileContent))).thenReturn("enriched file content"); enrichmentBolt.execute(tuple); Mockito.verify(outputCollector, Mockito.times(1)).emit(Mockito.any(List.class)); Mockito.verify(outputCollector, Mockito.times(0)).emit(Mockito.eq(AbstractDpsBolt.NOTIFICATION_STREAM_NAME), Mockito.any(List.class)); }
@Test public void shouldSerializeRowWithNull() { List columns = Arrays.asList(1511897796092L, 1L, "item_1", 10.0, null, null); GenericRow genericRow = new GenericRow(columns); KsqlJsonSerializer ksqlJsonDeserializer = new KsqlJsonSerializer(orderSchema); byte[] bytes = ksqlJsonDeserializer.serialize("t1", genericRow); String jsonString = new String(bytes); assertThat("Incorrect serialization.", jsonString, equalTo("{\"ORDERID\":1,\"ARRAYCOL\":null,\"ORDERUNITS\":10.0,\"ORDERTIME\":1511897796092,\"MAPCOL\":null,\"ITEMID\":\"item_1\"}")); }
@Test public void testGetColumnClass() { assertEquals(Study.class, d_model.getColumnClass(0)); assertEquals(Integer.class, d_model.getColumnClass(StudyCharacteristics.values().indexOf(BasicStudyCharacteristic.CENTERS) + 1)); assertEquals(Date.class, d_model.getColumnClass(StudyCharacteristics.values().indexOf(BasicStudyCharacteristic.STUDY_START) + 1)); }
@Test void unboundedQueueFixedSize() { final ThreadPoolExecutor executor = ThreadPoolExecutors.builder() .unboundedQueue() .fixedSize(1) .keepAlive(Duration.ofMinutes(1)) .build(); assertThat(executor.getCorePoolSize(), is(1)); assertThat(executor.getMaximumPoolSize(), is(1)); assertThat(executor.getQueue(), is(instanceOf(LinkedBlockingQueue.class))); assertThat(executor.allowsCoreThreadTimeOut(), is(false)); }
@Test public void isBoolean_shouldReturnTrue_whenStringIsTrue() throws Exception { assertEquals(true, validateTor.isBoolean("true")); assertEquals(true, validateTor.isBoolean("True")); assertEquals(true, validateTor.isBoolean("TRUE")); assertEquals(true, validateTor.isBoolean("TrUe")); assertEquals(true, validateTor.isBoolean("false")); assertEquals(true, validateTor.isBoolean("False")); assertEquals(true, validateTor.isBoolean("FALSE")); assertEquals(true, validateTor.isBoolean("fAlSe")); }
@Test(expected=IllegalArgumentException.class) public void testTooLittleParts() { lookup.lookup("192.168.4,1"); }
@Test public void test_with_wrong_wcmmode() throws Exception { when(request.getAttribute(WCMMode.REQUEST_ATTRIBUTE_NAME)).thenReturn(getWrongMode()); assertEquals(TagSupport.SKIP_BODY, getTag().doStartTag()); }
@Test public void whenCalibrationStartSetCalibrationButtonToFalse(){ FeatureAutoConfigurationListener listener = getConfigListener(); listener.onAutoConfigurationStarting(mFeature); verify(mView).setCalibrationButtonState(false); }
@Test(expected = RecordNotFoundException.class) public void testFindByUuid_invalid_uuid() { val actualDetector = serviceUnderTest.findByUuid(UUID.randomUUID().toString()); assertNotNull(actualDetector); }
@Test public void testDelete() throws JsonProcessingException { WireMock.stubFor( WireMock.delete(WireMock.urlEqualTo("/connectors/foo")) .withHeader(AUTHORIZATION.toString(), new EqualToPattern(AUTH_HEADER)) .willReturn(WireMock.aResponse() .withStatus(HttpStatus.SC_NO_CONTENT)) ); final ConnectResponse<String> response = client.delete("foo"); assertThat(response.datum(), OptionalMatchers.of(is("foo"))); assertThat("Expected no error!", !response.error().isPresent()); }
@Test public void testParse() throws ParseException { EdifactLexer lexer = new EdifactLexer(test); List<Segment> segments = lexer.tokenize(); assertEquals(15, segments.size()); for (Segment s : segments) { List<Composite> c = s.getComposites(); switch (s.getName()) { case "UNH": assertEquals(2, c.size()); assertEquals("1", c.get(0).getElement(0)); assertEquals("PAORES", c.get(1).getElement(0)); break; case "ODI": assertTrue(c.size() == 0); break; case "ERC": assertEquals(1, c.size()); assertEquals("A7V", c.get(0).getElement(0)); break; } } }
@Test public void picksUpNonTentativeChange() throws Exception{ TestChecker checker=getTestChecker(); Clock clock = new IncrementingClock(0); TxnStore supplier = new TestingTxnStore(clock,new TestingTimestampSource(),null,100l); supplier.recordNewTransaction(txn); TestDDLWatchRefresher refresher = new TestDDLWatchRefresher(checker,null,ef,supplier); refresher.setTimeout(false); final DDLChange testChange = ProtoUtil.createNoOpDDLChange(txn.getTxnId(),"change",DDLMessage.DDLChangeType.CHANGE_PK); checker.addChange(testChange); CountingListener assertionListener = new CountingListener(); boolean shouldCont=refresher.refreshDDL(Collections.<DDLWatcher.DDLListener>singleton(assertionListener)); Assert.assertTrue("Returned an error State!",shouldCont); Assert.assertEquals("Incorrect initiated count!",1,assertionListener.getCount(testChange)); }
@Test(expectedExceptions = ConditionEvaluationFailedException.class) public void testCheckConditionWhenParameterMapIsEmptyShouldThrowException() { underTest.checkCondition(request, parameterList); }
@Test(expected = IllegalArgumentException.class) public void shouldFailOnEncodeWrongType() { ZonedDateTimeConverter converter = new ZonedDateTimeConverter(); converter.encode(new Object(), null); }
@Test public void testUpdate() throws Exception { IDataSet db = database( support.loadFlatXmlDataStream(getClass(), "user.xml"), support.loadFlatXmlDataStream(getClass(), "wf_job.xml") ); support.cleanInsert(support.getConnection(tx), db); tx.commit(); Job job = dao.find(BigDecimal.ONE); job.setLabel("new label"); final BigDecimal parentId = BigDecimal.valueOf(2); job.setParentId(parentId); job.setTimestamp(new Timestamp(job.getTimestamp().getTime())); dao.update(job); tx.commit(); Job result = dao.find(BigDecimal.ONE); assertEquals("new label", result.getLabel()); assertEquals(parentId, result.getParentId()); }
@Test public void testAdd2() { byte[] two = new byte[32]; two[31] = (byte) 0xff; DataWord x = new DataWord(two); x.add(new DataWord(two)); System.out.println(Hex.toHexString(x.getData())); DataWord y = new DataWord(two); y.add2(new DataWord(two)); System.out.println(Hex.toHexString(y.getData())); }
@Test public void shouldDenyEvenForOpPlayer() { PermissionNode node = TestPermissions.WORLD_DOMINATION; Player player = mock(Player.class); boolean result = permissionsManager.hasPermission(player, node); assertThat(result, equalTo(false)); }
@Test public void read_500() { HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>(); Status status = rc.read(null, INVALID_RESOURCE, null, result); assertEquals(Status.ERROR, status); }
@Test public void testGetInstance() { Object o = accessor.getInstance(String.class); Assert.assertNotNull(o); }
@Test public void testFailNoNameAttribute() { Element configRoot = getDocument(new StringReader("<config/>")); try { new DomConfigPayloadBuilder(null).build(configRoot); fail("Expected exception for mismatch between def-name and xml name attribute."); } catch (ConfigurationRuntimeException e) { assertThat(e.getMessage(), is("The 'config' element must have a 'name' attribute that matches the name of the config definition.")); } }
@Test public void testEquals() { assertEquals(function, function); assertEquals(function, new CollisionFunctionLinear(2.0, 3.0)); assertNotEquals(function, null); assertNotEquals(function, new Object()); assertNotEquals(function, new CollisionFunctionLinear(1.5, 3.0)); assertNotEquals(function, new CollisionFunctionLinear(2.0, 3.5)); }
@Test public void startException() throws IOException { int port = EnvTestUtil.getFreePort(); JvmAgent.agentmain("port=" + port, null); try { JvmAgent.agentmain("port=" + port, null); } finally { JvmAgent.agentmain("mode=stop", null); } }
@Test public void testCreatePageWithPaginationModeCategory(){ final SwaggerConfluenceConfig swaggerConfluenceConfig = getTestSwaggerConfluenceConfig(); swaggerConfluenceConfig.setPaginationMode(PaginationMode.CATEGORY_PAGES); final String xhtml = IOUtils.readFull( AsciiDocToXHtmlServiceImplTest.class.getResourceAsStream( "/swagger-petstore-xhtml-example.html") ); for(int i = 0; i < 5; i++) { when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(RequestEntity.class), eq(String.class))).thenReturn(responseEntity); when(responseEntity.getBody()).thenReturn(GET_RESPONSE_NOT_FOUND); when(restTemplate.exchange(any(URI.class), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class))).thenReturn(responseEntity); when(responseEntity.getBody()).thenReturn(POST_RESPONSE); } final ArgumentCaptor<HttpEntity> httpEntityCaptor = ArgumentCaptor.forClass(HttpEntity.class); xHtmlToConfluenceService.postXHtmlToConfluence(swaggerConfluenceConfig, xhtml); verify(restTemplate, times(5)).exchange(any(URI.class), eq(HttpMethod.GET), any(RequestEntity.class), eq(String.class)); verify(restTemplate, times(5)).exchange(any(URI.class), eq(HttpMethod.POST), httpEntityCaptor.capture(), eq(String.class)); final HttpEntity<String> capturedHttpEntity = httpEntityCaptor.getAllValues().get(3); final String expectedPostBody = IOUtils.readFull( AsciiDocToXHtmlServiceImplTest.class.getResourceAsStream( "/swagger-confluence-create-json-body-definitions-example.json") ); assertNotNull("Failed to Capture RequeestEntity for POST", capturedHttpEntity); assertEquals("Unexpected JSON Post Body", expectedPostBody, capturedHttpEntity.getBody()); }
@Test public void testStarWithFollowing(){ Matcher matcher = new Matcher("a*b"); assertFalse(matcher.match("")); assertFalse(matcher.match("c")); assertTrue(matcher.match("b")); assertTrue(matcher.match("ab")); assertTrue(matcher.match("aab")); assertTrue(matcher.match("aaab")); }
@Test public void testCreateContentMergeWithExisting() { Owner owner1 = this.createOwner("test-owner-1", "Test Owner 1"); Owner owner2 = this.createOwner("test-owner-2", "Test Owner 2"); Content content1 = TestUtil.createContent("c1", "content-1"); Content content2 = this.createContent("c1", "content-1", owner2); ContentDTO cdto = this.modelTranslator.translate(content1, ContentDTO.class); Content output = this.contentManager.createContent(cdto, owner1); assertEquals(content2.getUuid(), output.getUuid()); assertEquals(content2, output); assertTrue(this.ownerContentCurator.isContentMappedToOwner(output, owner1)); assertTrue(this.ownerContentCurator.isContentMappedToOwner(output, owner2)); }
@Test public void testBuildNotification() { mNotification.parseMessageData(); Notification notification = mNotification.buildNotification(mContext, null); assertNotNull(notification); StoredNotification stored = mNotification.getStoredNotification(); assertNotNull(stored); assertEquals(stored.getType(), NotificationTypes.DISTRICT_POINTS_UPDATED); assertEquals(stored.getTitle(), mContext.getString(R.string.notification_district_points_title, "PNW")); assertEquals(stored.getBody(), mContext.getString(R.string.notification_district_points_updated, "Pacific Northwest")); assertEquals(stored.getMessageData(), mData.toString()); assertEquals(stored.getIntent(), MyTBAHelper.serializeIntent(mNotification.getIntent(mContext))); assertNotNull(stored.getTime()); }
@Test public void peekOnEmptyStackThrowsException() { final CircularStack<Integer> intStack = this.createStack(3); Assertions.assertThrows(IndexOutOfBoundsException.class, () -> intStack.peek()); }
@Test public void jmxReg() throws Exception{ activateMBean(); assertNotNull(context.getService(PropertyIndexStatsMBean.class)); MockOsgi.deactivate(mbean, context.bundleContext()); assertNull(context.getService(PropertyIndexStatsMBean.class)); }
@Test public void combineErrorMessages() { List<String> listOfErrorStrings = List.of(ERROR_MESSAGE_1, ERROR_MESSAGE_2); ValidationResult errors = ValidationResult.errors(listOfErrorStrings); String expectedString = StringUtils.join(listOfErrorStrings, ", "); assertEquals(2, errors.getErrors().size()); assertEquals(expectedString, errors.combineErrorMessages()); }
@Test public void removeEquipmentsFromJediThrowException() { when(jediDao.findById(jediId)).thenReturn(null); assertThatThrownBy(() -> serviceUnderTest.removeEquipmentsFromJedi(jediId)) .isInstanceOf(RuntimeException.class) .hasMessage(JEDI_NOT_FOUND); verify(jediDao).findById(jediId); }
@Test public void testArtifactGroupArtifact() throws Exception { assertThat(manager.artifact(String.format("%s:%s", ARTIFACT_GROUP_ID, ARTIFACT_ARTIFACT_ID)).getName()) .isEqualTo(ARTIFACT_NAME); }
@Test public void testEquals() { Model mo = new DefaultModel(); List<Node> ns = Util.newNodes(mo, 10); Offline s = new Offline(ns.get(0)); Assert.assertTrue(s.equals(s)); Assert.assertTrue(new Offline(ns.get(0)).equals(s)); Assert.assertEquals(new Offline(ns.get(0)).hashCode(), s.hashCode()); Assert.assertFalse(new Offline(ns.get(1)).equals(s)); }
@Test public void getId() throws Exception { store.put("doc1", jsonNode1); mockMvc .perform(get("/doc1")) .andExpect(status().isOk()) .andExpect(content().contentType(APPLICATION_JSON_UTF8)) .andExpect(jsonPath("$", is(map1))); }
@Test public void shutdownOutput() throws IOException { NPipeSocketImpl impl = new NPipeSocketImpl(); connect(impl); impl.shutdownOutput(); PipeChannelOutputStream outputStream = (PipeChannelOutputStream) impl.getOutputStream(); assertThat(outputStream.isShutdown()).isFalse(); impl.shutdownOutput(); assertThat(outputStream.isShutdown()).isTrue(); }
@Test public void testComputeChecksum() { ByteBuffer buffer = createMockPacket(); buffer.flip(); IPv4Packet packet = new IPv4Packet(buffer); TCPHeader tcpHeader = (TCPHeader) packet.getTransportHeader(); buffer.putShort(36, (short) 0x79); tcpHeader.computeChecksum(packet.getIpv4Header(), packet.getPayload()); int sum = 0x1234 + 0x5678 + 0xa2a2 + 0x4242 + 0x0006 + 0x0018; sum += 0x1234 + 0x5678 + 0x0000 + 0x0111 + 0x0000 + 0x0222 + 0x5000 + 0x0000 + 0x0000 + 0x0000; sum += 0x1122 + 0xeeff; while ((sum & ~0xffff) != 0) { sum = (sum & 0xffff) + (sum >> 16); } short checksum = (short) ~sum; Assert.assertEquals(checksum, tcpHeader.getChecksum()); }
@Test public void testDefaultValBoolean() { assertEquals("boolean", parser.getType("true")); assertEquals("boolean", parser.getType("false")); }
@Test void testUpperTail() { final NormalDistribution distribution = new NormalDistribution(0, 1); for (int i = 0; i < 100; i++) { final double upperTail = distribution.cumulativeProbability(i); if (i < 9) { Assertions.assertTrue(upperTail < 1); } else { Assertions.assertEquals(1, upperTail, 0d); } } }
@Test public void shouldSetValue() throws Exception { ConfigurationSetting setting = new ConfigurationSetting(); setting.setKey("COUNTRY"); repository.setValue(setting); verify(mapper).updateValue(setting); }
@Test public void testByteArray() throws Exception { DynamicByteArray dba = new DynamicByteArray(10, new MemoryEstimate()); dba.add((byte) 0); dba.add((byte) 1); dba.set(3, (byte) 3); dba.set(2, (byte) 2); dba.add((byte) 4); assertEquals("{0,1,2,3,4}", dba.toString()); assertEquals(5, dba.size()); byte[] val; val = new byte[0]; assertEquals(0, dba.compare(val, 0, 0, 2, 0)); assertTrue(dba.compare(val, 0, 0, 2, 1) < 0); val = new byte[]{3,42}; assertTrue(dba.compare(val, 0, 1, 2, 0) > 0); assertTrue(dba.compare(val, 0, 1, 2, 1) > 0); assertEquals(0, dba.compare(val, 0, 1, 3, 1)); assertTrue(dba.compare(val, 0, 1, 3, 2) < 0); assertTrue(dba.compare(val, 0, 2, 3, 1) > 0); val = new byte[256]; for(int b=-128; b < 128; ++b) { dba.add((byte) b); val[b+128] = (byte) b; } assertEquals(0, dba.compare(val, 0, 256, 5, 256)); assertTrue(dba.compare(val, 0, 1, 0, 1) > 0); assertTrue(dba.compare(val, 254, 1, 0, 1) > 0); assertTrue(dba.compare(val, 120, 1, 64, 1) > 0); val = new byte[1024]; Random rand = new Random(1701); for(int i = 0; i < val.length; ++i) { rand.nextBytes(val); } dba.add(val, 0, 1024); assertEquals(1285, dba.size()); assertEquals(0, dba.compare(val, 0, 1024, 261, 1024)); }
@Test public void testParse() throws HyracksDataException { for (int ccId : Arrays.asList(0xFFFF, 0, (int) Short.MAX_VALUE)) { JobIdFactory factory = new JobIdFactory(CcId.valueOf(ccId)); for (int i = 0; i < 1000; i++) { final JobId jobId = factory.create(); Assert.assertEquals(jobId.getId(), JobId.parse(jobId.toString()).getId()); Assert.assertEquals(jobId, JobId.parse(jobId.toString())); Assert.assertFalse(jobId.toString(), jobId.toString().contains("-")); System.err.println(jobId.toString()); } } }
@Test public void shouldRejectEmptyMaps() { final MapContains filter = new MapContains(KEY1); boolean accepted = filter.test(new HashMap<>()); assertFalse(accepted); }
@Test public void route_with_many_holes_attributes_outside_prefixrange() { final RpslObject route = RpslObject.parse("route:195.190.20.0/24\norigin:AS43746\nholes:94.73.128.0/24\nholes:94.73.134.0/24"); when(update.getUpdatedObject()).thenReturn(route); subject.validate(update, updateContext); List<RpslAttribute> rpslAttributes = route.findAttributes(AttributeType.HOLES); verify(updateContext, times(1)).addMessage(update, rpslAttributes.get(0), UpdateMessages.invalidRouteRange("94.73.128.0/24")); verify(updateContext, times(1)).addMessage(update, rpslAttributes.get(1), UpdateMessages.invalidRouteRange("94.73.134.0/24")); }
@Test public void shouldReturnAddonVersionContentToAppend() { when(configurationServiceMock.getConfiguration().getString(WORLDPAY_ADDON_VERSION_KEY)).thenReturn(ADDON_VERSION); final String result = testObj.appendContent(); assertTrue(result.contains("Worldpay Plugin Version: " + ADDON_VERSION)); }
@Test void jsonSchemaArray() throws Exception { final Ui payload = service.convert(load("rest-api.json"), "en", null).toCompletableFuture().get(); final JsonSchema commonConfig = payload .getJsonSchema() .getProperties() .values() .iterator() .next() .getProperties() .entrySet() .stream() .filter(e -> e.getKey().equals("commonConfig")) .findFirst() .map(Map.Entry::getValue) .orElseThrow(IllegalStateException::new); assertTrue(commonConfig.getProperties().keySet().stream().anyMatch(p -> p.equals("fields"))); assertTrue(commonConfig.getProperties().keySet().stream().noneMatch(p -> p.equals("fields[]"))); }
@Test public void isSuccessfulShouldReturnFalseWhenTransactionStatusIsNull() { when(paymentTransactionEntryModelMock.getType()).thenReturn(PaymentTransactionType.AUTHORIZATION); when(paymentTransactionEntryModelMock.getPending()).thenReturn(false); when(paymentTransactionEntryModelMock.getTransactionStatus()).thenReturn(null); final boolean result = testObj.isSuccessful(paymentTransactionEntryModelMock); assertFalse(result); }
@Test public void testGetUrlInToken() { final String url1 = "perspective|#screen1,§screen2$#screen3,!screen4"; final String url2 = "!screen1,#screen2"; assertEquals("!screen1", BookmarkableUrlHelper.getUrlToken(url2, "screen1")); assertEquals("#screen2", BookmarkableUrlHelper.getUrlToken(url2, "screen2")); assertEquals("§screen2", BookmarkableUrlHelper.getUrlToken(url1, "screen2")); assertEquals("#screen1", BookmarkableUrlHelper.getUrlToken(url1, "screen1")); assertEquals("#screen3", BookmarkableUrlHelper.getUrlToken(url1, "screen3")); assertEquals("!screen4", BookmarkableUrlHelper.getUrlToken(url1, "screen4")); }
@Test public void decorateRabbitTemplate_appends_when_absent() { RabbitTemplate template = new RabbitTemplate(); template.setBeforePublishPostProcessors(new UnzipPostProcessor()); assertThat(rabbitTracing.decorateRabbitTemplate(template)) .extracting("beforePublishPostProcessors") .satisfies(postProcessors -> assertThat(((Collection) postProcessors)).anyMatch( postProcessor -> postProcessor instanceof TracingMessagePostProcessor )); }
@Test public void testDispatch() { event.dispatch(handler); verify(handler).onMoveDividerEnd(eq(event)); }
@Test public void getPortOutputZero() { final DatabaseProperties databaseProperties = new DatabaseProperties("foo", 0, "foo"); Assert.assertEquals(0, databaseProperties.getPort()); }
@Test public void on_a_set_before_combine() { MutableLiveData<String> liveDataA = new MutableLiveData<>(); MutableLiveData<String> liveDataB = new MutableLiveData<>(); liveDataA.setValue("Hello, "); LiveData<String> combined = LiveDataUtil.combineLatest(liveDataA, liveDataB, (a, b) -> a + b); liveDataB.setValue("World!"); assertEquals("Hello, World!", getValue(combined)); }
@Test public void testGetElement() throws IOException { final InsituReader reader = new InsituReader("whatever"); try { reader.getElementCount(); fail("IllegalStateException expected"); } catch (IllegalStateException expected) { } }
@Test void getIfAbsent() { assertEquals( -1, map.getIfAbsent( 0, -1 ) ); assertEquals( -1, map.getIfAbsent( 1, -1 ) ); assertEquals( -1, map.getIfAbsent( 2, -1 ) ); assertEquals( -1, map.getIfAbsent( 3, -1 ) ); map.putAll( newWithKeysValues( 0, 10, 1, 11, 2, 12 ) ); assertEquals( 10, map.getIfAbsent( 0, -1 ) ); assertEquals( 11, map.getIfAbsent( 1, -1 ) ); assertEquals( 12, map.getIfAbsent( 2, -1 ) ); assertEquals( -1, map.getIfAbsent( 3, -1 ) ); }
@Test public void testTransferTo() throws IOException { RegularFile file = regularFile(10); FileChannel channel = channel(file, READ); ByteBufferChannel writeChannel = new ByteBufferChannel(buffer("1234567890")); assertEquals(10, channel.transferTo(0, 100, writeChannel)); assertEquals(0, channel.position()); }
@Test public void filterDuplicateURLs() throws Exception { final File d1 = new File(getDirectory(), "one"); createFile(new File(d1, "test/foo"), "a"); final URLClassLoader cl1 = new URLClassLoader(new URL[] { d1.toURI().toURL() }); final URLClassLoader cl2 = new URLClassLoader(cl1.getURLs(), cl1); assertEquals(asList("a"), allResourceLines(cl2, "test/foo")); }
@Test public void throwsOnInvalidParameters() { assertThatExceptionOfType(PlaceholderFunctionSignatureInvalidException.class).isThrownBy(() -> function.apply(KNOWN_INPUT, "()", expressionResolver) ); assertThatExceptionOfType(PlaceholderFunctionSignatureInvalidException.class).isThrownBy(() -> function.apply(KNOWN_INPUT, "(thing:id)", expressionResolver) ); assertThatExceptionOfType(PlaceholderFunctionSignatureInvalidException.class).isThrownBy(() -> function.apply(KNOWN_INPUT, "", expressionResolver) ); }
@Test public void ifNoLowerBoundSpecifiedAssumeNoLowerLimit() { RangeBand<Integer> noLowBound = new RangeBand<>(null, 10); assertTrue(noLowBound.contains(-10)); assertTrue(noLowBound.contains(10)); assertFalse(noLowBound.contains(11)); }
@Test public void connectionTest() { Date date = new Date(); Assert.assertTrue(CompareUtils.compare(100, new BigDecimal("100"))); Assert.assertTrue(CompareUtils.compare(new BigDecimal("100"), 100.0D)); Assert.assertTrue(CompareUtils.compare(Arrays.asList(1, 2, 3), Arrays.asList("3", "2", "1"))); Assert.assertFalse(CompareUtils.compare(Arrays.asList(1, 2, 3), Arrays.asList("3", "3", "1"))); Assert.assertFalse(CompareUtils.compare(Arrays.asList(1, 2, 3), Arrays.asList("3", "1"))); Assert.assertFalse(CompareUtils.compare(Arrays.asList(1, 2, 3), Collections.emptyList())); Assert.assertFalse(CompareUtils.compare(Collections.emptyList(), Arrays.asList(1, 2, 3))); Assert.assertTrue(CompareUtils.compare(Arrays.asList(date, 3), Arrays.asList("3", DateFormatter.toString(date, "yyyy-MM-dd")))); }
@Test public void tryToCreateInstanceWithInvalidPolicyId() { assertThatExceptionOfType(PolicyIdInvalidException.class) .isThrownBy(() -> RetrieveSubjects.of("undefined", TestConstants.Policy.LABEL, EMPTY_DITTO_HEADERS)); }
@Test public void envelopsTest03() { Rectangle one = new Rectangle(0, 0, 10, 10); Rectangle two = new Rectangle(5, 5, 10, 10); boolean result = one.contains(two); Assert.assertFalse(result); }
@Test public void testWinkler10() { roughlyEquals(0.921, JaroWinkler.similarity("MICHELLE", "MICHAEL")); }
@Test public void test_to_domain() { final Budget expectedDomain = budgetMapper.toDomain(contract()); assertEquals(expectedDomain, domain()); }
@Test public void testFormat() { TimestampField field = new TimestampField("ts", "EEE MMM dd HH:mm:ss zzz YYYY"); assertEquals( field.get(new ImmutableMap.Builder<String, Object>() .put("ts", "Fri Oct 03 18:25:08 GMT 2014") .put("field1", "value1").build()), new DateTime("2014-10-03T18:25:08.000Z").getMillis()); }
@Test public void testImportUserSettings() throws Exception { UserExport user = new UserExport(); user.setUsername( "pentaho" ); user.addUserSetting( new ExportManifestUserSetting( "theme", "crystal" ) ); user.addUserSetting( new ExportManifestUserSetting( "language", "en_US" ) ); IAnyUserSettingService userSettingService = Mockito.mock( IAnyUserSettingService.class ); PentahoSystem.registerObject( userSettingService ); importHandler.setOverwriteFile( true ); importHandler.importUserSettings( user ); Mockito.verify( userSettingService ).setUserSetting( "pentaho", "theme", "crystal" ); Mockito.verify( userSettingService ).setUserSetting( "pentaho", "language", "en_US" ); }
@Test public void testQueryAllGroup() throws Exception { Map<String, Object> result = workerGroupService.queryAllGroup(); Set<String> workerGroups = (Set<String>) result.get(Constants.DATA_LIST); Assert.assertEquals(workerGroups.size(), 1); }
@Test(expected = WrongReferenceAttributeValueException.class) public void testSemanticsReqAttributeWithNullValue() throws Exception { System.out.println("testSemanticsReqAttributeWithNullValue()"); reqAttribute.setValue(null); classInstance.checkAttributeSemantics(sess, resource, attributeToCheck); }
@Test public void testAbsentBackPressure() throws Exception { final Map<String, String> pathParameters = new HashMap<>(); pathParameters.put(JobIDPathParameter.KEY, TEST_JOB_ID_BACK_PRESSURE_STATS_ABSENT.toString()); pathParameters.put(JobVertexIdPathParameter.KEY, new JobVertexID().toString()); final HandlerRequest<EmptyRequestBody, JobVertexMessageParameters> request = new HandlerRequest<>( EmptyRequestBody.getInstance(), new JobVertexMessageParameters(), pathParameters, Collections.emptyMap()); final CompletableFuture<JobVertexBackPressureInfo> jobVertexBackPressureInfoCompletableFuture = jobVertexBackPressureHandler.handleRequest(request, restfulGateway); final JobVertexBackPressureInfo jobVertexBackPressureInfo = jobVertexBackPressureInfoCompletableFuture.get(); assertThat(jobVertexBackPressureInfo.getStatus(), equalTo(VertexBackPressureStatus.DEPRECATED)); }
@Test public void convertToFloatNull() { Float df = null; Float d = converter.toFloat(df); assertNull(d); }
@Test public void testDisableWarningHighlight() { final String warningElementSelector = "." + WARNING_CSS_CLASS; final HTMLElement element = mock(HTMLElement.class); final HTMLElement parentElement = mock(HTMLElement.class); final NodeList<Element> warningElements = spy(new NodeList<>()); final Element warningElement1 = mock(Element.class); final Element warningElement2 = mock(Element.class); doReturn(warningElement1).when(warningElements).getAt(0); doReturn(warningElement2).when(warningElements).getAt(1); doReturn(element).when(view).getElement(); when(parentElement.querySelectorAll(warningElementSelector)).thenReturn(warningElements); element.parentNode = parentElement; warningElements.length = 2; warningElement1.classList = mock(DOMTokenList.class); warningElement2.classList = mock(DOMTokenList.class); view.disableWarningHighlight(); verify(warningElement1.classList).remove(WARNING_CSS_CLASS); verify(warningElement2.classList).remove(WARNING_CSS_CLASS); }
@Test public void testGetProjectByUri() { when(restTemplate.getForObject(URI, Project.class)).thenReturn(project); final Project result = service.getProjectByUri(URI); assertThat(result, is(project)); }
@Test public void testHasKey() { EasyMockSupport support = new EasyMockSupport(); MetaDataProvider original = createProvider(support); Map<String, Object> extras = createExtraColumns(); support.replayAll(); ExtraColumnsMetaDataProvider provider = new ExtraColumnsMetaDataProvider(original, extras); assertTrue(provider.hasKey(ourOriginalColumns[0])); assertTrue(provider.hasKey(ourOriginalColumns[1])); assertTrue(provider.hasKey("col3")); assertTrue(provider.hasKey("col4")); assertTrue(provider.hasKey(ourExtraColumns[2])); assertFalse(provider.hasKey("col6")); support.verifyAll(); }
@Test public void toggleRowExpansion() { doReturn(true).when(collectionEditorViewImplSpy).isShown(); collectionEditorViewImplSpy.toggleRowExpansion(); verify(collectionEditorViewImplSpy, times(1)).toggleRowExpansion(false); reset(collectionEditorViewImplSpy); doReturn(false).when(collectionEditorViewImplSpy).isShown(); collectionEditorViewImplSpy.toggleRowExpansion(); verify(collectionEditorViewImplSpy, times(1)).toggleRowExpansion(true); }
@Test(expected = RuntimeException.class) public void getLastLocation() throws Exception { api.getLastLocation(mock(RxLostApiClient.class)); }
@Test public void create_NanosTooHigh_PositiveTime() { thrown.expect(IllegalArgumentException.class); thrown.expectMessage("'nanos' is greater than maximum (999999999): 1000000000"); Timestamp.create(1, 1000000000); }
@Test public void testDiffIntegerNtimesTtooSmall() { assertThatIllegalArgumentException() .isThrownBy(() -> Diff.values(_dataInteger, -1)); }
@Test public void testNonEmptyNonString() { assertFalse(Strings.isNullOrEmpty(new Mock("foo"))); }
@Test public void testGetParameters() throws Exception { String abbrName = "abbr name"; String name = "name"; TimePeriodType entity = new TimePeriodType(); entity.setName(name); entity.setAbbrName(abbrName); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("abbrName", abbrName); expected.put("name", name); expected.put("status", RowStatus.ACTIVE); expected.put("userGroups", groups); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void testQueryValueStringFlagWithGlobalRegionValueSet() throws Exception { MockApplicableRegionSet mock = new MockApplicableRegionSet(); StringFlag flag = new StringFlag("test"); ProtectedRegion global = mock.global(); global.setFlag(flag, "hello"); FlagValueCalculator result = mock.getFlagCalculator(); assertThat(result.queryValue(null, flag), is("hello")); }
@Test public void when_booleanParameterNotPresent_then_returnNullInsteadOfExceptions() { RequestParameterSet parameterset = createDummyParameterSet(); assertThat(parameterset.getAsBoolean("notthere"), nullValue(Boolean.class)); }
@Test void size() throws IOException { final CodeClass clazz = parse(Path.testClass("ExampleConcreteClass")); assertEquals(518, clazz.getCodeSize()); assertEquals(2221, clazz.getTotalSize()); }
@Test public void getExecutionVariablesTest3() { Map<String, String> executionVariables = CommandExecution.getExecutionVariables(ImmutableMap.of("a", "1", "b", "2"), new CommandExecution(command, 1, 0, null, ImmutableMap.of("c", "3"))); assertEquals(ImmutableMap.of("a", "1", "b", "2", "c", "3"), executionVariables); }
@Test public void No_Paths() { PropertyTree tree = PropertyTree.build(); assertThat(tree, nullValue()); }
@Test void transformParametersWithNoBackingApps() { BackingApplicationsParametersTransformationService service = new BackingApplicationsParametersTransformationService(Collections.emptyList()); BackingApplications backingApplications = BackingApplications.builder() .build(); StepVerifier .create(service.transformParameters(backingApplications, new HashMap<>())) .expectNext(backingApplications) .verifyComplete(); }
@Test public void isDateValid_isCorrectDatePassed_returnsTrue() { String dateOfBirth = "31/07/2019"; boolean isValidDate = SUT.isDateValid(dateOfBirth); assertThat(true, is(isValidDate)); }
@Test(expected=NumberFormatException.class) public void addDoubleNpeIfNaN() { final JsonArrayBuilder builder = Json.createArrayBuilder(); builder.add((double) Double.NaN); }
@Test public void testSqlLine_emptyArgs() throws Exception { BeamSqlLine.main(new String[] {}); }
@Test public void checkGetJoinColumnsSize1Roles() throws ODataJPAModelException { EntityType<?> et = helper.getEntityType(BusinessPartnerRole.class); Attribute<?, ?> jpaAttribute = helper.getDeclaredAttribute(et, "businessPartner"); IntermediateNavigationProperty property = new IntermediateNavigationProperty(new JPADefaultEdmNameBuilder(PUNIT_NAME), schema.getEntityType(et.getJavaType()), jpaAttribute, schema); assertEquals(1, property.getJoinColumns().size()); }
@Test void testRunSingleTransferError() { Stream<TransferBatchRequest> stream = createStream(1, Optional.empty()); FaultyBatchProcessor faultyBatchProcessor = new FaultyBatchProcessor(1); ParallelTransferProcessor transferProcessor = new ParallelTransferProcessor(faultyBatchProcessor); CompletableFuture<TransferProcessorResult> result = transferProcessor.runStateTransfer(stream, 1); TransferProcessorResult res = result.join(); assertThat(res.getTransferState()).isEqualTo(TRANSFER_FAILED); assertThat(res.getCauseOfFailure().isPresent()).isTrue(); assertThat(res.getCauseOfFailure().get()) .isInstanceOf(TransferSegmentException.class) .hasRootCauseInstanceOf(StateTransferBatchProcessorException.class); }
@Test public void shouldReturnErrorStatusOnAnyException() { when(mongoDatabase.runCommand(new Document().append("ping", 1))).thenThrow(new MongoException("SomeException")); final StatusDetail statusDetail = testee.statusDetails().get(0); assertThat(statusDetail.getStatus(), is(ERROR)); assertThat(statusDetail.getMessage(), containsString("Exception during database check")); }
@Test public void testHost() { assertEquals("[fec0::abcd%251]", UriComponent.decode("[fec0::abcd%251]", UriComponent.Type.HOST)); }
@Test public void testEquals() { final B2Bucket bucket = new B2Bucket( ACCOUNT_ID, bucketId(1), BUCKET_NAME, BUCKET_TYPE, bucketInfo, b2CorsRules, lifecycleRules, optionsSet, 1); final String bucketJson = B2Json.toJsonOrThrowRuntime(bucket); final B2Bucket convertedBucket = B2Json.fromJsonOrThrowRuntime(bucketJson, B2Bucket.class); assertEquals(bucket, convertedBucket); }
@Test(expected = IllegalArgumentException.class) public void testSubpath_excessiveStart() { Path p = new GlusterPath(mockFileSystem, "/foo"); p.subpath(4, 5); }
@Test public void testChannelMaxDefault() throws Exception { Transport transport = Proton.transport(); assertEquals("Unesxpected value for channel-max", 65535, transport.getChannelMax()); }
@Test public void testGetDriverClass() { assertEquals( ImpalaDatabaseMeta.DRIVER_CLASS_NAME, impalaDatabaseMeta.getDriverClass() ); }
@Test public void testCancel() throws Exception { assertFalse(this.core.cancelRequest(1L)); }
@Test public void testParseTooManyParts() { thrown.expect(IllegalArgumentException.class); ExtendedCommunity.parse("1:1:1:1"); }
@Test void shouldTrimLeft() { assertEquals("World!", trimPrefix("Hello, World!", "Hello, ")); }
@Test void describeShouldReturnAnIdentifiableDescription() { final LeaseLock leaseLock = new LeaseLock("namespace", "name", "1337"); final String description = leaseLock.describe(); assertEquals("LeaseLock: namespace - name (1337)", description); }
@Test public void testISO8601WithTZ00ZRepeatable10AndPeriodAndTZ0230Value() { Expiration result = oracle.guess("R10/2019-07-14T13:34+02:30/P33M"); assertEquals(Expiration.DATETIME, result); }
@Test public void getDefaultSiblings() { UscAddress accountAddress = randomAddress(); Repository repository = createRepositoryImpl(config); RemascStorageProvider provider = new RemascStorageProvider(repository, accountAddress); SortedMap<Long, List<Sibling>> map = provider.getSiblings(); Assert.assertNotNull(map); Assert.assertTrue(map.isEmpty()); }
@Test public void deliverySuccessShouldIncrementMetric() throws Exception { FakeMail fakeMail = FakeMail.defaultFakeMail(); when(mailDelivrer.deliver(fakeMail)).thenReturn(ExecutionResult.success()); testee.attemptDelivery(fakeMail); assertThat(metricFactory.countFor(OUTGOING_MAILS)) .isEqualTo(1); }
@Test public void testProgramGeneration() throws Exception { cConf.set(Constants.AppFabric.OUTPUT_DIR, "programs"); LocationFactory lf = new LocalLocationFactory(TEMP_FOLDER.newFolder()); Location namespaceLocation = lf.create(DefaultId.APPLICATION.getNamespace()); Locations.mkdirsIfNotExists(namespaceLocation); LocationFactory jarLf = new LocalLocationFactory(TEMP_FOLDER.newFolder()); Location appArchive = AppJarHelper.createDeploymentJar(jarLf, AllProgramsApp.class); ApplicationSpecification appSpec = Specifications.from(new AllProgramsApp()); ApplicationSpecificationAdapter adapter = ApplicationSpecificationAdapter.create(); ApplicationSpecification newSpec = adapter.fromJson(adapter.toJson(appSpec)); ProgramGenerationStage pgmStage = new ProgramGenerationStage(); pgmStage.process(new StageContext(Object.class)); pgmStage.process(new ApplicationDeployable(NamespaceId.DEFAULT.artifact("AllProgramApp", "1.0"), appArchive, DefaultId.APPLICATION, newSpec, null, ApplicationDeployScope.USER)); Assert.assertTrue(true); }
@Test public void newInstance_shouldReturnInstanceOfExtraDataConverter() { ExtraDataConverter extraDataConverterTest = ExtraDataConverter.newInstance(); assertNotNull(extraDataConverterTest); }
@Test public void propagateVoidMapsInterruptedExceptionToIllegalStateException() throws InterruptedException { final InterruptedExceptionTestRunner runner = new InterruptedExceptionTestRunner( () -> { ExceptionUtils.propagateVoid(() -> Thread.sleep(1000)); return null; }); runner.run(); MatcherAssert.assertThat(runner.getUnhandledException(), IsNull.notNullValue()); MatcherAssert.assertThat( runner.getUnhandledException(), IsInstanceOf.instanceOf(IllegalStateException.class)); }
@Test public void getClosedIssueInfoTest() throws Exception { List<Map<String, Object>> closedIssueInfo = new ArrayList<>(); Map<String, Object> issueinfo = new HashMap<>(); issueinfo.put("resourceid", "i-12344"); issueinfo.put("issueStatus", "closed"); issueinfo.put("reason-to-close", "Kernel version compliant"); closedIssueInfo.add(issueinfo); ReflectionTestUtils.setField(patchingRepositoryImpl, "esUrl", "dummyEsURL"); String response = "{\"took\":2205,\"timed_out\":false,\"_shards\":{\"total\":3,\"successful\":3,\"failed\":0},\"hits\":{\"total\":4151,\"max_score\":3.7548497," + "\"hits\":[{\"_index\":\"aws_ec2\",\"_type\":\"_type\",\"_id\":\"_id\",\"_score\":3.7548497,\"_routing\":\"_routing\",\"_parent\":\"_parent\",\"_source\":{\"severity\":\"high\",\"_resourceid\":\"_resourceid\",\"ruleCategory\":\"security\",\"closeddate\":\"2018-02-15T05:38:34.533Z\",\"_docid\":\"_docid\",\"failedTypes\":\"[spaceandsat, ldap, rhnsystemdetails, ssh]\",\"targetType\":\"ec2\",\"type\":\"issue\",\"accountid\":\"accountid\",\"executionId\":\"executionId\",\"issueStatus\":\"closed\",\"createdDate\":\"2018-02-15T04:38:23.754Z\",\"policyId\":\"PacMan_cloud-kernel-compliance_version-1\",\"accountname\":\"test\",\"pac_ds\":\"aws\",\"modifiedDate\":\"2018-02-15T04:38:23.754Z\",\"reason-to-close\":\"{sourceType=spaceandsat, kernelVersion=kernelVersion, description=Kernel version is compliant}\",\"ruleId\":\"PacMan_cloud-kernel-compliance_version-1_Ec2-Kernel-Compliance-Rule_ec2\",\"region\":\"region\",\"desc\":\"Kernel version not found.validated using:spaceandsat/ldap/rhnsystemdetails/ssh\"}}]}}"; mockStatic(PacHttpUtils.class); when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response); patchingRepositoryImpl.getClosedIssueInfo("aws-all", 100); String dummyResponse = "{\"took\":2205,\"timed_out\":false,\"_shards\":{\"total\":3,\"successful\":3,\"failed\":0}}"; when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(dummyResponse); patchingRepositoryImpl.getClosedIssueInfo("aws-all", 100); String emptyHits = "{\"took\":2205,\"timed_out\":false,\"_shards\":{\"total\":3,\"successful\":3,\"failed\":0},\"hits\":{\"total\":4151,\"max_score\":3.7548497}}"; when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(emptyHits); patchingRepositoryImpl.getClosedIssueInfo("aws-all", 100); when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new RuntimeException()); assertThatThrownBy(() -> patchingRepositoryImpl.getClosedIssueInfo("aws-all", 100)).isInstanceOf( DataException.class); }
@Test public void testCompare_DifferentSymbol() throws Exception { SimpleAtomComparator comparator = new SimpleAtomComparator(); IAtom a1 = builder.newInstance(IAtom.class, "C"); IAtom a2 = builder.newInstance(IAtom.class, "O"); Assert.assertTrue("oxygen should rank above carbon", comparator.compare(a1, a2) < 0); Assert.assertTrue("oxygen should rank above carbon (inverse)", comparator.compare(a2, a1) > 0); }
@Test public void coverage() { BlackFxOptionSmileVolatilities test1 = BlackFxOptionSmileVolatilities.of(NAME, CURRENCY_PAIR, VAL_DATE_TIME, SMILE_TERM); coverImmutableBean(test1); BlackFxOptionSmileVolatilities test2 = BlackFxOptionSmileVolatilities.of( FxOptionVolatilitiesName.of("Boo"), CURRENCY_PAIR.inverse(), ZonedDateTime.of(2015, 12, 21, 11, 15, 0, 0, ZoneId.of("Z")), SMILE_TERM); coverBeanEquals(test1, test2); }
@Test public void createTerminatingServiceActionException() throws Exception { BigInteger dpnid = BigInteger.ZERO; Throwable throwable = new Throwable(); CompletableFuture<RpcResult<Void>> future = new CompletableFuture<>(); future.completeExceptionally(throwable); when(itmRpcService.createTerminatingServiceActions(any())).thenReturn(future); SfcGeniusTsaWriter writer = new SfcGeniusTsaWriter(itmRpcService, executor); CompletableFuture<Void> completableFuture = writer.createTerminatingServiceAction(dpnid); verify(executor).execute(runnableCaptor.capture()); runnableCaptor.getValue().run(); assertThat(completableFuture.isCompletedExceptionally(), is(true)); try { completableFuture.join(); } catch (CompletionException e) { assertThat(e.getCause(), is(instanceOf(SfcGeniusRuntimeException.class))); assertThat(e.getCause().getCause(), is(instanceOf(RuntimeException.class))); assertThat(e.getCause().getCause().getCause(), is(instanceOf(ExecutionException.class))); assertThat(e.getCause().getCause().getCause().getCause(), sameInstance(throwable)); } }
@Test public void testDumbPartitionerGetPartition(){ DumbPartitioner d = new DumbPartitioner(); assertEquals("",d.getPartition()); }
@Test public void shouldBlockAllAccessIfResourceDisabled() throws Exception { CoreTokenResourceAuthzModule testModule = new CoreTokenResourceAuthzModule(mockConfig, mockDebug, false); SSOTokenContext mockSSOTokenContext = mock(SSOTokenContext.class); Promise<AuthorizationResult, ResourceException> result = testModule.authorize(mockSSOTokenContext); assertFalse(result.get().isAuthorized()); }
@Test public void http_204_turns_empty_body_into_alias_of_OptionalInt() throws IOException { assertThat(emptyContainerDecoder.decode(HTTP_204, Alias2.class)).isEqualTo(Alias2.of(OptionalInt.empty())); }
@Test public void testStartAgent() { starter.startAgent(); ThreadUtils.sleep(5000); starter.stopAgent(); }
@Test public void testSynset(){ Synset synset = new Synset(); assertNull(synset.getId()); }
@Test public void testWithoutGroupService() { ApplicationContext context = mock(ApplicationContext.class); when(context.getBeanNamesForType(Object.class)).thenReturn(new String[]{"service1"}); Class withoutGroupServiceClass = WithoutGroupService.class; when(context.getType("service1")).thenReturn(withoutGroupServiceClass); RopContext registryMethod = new DefaultRopContext(context); ServiceMethodHandler handler = registryMethod.getServiceMethodHandler("service.method1", "1.0"); ServiceMethodDefinition definition = handler.getServiceMethodDefinition(); assertNotNull(definition); assertEquals(definition.getMethod(), "service.method1"); assertEquals(definition.getMethodTitle(), "测试方法1"); assertEquals(definition.getMethodGroup(), "GROUP1"); assertEquals(definition.getMethodGroupTitle(), "分组1"); assertEquals(definition.getTags(), new String[]{"TAG1", "TAG2"}); assertEquals(definition.isIgnoreSign(), true); assertEquals(definition.isNeedInSession(), false); assertEquals(definition.getTimeout(), 100); assertEquals(definition.getVersion(), "1.0"); }
@Test public void installEgressFlowNoneActionUsingVxlan() throws Exception { Capture<OFFlowMod> capture = prepareForInstallTest(); FlowEncapsulationType encapsulationType = FlowEncapsulationType.TRANSIT_VLAN; switchManager.installEgressFlow(dpid, cookieHex, cookie, inputPort, outputPort, transitVlanId, 0, OutputVlanType.NONE, encapsulationType, false); assertEquals( scheme.egressNoneFlowMod(dpid, inputPort, outputPort, transitVlanId, cookie, encapsulationType), capture.getValue()); }
@Test public void runProcess_PerformsAsExpected_OnSuccessfulCommandExecution() throws IOException { Path tempDir = Paths.get(System.getProperty("java.io.tmpdir"), File.separator, "test"); ProcessRunner.run("mkdir", tempDir.toString()).run(); boolean runningOnWindows = runningOnWindows(); String[] command = runningOnWindows ? new String[] {"dir", tempDir.toString()} : new String[] {"ls", "-la", tempDir.toString()}; ProcessRunner.ExecutionResult executionResult = ProcessRunner.run(command).bufferOutput(true).runAndWait(); assertEquals(executionResult.getExitCode(), 0); assertTrue(executionResult.getBufferedStandardError().isEmpty()); if (runningOnWindows) { assertTrue(executionResult.getBufferedStandardOutput().isEmpty()); } else { assertEquals("total 0", executionResult.getBufferedStandardOutput().get(0)); } }
@Test(expected = PropertyAccessException.class) public void testGetPropertyBoolean_EmptyBooleanValue() throws PropertyAccessException { PropertyFileDAO propDAO = loadTestProperties(); propDAO.getPropertyBoolean(TEST_PROPERTIES_NAME, "booleanErrorTest"); }
@Test public void shouldEnableFlagN() { Instruction instruction = new Sub8BitRegisterToAIntoA(z80, ANY_8BIT_SOURCE_REGISTER); instruction.execute(); assertTrue(z80.isFlagNEnabled()); }
@Test public void testSeekToNewSource() throws IOException { ByteArrayWrapper wrapper = createInstance(16); assertFalse(wrapper.seekToNewSource(1234)); wrapper.close(); }
@Test public void formula33() throws RecognitionException { ReadExpressionTester exp = new ReadExpressionTester(formula("=sinh(1.0)")); assertThat(exp.getExpression().getName(), equalTo("sinh(1.0)")); VDouble result = (VDouble) exp.getFunction().readValue(); assertThat(result.getValue(), closeTo(1.175201, 0.0001)); }
@Test public void testFinishingWhenFinishedIsNoOp() throws Exception { BufferedElementCountingOutputStream os = testValues(toBytes("a")); os.finish(); os.finish(); os.finish(); }
@Test public void abstractClasses_callToInterfaceMethodInAbstractClass() throws Exception { Files.write(TestClasses.AbstractClasses.myInterface(), new File(mTestPackageDir, "MyInterface.class")); Files.write(TestClasses.AbstractClasses.abstractImpl(), new File(mTestPackageDir, "AbstractImpl.class")); Files.write( TestClasses.AbstractClasses.realImpl(), new File(mTestPackageDir, "RealImpl.class")); run("RealImpl", "main:()V"); assertMembersLeft("MyInterface", "m:()V"); assertMembersLeft("RealImpl", "main:()V", "m:()V"); assertMembersLeft("AbstractImpl", "helper:()V"); }
@Test public void test_StarEncryptMethodWorksAsExpected() { assertThat(AbstractLicenseMojo.starEncrypt("dummy"), is("*****")); assertThat(AbstractLicenseMojo.starEncrypt(null), nullValue()); String generatedPassword = UUID.randomUUID().toString(); assertThat(AbstractLicenseMojo.starEncrypt(generatedPassword), is(Strings.repeat("*", generatedPassword.length()))); }
@Test public void shouldRespondWithCompleteStreamOfTransactions() throws Exception { when( transactionIdStore.getLastCommittedTransactionId() ).thenReturn( 15L ); when( logicalTransactionStore.getTransactions( 14L ) ).thenReturn( txCursor( cursor( tx( 14 ), tx( 15 ) ) ) ); ChannelFuture channelFuture = mock( ChannelFuture.class ); when( context.writeAndFlush( any() ) ).thenReturn( channelFuture ); txPullRequestHandler.channelRead0( context, new TxPullRequest( 13, storeId ) ); verify( context ).writeAndFlush( isA( ChunkedTransactionStream.class ) ); }
@Test public void testGetPages() throws Exception { final List<WizardPage> pages = plugin.getPages(); assertEquals(3, pages.size()); }
@Test public void backwardCompatibilityNullSecurityRolesTest() { final ConfigurationFactory factory = new ConfigurationFactoryImpl(); final BackwardCompatibleUtil backwardUtil = new BackwardCompatibleUtil(factory); final ConfigGroup group = factory.newConfigGroup(ConfigType.PROJECT, "cool", "test"); assertNotNull(backwardUtil.compat(group)); assertNotNull(backwardUtil.compat(group).getConfigItem("security:groups")); }
@Test public void failStoreInitializationWhenHeaderRecordCantBeRead() throws IOException { File storeFile = dir.file( "a" ); File idFile = dir.file( "idFile" ); PageCache pageCache = mock( PageCache.class ); PagedFile pagedFile = mock( PagedFile.class ); PageCursor pageCursor = mock( PageCursor.class ); when( pageCache.map( eq( storeFile ), anyInt(), any( OpenOption.class ) ) ).thenReturn( pagedFile ); when( pagedFile.io( 0L, PagedFile.PF_SHARED_READ_LOCK ) ).thenReturn( pageCursor ); when( pageCursor.next() ).thenReturn( false ); RecordFormats recordFormats = Standard.LATEST_RECORD_FORMATS; expectedException.expect( StoreNotFoundException.class ); expectedException.expectMessage( "Fail to read header record of store file: " + storeFile.getAbsolutePath() ); try ( DynamicArrayStore dynamicArrayStore = new DynamicArrayStore( storeFile, idFile, config, IdType.NODE_LABELS, idGeneratorFactory, pageCache, NullLogProvider.getInstance(), Settings.INTEGER.apply( GraphDatabaseSettings.label_block_size.getDefaultValue() ), recordFormats ) ) { dynamicArrayStore.initialise( false ); } }
@Test public void testGetClientType() throws Exception { int type = client.getClientType(); Assert.assertEquals(0, type); client.setClientType(125); type = client.getClientType(); Assert.assertEquals(125, type); }
@Test public void isInAtRange() { String letters = "abcd"; assertFalse( in( 'a', 1, 2, letters ) ); assertTrue( in( 'c', 1, 3, letters ) ); }
@Test public void testDefineMatchupPattern_onlyPrimarySensor() { final String primarySensorname = "atsr.3"; final Stack<EntityTransaction> transactionStack = new Stack<>(); final Sensor primarySensor = new SensorBuilder().name(primarySensorname).pattern(10).build(); final EntityTransaction transaction = mock(EntityTransaction.class); final Storage storage = mock(Storage.class); final PersistenceManager persistenceManager = mock(PersistenceManager.class); when(persistenceManager.transaction()).thenReturn(transaction); when(persistenceManager.getStorage()).thenReturn(storage); when(storage.getSensor("orb_atsr.3")).thenReturn(primarySensor); final long pattern = MatchupGenerator.defineMatchupPattern(primarySensorname, null, 1000000L, persistenceManager, transactionStack); assertEquals(1000000L | 10L, pattern); verify(persistenceManager, times(1)).getStorage(); verify(persistenceManager, times(1)).transaction(); verify(persistenceManager, times(1)).commit(); verifyNoMoreInteractions(persistenceManager); verify(storage, times(1)).getSensor("orb_atsr.3"); verifyNoMoreInteractions(storage); assertEquals(1, transactionStack.size()); assertSame(transaction, transactionStack.pop()); }
@Test public void testSdxL2ConnectionPoint10() { exceptionVlans.expect(NumberFormatException.class); SdxL2ConnectionPoint.sdxl2ConnectionPoint("VE1", CP1, VLANS10, CEMAC7); }
@Test public void testCreate() throws Exception { sniffySocket.create(true); verifyPrivate(delegate).invoke("create", true); verifyNoMoreInteractions(delegate); }
@Test public void testValidateDocumentMetaData_MissingDoc() { System.out.println("testValidateDocumentMetaData_ValidMessage"); ProvideAndRegisterDocumentSetRequestType body = new XDRMessageHelper().getSampleMessage(); body.getDocument().clear(); XDRHelper instance = createHelper(); RegistryErrorList result = instance.validateDocumentMetaData(body); assertNotNull(result); assertEquals(1, result.getRegistryError().size()); assertEquals(NhincConstants.XDS_REGISTRY_ERROR_SEVERITY_ERROR, result.getHighestSeverity()); assertEquals(NhincConstants.XDS_REGISTRY_ERROR_SEVERITY_ERROR, result.getRegistryError().get(0).getSeverity()); assertEquals(XDRHelper.XDR_EC_XDSMissingDocument, result.getRegistryError().get(0).getErrorCode()); assertNotNull(result.getRegistryError().get(0).getCodeContext()); }
@Test public void traceSinglePageCacheFlush() { VerbosePageCacheTracer tracer = createTracer(); try ( MajorFlushEvent majorFlushEvent = tracer.beginCacheFlush() ) { FlushEventOpportunity flushEventOpportunity = majorFlushEvent.flushEventOpportunity(); FlushEvent flushEvent = flushEventOpportunity.beginFlush( 1, 2, new DummyPageSwapper( "testFile", 1 ) ); flushEvent.addBytesWritten( 2 ); flushEvent.addPagesFlushed( 7 ); flushEvent.done(); } logProvider.formattedMessageMatcher().assertContains( "Start whole page cache flush." ); logProvider.formattedMessageMatcher().assertContains( "Page cache flush completed. Flushed 2B in 7 pages. Flush took: 0ns. " + "Average speed: 2bytes/ns." ); }
@Test public void testArrayTypeToJavaType() { assertEquals( TypeDescriptors.lists(TypeDescriptors.longs()), FieldTypeDescriptors.javaTypeForFieldType(FieldType.array(FieldType.INT64))); assertEquals( TypeDescriptors.lists(TypeDescriptors.lists(TypeDescriptors.longs())), FieldTypeDescriptors.javaTypeForFieldType( FieldType.array(FieldType.array(FieldType.INT64)))); }
@Test public void testParseSingleInvokedBlacklistedMethod() { Set<String> methods = SyntaxTools.parseShortInvokedMethods("time(x)"); Assert.assertEquals(0, methods.size()); Assert.assertFalse(methods.contains("time")); }
@Ignore("Cannot check this, because the sample size returned is not always exact.") @Test public void testExecution() { List<Integer> inputData = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); SparkBernoulliSampleOperator<Integer> sampleOperator = new SparkBernoulliSampleOperator<>( iterationNumber -> 5, DataSetType.createDefaultUnchecked(Integer.class), iterationNumber -> SampleOperator.randomSeed() ); final ChannelInstance[] inputs = new ChannelInstance[]{this.createRddChannelInstance(inputData)}; final ChannelInstance[] outputs = new ChannelInstance[]{this.createRddChannelInstance()}; this.evaluate(sampleOperator, inputs, outputs); final List<Integer> result = ((RddChannel.Instance) outputs[0]).<Integer>provideRdd().collect(); Assert.assertEquals(5, result.size()); }
@Test public void TestConcaveVerticalEdgeDiffraction() throws LayerDelaunayError, ParseException { GeometryFactory factory = new GeometryFactory(); WKTReader wktReader = new WKTReader(factory); Envelope cellEnvelope = new Envelope(new Coordinate(0, 0, 0.), new Coordinate(20, 15, 0.)); MeshBuilder mesh = new MeshBuilder(); mesh.addGeometry(wktReader.read("POLYGON((5 6, 4 5, 7 5, 7 8, 4 8, 5 7, 5 6))"), 4); mesh.addGeometry(wktReader.read("POLYGON((9 7, 11 7, 11 11, 9 11, 9 7))"), 4); mesh.addGeometry(wktReader.read("POLYGON((12 8, 13 8, 13 10, 12 10, 12 8))"), 4); mesh.addGeometry(wktReader.read("POLYGON((10 4, 11 4, 11 6, 10 6, 10 4))"), 4); mesh.finishPolygonFeeding(cellEnvelope); FastObstructionTest manager = new FastObstructionTest(mesh.getPolygonWithHeight(), mesh.getTriangles(), mesh.getTriNeighbors(), mesh.getVertices()); PropagationProcessData processData = new PropagationProcessData(manager); ComputeRays computeRays = new ComputeRays(processData); Coordinate p1 = new Coordinate(4.5, 6.5, 1.6); Coordinate p2 = new Coordinate(14, 6.5, 1.6); List<Coordinate> ray = computeRays.computeSideHull(true, p1, p2); assertTrue(ray.isEmpty()); ray = computeRays.computeSideHull(false, p1, p2); assertTrue(ray.isEmpty()); ray = computeRays.computeSideHull(false, p2, p1); assertTrue(ray.isEmpty()); ray = computeRays.computeSideHull(true, p2, p1); assertTrue(ray.isEmpty()); }
@Test public void shouldRequireMultifactorEnroll() { values.put(CODE_KEY, "a0.mfa_registration_required"); AuthenticationException ex = new AuthenticationException(values); assertThat(ex.isMultifactorEnrollRequired(), is(true)); }
@Test public void testHasNotTextContainingNegative() { when(element.text()).thenReturn("Something written here"); assertThatAssertionErrorIsThrownBy(() -> elementAssert.hasNotTextContaining("Something")) .hasMessage("The element contains the text: Something"); }
@Test public void testAdd() { TimeSeries s1 = new TimeSeries("S1"); s1.setMaximumItemCount(2); s1.add(new Year(2010), 1.1); s1.add(new Year(2011), 2.2); s1.add(new Year(2012), 3.3); assertEquals(2, s1.getItemCount()); assertEquals(2.2, s1.getMinY(), EPSILON); assertEquals(3.3, s1.getMaxY(), EPSILON); }
@Test public void testGetBooleanWithDefaultMissingKeyShouldReturnDefault() { assertTrue(getObject().getBoolean("missing", true)); }
@Test public void testDeserializeRowFromJsonMap() throws Exception { JsonNode jsonNode = new ObjectMapper().readTree("{\"age\":68, \"name\":\"Smeagol\"}"); byte[] row = AtlasDeserializers.deserializeRow(NAME_METADATA_DESCRIPTION, jsonNode); byte[] expectedRow = Bytes.concat(ValueType.FIXED_LONG.convertFromString("68"), ValueType.STRING.convertFromString("Smeagol")); Assert.assertArrayEquals(expectedRow, row); }
@Test public void test() throws Exception { assertThat(MavenUserAgent.token(Logger.class, "org.slf4j", "slf4j-api").toString(), is("slf4j-api/1.7.25")); }
@Test public void testUpdateProcessInstance() throws ParseException { String projectName = "project_test1"; User loginUser = getAdminUser(); Map<String, Object> result = new HashMap<>(5); putMsg(result, Status.PROJECT_NOT_FOUNT, projectName); when(projectMapper.queryByName(projectName)).thenReturn(null); when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result); Map<String, Object> proejctAuthFailRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1, shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", ""); Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS)); Project project = getProject(projectName); putMsg(result, Status.SUCCESS, projectName); ProcessInstance processInstance = getProcessInstance(); when(projectMapper.queryByName(projectName)).thenReturn(project); when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result); when(processService.findProcessInstanceDetailById(1)).thenReturn(null); Map<String, Object> processInstanceNullRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1, shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", ""); Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS)); when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance); processInstance.setState(ExecutionStatus.RUNNING_EXEUTION); Map<String, Object> processInstanceNotFinishRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1, shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", ""); Assert.assertEquals(Status.PROCESS_INSTANCE_STATE_OPERATION_ERROR, processInstanceNotFinishRes.get(Constants.STATUS)); processInstance.setState(ExecutionStatus.SUCCESS); processInstance.setTimeout(3000); processInstance.setCommandType(CommandType.STOP); ProcessDefinition processDefinition = getProcessDefinition(); processDefinition.setUserId(1); Tenant tenant = new Tenant(); tenant.setId(1); tenant.setTenantCode("test_tenant"); when(processService.findProcessDefineById(processInstance.getProcessDefinitionId())).thenReturn(processDefinition); when(processService.getTenantForProcess(Mockito.anyInt(), Mockito.anyInt())).thenReturn(tenant); when(processService.updateProcessInstance(processInstance)).thenReturn(1); when(processDefinitionService.checkProcessNodeList(Mockito.any(), eq(shellJson))).thenReturn(result); Map<String, Object> processInstanceFinishRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1, shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", ""); Assert.assertEquals(Status.UPDATE_PROCESS_INSTANCE_ERROR, processInstanceFinishRes.get(Constants.STATUS)); when(processDefineMapper.updateById(processDefinition)).thenReturn(1); Map<String, Object> successRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1, shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", ""); Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS)); }
@Test public void getColorThemeFromSkinFileWithOtherSkin() throws Exception { mocker.getComponentUnderTest().getColorThemeFromSkinFile("style.less", "flamingo"); verify(lessColorThemeConverter).getColorThemeFromSkinFile("style.less", "flamingo", false); }
@SuppressWarnings("unchecked") @Test public void should_handle_invalid_content() throws URISyntaxException { File file = new File(getClass().getResource("/sample-publications/invocations-v2.ser").toURI()); when(validator.validate(any())) .thenReturn(Collections.singleton(mock(ConstraintViolation.class))); boolean handled = publicationImporter.importPublicationFile(file); assertThat(handled, is(true)); verify(validator).validate(any()); verifyNoMoreInteractions(codeBaseImporter, invocationDataImporter, validator); }
@Test public void testNormalizeUnionWithTwoSingletons() { Projection p = new Projection(); Union union = new Union(); union.setRightArg(new SingletonSet()); union.setLeftArg(new SingletonSet()); p.setArg(union); subject.meet(union); assertThat(p.getArg()).isEqualTo(union); }
@Test public void onSyncToFilesystemSuccess_freeToDatabase() throws IOException { final BreakpointInfo info = mock(BreakpointInfo.class); when(info.getId()).thenReturn(1); when(info.getBlock(0)).thenReturn(mock(BlockInfo.class)); when(remitHelper.isNotFreeToDatabase(1)).thenReturn(false); doNothing().when(storeOnSQLite).onSyncToFilesystemSuccess(info, 0, 10); store.onSyncToFilesystemSuccess(info, 0, 10); verify(onCache, never()).onSyncToFilesystemSuccess(eq(info), eq(0), eq(10L)); verify(storeOnSQLite).onSyncToFilesystemSuccess(eq(info), eq(0), eq(10L)); }
@Test public void shouldGetPropertiesFromTimestamp() throws Exception { final Schema schema = new Schema.Builder().json(StreamUtil.schemas(getClass())).build(); serialisation = new ElementSerialisation(new Schema.Builder(schema) .type("timestamp", Long.class) .edge(TestGroups.EDGE, new SchemaEdgeDefinition.Builder() .property(HBasePropertyNames.TIMESTAMP, "timestamp") .build()) .config(HBaseStoreConstants.TIMESTAMP_PROPERTY, TestPropertyNames.TIMESTAMP) .build()); final long timestamp = System.currentTimeMillis(); final String group = TestGroups.EDGE; final Properties properties = serialisation.getPropertiesFromTimestamp(group, timestamp); assertEquals(1, properties.size()); assertEquals(timestamp, properties.get(HBasePropertyNames.TIMESTAMP)); }
@Test public void shouldExtractLabelValuesUsingPositionalPattern() { String key = "a.b.c.d"; LabeledMetricConf labeledMetricConf = new LabeledMetricConf("a", Arrays.asList(new LabelConf("label_name", "$1"), new LabelConf("label_name", "$2_$3"))); List<String> labelValues = LabelValuesExtraction.extractLabelValuesByPosition(key, labeledMetricConf); assertEquals(Arrays.asList("b", "c_d"), labelValues); }
@Test public void testOpDefault() throws FilterRuleNotAppliableException, ParseException { FileAgeFileFilterRule filterRule = new FileAgeFileFilterRule(new AgeValue(1, AgeValue.Unit.SECONDS), -1); assertFalse(filterRule.match(createTestNode("01/01/2005 10:00:00"))); }
@Test public void testCreateRegionFactory() { Cache mockCache = mock(Cache.class); RegionFactory mockRegionFactory = createMockRegionFactory(); when(mockCache.createRegionFactory()).thenReturn(mockRegionFactory); PeerRegionFactoryBean factoryBean = new TestRegionFactoryBean(); factoryBean.setAttributes(null); factoryBean.setShortcut(null); assertSame(mockRegionFactory, factoryBean.createRegionFactory(mockCache)); verify(mockCache).createRegionFactory(); }
@Test public void testIsCached() { final Cache<String, Boolean> cache = CacheBuilder.newBuilder().expireAfterWrite(Duration.ofMinutes(1)).build(); final WriteCache expiringCache = new ExpiringCache(cache); assertFalse(expiringCache.checkCacheOrSet(Utils.makeMetric())); assertTrue(expiringCache.checkCacheOrSet(Utils.makeMetric())); }
@Test public void defaultDefinitionsAreLoadedOK() { Map<String, PropertyDefinition> map = new PropertyDefinitionsManager().getDefinitions(); assertThat(map.get("string.key"), is(aDefinition("string.key", PropertyType.STRING))); assertThat(map.get("float.key"), is(aDefinition("float.key", PropertyType.FLOAT))); assertThat(map.get("integer.key"), is(aDefinition("integer.key", PropertyType.INTEGER))); assertThat(map.get("boolean.key"), is(aDefinition("boolean.key", PropertyType.BOOLEAN))); assertThat(map.get("uri.key"), is(aDefinition("uri.key", PropertyType.URL))); }
@Test public void testForSearch() { RegnUnitResponse regnUnitResponse = null; try { regnUnitResponse = getRegistrationUnitResponse("org/egov/mr/service/registrationUnitsListForSearch.json"); } catch (Exception e) { e.printStackTrace(); fail(); } RegistrationUnitSearchCriteria registrationUnitSearchCriteria = RegistrationUnitSearchCriteria.builder() .tenantId("KA.BANGALORE").build(); when(registrationUnitRepository.search(any(RegistrationUnitSearchCriteria.class))) .thenReturn(getRegnUnitsFromDB()); List<RegistrationUnit> actualRegistrationUnitsList = registrationUnitService .search(registrationUnitSearchCriteria); List<RegistrationUnit> expectedRegistrationUnits = new ArrayList(); expectedRegistrationUnits.add(regnUnitResponse.getRegnUnits().get(0)); expectedRegistrationUnits.add(regnUnitResponse.getRegnUnits().get(1)); expectedRegistrationUnits.add(regnUnitResponse.getRegnUnits().get(2)); assertTrue(registrationUnitSearchCriteria.getTenantId().equals("KA.BANGALORE")); assertEquals(expectedRegistrationUnits.get(0), actualRegistrationUnitsList.get(0)); assertEquals(expectedRegistrationUnits.get(1), actualRegistrationUnitsList.get(1)); assertEquals(expectedRegistrationUnits.get(2), actualRegistrationUnitsList.get(2)); }
@Test public void shouldRegisteredDefaultEnvironment() { List<StreamsExecutionEnvironment> environments = context.environments(); assertEquals(1, environments.size()); assertEquals(DefaultAzkarraContext.DEFAULT_ENV_NAME, environments.get(0).name()); }
@Test public void testEncodeZigZag64() { Assert.assertEquals(0L, ProtobufOutput.encodeZigZag64(0L)); Assert.assertEquals(0x0202020202020202L, ProtobufOutput.encodeZigZag64(0x0101010101010101L)); Assert.assertEquals(0x00000000000001FFL, ProtobufOutput.encodeZigZag64(0xFFFFFFFFFFFFFF00L)); Assert.assertEquals(000000000000000001L, ProtobufOutput.encodeZigZag64(0xFFFFFFFFFFFFFFFFL)); }
@Test public void typical() throws Exception { TopicPartition topicPartition = new TopicPartition("topic", 0); File folder = temp.newFolder(topicPartition.toString()); wrap(new byte[] { 0 }).copyTo(asByteSink(new File(folder, "data"))); Map<TopicPartition, Replica> partitionsAndLogDir = singletonMap(topicPartition, new Replica(temp.getRoot().getAbsolutePath(), 0L)); Map<TopicPartition, Long> result = underTest.apply(partitionsAndLogDir); assertThat(result.size(), is(1)); long size = result.get(topicPartition); assertThat(size, is(1L)); }
@Test public void getEmptyUncontainedArray() throws Exception { String[] subArray = {"e"}; String[] containerArray = {"d","e","f"}; String[] result = ListProcessor.getUncontainedArray(subArray,containerArray, true); List<String> listResult = Arrays.asList(result); assertEquals(listResult, Collections.emptyList()); }
@Test public void testUnknownProvider() { Assert.assertNull(BearerAuthCredentialProviderFactory.getBearerAuthCredentialProvider( "UNKNOWN", CONFIG_MAP)); }
@Test public void v_double() throws Exception { JsonFormat<Data> format = builder((r, d) -> d.object = r.readDouble(), (w, d) -> w.writeDouble(d.doubleValue)) .build(); byte[] written = write(format, (data, v) -> data.doubleValue = v, 1.25d); assertThat(read(format, written), contains(1.25d)); }
@Test public void testGetStaffRolesMultipleValid() { objResc.addLiteral(CdrAcl.canManage, MANAGE_GRP); objResc.addLiteral(CdrAcl.canAccess, USER_PRINC); List<RoleAssignment> assignments = aclFactory.getStaffRoleAssignments(pid); assertEquals(2, assignments.size()); RoleAssignment assignment1 = getAssignmentByRole(assignments, CdrAcl.canManage); assertEquals(pid.getId(), assignment1.getAssignedTo()); assertEquals(CdrAcl.canManage, assignment1.getRole().getProperty()); assertEquals(MANAGE_GRP, assignment1.getPrincipal()); RoleAssignment assignment2 = getAssignmentByRole(assignments, CdrAcl.canAccess); assertEquals(pid.getId(), assignment2.getAssignedTo()); assertEquals(CdrAcl.canAccess, assignment2.getRole().getProperty()); assertEquals(USER_PRINC, assignment2.getPrincipal()); }
@Test public void testLtrim() { logger.info("ltrim"); String s = " test"; String expResult = "test"; String result = PHPMethods.ltrim(s); assertEquals(expResult, result); }
@Test @RunWithCustomExecutor public void testUpdateRequestWithValidationFailure() throws Exception { VitamThreadUtils.getVitamSession().setTenantId(TENANT_ID); DbRequestSingle dbRequestSingle = new DbRequestSingle(vitamCollection, Collections::emptyList); assertEquals(0, vitamCollection.getCollection().countDocuments()); final ArrayNode data = JsonHandler.createArrayNode(); data.add(getNewDocument(GUIDFactory.newGUID().toString(), "title one", 1)); final Insert insert = new Insert(); insert.setData(data); final DbRequestResult insertResult = dbRequestSingle.execute(insert, 0, mock(DocumentValidator.class)); assertEquals(1, insertResult.getCount()); assertEquals(1, vitamCollection.getCollection().countDocuments()); insertResult.close(); final Update update = new Update(); update.setQuery(eq("Title.keyword", "title one")); update.addActions(UpdateActionHelper.set("Title", "new name")); DocumentValidator documentValidator = mock(DocumentValidator.class); doThrow(new SchemaValidationException("Prb...")).when(documentValidator).validateDocument(any()); assertThatThrownBy(() -> dbRequestSingle.execute(update, documentValidator)) .isInstanceOf(SchemaValidationException.class); final Select select = new Select(); select.setQuery(eq("Title.keyword", "title one")); final DbRequestResult selectResult = dbRequestSingle.execute(select); final List<VitamDocument> selectCursor = selectResult.getDocuments(VitamDocument.class); assertFalse(selectCursor.isEmpty()); assertEquals(1, selectCursor.size()); assertThat(selectCursor.get(0).getInteger("#version")).isEqualTo(0); selectCursor.clear(); selectResult.close(); }
@Test public void testAddClientRole() throws Exception { try { resource.updateRealm("-1", null, null); assertFalse(false); } catch (IllegalArgumentException e) { assertTrue(true); } UriInfo uriInfo = ResourceTestUtil.buildMockUriInfo(""); Response res = resource.updateRealm("1234", mapping, uriInfo); Assert.assertEquals(Status.BAD_REQUEST.getStatusCode(), res.getStatus()); idp.put(RealmResource.SOURCE_ID, "ccf4f3895f6e37896e7511ed1d991b1d96f04ac1"); res = resource.updateRealm("1234", mapping, uriInfo); Assert.assertEquals(204, res.getStatus()); idp.remove(RealmResource.SOURCE_ID); }
@Test public <T> void parameterizedType_lowerBoundedWildcard() { assertThatThrownBy( () -> factory.createExtractingMatcher( new TypeCapture<Map<? super Long, T>>() { }.getType(), new TypeCapture<T>() { }.getType() ) ) .isInstanceOf( UnsupportedOperationException.class ); }
@Test public void testStrictSeqGrouper_CorrectSeqGroup() { Set<Seq> sequences = new HashSet<>(); sequences.add(mockSeqA); sequences.add(mockSeqB); SeqDBReactionGrouper seqGrouper = new SeqDBReactionGrouper(sequences.iterator(), DB_NAME); int counter = 0; for (ReactionGroup group : seqGrouper.getReactionGroupCorpus()) { assertTrue("Right sequence.", group.getName().equals(NAME_A) || group.getName().equals(NAME_B)); Collection<Long> reactionIds = group.getReactionIds(); assertEquals("Three reaction ids", 3, reactionIds.size()); assertTrue("Contains first reaction ID", reactionIds.contains(REACTION_1)); assertTrue("Contains second reaction ID", reactionIds.contains(REACTION_2)); assertTrue("Contains third reaction ID", reactionIds.contains(REACTION_3)); counter++; } assertEquals("Only one seqGroup.", 1, counter); }
@Test public void testQueryParams_frontSlash() throws URISyntaxException { Map<String, Object> queryParamsMap = new HashMap<>(); queryParamsMap.put("state/region", "singapore north"); queryParamsMap.put("q2", "value2"); String qualifiedQueryParams = UrlQueryParamsUtils.setQueryParams(BASE_URL, queryParamsMap); assertThat(qualifiedQueryParams, is(BASE_URL + "?q2=value2&state%2Fregion=singapore+north")); }
@Test public void encode_objectModel_to_linkObject_with_empty_root_path() { ObjectModel locationModel = getObjectModel(6); Link[] links = LinkFormatHelper.getObjectDescription(createObjectEnabler(locationModel), ""); String strLinks = Link.serialize(links); assertEquals("</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>", strLinks); }
@Test public void noAliveThreadsInRange() { double rangeMin = TimeUnit.SECONDS.toMicros(20); double rangeMax = TimeUnit.SECONDS.toMicros(25); Range range = new Range(rangeMin, rangeMax); List<SeriesData<Long>> seriesDataList = myDataSeries.getDataForRange(range); assertEquals(2, seriesDataList.size()); SeriesData<Long> seriesData = seriesDataList.get(0); Objects.requireNonNull(seriesData); assertEquals(rangeMin, seriesData.x, 0); assertEquals(0, (long)seriesData.value); seriesData = seriesDataList.get(1); Objects.requireNonNull(seriesData); assertEquals(rangeMax, seriesData.x, 0); assertEquals(0, (long)seriesData.value); }
@Test public void testParseEvil() { try { String s = " N47.4212170 ° , E 10.986314° "; Coordinate expResult = instance; Coordinate result = Coordinate.parse(s); assertEquals(expResult, result); } catch (ParseException ex) { fail("Error while parsing: " + ex); } }
@Test void should_set_default_table_entry_transformer() { TableEntryByTypeTransformer expected = (entry, toValueType, tableCellByTypeTransformer) -> null; registry.setDefaultDataTableEntryTransformer(expected); }
@Test public void testWithNamespaceNoSparqlWithTrailingSlash() { String serviceEndpoint = Config.DEFAULT_ENDPOINT + "/namespace/NAMESPACE/"; String normalizedServiceURL = BigdataSailFactory.testServiceEndpointUrl(serviceEndpoint); assertEquals(remoteRepositoryNamespaceUrl, normalizedServiceURL); }
@Test public void setHeaderColumns() { scenarioGridSpy.setHeaderColumns(simulation, ScenarioSimulationModel.Type.RULE); verify(scenarioGridSpy, times(COLUMNS)).setHeaderColumn(anyInt(), isA(FactMapping.class), eq(true)); scenarioGridSpy.setHeaderColumns(simulation, ScenarioSimulationModel.Type.DMN); verify(scenarioGridSpy, times(COLUMNS)).setHeaderColumn(anyInt(), isA(FactMapping.class), eq(false)); Background background = new Background(); scenarioGridSpy.setHeaderColumns(background, ScenarioSimulationModel.Type.RULE); verify(scenarioGridSpy, times(COLUMNS)).setHeaderColumn(anyInt(), isA(FactMapping.class), eq(false)); scenarioGridSpy.setHeaderColumns(background, ScenarioSimulationModel.Type.DMN); verify(scenarioGridSpy, times(COLUMNS)).setHeaderColumn(anyInt(), isA(FactMapping.class), eq(false)); }
@Test public void shouldUpdateChildWithANMDetailsImmunizationDetailsAndVitaminDetailsWhenItIsRegisteredAsOA() { DateTime currentTime = DateUtil.now(); mockCurrentDate(currentTime); Child child = new Child("child id 1", "mother id 1", "opv", "2", "female"); when(allChildren.findByCaseId("child id 1")).thenReturn(child); FormSubmission submission = create() .withFormName("child_registration_oa") .withANMId("anm id 1") .addFormField("id", "child id 1") .addFormField("motherId", "mother id 1") .addFormField("immunizationsGiven", "bcg opv_0 dptbooster_1") .addFormField("childVitaminAHistory", "1 2") .addFormField("bcgDate", "2013-01-01") .addFormField("opv0Date", "2013-01-02") .addFormField("dptbooster1Date", "2013-01-03") .addFormField("vitamin1Date", "2013-01-01") .addFormField("vitamin2Date", "2013-01-02") .build(); service.registerChildrenForOA(submission); verify(allChildren).update(new Child("child id 1", "mother id 1", "opv", "2", "female").withAnm("anm id 1") .withImmunizations(create("bcg", "2013-01-01") .put("opv_0", "2013-01-02") .put("dptbooster_1", "2013-01-03").map()) .withVitaminADoses(create("dose1", "2013-01-01") .put("dose2", "2013-01-02") .map())); }
@Test public void testJavaSerialization() { CumulusFamily c = CumulusFamily.builder() .setBridge( Bridge.builder() .setPorts(ImmutableSet.of()) .setPvid(1) .setVids(IntegerSpace.EMPTY) .build()) .setInterfaceClagSettings( ImmutableSortedMap.of("foo", InterfaceClagSettings.builder().build())) .build(); assertThat(SerializationUtils.clone(c), equalTo(c)); }
@Test public void test01() throws Exception { Main.main(getFileAsArgs("01")); assertEquals(getResult("732506"), this.output.toString()); }
@Ignore("Remove to run test") @Test public void testIsogramWithHyphen() { IsogramChecker iso = new IsogramChecker(); assertTrue(iso.isIsogram("thumbscrew-japingly")); }
@Test public void shouldReturnOrderedQuantityIfStockInHandIsLessThanMaxStockQuantity() throws Exception { RnrLineItem lineItem = new RnrLineItem(); lineItem.setMaxStockQuantity(11); lineItem.setStockInHand(10); lineItem.calculateOrderQuantity(); assertThat(lineItem.getCalculatedOrderQuantity(), is(1)); }
@Test public void testAllIcons() { final ImageIconService service = new DefaultImageIconService(); for (final IconID i : IconID.values()) { assertNotNull(i.name(), service.getIconForId(i)); } }
@Test public void testConstructingSimpleRegexRuleSet() { final Builder<RuleSetBuilder, DecisionTreeRuleSet> ruleSetBuilder = RuleSetBuilder.creator(Arrays.asList("input1", "input2", "input3")); ruleSetBuilder.with(RuleSetBuilder::rule, RuleBuilder.creator() .with(RuleBuilder::input, Arrays.asList("input1", "inp.?t2", "input4.*")) .with(RuleBuilder::output, Collections.singletonMap("outputDriver", "result"))); final DecisionTreeRuleSet ruleSet = ruleSetBuilder.build(); assertNotNull(ruleSet); assertEquals(1L, ruleSet.getRules().size()); }
@Test public void testWild() { final List<Locale> list = LocaleUtils.parseAcceptLanguage("*"); assertEquals(1, list.size()); assertEquals("*", list.get(0).getLanguage()); }
@Test public void initMatrix() { IntNdArray matrix = NdArrays.ofInts(Shape.of(2, 2)); StdArrays.copyTo(matrix, new int[][] { {1, 2}, {3, 4} }); assertEquals(1, matrix.getInt(0, 0)); assertEquals(2, matrix.getInt(0, 1)); assertEquals(3, matrix.getInt(1, 0)); assertEquals(4, matrix.getInt(1, 1)); try { StdArrays.copyTo(matrix, new int[][] {{1, 2, 3}, {4, 5, 6}}); fail(); } catch (IllegalArgumentException e) { } try { StdArrays.copyTo(NdArrays.ofInts(Shape.of(3, 3)), new int[][] {{1, 2}, {3, 4}}); fail(); } catch (IllegalArgumentException e) { } try { StdArrays.copyTo(NdArrays.ofInts(Shape.of(2, 2, 1)), new int[][] {{1, 2}, {3, 4}}); fail(); } catch (IllegalArgumentException e) { } }
@Test public void createDatumFromValueDouble() { Datum datum = SignalFxSessionAdaptor.createDatum(VALUE_DOUBLE); assertTrue(datum.hasDoubleValue()); assertFalse(datum.hasIntValue()); assertFalse(datum.hasStrValue()); assertEquals(12.2, datum.getDoubleValue(), 0d); }
@Test public void yourDetails() throws Exception { CompetitionInviteResource competitionInviteResource = newCompetitionInviteResource().withEmail("test@test.com").build(); when(competitionInviteRestService.getInvite("hash")).thenReturn(RestResult.restSuccess(competitionInviteResource)); AssessorRegistrationViewModel expectedViewModel = new AssessorRegistrationViewModel("hash", "test@test.com"); mockMvc.perform(get("/registration/{inviteHash}/register", "hash")) .andExpect(status().isOk()) .andExpect(model().attribute("model", expectedViewModel)) .andExpect(view().name("registration/register")); }
@Test public void getAnnotationFor_themeAnnotationForSubclass_annotationOverridden() { assertEquals("Theme annotation is not overridden correctly in subclass", "c", UIProvider.getAnnotationFor(TestClass.class, Theme.class) .value()); }
@Test @SuppressWarnings("unchecked") public void testNestedRing1() throws Exception { for (Ring<?> inner1 : Arrays.asList( Rings.GF(7, 3), Rings.UnivariateRing(Rings.Z), Rings.UnivariateRingZp64(17))) { MultivariateRing<?> inner2 = MultivariateRing(2, inner1); UnivariateRing<?> inner3 = Rings.UnivariateRing(inner2); MultivariateRing<?> ring = MultivariateRing(2, inner3); for (int i = 0; i < its(4, 8); ++i) { AMultivariatePolynomial a = ring.randomElement(3, 5), b = ring.randomElement(3, 5); AMultivariatePolynomial poly = multiply(a, b); PolynomialFactorDecomposition<?> factors = Factor(poly); Assert.assertTrue(factors.sumExponents() >= 2); Assert.assertEquals(poly, factors.multiply()); } } }
@Test public void relativeRootIsNull() { assertNull("relative root is not null", relative.getRoot()); }
@Test(expected = AssertionError.class) public void describeThrowsIfClientDoesNotExist() throws Exception { describeActionConfig.describeType = Arrays.asList("client"); describeActionConfig.name = "nonexistent-client-name"; when(keywhizClient.getClientByName("nonexistent-client-name")).thenThrow( new NotFoundException()); when(keywhizClient.allClients()).thenReturn(Arrays.asList()); describeAction.run(); }
@Test public void whenShutdown_thenCorrectMethodInvoked() throws IOException { memcachedClient.shutdown(); verify(client).shutdown(); }
@Test public void testH02() { String[] input = { "1", "a", "A" }; String result = Functions.h(input); assertThat(result, is(Arrays.toString((String[]) input))); }
@Test public void testEventFiltersParsing() throws Exception { String expr = "abc,def"; TimelineFilterList expectedList = new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.EQUAL, "abc"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "def") ); verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList); expr = "(abc,def)"; verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList); expr = "(abc,def) OR (rst, uvx)"; expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.EQUAL, "abc"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "def") ), new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.EQUAL, "rst"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "uvx") ) ); verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList); expr = "!(abc,def,uvc) OR (rst, uvx)"; expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, "abc"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, "def"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, "uvc") ), new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.EQUAL, "rst"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "uvx") ) ); verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList); expr = "(((!(abc,def,uvc) OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))" + " OR ((bcd,tyu) AND uvb))"; expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList( new TimelineFilterList(Operator.OR, new TimelineFilterList( new TimelineExistsFilter( TimelineCompareOp.NOT_EQUAL, "abc"), new TimelineExistsFilter( TimelineCompareOp.NOT_EQUAL, "def"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, "uvc") ), new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.EQUAL, "rst"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "uvx") ) ), new TimelineFilterList(Operator.OR, new TimelineFilterList( new TimelineExistsFilter( TimelineCompareOp.NOT_EQUAL, "abcdefg") ), new TimelineFilterList( new TimelineExistsFilter( TimelineCompareOp.NOT_EQUAL, "ghj"), new TimelineExistsFilter( TimelineCompareOp.NOT_EQUAL, "tyu") ) ) ), new TimelineFilterList( new TimelineFilterList( new TimelineExistsFilter(TimelineCompareOp.EQUAL, "bcd"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "tyu") ), new TimelineExistsFilter(TimelineCompareOp.EQUAL, "uvb") ) ); verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList); expr = " ( ( ( ! ( abc , def , uvc) OR ( rst , uvx ) )" + " AND ( ! ( abcdefg ) OR ! ( ghj, tyu) ) ) OR ( (" + " bcd , tyu ) AND uvb ) )"; verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList); expr = "(((!(abc,def,uvc) OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))" + " OR ((bcd,tyu) AND uvb)"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Improper brackets. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "(((!(abc,def,uvc) (OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))" + " OR ((bcd,tyu) AND uvb))"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected opening bracket. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "(((!(abc,def,uvc) OR) (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))" + " OR ((bcd,tyu) AND uvb))"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected closing bracket. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "(((!(abc,def,uvc) PI (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))" + " OR ((bcd,tyu) AND uvb))"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Invalid op. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "(((!(abc,def,uvc) !OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))" + " OR ((bcd,tyu) AND uvb))"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected ! char. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "abc,def,uvc) OR (rst, uvx)"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected closing bracket. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "abc,def,uvc OR )rst, uvx)"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected closing bracket. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "abc,def,uvc OR ,rst, uvx)"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected delimiter. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "abc,def,uvc OR ! "; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unexpected not char. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "(abc,def,uvc)) OR (rst, uvx)"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("Unbalanced brackets. Exception should have been thrown"); } catch (TimelineParseException e){} expr = "(((! ,(abc,def,uvc) OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu" + "))) OR ((bcd,tyu) AND uvb))"; try { TimelineReaderWebServicesUtils.parseEventFilters(expr); fail("( should follow ! char. Exception should have been thrown"); } catch (TimelineParseException e){} assertNull(TimelineReaderWebServicesUtils.parseEventFilters(null)); assertNull(TimelineReaderWebServicesUtils.parseEventFilters(" ")); }
@Test public void shouldLoadAllContacts() { given(contactDb.queryAll()).willReturn(allContactCursor); ContactCursor result = queryContactListFunction.apply(); assertThat(result).isSameAs(allContactCursor); }
@Test public void readFail() { List<Tag> tags = Arrays.asList(new BasicTag("t1", "t1v")); Assert.assertNull(finder.find(tags)); }
@Test public void testRemove() { JexlNode node1 = JexlNodeFactory.buildEQNode("FOO", "bar"); JexlNode node2 = JexlNodeFactory.buildEQNode("FOO2", "bar2"); JexlNodeSet nodeSet = new JexlNodeSet(); nodeSet.add(node1); nodeSet.add(node2); assertEquals(2, nodeSet.size()); assertTrue(nodeSet.contains(node1)); assertTrue(nodeSet.contains(node2)); assertTrue(nodeSet.remove(node2)); assertEquals(1, nodeSet.size()); assertTrue(nodeSet.contains(node1)); assertFalse(nodeSet.contains(node2)); assertTrue(nodeSet.remove(node1)); assertEquals(0, nodeSet.size()); assertFalse(nodeSet.contains(node1)); assertFalse(nodeSet.contains(node2)); assertTrue(nodeSet.isEmpty()); assertFalse(nodeSet.remove("this other thing")); }
@Test public void buildTest() throws Exception { @SuppressWarnings("unchecked") FilterDBObjectBuilder filterDBObjectBuilder = new FilterDBObjectBuilder(false, Collections.EMPTY_LIST); DBObject dbObject = QueryBuilder.start(COLUMN_1).greaterThanEquals(5).get(); Whitebox.setInternalState(filterDBObjectBuilder, "filterQuery", dbObject); Whitebox.setInternalState(filterDBObjectBuilder, "useAggregation", false); DBObject filterQuery = filterDBObjectBuilder.build(); assertNotNull("The filter query is null", filterQuery); assertEquals("There should be a query only over 1 field", 1, filterQuery.keySet().size()); assertTrue("The query should contain a clause about" + COLUMN_1, filterQuery.containsField(COLUMN_1)); DBObject condition = (DBObject) filterQuery.get(COLUMN_1); assertTrue("The query does not contain '$gte'", condition.containsField("$gte")); assertEquals("The value of '$gte' key should be 5", 5, condition.get("$gte")); }
@Test public void clear() { derivedLongGauge.createTimeSeries(LABEL_VALUES, null, longFunction); derivedLongGauge.createTimeSeries(LABEL_VALUES_1, new QueueManager(), queueManagerFunction); Metric metric = derivedLongGauge.getMetric(testClock); assertThat(metric).isNotNull(); assertThat(metric.getMetricDescriptor()).isEqualTo(METRIC_DESCRIPTOR); assertThat(metric.getTimeSeriesList().size()).isEqualTo(2); derivedLongGauge.clear(); assertThat(derivedLongGauge.getMetric(testClock)).isNull(); }
@Test public void test_parseEtdOptionType() { assertThat(CsvLoaderUtils.parseEtdOptionType("A")).isEqualTo(EtdOptionType.AMERICAN); assertThat(CsvLoaderUtils.parseEtdOptionType("AMERICAN")).isEqualTo(EtdOptionType.AMERICAN); assertThat(CsvLoaderUtils.parseEtdOptionType("a")).isEqualTo(EtdOptionType.AMERICAN); assertThat(CsvLoaderUtils.parseEtdOptionType("E")).isEqualTo(EtdOptionType.EUROPEAN); assertThat(CsvLoaderUtils.parseEtdOptionType("EUROPEAN")).isEqualTo(EtdOptionType.EUROPEAN); assertThat(CsvLoaderUtils.parseEtdOptionType("e")).isEqualTo(EtdOptionType.EUROPEAN); assertThatIllegalArgumentException().isThrownBy(() -> CsvLoaderUtils.parseEtdOptionType("")); }
@Test public void testSetGeckcoDriverPath() { String path = "./lib/gk"; ds.setGeckcoDriverPath(path); assertEquals(ds.getGeckcoDriverPath(), path); }
@Test public void onCGMSpecificOpsOperationCompleted() { final Data data = new Data(new byte[] { 28, 2, 1}); callback.onDataReceived(null, data); assertTrue(success); assertFalse(secured); assertEquals(2, requestCode); }
@Test(timeout = 60000) public void testGetHeader() throws Exception { final String headerName = "Foo"; final String headerVal = "bar"; HttpClientRequestImpl<Object, ByteBuf> newReq = requestRule.request.addHeader(headerName, headerVal); requestRule.assertHeaderAdded(newReq, headerName, headerVal); assertThat("Added header not retrievable.", newReq.getHeader(headerName), is(headerVal)); }
@Test public void testSimpleLink() throws Exception { Assert.assertEquals("test", dc.cleanLinkId(LINK_URL, "test", false)); Assert.assertEquals("test-test", dc.cleanLinkId(LINK_URL, "test-test", false)); Assert.assertEquals("test test", dc.cleanLinkId(LINK_URL, "test\ntest", false)); }
@Test public void testToString() { final byte[] some = new byte[] {2, 5, 0, 1 }; final String expected = "byte[]{length=" + some.length + ", hash=" + Arrays.hashCode(some) + "}"; assertEquals(expected, String.valueOf(ByteArraySizeHashPrinter.of(some))); assertNotNull(ByteArraySizeHashPrinter.orNull(some)); }
@Test public void importsValidBlock() throws Exception { blockchainUtil.importFirstBlocks(3); final Block nextBlock = blockchainUtil.getBlock(3); assertThat(blockchain.contains(nextBlock.getHash())).isFalse(); final PersistBlockTask task = PersistBlockTask.create( protocolSchedule, protocolContext, ethContext, nextBlock, HeaderValidationMode.FULL, metricsSystem); final CompletableFuture<Block> result = task.run(); Awaitility.await().atMost(30, SECONDS).until(result::isDone); assertThat(result.isCompletedExceptionally()).isFalse(); assertThat(result.get()).isEqualTo(nextBlock); assertThat(blockchain.contains(nextBlock.getHash())).isTrue(); }
@Test public void shouldAppendNewConfigItemsAtTheEndOfExistingConfigItems() { List<ConfigDocItem> existingConfigItems = new ArrayList<>( Arrays.asList(new ConfigDocItem(null, new ConfigDocKey()), new ConfigDocItem(null, new ConfigDocKey()))); ConfigDocItem newItem = new ConfigDocItem(null, new ConfigDocKey()); ConfigDocSection configDocSection = new ConfigDocSection(); configDocSection.setSectionDetailsTitle("title"); ConfigDocItem section = new ConfigDocItem(configDocSection, null); List<ConfigDocItem> newConfigItems = Arrays.asList(newItem, section); appendConfigItemsIntoExistingOnes(existingConfigItems, newConfigItems); assertEquals(4, existingConfigItems.size()); List<ConfigDocItem> addedList = existingConfigItems.subList(2, 4); assertEquals(newItem, addedList.get(0)); assertEquals(section, addedList.get(1)); }
@Test public void create() { List<PathsDiffValidator> validators = validatorFactory.create(); assertThat(validators).hasSize(1); }
@Test public void shouldRemoveSave() { saveService.removeSave("player"); verify(saver).delete("player"); }
@Test @RunWithCustomExecutor public void exportAccessionRegisters() throws Exception { InputStream is = PropertiesUtils.getResourceAsStream( "EliminationAction/EliminationActionObjectGroupReportService/objectGroupReport.jsonl"); Response response = mock(Response.class); doReturn(is).when(response).readEntity(InputStream.class); doReturn(response).when(workspaceClient).getObject(PROC_ID, OBJECT_GROUP_REPORT_JSONL); instance.exportAccessionRegisters(PROC_ID); ArgumentCaptor<ReportExportRequest> reportExportRequestArgumentCaptor = ArgumentCaptor.forClass(ReportExportRequest.class); verify(batchReportClient) .generatePurgeAccessionRegisterReport(eq(PROC_ID), reportExportRequestArgumentCaptor.capture()); assertThat(reportExportRequestArgumentCaptor.getValue().getFilename()) .isEqualTo(ACCESSION_REGISTER_REPORT_JSONL); }
@Test public void testSetLink() { item.setLink("value"); assertEquals("value", item.getLink()); }
@Test void stream() { assertTrue(this.tail.stream().collect(Collectors.toList()).isEmpty()); }
@TestWith({"conversion/pattern.json;conversion/current.json"}) public void merge_checkVersionIncrement(String patternResource, String currentResource) throws Exception { final Suite pattern = readSuite(patternResource); final Suite current = readSuite(currentResource); final Suite merged = SuiteMergeStrategy.merge(current, pattern); assertThat(merged.getVersion(), is(2L)); }
@Test public void testInstantiate_PrivateConstructor() { Assertions.assertThrows(IllegalArgumentException.class, () -> { Classes.instantiate(PrivateConstructor.class); }); }
@Test public void testV1SchemeSignatureCertNotReencoded() throws Exception { ApkVerifier.Result result = verify("v1-only-with-rsa-1024-cert-not-der.apk"); if (!result.isVerified()) { List<ApkVerifier.Result.V1SchemeSignerInfo> signers = result.getV1SchemeSigners(); if (signers.size() > 0) { ApkVerifier.Result.V1SchemeSignerInfo signer = signers.get(0); for (IssueWithParams issue : signer.getErrors()) { if (issue.getIssue() == Issue.JAR_SIG_PARSE_EXCEPTION) { CertificateFactory certFactory = CertificateFactory.getInstance("X.509"); if ("SUN".equals(certFactory.getProvider().getName())) { Throwable exception = (Throwable) issue.getParams()[1]; Throwable e = exception; while (e != null) { String msg = e.getMessage(); e = e.getCause(); if ((msg != null) && (msg.contains("Redundant length bytes found"))) { Assume.assumeNoException(exception); } } } break; } } } } assertVerified(result); List<X509Certificate> signingCerts = result.getSignerCertificates(); assertEquals(1, signingCerts.size()); assertEquals( "c5d4535a7e1c8111687a8374b2198da6f5ff8d811a7a25aa99ef060669342fa9", HexEncoding.encode(sha256(signingCerts.get(0).getEncoded()))); }
@Test public void assertUpdateJobExecutionEventWhenFailureAndMessageExceed() { JobExecutionEvent startEvent = new JobExecutionEvent("localhost", "127.0.0.1", "fake_task_id", "test_job", JobExecutionEvent.ExecutionSource.NORMAL_TRIGGER, 0); assertTrue(storage.addJobExecutionEvent(startEvent)); StringBuilder failureMsg = new StringBuilder(); for (int i = 0; i < 600; i++) { failureMsg.append(i); } JobExecutionEvent failEvent = startEvent.executionFailure("java.lang.RuntimeException: failure" + failureMsg.toString()); assertTrue(storage.addJobExecutionEvent(failEvent)); assertThat(failEvent.getFailureCause(), startsWith("java.lang.RuntimeException: failure")); }
@Test public void getAttributeAsIntString() throws Exception { assertEquals(1,this.testData.getAttributeAsInt("A")); assertEquals(2,this.testData.getAttributeAsInt("B")); assertEquals(1, this.testData.getAttributeAsInt("C")); assertInvalidValue(this.testData,"getAttributeAsInt","D"); assertInvalidValue(this.testData,"getAttributeAsInt","E"); assertInvalidValue(this.testData,"getAttributeAsInt","F"); }
@Test @Ignore("Not an actual test. Requires external data.") public void performance() throws IOException { TurkishTokenizer tokenizer = TurkishTokenizer.DEFAULT; for (int it = 0; it < 5; it++) { List<String> lines = Files.readAllLines( Paths.get("/media/aaa/Data/aaa/corpora/dunya.100k")); Stopwatch clock = Stopwatch.createStarted(); long tokenCount = 0; for (String line : lines) { List<Token> tokens = tokenizer.tokenize(line); tokenCount += tokens.size(); } long elapsed = clock.elapsed(TimeUnit.MILLISECONDS); Log.info("Token count = %d ", tokenCount); Log.info("Speed (tps) = %.1f", tokenCount * 1000d / elapsed); } }
@Test public void testIsString() { assertTrue(JsonValue.wrap('c').isString()); assertTrue(JsonValue.wrap("hi").isString()); }
@Test public void shouldNotConvert() { String line = "BLAH\"BLAH&BLAH<BLAH>BLAH'BLAH"; String convertedLine = contentConverter.convert(line); assertThat(convertedLine).isEqualTo("BLAH&quot;BLAH&amp;BLAH&lt;BLAH&gt;BLAH&apos;BLAH"); }
@Test public void givenDisconnectedNetworkInfo_whenLosingNetwork_thenNotifiesOfDisconnectedNetwork() { NetworkInfo networkInfo = givenNetworkInfoWith(DISCONNECTED, ANY_REASON, ANY_EXTRA_INFO); networkCallbacks.onLosing(network, MAX_MS_TO_LIVE); verify(connectivityChangesNotifier).notify(ConnectivityChangeEvent.createWithNetworkInfoChangeEvent( networkInfo.isConnected(), networkInfo.getExtraInfo(), networkInfo.getReason() )); }
@Test public void testBytesToShort() { short expectedValue = (short) 258; short actualValue = CodecUtils.bytesToShort(new byte[] { 1, 2, 5, 2 }, 0, 4, ByteOrder.BIG_ENDIAN); assertEquals(expectedValue, actualValue); }
@Test void samplePartitionedIndex() { List<IndexSampler> samplers = Arrays.asList( createSampler( 1 ), createSampler( 2 ) ); AggregatingIndexSampler partitionedSampler = new AggregatingIndexSampler( samplers ); IndexSample sample = partitionedSampler.sampleIndex(); assertEquals( new IndexSample( 3, 3, 6 ), sample ); }
@Test @SuppressWarnings("AccessStaticViaInstance") public void shouldGetCorrectReturnType() { final boolean result = singleWeaver.methodAnnotatedWithRxLogSingle(proceedingJoinPoint); assertThat(result).isTrue(); }
@Test public void testHandleFullMixedMultiPaymentFailedOnlineCapturePerShipment() throws Exception { configureTestPG(false, true, TestPaymentGatewayImpl.AUTH_CAPTURE_FAIL); String label = assertPgFeatures("testPaymentGateway", false, true, false, true); CustomerOrder customerOrder = createTestOrder(TestOrderType.FULL, label, false); assertTrue(handler.handle( new OrderEventImpl("", customerOrder, null, Collections.EMPTY_MAP))); assertInventory(WAREHOUSE_ID, "CC_TEST1", "9.00", "0.00"); assertInventory(WAREHOUSE_ID, "CC_TEST2", "1.00", "0.00"); assertInventory(WAREHOUSE_ID, "CC_TEST6", "500.00", "0.00"); assertInventory(WAREHOUSE_ID, "CC_TEST5-NOINV", "0.00", "0.00"); assertInventory(WAREHOUSE_ID, "CC_TEST9", "0.00", "0.00"); assertTrue(customerOrder.getDelivery().size() == 4); assertDeliveryStates(customerOrder.getDelivery(), CustomerOrderDelivery.DELIVERY_STATUS_INVENTORY_VOID_RESERVATION); assertMultiPaymentEntry(customerOrder.getOrdernum(), Arrays.asList("689.74", "259.74", "84.77", "444.95"), Arrays.asList(PaymentGateway.AUTH_CAPTURE, PaymentGateway.AUTH_CAPTURE, PaymentGateway.AUTH_CAPTURE, PaymentGateway.AUTH_CAPTURE), Arrays.asList(Payment.PAYMENT_STATUS_FAILED, Payment.PAYMENT_STATUS_FAILED, Payment.PAYMENT_STATUS_FAILED, Payment.PAYMENT_STATUS_FAILED), Arrays.asList(Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE) ); assertEquals("1479.20", customerOrder.getOrderTotal().toPlainString()); assertEquals("0.00", paymentService.getOrderAmount(customerOrder.getOrdernum()).toPlainString()); assertEquals(CustomerOrder.ORDER_STATUS_CANCELLED, customerOrder.getOrderStatus()); }
@Test public void testNoSoap () { final CollectingValidationEventHandler aCVEH = new CollectingValidationEventHandler (); final Ebms3Messaging aMessage = Ebms3ReaderBuilder.ebms3Messaging () .setValidationEventHandler (aCVEH) .read (new ClassPathResource ("/soap11test/UserMessage-no-soap.xml")); assertNotNull (aMessage); assertTrue (aCVEH.getErrorList ().isEmpty ()); aMessage.getUserMessageAtIndex (0).getMessageInfo ().setMessageId ("blaFoo"); final String sReRead = Ebms3WriterBuilder.ebms3Messaging ().getAsString (aMessage); LOG.info ("Just to recheck what was read: " + sReRead); }
@Test public void testLatestGet3() throws Exception { final Properties props = engine.getWikiProperties(); props.setProperty( "jspwiki.pageProvider", "org.apache.wiki.providers.VerySimpleProvider" ); props.setProperty( "jspwiki.usePageCache", "false" ); final WikiEngine engine = new TestEngine( props ); final String p = engine.getManager( RenderingManager.class ).getHTML( "test", -1 ); final VerySimpleProvider vsp = (VerySimpleProvider) engine.getManager( PageManager.class ).getProvider(); Assertions.assertEquals( "test", vsp.m_latestReq, "wrong page" ); Assertions.assertEquals( 5, vsp.m_latestVers, "wrong version" ); Assertions.assertNotNull( p, "null" ); }
@Test void testPointToPointQueryWithMetaData() throws Exception { String expectedMetaDataKey = "key"; String expectedMetaDataValue = "value"; when(mockBus.query(anyMessage(String.class, String.class))).thenReturn(completedFuture(answer)); GenericMessage<String> testQuery = new GenericMessage<>("query", MetaData.with(expectedMetaDataKey, expectedMetaDataValue)); CompletableFuture<String> queryResponse = testSubject.query(testQuery, instanceOf(String.class)); assertEquals("answer", queryResponse.get()); ArgumentCaptor<QueryMessage<String, String>> queryMessageCaptor = ArgumentCaptor.forClass(QueryMessage.class); verify(mockBus).query(queryMessageCaptor.capture()); QueryMessage<String, String> result = queryMessageCaptor.getValue(); assertEquals("query", result.getPayload()); assertEquals(String.class, result.getPayloadType()); assertEquals(String.class.getName(), result.getQueryName()); assertTrue(InstanceResponseType.class.isAssignableFrom(result.getResponseType().getClass())); assertEquals(String.class, result.getResponseType().getExpectedResponseType()); MetaData resultMetaData = result.getMetaData(); assertTrue(resultMetaData.containsKey(expectedMetaDataKey)); assertTrue(resultMetaData.containsValue(expectedMetaDataValue)); }
@Test public void testParseQuotes() { SearchTerm[] terms = TextMatchers.parse("\"blah\""); assertEquals(1, terms.length); checkFilterTerm(terms[0], "blah", false, false); terms = TextMatchers.parse("\"blah\" \"boo\" \"blee\""); assertEquals(3, terms.length); checkFilterTerm(terms[0], "blah", false, false); checkFilterTerm(terms[1], "boo", false, false); checkFilterTerm(terms[2], "blee", false, false); terms = TextMatchers.parse("\t\"blah\" \"boo\" \t \"blee\" "); assertEquals(3, terms.length); checkFilterTerm(terms[0], "blah", false, false); checkFilterTerm(terms[1], "boo", false, false); checkFilterTerm(terms[2], "blee", false, false); terms = TextMatchers.parse("\"blee \t boo \t\t blah \t\""); assertEquals(1, terms.length); checkFilterTerm(terms[0], "blee \t boo \t\t blah \t", false, false); }
@Test public void test_generate_ARPA() { NetworkInBytes networkInBytes = ArpaUtil.parseArpa("1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa"); String hex1 = DatatypeConverter.printHexBinary(networkInBytes .getStartAddress()); String hex2 = DatatypeConverter .printHexBinary(networkInBytes.getEndAddress()); }
@Test public void testGetAttemptId() { assertFalse(hasAttemptId("bucket_00000")); assertTrue(hasAttemptId("bucket_00000_0")); assertTrue(hasAttemptId("bucket_00000_10")); assertTrue(hasAttemptId("bucket_00000_1000")); assertFalse(hasAttemptId("bucket_00000__1000")); assertFalse(hasAttemptId("bucket_00000_a")); assertFalse(hasAttemptId("bucket_00000_ad")); assertFalse(hasAttemptId("base_00000_00")); }
@Test public void test00() throws Exception { pipeResource("00"); Solution.main(null); assertEquals(getResult("5", "2"), this.output.toString()); }
@Test public void testGetStreamingExportRecords() throws Exception { when(mockOpts.processFieldRules()).thenReturn(resultMap); when(mockOpts.getSourceNum()).thenReturn(2); when(mockOpts.isImmutable()).thenReturn(true); String mockOptionsValue = "-jtoken123"; when(mockOpts.getOptions()).thenReturn(Arrays.asList(mockOptionsValue)); final int key = 10; exportDelegator.getStreamingExportRecords(mockOpts, mockCallback, key); verify(mockOpts).processFieldRules(); verify(server).execStreamingMapCommand(eq(EXPORT.toString()), eq(new String[]{mockOptionsValue}), eq(resultMap), eq(mockCallback), eq(key)); }
@Test(expected = KiePMMLException.class) public void getDiscretizeExpressionMethodDeclaration() { ExpressionFunctionUtils.getDiscretizeExpressionMethodDeclaration("", new Discretize(), OBJECT_CLASS, DEFAULT_PARAMETERTYPE_MAP); }
@Test public void whenInstallmentsMoreThanOneAndPaymentTypeCreditCardShowCFT() { when(model.getPaymentTypeId()).thenReturn(PaymentTypes.CREDIT_CARD); when(model.getCftPercent()).thenReturn("123"); assertTrue(renderer.shouldShowCftDisclaimer(model)); }
@Test public void catalogs() throws Exception { GetCatalogsResp resp = client.getCatalogs(null).get(); assertEquals(RequestStatus.OK, resp.getStatus()); List<CatalogMetadata> catalogs = resp.getCatalogsList(); assertEquals(1, catalogs.size()); CatalogMetadata c = catalogs.get(0); assertEquals(IS_CATALOG_NAME, c.getCatalogName()); assertEquals(IS_CATALOG_DESCR, c.getDescription()); assertEquals(IS_CATALOG_CONNECT, c.getConnect()); }
@Test(expected = UnsupportedOperationException.class) public void testFillAfterPetrify1() { PETRIFIED_LIST.fill(TEST_BYTE); }
@Test void connect_catch_blocks_with_unknown_exception_types() throws Exception { CFG cfg = buildCFG("void fun() { " + " try {" + " foo();" + " } catch (MyException me) {" + " bar();" + " } " + "} " + "abstract void foo() throws UnknownSymbol;" + "class MyException extends Exception{}"); CFGChecker cfgChecker = checker( block(element(TRY_STATEMENT)).successors(2), block(element(IDENTIFIER, "foo"), element(METHOD_INVOCATION)).successors(0).exceptions(0, 1), block(element(VARIABLE, "me"), element(IDENTIFIER, "bar"), element(METHOD_INVOCATION)).successors(0).exceptions(0) ); cfgChecker.check(cfg); }
@Test public void hostNonStackedRestrictedVirtualGreen() { Consumer c = mockConsumer(PRODUCT_1, PRODUCT_2); c.setFact("virt.is_guest", "true"); c.setFact("cpu.core(s)_per_socket", "20"); List<Entitlement> ents = new LinkedList<>(); ents.add(mockNonStackedHostRestrictedEntitlement( c, "Awesome Product", PRODUCT_1, PRODUCT_2 )); ents.get(0).setQuantity(1); ents.get(0).getPool().getProduct().setAttribute(Product.Attributes.VCPU, "1"); mockEntCurator(c, ents); ComplianceStatus status = compliance.getStatus(c, TestUtil.createDate(2011, 8, 30)); assertEquals(ComplianceStatus.GREEN, status.getStatus()); assertEquals(0, status.getNonCompliantProducts().size()); assertEquals(0, status.getPartiallyCompliantProducts().size()); assertEquals(2, status.getCompliantProducts().size()); assertTrue(status.getCompliantProducts().keySet().contains(PRODUCT_1.getId())); assertTrue(status.getCompliantProducts().keySet().contains(PRODUCT_2.getId())); }
@Test public void assertMetaInfoFromWithTaskIdWithoutShardingItems() { TaskContext.MetaInfo actual = TaskContext.MetaInfo.from("test_job@-@@-@READY@-@unassigned-slave@-@0"); assertThat(actual.getJobName(), is("test_job")); assertTrue(actual.getShardingItems().isEmpty()); }
@Test(expectedExceptions = NullPointerException.class) public void testWithBlockDeviceMappingNPE() { withBlockDeviceMappings(null); }
@Test void proxy() { InterfaceBuilder builder = new InterfaceBuilder(); builder.proxy("mockproxyfactory"); Assertions.assertEquals("mockproxyfactory", builder.build().getProxy()); }
@Test public void addHeaderMethodShouldReturnSameInstanceOfBuilder() { String key = "testKey"; String value = "testValue"; String url = "test"; HttpMethod method = HttpMethod.GET; VolleyerConfiguration configuration = DefaultVolleyerConfigurationFactory.create(); TestPurposeRequestBuilder builder = new TestPurposeRequestBuilder(requestQueue, configuration, url, method); TestPurposeRequestBuilder newBuilder = builder.addHeader(key, value); assertTrue(builder == newBuilder); }
@Test public void getUnderlyingLogger() throws Exception { assertThat(lambdaLogger.getUnderlyingLogger()).isSameAs(underlyingLogger); }
@Test public void testSize4Varint() { final int size = 4; final int num = 0x200000; assertThat(ProtobufVarint32LengthFieldPrepender.computeRawVarint32Size(num), is(size)); final byte[] buf = new byte[size + num]; buf[0] = (byte) (0x80 & 0xFF); buf[1] = (byte) (0x80 & 0xFF); buf[2] = (byte) (0x80 & 0xFF); buf[3] = 0x01; for (int i = size; i < num + size; ++i) { buf[i] = 1; } assertTrue(ch.writeOutbound(wrappedBuffer(buf, size, buf.length - size))); assertThat(releaseLater((ByteBuf) ch.readOutbound()), is(releaseLater(wrappedBuffer(buf)))); assertFalse(ch.finish()); }
@Test public void hasVariable_notFooledByExtendedName() { assertFalse(new QueryHolder(FIND_ONCE).hasVariable("bind")); }
@Test(expected = WorkflowOperationException.class) public void testNoMediaPackage() throws Exception { operationHandler.start(workflowInstance, null); }
@Test void inputOutOfRange() { assertThrows(IllegalArgumentException.class, () -> MpcScore.of(-0.1f)); assertThrows(IllegalArgumentException.class, () -> MpcScore.of(5.1f)); }
@Test public void getSeqNames() { List<String> seqNames = genotypeData.getSeqNames(); assertNotNull(seqNames); assertEquals(seqNames.size(), 2); assertEquals(seqNames.get(0), "22"); assertEquals(seqNames.get(1), "23"); }
@Test public void testGetFields01() throws Exception { URL url = this.getClass().getResource( "AbstractFileLineIterator_skip01.txt"); String fileName = url.getPath(); Map<String, ColumnParser> columnParserMap = new HashMap<String, ColumnParser>(); columnParserMap.put("java.lang.String", new NullColumnParser()); @SuppressWarnings("rawtypes") AbstractFileLineIteratorImpl02<AbstractFileLineIterator_Stub01> fileLineIterator = new AbstractFileLineIteratorImpl02<AbstractFileLineIterator_Stub01>( fileName, AbstractFileLineIterator_Stub01.class, columnParserMap); Field[] fields = new Field[] {}; ReflectionTestUtils.setField(fileLineIterator, "fields", fields); Field[] result = fileLineIterator.getFields(); assertSame(fields, result); }
@Test public void testTaskPredicate() { SettableTaskProgress t1 = new SettableTaskProgress("j1", "t1", WorkUnitState.WorkingState.RUNNING, false); SettableTaskProgress t2 = new SettableTaskProgress("j1", "t1", WorkUnitState.WorkingState.RUNNING, false); SettableJobProgress jobProgress = new SettableJobProgress("job123", 10, 0, 0, JobState.RunningState.RUNNING, Lists.newArrayList(t1, t2)); AtomicBoolean atomicBoolean = new AtomicBoolean(false); JobInterruptionPredicate predicate = new JobInterruptionPredicate(jobProgress, "SELECT count(*) > 0 FROM taskProgress WHERE workingState = 'FAILED'", () -> atomicBoolean.set(true), false); predicate.runOneIteration(); Assert.assertFalse(atomicBoolean.get()); t2.workingState = WorkUnitState.WorkingState.FAILED; predicate.runOneIteration(); Assert.assertTrue(atomicBoolean.get()); }
@Test(expected = IntegrityCheckException.class) public void testGB18030Encoding() throws IOException { String string = getFileAsString("/xliff-gb18030.xliff"); EncodingIntegrityChecker encodingIntegrityChecker = new EncodingIntegrityChecker(); encodingIntegrityChecker.check(string); }
@Test public void testParsingTime() throws ParseException { byte[] data = sdp.getBytes(); long s = System.nanoTime(); for (int i = 0; i < 100; i++) { sd.parse(data); } long duration = System.nanoTime() - s; System.out.println("Duration=" + duration); }
@Test public void shouldSuccessfullyMigrateData() { MigrationExecutor migrator = new MigrationExecutor(EmbeddedCassandra.KEYSPACE, contactPoint, EmbeddedCassandra.PORT, cassandraUsername, cassandraPassword, scriptsLocations); migrator.migrate(); validateMigration(); List<String> cloudIds = getCloudIds(session.execute("SELECT * FROM data_set_assignments_by_data_set;").all()); assertThat(cloudIds.size(), is(2)); }
@Test public void testPrefixModificationRequired() throws Exception { Throwable t = new NoClassDefFoundError("sample"); Assert.assertEquals(Exceptions.collapseText(t), "Invalid java type: sample"); }
@Test public void testOnRefreshFormPropertiesEvent() { editor.onRefreshFormPropertiesEvent(mock(RefreshFormPropertiesEvent.class)); verify(searchBarComponent).disableSearch(); }
@Test public void testReadMultiBlocksNormalCase() throws Exception { { BlockInfo blockInfo = new BlockInfo(1L, new File("src/test/resources/file/reader/one_char_split.txt"), 0L, 8L); BlockRecordReader reader = new BlockRecordReader(blockInfo, ",", "\n", false); byte[][] firstLine = reader.readTextRecord(); assertEquals("not equal", "123", new String(firstLine[0])); assertEquals("not equal", "abc", new String(firstLine[1])); byte[][] secondLine = reader.readTextRecord(); assertEquals("not equal", "234", new String(secondLine[0])); assertEquals("not equal", "bbb", new String(secondLine[1])); BlockInfo blockInfo2 = new BlockInfo(1L, new File("src/test/resources/file/reader/one_char_split.txt"), 8L, 7L); reader = new BlockRecordReader(blockInfo2, ",", "\n", false); secondLine = reader.readTextRecord(); assertNull("not null", secondLine); } { BlockInfo blockInfo = new BlockInfo(1L, new File("src/test/resources/file/reader/one_char_split.txt"), 0L, 9L); BlockRecordReader reader = new BlockRecordReader(blockInfo, ",", "\n", false); byte[][] firstLine = reader.readTextRecord(); assertEquals("not equal", "123", new String(firstLine[0])); assertEquals("not equal", "abc", new String(firstLine[1])); byte[][] secondLine = reader.readTextRecord(); assertEquals("not equal", "234", new String(secondLine[0])); assertEquals("not equal", "bbb", new String(secondLine[1])); BlockInfo blockInfo2 = new BlockInfo(1L, new File("src/test/resources/file/reader/one_char_split.txt"), 9L, 6L); reader = new BlockRecordReader(blockInfo2, ",", "\n", false); secondLine = reader.readTextRecord(); assertNull("not null", secondLine); } { BlockInfo blockInfo = new BlockInfo(1L, new File("src/test/resources/file/reader/one_char_split.txt"), 0L, 7L); BlockRecordReader reader = new BlockRecordReader(blockInfo, ",", "\n", false); byte[][] firstLine = reader.readTextRecord(); assertEquals("not equal", "123", new String(firstLine[0])); assertEquals("not equal", "abc", new String(firstLine[1])); firstLine = reader.readTextRecord(); assertNull("not null", firstLine); BlockInfo blockInfo2 = new BlockInfo(1L, new File("src/test/resources/file/reader/one_char_split.txt"), 7L, 8L); reader = new BlockRecordReader(blockInfo2, ",", "\n", false); byte[][] secondLine = reader.readTextRecord(); assertEquals("not equal", "234", new String(secondLine[0])); assertEquals("not equal", "bbb", new String(secondLine[1])); secondLine = reader.readTextRecord(); assertNull("not null", secondLine); } }
@Test(expected = IllegalArgumentException.class) public void testSplitWithIllegalDelimiter() { StringEscaper.split("String", "abc\\def"); }
@Test void testRequireNonNulls_8args() { final String obj0 = "A"; final String obj1 = "B"; final String obj2 = "C"; final String obj3 = "D"; final String obj4 = "E"; final String obj5 = "F"; final String obj6 = "G"; final String obj7 = "H"; requireNullPointerException(() -> NullUtil.requireNonNulls(null, obj1, obj2, obj3, obj4, obj5, obj6, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, null, obj2, obj3, obj4, obj5, obj6, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, obj1, null, obj3, obj4, obj5, obj6, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, obj1, obj2, null, obj4, obj5, obj6, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, obj1, obj2, obj3, null, obj5, obj6, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, obj1, obj2, obj3, obj4, null, obj6, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, obj1, obj2, obj3, obj4, obj5, null, obj7)); requireNullPointerException(() -> NullUtil.requireNonNulls(obj0, obj1, obj2, obj3, obj4, obj5, obj6, null)); NullUtil.requireNonNulls(obj0, obj1, obj2, obj3, obj4, obj5, obj6, obj7); }
@Test public void update() throws Exception { ClusterDeleteEvent clusterDeleteEvent = new ClusterDeleteEvent("cluster", Executors.newScheduledThreadPool(1)); shardDeleteEvent.addObserver(shardDeleteEventListener); clusterDeleteEvent.addShardEvent(shardDeleteEvent); listener.update(EventType.DELETE, clusterDeleteEvent); Mockito.verify(shardDeleteEvent).onEvent(); Mockito.verify(shardDeleteEventListener).update(any(), any()); }
@Test public void ExerciseCodeTableReaderTest() throws IOException { for (int opcode = 0; opcode < VCDiffCodeTableData.kCodeTableSize; ++opcode) { instructions_and_sizes_ptr_.put((byte) opcode); if ((g_exercise_code_table_.inst1[opcode] != VCDiffCodeTableData.VCD_NOOP) && (g_exercise_code_table_.size1[opcode] == 0)) { int startPos = instructions_and_sizes_ptr_.position(); VarInt.putInt(instructions_and_sizes_ptr_, 1000 + opcode); Assert.assertTrue(startPos < instructions_and_sizes_ptr_.position()); } if ((g_exercise_code_table_.inst2[opcode] != VCDiffCodeTableData.VCD_NOOP) && (g_exercise_code_table_.size2[opcode] == 0)) { int startPos = instructions_and_sizes_ptr_.position(); VarInt.putInt(instructions_and_sizes_ptr_, 1000 + opcode); Assert.assertTrue(startPos < instructions_and_sizes_ptr_.position()); } } instructions_and_sizes_ptr_.flip(); reader_ = new VCDiffCodeTableReader(g_exercise_code_table_, kLastExerciseMode); reader_.init(instructions_and_sizes_ptr_); int opcode = 0; for (byte inst_mode1 = 0; inst_mode1 <= VCDiffCodeTableData.VCD_LAST_INSTRUCTION_TYPE + kLastExerciseMode; ++inst_mode1) { byte inst1 = inst_mode1; byte mode1 = 0; if (inst_mode1 > VCDiffCodeTableData.VCD_COPY) { inst1 = VCDiffCodeTableData.VCD_COPY; mode1 = (byte) (inst_mode1 - VCDiffCodeTableData.VCD_COPY); } for (byte inst_mode2 = 0; inst_mode2 <= VCDiffCodeTableData.VCD_LAST_INSTRUCTION_TYPE + kLastExerciseMode; ++inst_mode2) { byte inst2 = inst_mode2; byte mode2 = 0; if (inst_mode2 > VCDiffCodeTableData.VCD_COPY) { inst2 = VCDiffCodeTableData.VCD_COPY; mode2 = (byte) (inst_mode2 - VCDiffCodeTableData.VCD_COPY); } VerifyInstModeSize1(inst1, mode1, (byte) 0, (byte) opcode); VerifyInstModeSize2(inst2, mode2, (byte) 0, (byte) opcode); ++opcode; VerifyInstModeSize1(inst1, mode1, (byte) 0, (byte) opcode); VerifyInstModeSize2(inst2, mode2, (byte) 255, (byte) opcode); ++opcode; VerifyInstModeSize1(inst1, mode1, (byte) 255, (byte) opcode); VerifyInstModeSize2(inst2, mode2, (byte) 0, (byte) opcode); ++opcode; VerifyInstModeSize1(inst1, mode1, (byte) 255, (byte) opcode); VerifyInstModeSize2(inst2, mode2, (byte) 255, (byte) opcode); ++opcode; } } assertEquals(VCDiffCodeTableData.kCodeTableSize, opcode); }
@Test public void testParseBoolean() throws IOException, ConfigException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); Properties zkProp = getDefaultZKProperties(); zkProp.setProperty("localSessionsEnabled", "true"); quorumPeerConfig.parseProperties(zkProp); assertEquals(true, quorumPeerConfig.areLocalSessionsEnabled()); zkProp.setProperty("localSessionsEnabled", "false"); quorumPeerConfig.parseProperties(zkProp); assertEquals(false, quorumPeerConfig.areLocalSessionsEnabled()); zkProp.setProperty("localSessionsEnabled", "True"); quorumPeerConfig.parseProperties(zkProp); assertEquals(true, quorumPeerConfig.areLocalSessionsEnabled()); zkProp.setProperty("localSessionsEnabled", "False"); quorumPeerConfig.parseProperties(zkProp); assertEquals(false, quorumPeerConfig.areLocalSessionsEnabled()); zkProp.setProperty("localSessionsEnabled", "yes"); try { quorumPeerConfig.parseProperties(zkProp); fail("Must throw exception as 'yes' is not accpetable for parseBoolean!"); } catch (ConfigException e) { } }
@Test void doScaPsuIdentified_withPsuAuthorisationRequest_decoupledApproach() { UpdateConsentPsuDataReq updateAuthorisationRequest = buildUpdateConsentPsuDataReq(); updateAuthorisationRequest.setPassword(PSU_PASSWORD); when(xs2aAisConsentService.getAccountConsentById(ENCRYPTED_CONSENT_ID)).thenReturn(Optional.of(aisConsent)); SpiAccountConsent spiAccountConsent = new SpiAccountConsent(); when(xs2aAisConsentMapper.mapToSpiAccountConsent(aisConsent)).thenReturn(spiAccountConsent); SpiPsuData spiPsuData = SpiPsuData.builder().psuId(PSU_ID).build(); when(spiContextDataProvider.provideWithPsuIdData(PSU_ID_DATA)).thenReturn(SPI_CONTEXT_DATA); when(xs2aToSpiPsuDataMapper.mapToSpiPsuData(PSU_ID_DATA)).thenReturn(spiPsuData); SpiAspspConsentDataProvider spiAspspConsentDataProvider = mock(SpiAspspConsentDataProvider.class); when(spiAspspConsentDataProviderFactory.getSpiAspspDataProviderFor(ENCRYPTED_CONSENT_ID)).thenReturn(spiAspspConsentDataProvider); SpiPsuAuthorisationResponse spiPsuAuthorisationResponse = new SpiPsuAuthorisationResponse(false, SpiAuthorisationStatus.SUCCESS); when(aisConsentSpi.authorisePsu(SPI_CONTEXT_DATA, AUTHORISATION_ID, spiPsuData, PSU_PASSWORD, spiAccountConsent, spiAspspConsentDataProvider)) .thenReturn(SpiResponse.<SpiPsuAuthorisationResponse>builder() .payload(spiPsuAuthorisationResponse) .build()); when(commonDecoupledAisService.proceedDecoupledApproach(ENCRYPTED_CONSENT_ID, AUTHORISATION_ID, spiAccountConsent, PSU_ID_DATA)) .thenReturn(buildDecoupledUpdateConsentPsuDataResponse()); authorisation.setChosenScaApproach(ScaApproach.DECOUPLED); AuthorisationProcessorRequest processorRequest = buildAuthorisationProcessorRequest(ScaStatus.PSUIDENTIFIED, updateAuthorisationRequest, authorisation); AuthorisationProcessorResponse processorResponse = aisAuthorisationProcessorService.doScaPsuIdentified(processorRequest); assertFalse(processorResponse.hasError()); assertEquals(ScaStatus.SCAMETHODSELECTED, processorResponse.getScaStatus()); assertEquals(ENCRYPTED_CONSENT_ID, processorResponse.getConsentId()); assertEquals(AUTHORISATION_ID, processorResponse.getAuthorisationId()); verify(commonDecoupledAisService).proceedDecoupledApproach(ENCRYPTED_CONSENT_ID, AUTHORISATION_ID, spiAccountConsent, PSU_ID_DATA); }
@Test void getAccountDetails_failure_accountReferenceNotFoundInAccountAccess() { when(getCardAccountDetailsValidator.validate(getCardAccountDetailsRequestObject)) .thenReturn(ValidationResult.invalid(VALIDATION_ERROR)); ResponseObject<Xs2aCardAccountDetailsHolder> actualResponse = cardAccountService.getCardAccountDetails(CONSENT_ID, ACCOUNT_ID, REQUEST_URI); assertThatErrorIs(actualResponse, CONSENT_INVALID); }
@Test public void testInternalResolveCodeWithoutArguments01() throws Exception { DataSourceMessageSource ds = new DataSourceMessageSource(); ds.cachedMergedProperties = null; String code = "code01"; Locale locale = new Locale("ja", "JP", ""); ds.defaultLocale = null; Map<Locale, Properties> map = new HashMap<Locale, Properties>(); Properties props = new Properties(); String msg = "テストメッセージ０１"; props.put(code, msg); map.put(locale, props); ds.cachedMergedProperties = map; String returnMsg = ds.internalResolveCodeWithoutArguments(code, locale); assertEquals(msg, returnMsg); }
@Test public void exceptionallyCompose_shouldComposeInErrorCase() { final AtomicReference<Throwable> receivedError = new AtomicReference<>(); final SafeFuture<String> safeFuture = new SafeFuture<>(); final SafeFuture<String> composedFuture = new SafeFuture<>(); final SafeFuture<String> result = safeFuture.exceptionallyCompose( error -> { receivedError.set(error); return composedFuture; }); final RuntimeException exception = new RuntimeException("Nope"); safeFuture.completeExceptionally(exception); assertThat(result).isNotDone(); assertThat(receivedError).hasValue(exception); composedFuture.complete("Success"); assertThat(result).isCompletedWithValue("Success"); }
@Test public void test() { assertEquals(shouldMatch, matcher.matches(testPath)); }
@Test void testSize() { assertThat(registry.size()).isGreaterThan(0); }
@Test public void testAccumulate() { final ExplodingSequence<Integer> sequence = new ExplodingSequence<>( Sequences.simple(ImmutableList.of(1, 2, 3)), false, false ); Assert.assertEquals(ImmutableList.of(1, 2, 3), sequence.accumulate(new ArrayList<>(), Accumulators.list())); Assert.assertEquals("Closes resources", 1, sequence.getCloseCount()); }
@Test public void testDelete() throws Exception { enhancedDependenciesManager.addNew( makeDependency( "artifactId", "groupId", "1.0" ) ); enhancedDependenciesManager.delete( new NormalEnhancedDependency( makeDependency( "artifactId", "groupId", "1.0" ), new HashSet<String>() ) ); assertTrue( originalSetOfDependencies.isEmpty() ); }
@Test public void decrStringInt() throws TimeoutException, CacheException { EasyMock.expect(client.decr("key1", 1)).andReturn(2L); EasyMock.replay(client); assertEquals(2L, clientWrapper.decr("key1", 1)); EasyMock.verify(client); }
@Test public void testMatchFirst() { List<Integer> res = textAndPosition.match("bc"); assertEquals(Arrays.asList(10), res); }
@Test public void testMetadataGetImportedKeys() throws Exception { final String catalog = ""; final String schema = null; final String table = "my_table"; QueryState state = new QueryState(MetaDataOperation.GET_IMPORTED_KEYS, new Object[] { catalog, schema, table }); state.invoke(conn, statement); Mockito.verify(metadata).getImportedKeys(catalog, schema, table); }
@Test void testCreateTokenAtWhenIsNotPresentInActiveStorage() { Instant now = Instant.now(); TrackingToken mockTrackingToken = new GlobalSequenceTrackingToken(3); when(activeStorage.createTokenAt(now)).thenReturn(null); when(historicStorage.createTokenAt(now)).thenReturn(mockTrackingToken); TrackingToken tokenAt = testSubject.createTokenAt(now); assertEquals(mockTrackingToken, tokenAt); }
@Test public void testAreEqual() { assertTrue(CalendarUtils.areEqual(null, null)); Calendar calendar = Calendar.getInstance(); Date now = calendar.getTime(); assertFalse(CalendarUtils.areEqual(now, null)); assertFalse(CalendarUtils.areEqual(null, now)); assertTrue(CalendarUtils.areEqual(now, now)); calendar.add(Calendar.HOUR_OF_DAY, 1); assertFalse(CalendarUtils.areEqual(now, calendar.getTime())); }
@Test public void testGetKey() { for (int i = 0; i < keys.length; i++) { assertEquals("map.getKey(" + i + ")", keys[i], map.getKey(i)); } }
@Test public void testGetPoints() { assertThat(cut.getPoints(ANY_PROJECT_ID)).containsExactly( axisPointOf(CoverageLevel.COVERED), axisPointOf(CoverageLevel.PARTIALLY_COVERED), axisPointOf(CoverageLevel.IGNORED_COVERAGE), axisPointOf(CoverageLevel.STARTED), axisPointOf(CoverageLevel.NOT_AUTOMATABLE), axisPointOf(CoverageLevel.NOT_COVERED)); }
@Test public void testDates_can_deserialize_legacy_date_format() throws JsonException { Date date = new Date(); SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ"); Object deserializedDate = SerializationUtils.toObject("\"" + format.format(date) + "\""); assertEquals(Date.class, deserializedDate.getClass()); assertTrue(date.after((Date)deserializedDate)); assertTrue(date.getTime() - ((Date)deserializedDate).getTime() < 1000L); }
@Test public void testAccepts() { assertTrue(servlet.accepts(request)); assertFalse(servlet.accepts(null)); final RequestPathInfo rpi = Mockito.mock(RequestPathInfo.class); when(rpi.getSuffix()).thenReturn(null); when(request.getRequestPathInfo()).thenReturn(rpi); assertFalse(servlet.accepts(request)); }
@Test public void testShouldIntercept() throws Exception { Assert.assertTrue(delegatingEndpointInterceptor.shouldIntercept(messageContext, webServiceEndpoint)); }
@Test public void testLedgerMetadataListenerOnLedgerDeleted() throws Exception { long ledgerId = System.currentTimeMillis(); String ledgerStr = String.valueOf(ledgerId); LinkedBlockingQueue<Optional<LedgerMetadata>> changes = new LinkedBlockingQueue<>(); LedgerMetadataListener listener = (ledgerId1, metadata) -> changes.add(Optional.ofNullable(metadata != null ? metadata.getValue() : null)); Stat stat = mock(Stat.class); when(stat.getVersion()).thenReturn(1234); when(stat.getCtime()).thenReturn(metadata.getCtime()); mockZkGetData( ledgerStr, true, KeeperException.Code.OK.intValue(), serDe.serialize(metadata), stat); ledgerManager.registerLedgerMetadataListener(ledgerId, listener); assertTrue(ledgerManager.listeners.containsKey(ledgerId)); LedgerMetadata change1 = changes.take().get(); assertEquals(metadata, change1); verify(mockZk, times(1)) .getData(anyString(), any(Watcher.class), any(DataCallback.class), any()); assertTrue(watchers.containsKey(ledgerStr)); mockZkGetData( ledgerStr, true, KeeperException.Code.NONODE.intValue(), null, null); notifyWatchedEvent( EventType.NodeDataChanged, KeeperState.SyncConnected, ledgerStr); Optional<LedgerMetadata> change2 = changes.take(); assertFalse(change2.isPresent()); assertFalse(ledgerManager.listeners.containsKey(ledgerId)); verify(scheduler, times(1)).submit(any(Runnable.class)); verify(scheduler, times(0)).schedule( any(Runnable.class), anyLong(), any(TimeUnit.class)); assertFalse(watchers.containsKey(ledgerStr)); }
@Test public void setChatStickerSet() { BaseResponse response = bot.execute(new SetChatStickerSet(groupId, "PengradTest")); assertFalse(response.isOk()); assertEquals(400, response.errorCode()); }
@Test public void serializeXLogBaseOfXYChartPlot_resultJsonHasXLogBase() throws IOException { plot.setxLogBase(1.5); xyChartSerializer.serialize(plot, jgen, new DefaultSerializerProvider.Impl()); jgen.flush(); JsonNode actualObj = mapper.readTree(sw.toString()); Assertions.assertThat(actualObj.has("x_log_base")).isTrue(); Assertions.assertThat(actualObj.get("x_log_base").asDouble()).isEqualTo(1.5); }
@Test public void testConfigure(@Injectable Configuration conf) { new Expectations() {{ conf.getString("field"); result = "field0"; conf.getString("value"); result = "value0"; }}; bolt.configure(conf); assertThat(bolt.field, is("field0")); assertThat(bolt.value, is("value0")); }
@Test public void testGetContrasts() { List<Contrast> contrasts = testConfiguration(MICROARRAY_CONFIGURATION_XML).getContrasts(); assertThat(contrasts, hasSize(2)); Contrast contrast = contrasts.get(0); assertThat(contrast.getId(), is("g1_g2")); assertThat(contrast.getDisplayName(), is("'g1' vs 'g2'")); assertThat(contrast.getReferenceAssayGroup().assaysAnalyzedForThisDataColumn(), contains("A")); assertThat(contrast.getTestAssayGroup().assaysAnalyzedForThisDataColumn(), contains("A", "B")); Contrast otherContrast = contrasts.get(1); assertThat(otherContrast.getId(), is(not(contrast.getId()))); }
@Test( expected = PentahoAccessControlException.class ) public void prohibitedForAdministerSecurity() throws PentahoAccessControlException { IAuthorizationPolicy policy = mock( IAuthorizationPolicy.class ); when( policy.isAllowed( RepositoryReadAction.NAME ) ).thenReturn( true ); when( policy.isAllowed( RepositoryCreateAction.NAME ) ).thenReturn( true ); when( policy.isAllowed( AdministerSecurityAction.NAME ) ).thenReturn( true ); when( policy.isAllowed( PublishAction.NAME ) ).thenReturn( false ); repositoryPublishService.validateAccess(); }
@Test public void testGetProperty() { String expected = "false"; setProperty(PrometheusMetricFactory.ENABLE_PROP, expected); String prop = PrometheusMetricFactory.getProperty(PrometheusMetricFactory.ENABLE_PROP, "true"); clearProperty(PrometheusMetricFactory.ENABLE_PROP); Assert.assertEquals(prop, expected); }
@Test public void testInit() { presenter.init(); verify(view).init(presenter); verify(view).setValue(new CaseInstanceSearchRequest()); verify(caseManagementService).getCaseInstances(view.getValue()); }
@Test public void branchDeleted() throws IOException { commonExpectations(); assertThat( event.check(newGitHubBranchDecisionContext() .withLocalBranch(localBranch) .withBranchTrigger(trigger) .withLocalRepo(localRepo) .withListener(listener) .build()), notNullValue() ); }
@Test void map() { Assertions.assertArrayEquals(NUMBERS, PandaStream.of(VALUES).map(Integer::parseInt).sorted().toArray(Integer[]::new)); }
@Test public void testResumeScanningOnResponse() throws Exception { final SearchResult searchResult = SearchUtil.createSearchResult(1); presenter.onResponse(null, Response.success(searchResult)); verify(viewBinder).resumeScanning(); }
@Test public void testGetMinInt () { assertEquals (5, MathHelper.getMinInt (5)); assertEquals (5, MathHelper.getMinInt (5, 5, 5, 5)); assertEquals (1, MathHelper.getMinInt (5, 3, 2, 1)); assertEquals (3, MathHelper.getMinInt (5, 3, 7, 4)); }
@Test(expected = RuntimeException.class) public void testValidateOperand_valueempty() { Expression expression = new Expression(); expression.setOperator(Operator.AND); List<Operand> operandsList = new ArrayList<>(); Operand testoperand = new Operand(); testoperand.setField(new Field("name", "")); operandsList.add(testoperand); expression.setOperands(operandsList); RequestValidator.validateExpression(expression); }
@Test public void testHashCode() { TokenParam tokenParam1 = new TokenParam("foo", "bar"); assertEquals(4716638, tokenParam1.hashCode()); }
@Test public void testParseCharset() throws Exception { String t = "text/html; charset=utf-16;text/html; charset=utf-8"; String r = StrFormatUtil.parseCharset(t); System.out.println(r); Assert.assertTrue("utf-8".equals(r)); }
@Test public void test_canAddPermission_failure() { String path = "users/safe01"; String token = "7QPMPIGiyDFlJkrK3jFykUqa"; Response response = getMockResponse(HttpStatus.OK, true, "{\"keys\":[\"safe01\", \"safe02\"]}"); when(reqProcessor.process("/sdb/list","{\"path\":\"metadata/users\"}",token)).thenReturn(response); boolean valid = ControllerUtil.canAddPermission("users/safe03", token); assertFalse(valid); }
@Test public void testGetDouble() throws Exception { double test_Double = WXUtils.getDouble("8098.8989px"); assertEquals(8098.8, test_Double, 0.1); }
@Test public void testGoodMeasure() throws Exception { SimpleFeatureSource source = featureSource.getFeatureSource("lrssimple"); LRSMeasureProcess process = new LRSMeasureProcess(); SimpleFeatureCollection origional = source.getFeatures(); Point point = geometryFactory.createPoint(new Coordinate(1.0, 0.0)); FeatureCollection result = process.execute(origional, "from_lrs", "to_lrs", point, null); Assert.assertEquals(1, result.size()); Feature feature = result.features().next(); Assert.assertNotNull(feature.getProperty("lrs_measure")); Assert.assertNotNull(feature.getProperty("lrs_measure").getValue()); Double measure = (Double) feature.getProperty("lrs_measure").getValue(); Assert.assertEquals(1.0, measure, 0.0); }
@Test public void longDynamicText() { List<TextFragment> fragments = TemplateParser.parseTemplateString("{{this text should be dynamic}}"); assertThat(fragments, contains(TextFragment.dynamicFragment("this text should be dynamic"))); }
@Test public void percentDecodeBeforeParsing() { assertEquals("1.1.1.1", Hosts.parse("%31.%31.%31.%31").name()); assertEquals("1.1.1.1", Hosts.parse("1%2e1%2e1%2e1").name()); }
@Test public void testAnimate() throws Exception { URI animation = getClass().getResource("/synfig-test-animation.sif").toURI(); Map<String, String> metadata = new HashMap<>(); metadata.put("episode.title", "Test"); metadata.put("episode.author", "John Doe"); metadata.put("series.title", "The Art Of Animation"); List<String> options = new ArrayList<>(2); options.add("-t"); options.add("ffmpeg"); Job job = animateService.animate(animation, metadata, options); File output = new File(new URI(job.getPayload())); Assert.assertTrue(output.isFile()); }
@Test public void shouldSaveUpdate() throws Exception { Vendor vendor = new Vendor(); vendor.setId(20L); service.save(vendor); verify(repository, never()).insert(vendor); verify(repository).update(any(Vendor.class)); }
@Test public void testParentNamespaceNotReleased() { long childNamespaceId = 1, parentNamespaceId = 2; Namespace childNamespace = createNamespace(childNamespaceId); Namespace parentNamespace = createNamespace(parentNamespaceId); Release childRelease = createRelease("{\"k1\":\"v3\", \"k2\":\"v2\"}"); List<Item> childItems = Arrays.asList(createItem("k1", "v2"), createItem("k2", "v2")); when(releaseService.findLatestActiveRelease(childNamespace)).thenReturn(childRelease); when(releaseService.findLatestActiveRelease(parentNamespace)).thenReturn(null); when(itemService.findItemsWithoutOrdered(childNamespaceId)).thenReturn(childItems); when(namespaceService.findParentNamespace(childNamespace)).thenReturn(parentNamespace); boolean isModified = namespaceUnlockAspect.isModified(childNamespace); Assert.assertTrue(isModified); }
@Test public void testXmlReplaceItemAttribute() throws Exception { CompoundTransformer transformer = CompoundTransformer.builder() .xmlReplaceItem("Tag1/@attr[.='foo']", "<xsl:attribute name=\"attr\">bar</xsl:attribute>") .build(); assertSingleXmlTransformation(transformer, "<Tag1 attr=\"foo\">foo</Tag1>", "<Tag1 attr=\"bar\">foo</Tag1>"); assertSingleXmlTransformation(transformer, "<Tag1 attr=\"baz\">foo</Tag1>", "<Tag1 attr=\"baz\">foo</Tag1>"); }
@Test public void testgetByLabel() { String label = "test-label"; ConsumerType ctype = this.createConsumerType(label, false); ConsumerType test = this.consumerTypeCurator.getByLabel(label); assertSame(ctype, test); }
@Test public void setLdapName() throws Exception { assertThat(user.getLdapName(),is(OLD_LDAPNAME)); user.setLdapName(NEW_LDAPNAME); assertThat(user.getLdapName(),is(NEW_LDAPNAME)); }
@Test(expected = NullPointerException.class) public void editSoftlinkRelationWithArgumentNullShouldThrowException() throws ForeignableOwnerViolationException { ForeignableOwner editingOwner = ForeignableOwner.AMW; softlinkRelationBoundary.editSoftlinkRelation(editingOwner, null); }
@Test public void testGetData() { ResourceException exc = new ResourceException(400, "Invalid domain name"); assertEquals(exc.getData(), "Invalid domain name"); }
@Test public void shouldFailWhenUserIsNotFound() throws Exception { doReturn(null).when(userRepository).findByUsername(anyString()); try { final User user = new User("imrenagi", "imrenagi", "imre"); userService.create(user); fail(); } catch (Exception e) { } }
@Test public void shouldCallGetterMethod() throws Exception { String value = (String) Beans.value(new SomeObject(), ImmutableList.of("one")); assertThat(value).isEqualTo("1"); }
@Test public void testGetLanguage() { assertEquals(english, content.getLanguage()); }
@Test public void detectsExtraObjectKeys() { Node actual = Node.objectNode().withMember("foo", Node.from("bar")).withMember("fizz", Node.from("buzz")); Node expected = Node.objectNode().withMember("foo", Node.from("bar")); assertThat(NodeDiff.diff(actual, expected), contains("[]: Extra key `fizz` encountered with content: \"buzz\"")); }
@Test public void missingTest() { ReceiveTask element = Bpmn2Factory.eINSTANCE.createReceiveTask(); Result<BpmnNode> result = match().apply(element); assertEquals(result.value(), defaultValue); assertTrue(result.isFailure()); }
@Test public void DueDateDiffText_ShouldShowNow_IfDifferenceIs0() { _controller.changeDueDateBy(PLUS, TimeUnit.MINUTES, 15); _controller.changeDueDateBy(MINUS, TimeUnit.MINUTES, 15); verify(_talkToTCSMock, atLeastOnce()).updateDueDateDisplay(anyString(), dueDateDiffTextCaptor.capture()); assertThat(dueDateDiffTextCaptor.getValue()).isEqualTo("now"); }
@Test public void current_get() { TraceContext context = extractWithAmazonTraceId(); try (Tracing t = Tracing.newBuilder().propagationFactory(factory).build(); Scope scope = t.currentTraceContext().newScope(context)) { assertThat(ExtraFieldPropagation.get("x-amzn-trace-id")) .isEqualTo(awsTraceId); } }
@Test public void testGetProperty_Nested() { TstJavaBean o1 = createBean(); assertNull(PropertyUtils.getProperty(o1, "related.integerField")); TstJavaBean o1related = new TstJavaBean(); o1related.setIntegerField(44); o1.setRelated(o1related); assertEquals(44, PropertyUtils.getProperty(o1, "related.integerField")); }
@Test public void convertToRepresentation_shouldReturnSameStringForToday() throws Exception { Date today = new Date(); String expected = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(today); String result = (String) ConversionUtil.convertToRepresentation(today, Representation.REF); Assert.assertEquals(result, expected); }
@Test public void testConvertFromActiveMQDestination() { String result = StringToListOfActiveMQDestinationConverter.convertFromActiveMQDestination(null); assertNull(result); }
@Test public void test_coverage_4_4_2_multi_source() { settings.setProperty(PythonCoverageSensor.REPORT_PATHS_KEY, "coverage.4.4.2-multi-sources.xml"); coverageSensor.execute(context); assertThat(context.lineHits("moduleKey:sources/folder1/file1.py", 1)).isEqualTo(1); assertThat(context.lineHits("moduleKey:sources/folder1/file2.py", 1)).isNull(); assertThat(context.lineHits("moduleKey:sources/folder2/file2.py", 1)).isNull(); }
@Test public void resolveModelList_modelListStateNodeHasReportedFeature() { ElementPropertyMap map = createSimplePropertyMap(); map.resolveModelList("foo"); StateNode stateNode = (StateNode) map.get("foo"); Assert.assertTrue(stateNode.isReportedFeature(ModelList.class)); }
@Test public void testGetContent() { openDiagram(); editor.getContent(); verify(clientDiagramService).transform(kogitoDiagramResourceArgumentCaptor.capture()); final KogitoDiagramResource resource = kogitoDiagramResourceArgumentCaptor.getValue(); assertThat(resource).isNotNull(); assertThat(resource.projectDiagram().isPresent()).isTrue(); assertThat(resource.projectDiagram().get()).isEqualTo(diagram); }
@Test(expected = IllegalStateException.class) public void startQuery_serviceNotStarted() throws Exception { final QueryExecutor executor = new LocalQueryExecutor(mock(CreateKafkaTopic.class), mock(KafkaStreamsFactory.class)); executor.startQuery("rya", new StreamsQuery(UUID.randomUUID(), "query", true, false)); }
@Test public void deleteConfigurationTest() throws Exception { ConfigurationModel configurationModel = new ConfigurationModel(1L, 2L, "dateCreated", "lastUpdated", configContextEnum); DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, null, descriptorConfigRepository, null, null, null, null); configurationAccessor.deleteConfiguration(configurationModel); Mockito.verify(descriptorConfigRepository).deleteById(Mockito.any()); }
@Test public void testCreate() throws Exception { MParticle mockMp = Mockito.mock(MParticle.class); Mockito.when(mockMp.getEnvironment()).thenReturn(MParticle.Environment.Development); MParticle.setInstance(mockMp); ConfigManager manager = new ConfigManager(new MockContext(), MParticle.Environment.Production, "some api key", "some api secret"); boolean sessionHistory = true; BatchId batchId = new BatchId(manager.getMpid(), null, null, null); MessageBatch batch = MessageBatch.create( sessionHistory, manager,new JSONObject(), batchId); assertNotNull(batch.getString("dt")); assertNotNull(batch.getString("id")); assertNotNull(batch.getDouble("ct")); assertNotNull(batch.getString("sdk")); assertNotNull(batch.getBoolean("oo")); assertNotNull(batch.getDouble("uitl")); assertNotNull(batch.getDouble("stl")); assertNotNull(batch.getJSONObject("ck")); if (manager.getProviderPersistence() != null) { assertNotNull(batch.getJSONObject("cms")); } sessionHistory = false; batch = MessageBatch.create( sessionHistory, manager,new JSONObject(), batchId); assertNotNull(batch.getString("dt")); assertNotNull(batch.getString("id")); assertNotNull(batch.getDouble("ct")); assertNotNull(batch.getString("sdk")); assertNotNull(batch.getBoolean("oo")); assertNotNull(batch.getDouble("uitl")); assertNotNull(batch.getDouble("stl")); assertNotNull(batch.getJSONObject("ck")); if (manager.getProviderPersistence() != null) { assertNotNull(batch.getJSONObject("cms")); } batch = MessageBatch.create( sessionHistory, manager,new JSONObject(), batchId); assertFalse(batch.has("pb")); }
@Test public void provided_get_fieldset_is_propagated_to_sync_session() throws Exception { OperationHandlerImplFixture fixture = new OperationHandlerImplFixture(); OperationHandlerImpl handler = fixture.createHandler(); handler.get(dummyGetUri(), Optional.of("donald,duck")); verify(fixture.mockSyncSession).get(any(), eq("donald,duck"), any()); }
@Test public void localAndRemoteAddressShouldNotStartWithForwardSlash() { final Set<Transaction> filteredList = pendingTransactionFilter.reduce(getPendingTransactions(), filters, limit); assertThat(filteredList.size()).isEqualTo(expectedListOfTransactionHash.size()); for (Transaction trx : filteredList) { assertThat(expectedListOfTransactionHash).contains(trx.getHash().toHexString()); } }
@Test public void toTypeSchemaIntNotNullable() throws Exception { Schema schema = AvroUtils.typeFor(DataTypes.IntegerType, false); assertEquals("Invalid type", Schema.Type.INT, schema.getType()); }
@Test public void testToString() { TargetingChannel tc = new TargetingChannel(); assertEquals("none", tc.getQueryKey()); tc = new TargetingChannel(); tc.setG(Arrays.asList("G")); tc.setA(Arrays.asList("A")); tc.setR(Arrays.asList("R")); tc.setT(Arrays.asList("T")); tc.setSi(Arrays.asList("Si")); tc.setM(Arrays.asList("M")); tc.setPm("CPC"); tc.setDpc(Arrays.asList("DPC")); tc.setIpl(Arrays.asList("IPL")); tc.setAus(Arrays.asList("AUS")); tc.setPdas(Arrays.asList("PDAS")); tc.setAis(Arrays.asList("AIS")); tc.setDms(Arrays.asList("DMS")); tc.setExclude_pdas(Arrays.asList("EX_PDAS")); tc.setExclude_apps(Arrays.asList("EX_APPS")); String exp = "{adv_type:[M],slot_id:[Si],net_type:[T],gender:[G],age:[A],device price category:[DPC],price_type:CPC,residence_city[R],ip_city_code[IPL],app interests[AIS],app usages[AUS],pdas[PDAS],exclude_pdas[EX_PDAS],device models[DMS]}"; assertEquals(exp, tc.toString()); }
@Test public void testRead() throws Exception { expectThrows(UnimplementedError.class, () -> rpcInputStream.read()); }
@Test public void shouldResolveServerToBePartOfSite() throws Exception { String serverID = "SERVER"; String siteID = "SITE"; given(mockSessionID.getSessionServerID()).willReturn(serverID); given(mockQuery.getSiteID(eq(serverID))).willReturn(siteID); utils.getSiteNodes(mockSession); verify(mockQuery).getSiteNodes(eq(siteID)); }
@Test public void bindToUri_notFound_noComplaint() { bindToUri(FIND_ONCE, "notThere", SOME_URI).yields(FIND_ONCE); }
@SuppressWarnings("unchecked") @Test public void testFormatStatusWithoutBackendStatus() { ComputeMetadataIncludingStatus<Image.Status> resource = createMock(ComputeMetadataIncludingStatus.class); expect(resource.getStatus()).andReturn(Image.Status.PENDING); expect(resource.getBackendStatus()).andReturn(null).anyTimes(); replay(resource); assertEquals(formatStatus(resource), "PENDING"); verify(resource); }
@Test public void testIntsToByte() throws UnsupportedEncodingException { int[] arr = new int[]{0xE4, 0xb8, 0xAD, 0xE6, 0x96, 0x87}; byte[] bt = ConvertUtil.intToByte(arr); String str = new String(bt); System.out.println(str); int[] tt = new int[]{0xD6, 0xD0, 0xCE, 0xC4}; String strs = new String(ConvertUtil.intToByte(tt), "GBK"); System.out.println(strs); }
@Test public void shouldUpdateCompanyNameAndTopBarThemeWhenInformationUpdated() throws Exception { SettingService settingService = mock(SettingService.class); FileService fileService = mock(FileService.class); UploadService uploadService = mock(UploadService.class); InitParams initParams = new InitParams(); ValueParam companyName = new ValueParam(); companyName.setName(BrandingServiceImpl.BRANDING_COMPANY_NAME_INIT_PARAM); companyName.setValue("Default Company Name"); initParams.addParam(companyName); BrandingService brandingService = new BrandingServiceImpl(initParams, settingService, fileService, uploadService); Branding newBranding = new Branding(); newBranding.setCompanyName("New Company Name"); newBranding.setTopBarTheme("Pink"); ArgumentCaptor<Context> settingContext = ArgumentCaptor.forClass(Context.class); ArgumentCaptor<Scope> settingScope = ArgumentCaptor.forClass(Scope.class); ArgumentCaptor<String> settingKey = ArgumentCaptor.forClass(String.class); ArgumentCaptor<SettingValue> settingValue = ArgumentCaptor.forClass(SettingValue.class); brandingService.updateBrandingInformation(newBranding); verify(settingService, times(2)).set(settingContext.capture(), settingScope.capture(), settingKey.capture(), settingValue.capture()); List<Context> contexts = settingContext.getAllValues(); List<Scope> scopes = settingScope.getAllValues(); List<String> keys = settingKey.getAllValues(); List<SettingValue> values = settingValue.getAllValues(); assertEquals(Context.GLOBAL, contexts.get(0)); assertEquals(Scope.GLOBAL, scopes.get(0)); assertEquals(BrandingServiceImpl.BRANDING_COMPANY_NAME_SETTING_KEY, keys.get(0)); assertEquals("New Company Name", values.get(0).getValue()); assertEquals(Context.GLOBAL, contexts.get(1)); assertEquals(Scope.GLOBAL, scopes.get(1)); assertEquals(BrandingServiceImpl.BRANDING_TOPBAR_THEME_SETTING_KEY, keys.get(1)); assertEquals("Pink", values.get(1).getValue()); }
@Test public void testMultipleCells() throws Exception { String code = "var a = 1+1;"; SimpleEvaluationObject seo = createSeo(code); javaEvaluator.evaluate(seo, code); String code2 = "a+a"; SimpleEvaluationObject seo2 = createSeo(code2); TryResult evaluate2 = javaEvaluator.evaluate(seo2, code2); assertThat(evaluate2.result()).isEqualTo(4); }
@Test public void setPoolSize() { scheduler.setPoolSize(10); verify(delegate).setPoolSize(10); }
@Test public void testGetDominatorSetsLoopingGraph() { Map<Integer, Set<Integer>> expected = new HashMap<>(); expected.put(0, new HashSet<>(Arrays.asList(0))); expected.put(1, new HashSet<>(Arrays.asList(0, 1))); expected.put(2, new HashSet<>(Arrays.asList(0, 1, 2))); expected.put(3, new HashSet<>(Arrays.asList(0, 1, 3))); expected.put(4, new HashSet<>(Arrays.asList(0, 1, 3, 4))); expected.put(5, new HashSet<>(Arrays.asList(0, 1, 3, 4, 5))); expected.put(6, new HashSet<>(Arrays.asList(0, 1, 3, 4, 6))); expected.put(7, new HashSet<>(Arrays.asList(0, 1, 3, 4, 7))); expected.put(8, new HashSet<>(Arrays.asList(0, 1, 3, 4, 7, 8))); expected.put(9, new HashSet<>(Arrays.asList(0, 1, 3, 4, 7, 8, 9))); expected.put(10, new HashSet<>(Arrays.asList(0, 1, 3, 4, 7, 8, 10))); expected.put(11, new HashSet<>(Arrays.asList(0, 1, 3, 4, 7, 8, 10, 11))); assertEquals(expected, loopingGraph.getDominatorSets()); }
@Test public void testUpdate() { OptionGameSettings settings = new OptionGameSettings(new SettingsImpl(), new RandomDice()); assertEquals("{\n" + " 'boardSize':23,\n" + " 'bombPower':3,\n" + " 'bombsCount':1,\n" + " 'catchPerkScore':5,\n" + " 'destroyWallCount':52,\n" + " 'diePenalty':30,\n" + " 'isBigBadaboom':false,\n" + " 'isMultiple':false,\n" + " 'killMeatChopperScore':10,\n" + " 'killOtherHeroScore':20,\n" + " 'killWallScore':1,\n" + " 'meatChoppersCount':5,\n" + " 'perkBombBlastRadiusInc':2,\n" + " 'perkBombCountInc':4,\n" + " 'perkDropRatio':20,\n" + " 'perkPickTimeout':30,\n" + " 'playersPerRoom':5,\n" + " 'remoteControlCount':3,\n" + " 'roundSettings':{\n" + " 'minTicksForWin':1,\n" + " 'roundsEnabled':true,\n" + " 'roundsPerMatch':1,\n" + " 'timeBeforeStart':5,\n" + " 'timeForWinner':1,\n" + " 'timePerRound':200\n" + " },\n" + " 'timeoutBombBlastRadiusInc':30,\n" + " 'timeoutBombCountInc':30,\n" + " 'timeoutBombImmune':30,\n" + " 'winRoundScore':30\n" + "}", JsonUtils.prettyPrint(settings.asJson())); settings.update(new JSONObject("{\n" + " 'diePenalty':12,\n" + " 'isMultiple':true,\n" + " 'perkBombBlastRadiusInc':4,\n" + " 'perkDropRatio':23,\n" + " 'roundSettings':{\n" + " 'roundsEnabled':false,\n" + " 'timeBeforeStart':10,\n" + " },\n" + " 'timeoutBombCountInc':12,\n" + "}")); assertEquals("{\n" + " 'boardSize':23,\n" + " 'bombPower':3,\n" + " 'bombsCount':1,\n" + " 'catchPerkScore':5,\n" + " 'destroyWallCount':52,\n" + " 'diePenalty':12,\n" + " 'isBigBadaboom':false,\n" + " 'isMultiple':true,\n" + " 'killMeatChopperScore':10,\n" + " 'killOtherHeroScore':20,\n" + " 'killWallScore':1,\n" + " 'meatChoppersCount':5,\n" + " 'perkBombBlastRadiusInc':4,\n" + " 'perkBombCountInc':4,\n" + " 'perkDropRatio':23,\n" + " 'perkPickTimeout':30,\n" + " 'playersPerRoom':5,\n" + " 'remoteControlCount':3,\n" + " 'roundSettings':{\n" + " 'minTicksForWin':1,\n" + " 'roundsEnabled':false,\n" + " 'roundsPerMatch':1,\n" + " 'timeBeforeStart':10,\n" + " 'timeForWinner':1,\n" + " 'timePerRound':200\n" + " },\n" + " 'timeoutBombBlastRadiusInc':30,\n" + " 'timeoutBombCountInc':12,\n" + " 'timeoutBombImmune':30,\n" + " 'winRoundScore':30\n" + "}", JsonUtils.prettyPrint(settings.asJson())); settings.update(new JSONObject("{}")); assertEquals("{\n" + " 'boardSize':23,\n" + " 'bombPower':3,\n" + " 'bombsCount':1,\n" + " 'catchPerkScore':5,\n" + " 'destroyWallCount':52,\n" + " 'diePenalty':12,\n" + " 'isBigBadaboom':false,\n" + " 'isMultiple':true,\n" + " 'killMeatChopperScore':10,\n" + " 'killOtherHeroScore':20,\n" + " 'killWallScore':1,\n" + " 'meatChoppersCount':5,\n" + " 'perkBombBlastRadiusInc':4,\n" + " 'perkBombCountInc':4,\n" + " 'perkDropRatio':23,\n" + " 'perkPickTimeout':30,\n" + " 'playersPerRoom':5,\n" + " 'remoteControlCount':3,\n" + " 'roundSettings':{\n" + " 'minTicksForWin':1,\n" + " 'roundsEnabled':false,\n" + " 'roundsPerMatch':1,\n" + " 'timeBeforeStart':10,\n" + " 'timeForWinner':1,\n" + " 'timePerRound':200\n" + " },\n" + " 'timeoutBombBlastRadiusInc':30,\n" + " 'timeoutBombCountInc':12,\n" + " 'timeoutBombImmune':30,\n" + " 'winRoundScore':30\n" + "}", JsonUtils.prettyPrint(settings.asJson())); }
@Test public void testExecuteWhenContainerTaskAddAndMicroserviceIsEmpty() { try { PowerMockito.when(containerTask.getAction()).thenReturn(ContainerTask.Tasks.ADD); PowerMockito.when(containerTask.getMicroserviceUuid()).thenReturn("uuid"); PowerMockito.when(dockerUtil.getContainer(anyString())).thenReturn(optionalContainer); containerManager.execute(containerTask); PowerMockito.verifyStatic(DockerUtil.class); DockerUtil.getInstance(); PowerMockito.verifyPrivate(containerManager, never()).invoke("addContainer", eq(microservice)); PowerMockito.verifyPrivate(containerManager, never()).invoke("createContainer", any()); PowerMockito.verifyPrivate(containerManager, never()).invoke("getRegistry", any()); } catch (Exception e) { fail("This should not happen"); } }
@Test public void extractLegalBases() { List<String> legalBases = judgmentExtractor.extractLegalBases(sJudgment, correctionList); assertThat(legalBases, is(empty())); }
@Test public void sendMailUserNullTest() { final Mail message = new Mail(); PFUserDO toUser; message.setTo((PFUserDO)null); final String icalContent = null; final Collection<? extends MailAttachment> attachments = null; try { sendMail.send(message, icalContent, attachments); fail(); } catch (UserException e) { assertEquals("mail.error.missingToAddress", e.getI18nKey()); } toUser = new PFUserDO(); message.setTo(toUser); try { sendMail.send(message, icalContent, attachments); fail(); } catch (UserException e) { assertEquals("mail.error.missingToAddress", e.getI18nKey()); } }
@Test public void handleStartShouldCreateChildSpanUnderParent() throws SpanContextParseException { HttpRequestContext context = handler.handleStart(carrier, request); verify(tracer).spanBuilderWithRemoteParent(any(String.class), same(spanContextRemote)); assertThat(context.span).isEqualTo(spanWithRemoteParent); }
@Test public void testGetPushNotificationSubscriptionRequestByUuIdWithInvalidArguments() { resetAll(); replayAll(); try { pushNotificationSubscriptionRequestService.getPushNotificationSubscriptionRequestByUuId(null); fail("Exception should be thrown"); } catch (final IllegalArgumentException ex) { } verifyAll(); }
@Test public void tlenFilter() { initDataset(); System.out.println(">>>> Running templateLengthFilter..."); long count; System.out.println("-------------------------------------- using templateLengthFilter"); ad.templateLengthFilter(">398;<400").show(); System.out.println("--------------------------------------"); }
@Test(timeout=1200000) public void testFinishApplicationMasterBeforeRegistering() throws Exception { MockRM rm = new MockRM(conf); try { rm.start(); MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB); RMApp app1 = rm.submitApp(2048); MockAM am1 = MockRM.launchAM(app1, rm, nm1); FinishApplicationMasterRequest req = FinishApplicationMasterRequest.newInstance( FinalApplicationStatus.FAILED, "", ""); Throwable cause = null; try { am1.unregisterAppAttempt(req, false); } catch (Exception e) { cause = e.getCause(); } Assert.assertNotNull(cause); Assert .assertTrue(cause instanceof ApplicationMasterNotRegisteredException); Assert.assertNotNull(cause.getMessage()); Assert .assertTrue(cause .getMessage() .contains( "Application Master is trying to unregister before registering for:")); am1.registerAppAttempt(); am1.unregisterAppAttempt(req, false); } finally { if (rm != null) { rm.stop(); } } }
@Test public void when_callingOnNewEpochWithHistoryProcessor_expect_stopMonitorNotCalled() { TestTrainer trainer = new TestTrainer(); IHistoryProcessor.Configuration hpConf = new IHistoryProcessor.Configuration(5, 4, 4, 4, 4, 0, 0, 2); MockHistoryProcessor hp = new MockHistoryProcessor(hpConf); trainer.setHistoryProcessor(hp); DataManagerTrainingListener sut = new DataManagerTrainingListener(new MockDataManager(false)); TrainingListener.ListenerResponse response = sut.onEpochTrainingResult(trainer, null); assertEquals(1, hp.stopMonitorCallCount); assertEquals(TrainingListener.ListenerResponse.CONTINUE, response); }
@Test public void testOnDecisionTableSelectionsChangedEventWithSelectionsWithClipboardPopulated() { model.getMetadataCols().add(new MetadataCol52()); model.getData().add(new ArrayList<DTCellValue52>() {{ add(new DTCellValue52(1)); add(new DTCellValue52("descr")); add(new DTCellValue52("md")); }}); uiModel.selectCell(0, 2); clipboard.setData(new HashSet<Clipboard.ClipboardData>() {{ add(new DefaultClipboard.ClipboardDataImpl(0, 2, model.getData().get(0).get(2))); }}); menu.onDecisionTableSelectionsChangedEvent(new DecisionTableSelectionsChangedEvent(dtPresenter)); verify(view, times(1)).enableCutMenuItem(eq(true)); verify(view, times(1)).enableCopyMenuItem(eq(true)); verify(view, times(1)).enablePasteMenuItem(eq(true)); verify(view, times(1)).enableInsertRowAboveMenuItem(eq(true)); verify(view, times(1)).enableInsertRowBelowMenuItem(eq(true)); verify(view, times(1)).enableDeleteRowMenuItem(eq(true)); }
@Test public void testNoDefaultPrefixExists(){ assertNull("No Default Should Be Set", swaggerConfluenceConfig.getPrefix()); }
@Test public void createMonitoringOfficer() throws Exception { String hash = "hash"; MonitoringOfficerRegistrationResource registrationResource = new MonitoringOfficerRegistrationResource( "tom", "baldwin", "0114 286 6356", "password" ); User user = newUser().build(); when(monitoringOfficerInviteServiceMock.activateUserByHash(anyString(), any())).thenReturn(serviceSuccess(user)); when(crmServiceMock.syncCrmContact(user.getId())).thenReturn(serviceSuccess()); mockMvc.perform(post("/monitoring-officer-registration/monitoring-officer/create/{hash}", hash) .contentType(APPLICATION_JSON) .content(toJson(registrationResource))) .andExpect(status().is2xxSuccessful()); InOrder inOrder = inOrder(monitoringOfficerInviteServiceMock, crmServiceMock); inOrder.verify(monitoringOfficerInviteServiceMock).activateUserByHash(hash, registrationResource); inOrder.verify(crmServiceMock).syncCrmContact(user.getId()); inOrder.verifyNoMoreInteractions(); }
@Test public void shouldReThrowProfileExceptionFromExtraDataConverter() throws Exception { Receipt receipt = new Receipt.Builder() .withWrappedReceiptKey(validReceiptKey) .withTimestamp(VALID_TIMESTAMP) .withRememberMeId(SOME_REMEMBER_ME_ID_BYTES) .withParentRememberMeId(SOME_PARENT_REMEMBER_ME_ID_BYTES) .withProfile(PROFILE_CONTENT) .withOtherPartyProfile(OTHER_PROFILE_CONTENT) .withReceiptId(DECODED_RECEIPT_BYTES) .withExtraData(EXTRA_DATA_CONTENT) .build(); when(profileReaderMock.read(eq(PROFILE_CONTENT), any(Key.class))).thenReturn(profileMock); when(profileReaderMock.read(eq(OTHER_PROFILE_CONTENT), any(Key.class))).thenReturn(otherProfileMock); when(extraDataReaderMock.read(eq(EXTRA_DATA_CONTENT), any(Key.class))).thenThrow(new ProfileException("Cannot decode profile")); try { testObj.create(receipt, keyPair.getPrivate()); } catch (ProfileException ex) { assertThat(ex.getMessage(), containsString("Cannot decode profile")); return; } fail("Expected an exception"); }
@Test public void testRoleBinding() { RoleBinding binding = entityUserOperator.generateRoleBinding(namespace, uoWatchedNamespace); assertThat(binding.getSubjects().get(0).getNamespace(), is(namespace)); assertThat(binding.getMetadata().getNamespace(), is(uoWatchedNamespace)); }
@Test public void loadDefaultValueTest() { MyPreference myPreference = new MyPreferencePortableGeneratedImpl(); myPreference = myPreference.defaultValue(myPreference); MySharedPreference mySharedPreference = new MySharedPreferencePortableGeneratedImpl(); MySharedPreference2 mySharedPreference2 = new MySharedPreference2PortableGeneratedImpl(); final MyPreferencePortableGeneratedImpl loadedMyPreference = preferenceBeanStoreImpl.load(new MyPreferencePortableGeneratedImpl()); final MySharedPreference2PortableGeneratedImpl loadedMySharedPreference2 = preferenceBeanStoreImpl.load(new MySharedPreference2PortableGeneratedImpl()); verify(preferenceStore, times(3)).get(eq(scopeInfo), anyString()); verify(preferenceStore).get(scopeInfo, MyPreference.class.getSimpleName()); verify(preferenceStore).get(scopeInfo, MySharedPreference.class.getSimpleName()); verify(preferenceStore).get(scopeInfo, MySharedPreference2.class.getSimpleName()); assertEquals(myPreference, loadedMyPreference); assertEquals(mySharedPreference, loadedMyPreference.mySharedPreference); assertEquals(mySharedPreference2, loadedMySharedPreference2); }
@Test public void shouldRecoverFromStartOfLogZeroIfThereAreNoCheckPointAndOldestLogIsVersionZero() { when( tailScanner.getTailInformation() ).thenReturn( new LogTailInformation( true, 10L, INITIAL_LOG_VERSION, currentLogVersion, LogEntryVersion.CURRENT ) ); RecoveryStartInformation recoveryStartInformation = new RecoveryStartInformationProvider( tailScanner, monitor ).get(); verify( monitor ).noCheckPointFound(); assertEquals( LogPosition.start( INITIAL_LOG_VERSION ), recoveryStartInformation.getRecoveryPosition() ); assertEquals( 10L, recoveryStartInformation.getFirstTxIdAfterLastCheckPoint() ); assertTrue( recoveryStartInformation.isRecoveryRequired() ); }
@Test public void testConvertCommentsToRaw() { List<Map<String, Object>> commentList = new ArrayList<>(); Map<String, Object> comments = new HashMap<>(); comments.put("comment", "test comment"); comments.put("username", "test username"); comments.put("timestamp", 1526424323279L); commentList.add(comments); Map<String, Object> document = new HashMap<>(); document.put("testField", "testValue"); document.put(COMMENTS_FIELD, commentList); solrUpdateDao.convertCommentsToRaw(document); @SuppressWarnings("unchecked") List<String> actualComments = (List<String>) document.get(COMMENTS_FIELD); String expectedComment = "{\"comment\":\"test comment\",\"username\":\"test username\",\"timestamp\":1526424323279}"; assertEquals(expectedComment, actualComments.get(0)); assertEquals(1, actualComments.size()); assertEquals("testValue", document.get("testField")); }
@Test public void testSet() { ArrayList list = new ArrayList(); CastorizedList castor = new CastorizedList(list); Object o = new Object(); castor.add(o); assertEquals(o, castor.set(0, new Object())); }
@Test public void testSetJMSExpirationConversionChecks() throws JMSException { JmsMessageFacade facade = Mockito.mock(JmsMessageFacade.class); JmsMessage message = Mockito.mock(JmsMapMessage.class); Mockito.when(message.getFacade()).thenReturn(facade); try { JmsMessagePropertyIntercepter.setProperty(message, JMS_EXPIRATION, new byte[1]); fail("Should have thrown an exception for this call"); } catch (JMSException e) { } }
@Test public void getSqlKeyFalse() throws Exception { assertThat(getSqlKey(getTestInputsSqlKey(false)), is("SQLQuery:8835ea6c637a5e1b67bf01952bc9225597ae33ceeaf17e913aae50193c18346d")); }
@Test public void testSyncSend() throws InterruptedException { for (int i = 0; i < 2; i++) { for (int id = 0; id < 4; id++) { producer.syncSend(id); } } new CountDownLatch(1).await(); }
@Test(expected = UnknownQualityTypeException.class) public void throwsUnknownQualityType() throws Exception { Type type = new Type("unknownType"); engine.createQuality(new QualityKey(type, name)); }
@Test public void contains() { Assert.assertFalse(TestUtils.ONE_TEN.contains(0L)); Assert.assertTrue(TestUtils.ONE_TEN.contains(1L)); Assert.assertTrue(TestUtils.ONE_TEN.contains(5L)); Assert.assertFalse(TestUtils.ONE_TEN.contains(10L)); Assert.assertFalse(TestUtils.ONE_TEN.contains(11L)); }
@Test public void testReadPrecipCenter() throws IOException, SQLException { AscReaderDriver reader = new AscReaderDriver(); try(InputStream inputStream = AscReaderDriverTest.class.getResourceAsStream("precip30min_center.asc")) { reader.read(connection, inputStream, new EmptyProgressVisitor(), "PRECIP30MIN", 4326); } Statement st = connection.createStatement(); try(ResultSet rs = st.executeQuery("SELECT * FROM PRECIP30MIN WHERE ST_INTERSECTS(THE_GEOM, ST_MAKEPOINT(-180.1454, -80.303))")) { assertTrue(rs.next()); assertEquals(234, rs.getInt("Z")); } st = connection.createStatement(); try(ResultSet rs = st.executeQuery("SELECT * FROM PRECIP30MIN WHERE ST_INTERSECTS(THE_GEOM, ST_MAKEPOINT(-173.213, -89.771))")) { assertTrue(rs.next()); assertEquals(114, rs.getInt("Z")); } st = connection.createStatement(); try(ResultSet rs = st.executeQuery("SELECT * FROM PRECIP30MIN WHERE ST_INTERSECTS(THE_GEOM, ST_MAKEPOINT(-177.3831, -84.5793))")) { assertTrue(rs.next()); assertNull(rs.getObject("Z")); } }
@Test public void testStopAtOnceSuccess() throws SaturnJobConsoleException { JobConfig4DB jobConfig4DB = new JobConfig4DB(); jobConfig4DB.setJobName(jobName); jobConfig4DB.setEnabled(false); String executor = "executor"; when(currentJobConfigService.findConfigByNamespaceAndJobName(namespace, jobName)).thenReturn(jobConfig4DB); when(curatorFrameworkOp.getChildren(JobNodePath.getExecutionNodePath(jobName))) .thenReturn(Lists.newArrayList("1")); when(registryCenterService.getCuratorFrameworkOp(namespace)).thenReturn(curatorFrameworkOp); when(curatorFrameworkOp.checkExists(JobNodePath.getExecutionNodePath(jobName, "1", "running"))) .thenReturn(true); when(curatorFrameworkOp.getChildren(JobNodePath.getServerNodePath(jobName))) .thenReturn(Lists.newArrayList(executor)); when(curatorFrameworkOp.getData(JobNodePath.getServerNodePath(jobName, executor, "status"))).thenReturn("true"); jobService.stopAtOnce(namespace, jobName); verify(curatorFrameworkOp).create(JobNodePath.getStopOneTimePath(jobName, executor)); }
@Test public void testLoginUserSuccess() throws Exception { this.mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody( FileUtils.readFileToString( TestUtils.getFileFromPath(this, "res/session_login_ok.json")))); this.userDataRepository.loginUser(this.fakeUser).subscribe(this.testObserver); this.testObserver.awaitTerminalEvent(); UserEntity responseUser = (UserEntity) ((List<Object>)testObserver.getEvents().get(0)).get(0); assertTrue(responseUser.getEmail().length() > 0); assertTrue(responseUser.getAuthToken().length() > 0); }
@Test public void testDoubleEquals3() { System.out.println("doubleEquals"); final double a = 0.00001; final double b = 0.00001; assertTrue(Misc.doubleEquals(a, b, 0.00001)); }
@Test public void testFixSelectionLength() { String text = ""; Assert.assertEquals( 0, TextUtils.fixSelectionLength( text, 0, -1 )); Assert.assertEquals( 0, TextUtils.fixSelectionLength( text, 0, 0 )); Assert.assertEquals( 0, TextUtils.fixSelectionLength( text, 0, 1 )); Assert.assertEquals( 0, TextUtils.fixSelectionLength( text, 0, 100 )); text = "a"; Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 0, -1 )); Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 0, 0 )); Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 0, 1 )); Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 0, 100 )); text = "a\nb\nc"; Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 0, -1 )); Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 2, 1 )); Assert.assertEquals( 1, TextUtils.fixSelectionLength( text, 4, 1 )); Assert.assertEquals( text.length(), TextUtils.fixSelectionLength( text, 0, 100 )); }
@Test public void testSettingFieldBoostingInQuerqyBoostQueriesToOff() { ModifiableSolrParams params = new ModifiableSolrParams(); params.add(QuerqyDismaxParams.QBOOST_FIELD_BOOST, QuerqyDismaxParams.QBOOST_FIELD_BOOST_OFF); when(request.getSchema()).thenReturn(null); final DismaxSearchEngineRequestAdapter adapter = new DismaxSearchEngineRequestAdapter(qParser, request, "some query", params, querqyParser, rewriteChain, infoLogging, null); Assert.assertFalse(adapter.useFieldBoostingInQuerqyBoostQueries()); }
@Test void alternation() { assertMatch("file.{txt,adoc}", Arrays.asList("file.txt", "file.adoc"), Arrays.asList("file.java", "file.txtx", "file./txt")); }
@Test public void testLast_N_Char() { assertEquals(BLANK_STR, AlgoBox.last_N_Char(null, 1)); assertEquals("test", AlgoBox.last_N_Char(TEST_STR, 2000)); assertEquals("t", AlgoBox.last_N_Char("test\ntest", 1)); assertEquals("st", AlgoBox.last_N_Char("test\ttest", 2)); assertEquals(" test", AlgoBox.last_N_Char("test test", 5)); assertEquals(BLANK_STR, AlgoBox.last_N_Char(BLANK_STR, 1)); assertEquals(SPACE_STR, AlgoBox.last_N_Char(SPACE_STR, 1)); assertEquals("l", AlgoBox.last_N_Char(NULL_STR, 1)); assertEquals(QUO_STR, AlgoBox.last_N_Char(QUO_STR, 1)); assertEquals(QUO_STR, AlgoBox.last_N_Char(QUO_STR, 1)); assertEquals(MIXTD_SURROGATEPAIR, AlgoBox.last_N_Char(MIXTD_SURROGATEPAIR, 100)); assertEquals("𠀑ab", AlgoBox.last_N_Char(MIXTD_SURROGATEPAIR, 3)); assertEquals("𠀐我𠀑ab", AlgoBox.last_N_Char(MIXTD_SURROGATEPAIR, 5)); assertEquals("ゴ", AlgoBox.last_N_Char(JAPANESE1_STR, 1)); assertEquals("べる", AlgoBox.last_N_Char(JAPANESE2_STR, 2)); assertEquals(" 食べる", AlgoBox.last_N_Char(JAPANESE3_STR, 4)); }
@Test(expected = IllegalArgumentException.class) public void emptyValues() { new V1StoredIndex("field") .addDocument( 0, Collections.<UnsignedByteArray>emptyList()); }
@Test public void testExecutePutMembership() { String domainName = "mgradddom1"; String roleName = "role1"; TopLevelDomain dom1 = createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", adminUser); zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom1); TopLevelDomain dom2 = createTopLevelDomainObject("coretech", "Test Domain2", "testOrg", adminUser); zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom2); SubDomain subDom2 = createSubDomainObject("storage", "coretech", "Test Domain2", "testOrg", adminUser); zms.postSubDomain(mockDomRsrcCtx, "coretech", auditRef, subDom2); Role role1 = createRoleObject(domainName, roleName, null, "user.joe", "user.jane"); zms.putRole(mockDomRsrcCtx, domainName, roleName, auditRef, role1); zms.dbService.executePutMembership(mockDomRsrcCtx, domainName, roleName, new RoleMember().setMemberName("user.doe"), auditRef, "putMembership"); zms.dbService.executePutMembership(mockDomRsrcCtx, domainName, roleName, new RoleMember().setMemberName("coretech.storage"), auditRef, "putMembership"); Role role = zms.getRole(mockDomRsrcCtx, domainName, roleName, false, false, false); assertNotNull(role); List<RoleMember> members = role.getRoleMembers(); assertNotNull(members); assertEquals(members.size(), 4); List<String> checkList = new ArrayList<>(); checkList.add("user.joe"); checkList.add("user.jane"); checkList.add("user.doe"); checkList.add("coretech.storage"); checkRoleMember(checkList, members); zms.deleteSubDomain(mockDomRsrcCtx, "coretech", "storage", auditRef); zms.deleteTopLevelDomain(mockDomRsrcCtx, "coretech", auditRef); zms.deleteTopLevelDomain(mockDomRsrcCtx, domainName, auditRef); }
@Test public void testGetPath() throws Exception { assertEquals("a/b/", FilenameUtils.getPath("~userz/a/b/c.txt")); }
@Test public void testOnTimeout() { cut.onSentPacket(sentPacket); when(receivedHeader.getTimestampDifference()) .thenReturn(75_521) .thenReturn(78_344); cut.onReceivedPacket(receivedPacket); cut.onSentPacket(sentPacket); cut.onReceivedPacket(receivedPacket); assertThat(cut.getMaxWindow(), not(is(150))); cut.onTimeout(); assertThat(cut.getMaxWindow(), is(150)); }
@Test public void testSerializationError() { expectedException.expect(IllegalArgumentException.class); expectedException.expectMessage("unable to serialize"); SerializableUtils.serializeToByteArray(new UnserializableByJava()); }
@Test public void should_update_on_endpoints_detectes_event() { this.events.next(new InstanceEndpointsDetectedEvent(this.instance.getId(), this.instance.getVersion(), this.instance.getEndpoints())); verify(this.updater, times(1)).updateInfo(this.instance.getId()); }
@Test public void testBrokerList() { String broker1 = "127.0.0.1:1234"; String broker2 = "localhost:2345"; Connection connection = ConnectionFactory.fromHostList(broker1, broker2); List<String> brokers = new ArrayList<String>(); brokers.add(broker1); brokers.add(broker2); Assert.assertEquals(connection.getBrokerList(), brokers); }
@Test public void asksValueOfNonExistingParameter() throws Exception { Hashtable<String, String> ddoc4jConf = this.configuration.loadConfiguration("src/main/resources/digidoc4j.yaml"); Assert.assertNull(ddoc4jConf.get("DIGIDOC_PROXY_HOST")); }
@Test public void zeroStepTest() { List<Map<String, String>> pipeInputList = new LinkedList<>(); pipeInputList.add(new HashMap<String, String>()); RangeExtension rangeExtension = new RangeExtension(); RangeExtension.RangeTag rangeTag = new RangeExtension.RangeTag(); rangeTag.setName("var_out_test"); rangeTag.setFrom("1"); rangeTag.setTo("-3"); rangeTag.setStep("0"); List<Map<String, String>> resultList = rangeExtension.pipelinePossibleStates(rangeTag, pipeInputList); Assert.assertEquals(1, resultList.size()); Map<String, String> resultMap = resultList.get(0); Assert.assertEquals("1", resultMap.get("var_out_test")); }
@Test @Category({ValidatesRunner.class, UsesTestStream.class}) public void testReshuffleWithTimestampsStreaming() { TestStream<Long> stream = TestStream.create(VarLongCoder.of()) .advanceWatermarkTo(new Instant(0L).plus(Duration.standardDays(48L))) .addElements( TimestampedValue.of(0L, new Instant(0L)), TimestampedValue.of(1L, new Instant(0L).plus(Duration.standardDays(48L))), TimestampedValue.of( 2L, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(48L)))) .advanceWatermarkToInfinity(); PCollection<KV<String, Long>> input = pipeline .apply(stream) .apply(WithKeys.of("")) .apply(Window.into(FixedWindows.of(Duration.standardMinutes(10L)))); PCollection<KV<String, Long>> reshuffled = input.apply(Reshuffle.of()); PAssert.that(reshuffled.apply(Values.create())).containsInAnyOrder(0L, 1L, 2L); pipeline.run(); }
@Test public void testAllowNoParent() { tested.init(canvasHandler); final boolean allow = tested.allow(null, docked); assertFalse(allow); verify(commandManager, times(0)).allow(any(AbstractCanvasHandler.class), any(UpdateDockNodeCommand.class)); }
@Test public void getOnDemandPsData() throws IOException { Vcnl4200 vcnl4200 = new Vcnl4200(mI2c); Mockito.reset(mI2c); vcnl4200.getOnDemandPsData(); Mockito.verify(mI2c).writeRegWord(eq(Vcnl4200.REGISTER_PS_CONF_3_MS), eq((short) Vcnl4200.PS_TRIGGER_ONE_TIME_CYCLE)); Mockito.verify(mI2c).readRegWord(Vcnl4200.REGISTER_PROX_DATA); }
@Test @SuppressWarnings("unchecked") public void createFullPackageMetadataUsingExtractAlwaysPackageVersion() throws Exception { createFullPackageMetadata(extractAlwaysPackageVersion); }
@Test public void shouldListFriendsActivities() throws Exception { enqueueResponse("[]"); ActivityAPI activityAPI = givenAnActivityAPI(); List<Activity> activities = activityAPI.listFriendActivities() .before(Time.seconds(123456789)) .inPage(2) .perPage(10) .execute(); assertRequestPathContains( "/activities/following", "before=123456789", "page=2", "per_page=10" ); }
@Test public void dupesTest() throws Exception { TestSpace ts = prepareTestSpace(); ts.nodes.forEach(n->n.config.setIsFreeRegistrationsAllowedFromYaml(true)); Contract c = new Contract(TestKeys.privateKey(1)); c.seal(); assertEquals(ts.client.register(c.getPackedTransaction(),9000).state,ItemState.APPROVED); Contract c1 = c.createRevision(TestKeys.privateKey(1)); c1.setOwnerKeys(TestKeys.privateKey(2)); c1.getState().setBranchNumber(1); Contract c2 = c.createRevision(TestKeys.privateKey(1)); c2.setOwnerKeys(TestKeys.privateKey(2)); c2.getState().setBranchNumber(2); Contract batch = ContractsService.createBatch(Do.listOf(TestKeys.privateKey(1)),c1,c2); ItemResult ir = ts.client.register(batch.getPackedTransaction(), 9000); System.out.println(ir.errors); assertEquals(ir.state,ItemState.DECLINED); ts.shutdown(); }
@Test public void testRedactForBug1602844() throws Exception { Map<String, String> attributes = ImmutableMap.<String, String>builder() .put(Attribute.DOCUMENT_NAMESPACE, ParseUri.TELEMETRY) .put(Attribute.DOCUMENT_TYPE, "focus-event").put(Attribute.APP_NAME, "Lockbox") .put(Attribute.APP_VERSION, "1.7.0").build(); ObjectNode json = Json.readObjectNode(("{\n" + " \"arch\": \"arm64\",\n" + " \"events\": [\n" + " [\n" + " 224264,\n" + " \"action\",\n" + " \"background\",\n" + " \"app\",\n" + " null,\n" + " {\n" + " \"fxauid\": \"should-be-redacted\"\n" + " }\n" + " ],\n" + " [\n" + " 49,\n" + " \"action\",\n" + " \"startup\",\n" + " \"app\"\n" + " ]\n" + " ],\n" + " \"tz\": 0" + " },\n" + "}").getBytes(StandardCharsets.UTF_8)); assertFalse(json.path("events").path(0).path(5).path("fxauid").isNull()); MessageScrubber.scrub(attributes, json); assertTrue(json.path("events").path(0).path(5).path("fxauid").isNull()); assertFalse(json.path("events").path(0).path(5).path("fxauid").isMissingNode()); assertEquals("app", json.path("events").path(0).path(3).textValue()); assertEquals("0", json.path("tz").asText()); }
@Test public void shouldDoOuterJoin() { givenOuterJoin(); final KStreamHolder<Struct> result = join.build(planBuilder); verify(leftKStream).outerJoin( same(rightKStream), eq(new KsqlValueJoiner(LEFT_SCHEMA.value().size(), RIGHT_SCHEMA.value().size(), 1)), eq(WINDOWS), same(joined) ); verifyNoMoreInteractions(leftKStream, rightKStream, resultKStream); assertThat(result.getStream(), is(resultKStream)); assertThat(result.getKeySerdeFactory(), is(keySerdeFactory)); }
@Test public void testGetPaths() { Set<String> s = r.getPaths(1L); assertEquals(2, s.size()); assertTrue(s.contains("path1a")); assertTrue(s.contains("path1b")); s = r.getPaths(2L); assertEquals(1, s.size()); assertTrue(s.contains("path2a")); assertNull(r.getPaths(3L)); }
@SuppressWarnings("unchecked") @Test public void handleTest() { handler = Mockito.mock(AbstractIngestionHandler.class); Mockito.doCallRealMethod() .when(handler) .handle(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class)); Mockito.doCallRealMethod() .when(handler) .handle(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class), Mockito.any(FileProcessStatus.class)); Mockito.doCallRealMethod().when(handler) .pre(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class)); Mockito.doCallRealMethod().when(handler) .post(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class)); Mockito.doCallRealMethod().when(handler).setPreValidators(Mockito.anyList()); Mockito.doCallRealMethod().when(handler).setPostValidators(Mockito.anyList()); Validator<Resource> preValidator = Mockito.mock(Validator.class); Mockito.when( preValidator.isValid(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class), Mockito.any(Source.class), Mockito.any(Map.class))).thenReturn(true); List<Validator<Resource>> preValidators = new ArrayList<Validator<Resource>>(); preValidators.add(preValidator); handler.setPreValidators(preValidators); Validator<Resource> postValidator = Mockito.mock(Validator.class); Mockito.when( postValidator.isValid(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class), Mockito.any(Source.class), Mockito.any(Map.class))).thenReturn(true); List<Validator<Resource>> postValidators = new ArrayList<Validator<Resource>>(); postValidators.add(postValidator); handler.setPostValidators(postValidators); Resource ife = Mockito.mock(Resource.class); Mockito.when( handler.doHandling(Mockito.any(Resource.class), Mockito.any(AbstractMessageReport.class), Mockito.any(ReportStats.class), Mockito.any(FileProcessStatus.class))).thenReturn(ife); AbstractMessageReport report = Mockito.mock(AbstractMessageReport.class); ReportStats reportStats = Mockito.mock(ReportStats.class); Object fileEntry = null; fileEntry = handler.handle(ife, report, reportStats); Assert.assertNotNull(fileEntry); }
@Test public void isValidForAddOperation_Mismatch() throws NoSuchAlgorithmException, CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); KeyPair notOwnerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, notOwnerKeys, 1); Assert.assertFalse(protectedStorageEntry.isValidForAddOperation()); }
@Test public void testCompile_NamedVarWithoutExtra() throws Exception { final byte[] compiled = JBBPCompiler.compile("var VVV;").getCompiledData(); assertArrayEquals(new byte[] {JBBPCompiler.CODE_VAR | JBBPCompiler.FLAG_NAMED, 0}, compiled); }
@Test public void testServiceInstanceWithGroupFromString() { assertContentServiceWithGroup(ClusterMembership.from("content/id1/4/37", Vtag.currentVersion, Optional.empty())); }
@Test public void modifyHttpRequest_ResolvesCorrectHost_StandardSettings() { EndpointAddressInterceptor interceptor = new EndpointAddressInterceptor(); SdkHttpRequest modified = interceptor.modifyHttpRequest(new Context(request), new ExecutionAttributes()); assertThat(modified.host()).isEqualTo(ACCOUNT_ID + ".s3-control.us-east-1.amazonaws.com"); }
@Test public void canCreateController() { Tokenizer tokenizer = new EDITokenizer(new StringReader(""), null); PluginControllerImpl controller = plugin.createController("SomeStandard", tokenizer); assertNotNull(controller); }
@Test @UseRealWorkspaceManagerFactory(false) public void testProjectIterationUpdate() throws Exception { HProjectIteration projectIteration = makeHProjectIteration("project", "master"); WorkspaceId workspaceId = GWTTestData.workspaceId(LocaleId.DE); when( projectIterationDAO.getBySlug(workspaceId .getProjectIterationId().getProjectSlug(), workspaceId .getProjectIterationId() .getIterationSlug())) .thenReturn(projectIteration); HLocale hLocale = new HLocale(LocaleId.DE); hLocale.setActive(true); when(localeServiceImpl.getByLocaleId(workspaceId.getLocaleId())) .thenReturn(hLocale); when( validationServiceImpl.getValidationActions(projectIteration .getProject().getSlug(), projectIteration.getSlug())) .thenReturn(new ArrayList<ValidationAction>()); TranslationWorkspaceManagerImpl spy = spy(manager); when(mockWorkspaceFactory.createWorkspace(workspaceId)) .thenReturn(mockWorkspace); spy.getOrRegisterWorkspace(workspaceId); spy.projectIterationUpdate(projectIteration, oldProjectSlug, oldIterationSlug); verify(mockWorkspace).publish(isA(WorkspaceContextUpdate.class)); }
@Test public void testListObjectInfoWithMax() throws IOException { gcs.listObjectInfo(TEST_STRING, TEST_STRING, TEST_STRING, 1L); verify(mockGcsDelegate) .listObjectInfo(eq(TEST_STRING), eq(TEST_STRING), eq(TEST_STRING), eq(1L)); }
@Test public void testWriteStringOutputStream_sameCharset() throws Exception { String testString = "Testing©ÿ»"; ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); Streams.write(testString, outputStream, Charset.forName(UTF_8)); byte[] stringBytes = testString.getBytes(Charset.forName(UTF_8)); stringBytes = Arrays.copyOf(stringBytes, stringBytes.length); assertTrue( "Byte arrays shoud be equal", Arrays.equals(stringBytes, outputStream.toByteArray())); String actual = new String(outputStream.toByteArray(), Charset.forName(UTF_8)); assertEquals(testString, actual); }
@Test public void doesTransformFile() throws Exception { File inputFile = new File("./src/test/resources/config.yml"); ConfigTransformer.transformConfigFile(new FileInputStream(inputFile), "./target/", null); File nifiPropertiesFile = new File("./target/nifi.properties"); assertTrue(nifiPropertiesFile.exists()); assertTrue(nifiPropertiesFile.canRead()); nifiPropertiesFile.deleteOnExit(); File flowXml = new File("./target/flow.xml.gz"); assertTrue(flowXml.exists()); assertTrue(flowXml.canRead()); flowXml.deleteOnExit(); }
@Test public void testCopyWithEmptyModuleName() { expect(myIdeaProject.getModules()).andReturn(ImmutableDomainObjectSet.of(ImmutableList.of())); expect(myIdeaModule.getName()).andStubReturn(""); replay(myOriginalDependency, myIdeaModule, myIdeaProject); assertNull(JavaModuleDependency.copy(myIdeaProject, myOriginalDependency)); verify(myOriginalDependency, myIdeaModule); }
@Test public void testAdd() throws Exception { ParseObject parent = new ParseObject("Parent"); ParseRelation relation = new ParseRelation(parent, "key"); ParseObject object = new ParseObject("Test"); relation.add(object); assertEquals("Test", relation.getTargetClass()); assertTrue(relation.hasKnownObject(object)); ParseRelation relationInParent = parent.getRelation("key"); assertEquals("Test", relationInParent.getTargetClass()); assertTrue(relationInParent.hasKnownObject(object)); }
@Test public void testWhenSubjectIsNull() { assertThat(new IsTrueMatcher().matches(null), is(false)); }
@Test public void multipleTokens() { DynamicPath path = new DynamicPath("{count}.{pid}"); assertThat(path.resolve()).isEqualTo("0." + RuntimeProvider.getProcessId()); }
@Test(expected = IllegalArgumentException.class) public void testFromStringWithUnknownUnit() throws Exception { resource = DimensionResource.fromString("23sd"); }
@Test public void testGetValueFromMessage() throws Exception { XpathCacheValueTranslator translator = createTranslator(); AdaptrisMessage message = createMessage(); assertEquals("abc", translator.getValueFromMessage(message)); }
@Test public void empty() throws Exception { JsonSanskritChangeVisitor visitor = new JsonSanskritChangeVisitor(new ObjectMapper()); assertEquals("{}", visitor.getJson()); }
@Test public void shouldExtractKeysFromGivenMap() { final ExtractKeys<String, Integer> function = new ExtractKeys<>(); final Map<String, Integer> input = new HashMap<>(); input.put("first", 1); input.put("second", 2); input.put("third", 3); final Iterable<String> results = function.apply(input); assertEquals(Sets.newHashSet("first", "second", "third"), results); }
@Test public void transitiveEqualsParseTest() throws Exception { String query = "CITY == 'ci\\\\\\\\\\\\ty\\\\.blah'"; JexlNode node = JexlASTHelper.parseJexlQuery(query); String interpretedQuery = JexlStringBuildingVisitor.buildQuery(node); JexlNode newNode = JexlASTHelper.parseJexlQuery(interpretedQuery); String reinterpretedQuery = JexlStringBuildingVisitor.buildQuery(newNode); Assert.assertEquals("CITY == 'ci\\\\\\\\\\\\ty\\\\.blah'", interpretedQuery); Assert.assertEquals(reinterpretedQuery, interpretedQuery); Assert.assertEquals("ci\\\\\\ty\\.blah", node.jjtGetChild(0).jjtGetChild(1).jjtGetChild(0).image); Assert.assertEquals(node.jjtGetChild(0).jjtGetChild(1).jjtGetChild(0).image, newNode.jjtGetChild(0).jjtGetChild(1).jjtGetChild(0).image); }
@Test public void canResolvePlaceholdersInInclude() throws IOException { Map<String, String> overrides = ImmutableMap.of("CONFIG_LOCATION", "some_location"); String yaml = "${CONFIG_LOCATION:classpath:}/conf/environment/default.yaml"; String resolved = YamlConfigurationFormat.YAML.resolvePlaceholdersInText(yaml, overrides); assertThat(resolved, is("some_location/conf/environment/default.yaml")); }
@Test void hidingWithHash() { Obfuscate.secureLogs = ""; String out = Obfuscate.secure(TEST_STRING); assertThat(out).isNotEqualTo(TEST_STRING); assertThat(out.length()).isEqualTo(44); }
@Test public void shouldReturnCorrectChronoUnit() { SoftAssertions assertions = new SoftAssertions(); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.MICROSECONDS)).isEqualTo(ChronoUnit.MICROS); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.NANOSECONDS)).isEqualTo(ChronoUnit.NANOS); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.MILLISECONDS)).isEqualTo(ChronoUnit.MILLIS); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.SECONDS)).isEqualTo(ChronoUnit.SECONDS); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.MINUTES)).isEqualTo(ChronoUnit.MINUTES); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.HOURS)).isEqualTo(ChronoUnit.HOURS); assertions.assertThat(TimeToChronoUnitConverter.of(TimeUnit.DAYS)).isEqualTo(ChronoUnit.DAYS); assertions.assertAll(); }
@Test public void infectedItem() throws Exception { StorageFileItem item = mock(StorageFileItem.class); when(item.getName()).thenReturn("some-infected-item"); assertThat(underTest.hasVirus(item), is(true)); }
@Test public void testCopyFromConfiguration() throws Exception{ final Configuration conf = HBaseConfiguration.create(); final Properties props = new Properties(); conf.set(HConstants.ZOOKEEPER_QUORUM, HConstants.LOCALHOST); conf.set(PropertiesUtilTest.SOME_OTHER_PROPERTY_KEY, PropertiesUtilTest.SOME_OTHER_PROPERTY_VALUE); Properties combinedProps = PropertiesUtil.combineProperties(props, conf); assertEquals(combinedProps.getProperty(HConstants.ZOOKEEPER_QUORUM), conf.get(HConstants.ZOOKEEPER_QUORUM)); assertEquals(combinedProps.getProperty(PropertiesUtilTest.SOME_OTHER_PROPERTY_KEY), conf.get(PropertiesUtilTest.SOME_OTHER_PROPERTY_KEY)); }
@Test(expected=IllegalStateException.class) public void cannotAskForRemainingTimeIfNotSet() { expect(mockClock.getGranularity()).andReturn(1L).anyTimes(); expect(mockClock.getNanoTime()).andReturn(new DiscreteInterval(4L,5L)).anyTimes(); replay(mockClock); impl.getTimeRemaining(); }
@Test public void resourceSpecificFieldsToClient_inputControls() throws Exception { final ClientReportUnit clientObject = new ClientReportUnit(); final ReportUnit serverObject = new ReportUnitImpl(); final List<ResourceReference> serverInputControlReferences = new ArrayList<ResourceReference>(); serverInputControlReferences.add(new ResourceReference("")); serverInputControlReferences.add(new ResourceReference("")); serverInputControlReferences.add(new ResourceReference("")); serverInputControlReferences.add(new ResourceReference("")); serverInputControlReferences.add(new ResourceReference("")); serverObject.setInputControls(serverInputControlReferences); final ClientReference expectedReference = new ClientReference(); when(inputControlResourceReferenceConverter.toClient(any(ResourceReference.class), eq(options))).thenReturn(expectedReference); final ClientReportUnit result = (ClientReportUnit) converter.resourceSpecificFieldsToClient(clientObject, serverObject, options); assertNotNull(result); final List<ClientReferenceableInputControl> clientInputControls = result.getInputControls(); assertNotNull(clientInputControls); assertEquals(clientInputControls.size(), serverInputControlReferences.size()); for (ClientReferenceableInputControl inputControlReference : clientInputControls) { assertSame(inputControlReference, expectedReference); } ArgumentCaptor<ResourceReference> resourceReferenceArgumentCaptor = ArgumentCaptor.forClass(ResourceReference.class); verify(inputControlResourceReferenceConverter, times(serverInputControlReferences.size())) .toClient(resourceReferenceArgumentCaptor.capture(), eq(options)); final List<ResourceReference> resourceReferences = resourceReferenceArgumentCaptor.getAllValues(); assertNotNull(resourceReferences); assertEquals(resourceReferences.size(), serverInputControlReferences.size()); assertTrue(resourceReferences.containsAll(serverInputControlReferences)); }
@Test public void paritalJsonDoesntContainJson() { assertFalse(JsonStreamer.containsJson("{\"name\": \"foo\"}\u0000\u0001\u0002")); }
@Test public void keySet() { Assert.assertEquals(MutableSet.of("A", "B"), this.testObj.keySet()); }
@Test(expected = NullPointerException.class) public void convert_NULL() { converter.convert(null); }
@Test public void serialization() { SerializableTester.reserializeAndAssert( UEnhancedForLoop.create( UVariableDecl.create("c", UPrimitiveTypeTree.CHAR, null), UMethodInvocation.create( UMemberSelect.create( ULiteral.stringLit("foo"), "toCharArray", UMethodType.create(UArrayType.create(UPrimitiveType.CHAR)))), USkip.INSTANCE)); }
@Test public void categorizeNone() { List<Transaction> transactions = ImmutableList.of(MockTransaction.create("2015-01-01", "no", 123)); List<Transaction> categorized = service.categorize(transactions); assertEquals(transactions, categorized); assertEquals(null, categorized.get(0).getCategory()); }
@Test public void shouldTryToBuildLdapConnection() { final LdapProperties properties = mock(LdapProperties.class); when(properties.getHost()).thenReturn("foo"); when(properties.getPort()).thenReturn(42); assertThrows(LDAPException.class, () -> { new SSLLdapConnectionFactory(properties).buildLdapConnection(); }); }
@Test(expected = IllegalArgumentException.class) public void testSetAlphaWithGreaterThanOne() { new JXPanel().setAlpha(Math.nextUp(1f)); }
@Test public void testGetEntityClassFromNodeLabelsHavingTheLabelDeclaredByTheClassNameWithJoinedInheritance() throws Exception { final String simpleClassNameBase = "EntityClass"; final String simpleClassNameA = "SubEntityClassA"; final String simpleClassNameB = "SubEntityClassB"; final JPackage jp = jCodeModel.rootPackage(); final JDefinedClass jBaseClass = jp._class(JMod.PUBLIC, simpleClassNameBase); jBaseClass.annotate(Entity.class); jBaseClass.annotate(Inheritance.class).param("strategy", InheritanceType.JOINED); final JDefinedClass jSubclassA = jp._class(JMod.PUBLIC, simpleClassNameA)._extends(jBaseClass); jSubclassA.annotate(Entity.class); final JDefinedClass jSubclassB = jp._class(JMod.PUBLIC, simpleClassNameB)._extends(jBaseClass); jSubclassB.annotate(Entity.class); buildModel(testFolder.getRoot(), jCodeModel); compileModel(testFolder.getRoot()); final Class<?> baseClass = loadClass(testFolder.getRoot(), jBaseClass.name()); final Class<?> subClassA = loadClass(testFolder.getRoot(), jSubclassA.name()); final Class<?> subClassB = loadClass(testFolder.getRoot(), jSubclassB.name()); final Class<?> clazz = EntityUtils.getEntityClassFromNodeLabels(Arrays.asList(simpleClassNameB), Arrays.asList(baseClass, subClassA, subClassB)); assertThat(clazz, equalTo(subClassB)); }
@Test public void testInit() { presenter.init(); verify(view).init(presenter); verify(variableSelectorDropDown).init(variableSearchService, variableSearchSelectionHandler); verify(variableSelectorDropDown).setOnChange(any()); verify(conditionSelectorDropDown).init(functionSearchService, functionSearchSelectionHandler); verify(conditionSelectorDropDown).setOnChange(any()); verify(conditionSelectorDropDown).setSearchCacheEnabled(false); }
@Test public void shouldNotSendCleanupRequestInCaseOfKeytabDoesNotNeedToBeUpdated() throws Exception { Stack stack = aStack(); Optional<KerberosConfig> kerberosConfig = Optional.of(mock(KerberosConfig.class)); when(kerberosConfigService.get(ENVIRONMENT_CRN, STACK_NAME)).thenReturn(kerberosConfig); when(environmentConfigProvider.isChildEnvironment(ENVIRONMENT_CRN)).thenReturn(true); when(kerberosDetailService.keytabsShouldBeUpdated(CLOUD_PLATFORM, true, kerberosConfig)).thenReturn(false); victim.cleanup(stack, false, false, emptySet(), emptySet()); verifyNoMoreInteractions(freeIpaV1Endpoint); }
@Test public void testArtifactIDValidation() throws Exception { panel.setValidArtifactID(true); verify(view).setValidArtifactID(true); panel.setValidArtifactID(false); verify(view).setValidArtifactID(false); }
@Test public void repository_shouldSetLikeFalseForRepository() { presenter.updateLikes(Collections.singletonList(1), Collections.singletonList(1)); verify(repositoryViewState).updateLike(false, false); }
@Test public void testUnion() throws Exception { List<String> words = asList("a", "b", "c", "d", "e"); DataGenerator<List<String>> batchGen = DataGenerator.union( DataGenerator.items(words), DataGenerator.range(0, 5), (t, n) -> t + '-' + n ).batch(25); List<String> data = batchGen.getValue(); data.sort(Comparator.naturalOrder()); List<String> expected = words.stream().flatMap(w -> { List<String> items = new ArrayList<>(); for (int i = 0; i < 5; i++) { items.add(w + '-' + i); } return items.stream(); }).collect(Collectors.toList()); assertThat(data).containsAll(expected); assertThat(batchGen.apply().isClosed()).isTrue(); }
@Test public void testSetColumnFormatterMap01() throws Exception { AbstractFileUpdateDAO abstractFileUpdateDAO = new AbstractFileUpdateDAO_Stub01(); Map<String, ColumnFormatter> columnFormatterMap = new HashMap<String, ColumnFormatter>(); abstractFileUpdateDAO.setColumnFormatterMap(columnFormatterMap); Object result = ReflectionTestUtils.getField(abstractFileUpdateDAO, "columnFormatterMap"); assertSame(columnFormatterMap, result); }
@Test void validateStartRoute50() { PropertyFactory.get() .register("startShell/startRoute", true, true, true, false); Assertions.assertFalse(RouteValidation.validateStartRoute(this.shellConfiguration, this.routerConfiguration, "/unknownShell/person/detail/:parameter01/:parameter02")); }
@Test public void test() throws Exception { BarrierInputBuilder bib = new BarrierInputBuilder(); BufferHelper.setupHeader(bib, EncodeConstants.OF10_VERSION_ID); BarrierInput bi = bib.build(); ByteBuf out = UnpooledByteBufAllocator.DEFAULT.buffer(); barrierFactory.serialize(bi, out); BufferHelper.checkHeaderV10(out, (byte) 18, 8); }
@Test(expected = StreamsException.class) public void shouldThrowOnForward() { context.forward("key", "value"); }
@Test public void testJavaSerialization() { Layer2VniConfig vni = Layer2VniConfig.builder() .setVni(1) .setVrf("v") .setRouteDistinguisher(RouteDistinguisher.from(65555L, 1)) .setRouteTarget(ExtendedCommunity.of(0, 1, 1)) .build(); assertThat(SerializationUtils.clone(vni), equalTo(vni)); }
@Test public void testForFailedStatusBecauseMissingServiceAccId() throws InvalidGcpContextException { final AuthenticatedContext authContext = createAuthContext(); when(contextBuilder.contextInit(authContext.getCloudContext(), authContext, null, null, false)).thenReturn(context); doThrow(new NullPointerException()).when(gcpCredentialVerifier).checkGcpContextValidity(context); CloudCredentialStatus status = underTest.verify(authContext); Assert.assertNotNull("The returned CloudCredentialStatus instance is null!", status); Assert.assertEquals("Invalid credential status has specified!", CredentialStatus.FAILED, status.getStatus()); }
@Test public void tunnelingFactory() { MetastoreTunnel metastoreTunnel = new MetastoreTunnel(); metastoreTunnel.setLocalhost("local-machine"); metastoreTunnel.setPort(2222); metastoreTunnel.setRoute("a -> b -> c"); metastoreTunnel.setKnownHosts("knownHosts"); metastoreTunnel.setPrivateKeys("privateKeys"); metastoreTunnel.setTimeout(123); AbstractMetaStore federatedMetaStore = newFederatedInstance("fed1", THRIFT_URI); federatedMetaStore.setMetastoreTunnel(metastoreTunnel); factory.newInstance(federatedMetaStore); verify(tunnelingMetaStoreClientFactory).newInstance(THRIFT_URI, metastoreTunnel, "fed1", 3, 2000); verifyZeroInteractions(defaultMetaStoreClientFactory); }
@Test public void noEqualsChar() throws Exception { try { WithStatement.parse("(String s -> \"test\")", "template-path"); fail("Expected exception"); } catch (TokenException e) { assertThat(e.getMessage(), containsString("no equals symbol")); } }
@Test(expected = NullPointerException.class) public void timerUnitNull() { Completable.timer(1, null); }
@Test public void invokeParamIsNull() { FunctionTestUtil.assertResultError( overlappedByFunction.invoke((Range) null, (Range) new RangeImpl() ), InvalidParametersEvent.class ); FunctionTestUtil.assertResultError( overlappedByFunction.invoke((Range) new RangeImpl(), (Range) null ), InvalidParametersEvent.class ); }
@Test public void testEmptyValue() { PrismPropertyValue<String> value = new PrismPropertyValue<String>(""); value = filter.apply(value); AssertJUnit.assertEquals("", value.getValue()); }
@Test public void shouldLimitAtFixedRate() { RateLimiter rateLimiter = new RateLimiter(5, 0.1); List<Long> timestamps = new ArrayList<>(); timestamps.add(System.nanoTime()); for(int i = 0; i < 10; i++) { rateLimiter.acquire(); timestamps.add(System.nanoTime()); } for(int i = 0; i < 10; i++) { assertTrue(timestamps.get(i + 1) - timestamps.get(i) < (20L + 2L) * 1000L * 1000L); assertTrue(timestamps.get(i + 1) - timestamps.get(i) > (20L - 2L) * 1000L * 1000L); } }
@Test public void testGetUnit() { SpectrumBand spectrumBand = new SpectrumBand(band, false); Assert.assertEquals("unit", spectrumBand.getUnit()); }
@Test void testSuccessfulInsert() { MongoCollection<Document> collection = mock(MongoCollection.class); MongoDbUsersDao usersDao = new MongoDbUsersDao(collection, MAPPER); User result = usersDao.insert(USER); assertEquals(USER, result); verify(collection, times(1)).insertOne(argThat( (Document doc) -> doc.containsKey("_id") && doc.containsKey("id") && doc.containsKey("version") && doc.containsKey("creation_time") && doc.containsKey("update_time") && doc.containsKey("document"))); }
@Test public void multiple_newlines_is_reserved_as_object_separator() { try { RpslObject.parse("mntner: AA1-MNT\n\n"); fail(); } catch (IllegalArgumentException e) { assertThat(e.getMessage(), is("Read illegal character in key: '\n'")); } }
@Test public void testMultiply() throws Exception { final double x1 = 3d; final double y1 = 4d; final double z1 = 5d; final double scalar = 6d; Vec3 u = new Vec3(x1, y1, z1); Vec3 v = u.multiply(scalar); assertEquals("u.x", x1 * scalar, u.x, 0d); assertEquals("u.y", y1 * scalar, u.y, 0d); assertEquals("u.z", z1 * scalar, u.z, 0d); assertSame("v == u", u, v); }
@Test public void LtLIT() { assertEquals("{lit} < \"X\"", lit.lt(val).toString()); }
@Test public void of_correctRate() throws Exception { ContinuousCompoundInterest ci = ContinuousCompoundInterest.of( RateAndPeriods.of(0.0234,1) ); assertNotNull(ci.getRate()); assertEquals(ci.getRate(), Rate.of(0.0234)); ci = ContinuousCompoundInterest.of( RateAndPeriods.of(0.05,1) ); assertNotNull(ci.getRate()); assertEquals(ci.getRate(), Rate.of(0.05)); }
@Test public void gradientTest1(){ System.out.println("Gradient Test 1"); Irm3PL model = new Irm3PL(0.9, 0.0, 0.2, 1.7); double[] g1 = model.gradient(0.0, 0); assertEquals("First category, Derivative wrt a", 0.0, g1[0], 1e-7); assertEquals("First category, Derivative wrt b", 0.306, g1[1], 1e-7); assertEquals("First category, Derivative wrt c", -0.50, g1[2], 1e-7); g1 = model.gradient(0.0, 1); assertEquals("First category, Derivative wrt a", 0.0, g1[0], 1e-7); assertEquals("First category, Derivative wrt b", -0.306, g1[1], 1e-7); assertEquals("First category, Derivative wrt c", 0.50, g1[2], 1e-7); }
@Test public void testAsyncMaxConcurrent() { TestScheduler tSched = new TestScheduler(); SchedulerWhen sched = maxConcurrentScheduler(tSched); TestSubscriber<Long> tSub = TestSubscriber.create(); asyncWork(sched).subscribe(tSub); tSub.assertValueCount(0); tSched.advanceTimeBy(0, SECONDS); tSub.assertValueCount(0); tSched.advanceTimeBy(1, SECONDS); tSub.assertValueCount(2); tSched.advanceTimeBy(1, SECONDS); tSub.assertValueCount(4); tSched.advanceTimeBy(1, SECONDS); tSub.assertValueCount(5); tSub.assertComplete(); sched.dispose(); }
@Test public void testGetValue() throws DataSetException { when(iTable.getValue(0, "category")).thenReturn("POPE:01"); when(manager.getEngineByName(anyString())).thenReturn(null); Object value = scriptableTable.getValue(0, "category"); assertEquals("POPE:01", value); verify(ScriptableTable.log).warning("Could not find script engine by name 'POPE'"); verify(manager).getEngineByName("POPE"); verify(iTable).getValue(0, "category"); verifyNoMoreInteractions(ScriptableTable.log, manager, iTable); }
@Test public void testComputeTargetsMultipleEndpoints() throws Exception { final List<String> argsList = Lists.newArrayList( SUBCOMMAND, "-d", Joiner.on(",").join(DOMAINS)); for (final String endpoint : ENDPOINTS) { argsList.add("--master"); argsList.add(endpoint); } argsList.add(SERVICE); final CliParser cliParser = new CliParser(toArray(argsList)); final List<Target> targets = cliParser.getTargets(); final List<Target> expectedTargets = Lists.newArrayListWithExpectedSize(ENDPOINTS.length); for (final String endpoint : ENDPOINTS) { expectedTargets.add(Target.from(URI.create(endpoint))); } assertEquals(expectedTargets, targets); }
@Ignore @Test public void testExecute() throws SubCommandException { BrokerStatusSubCommand cmd = new BrokerStatusSubCommand(); Options options = ServerUtil.buildCommandlineOptions(new Options()); String[] subargs = new String[] {"-b 127.0.0.1:10911", "-c default-cluster"}; final CommandLine commandLine = ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser()); cmd.execute(commandLine, options, null); }
@Test public void testExecuteUniqueColumnCombinationsAlgorithm() throws Exception { HibernateUtil.clear(); List<ConfigurationValue> configs = new ArrayList<>(); configs.add(new ConfigurationValueString(de.metanome.algorithms.testing.example_ucc_algorithm.ExampleAlgorithm.STRING_IDENTIFIER, "path/to/file1", "path/to/file2")); Algorithm algorithm = new Algorithm("example_ucc_algorithm.jar"); algorithm = resource.store(algorithm); executor.executeAlgorithm(algorithm, configs, null, "identifier", genericExecutionSetting); verify(resultReceiver).receiveResult(isA(UniqueColumnCombination.class)); HibernateUtil.clear(); }
@Test public void testDoGetWhenUsageIsHitcountShouldWriteHitcountInResponse() throws ServletException, IOException { dialogDescriptors.add(dialogDescriptor); given(dialogDescriptor.getAttributes().getName()).willReturn(NAME); given(dialogDescriptor.getAttributes().getUsage()).willReturn(DialogDescriptorUsage.HITCOUNT); given(dialogDescriptor.getAttributes().getHitcount()).willReturn(VALIDITY_VALUE); underTest.doGet(request, response); InOrder order = Mockito.inOrder(out); order.verify(out).write("{\"Name\":\"" + NAME + "\", \"Usage\":\"" + DialogDescriptorUsage.HITCOUNT); order.verify(out).write(" -> " + VALIDITY_VALUE + " hit(s) left\"}"); }
@Test @Benchmark public void test35_performance() throws Exception { UnivariatePolynomial<Rational<BigInteger>> a = UnivariatePolynomial.parse("1 + 23123*x^7 + 2344*x^15", Rings.Q); UnivariatePolynomial<Rational<BigInteger>> b = UnivariatePolynomial.parse("1 + 23*x + 23454*x^4", Rings.Q); UnivariatePolynomial<Rational<BigInteger>> g = UnivariatePolynomial.parse("1 + (23/2)*x + 23454*x^3", Rings.Q); a.multiply(new Rational<>(Rings.Z, BigInteger.valueOf(123), BigInteger.valueOf(32))); b.multiply(new Rational<>(Rings.Z, BigInteger.valueOf(123), BigInteger.valueOf(12332))); a.multiply(g); b.multiply(g); System.out.println(a); System.out.println(b); for (int i = 0; i < 1000; i++) { long start = System.nanoTime(); assertExtendedGCD(ModularExtendedRationalGCD(a, b), a, b); assertExtendedGCD(ModularExtendedRationalGCD(b, a), b, a); System.out.println(nanosecondsToString(System.nanoTime() - start)); } }
@Test(expected = RuntimeException.class) public void whenSetInvalidType_exceptionIsThrown() { environment.setProperty("test", new Environment()); }
@Test public void testLaningInteractivePriority() { TimeseriesQuery query = queryBuilder.context(ImmutableMap.of(QueryContexts.PRIORITY_KEY, 100)).build(); Assert.assertFalse(strategy.computeLane(QueryPlus.wrap(query), ImmutableSet.of()).isPresent()); }
@Test public void shouldCreateTokenForDoubleQuotedStringWithEscapedDoubleQuoteCharacters() { String content = "--\"this 'is' a \\\"double-quoted\\\" \n string\"-"; assertThat(content.charAt(2), is('"')); assertThat(content.charAt(41), is('"')); tokenize(content); assertNextTokenIs(0, 1, CndTokenizer.SYMBOL); assertNextTokenIs(1, 2, CndTokenizer.SYMBOL); assertNextTokenIs(2, 42, CndTokenizer.DOUBLE_QUOTED_STRING); assertNextTokenIs(42, 43, CndTokenizer.SYMBOL); assertNoMoreTokens(); }
@Test public void nowTest() { Expr e = factory.now(); assertTrue(e instanceof E_Now); }
@Test public void fetchWithExpiration_noPreviousSuccessfulFetch_fetchesFromBackend() throws Exception { long cacheExpirationInHours = 1; fetchCallToHttpClientReturnsConfigWithCurrentTime(secondFetchedContainer); assertWithMessage("Fetch() failed for first fetch!") .that(fetchHandler.fetch(HOURS.toSeconds(cacheExpirationInHours)).isSuccessful()) .isTrue(); verifyBackendIsCalled(); }
@Test public void last_fromEmptyChain_shouldReturnAbsent(){ final InterceptorChain<Query, QueryResult> chain = new InterceptorChain<>(); final Optional<Interceptor<Query,QueryResult>> optionalLastInterceptor = chain.last(); assertFalse(optionalLastInterceptor.isPresent()); }
@Test public void testEmptyLastCharacterOfLineImport() { ResourceDataSource dataSource = new ResourceDataSource("lastCharacterIssue", new ResourceSet("/", "lastCharacterIssue.uct")); Network network = new UcteImporter().importData(dataSource, null); assertEquals(2, network.getBusBreakerView().getBusStream().count()); }
@Test public void assertRollbackWithoutTransaction() throws SQLException { newBackendTransactionManager(TransactionType.LOCAL, false); backendTransactionManager.rollback(); verify(stateHandler, times(0)).setStatus(ConnectionStatus.TERMINATED); verify(localTransactionManager, times(0)).rollback(); verify(shardingTransactionManager, times(0)).rollback(); }
@Test public void testDataChanges_Query_onCancelled() { TestObserver<DataSnapshot> sub = TestObserver.create(); RxFirebaseDatabase.dataChanges(mockQuery) .subscribe(sub); verifyQueryAddValueEventListener(); callValueEventOnCancelled(new DatabaseException("foo")); sub.assertError(DatabaseException.class); sub.assertNoValues(); sub.dispose(); callValueEventOnCancelled(new DatabaseException("foo")); assertThat(sub.errorCount()) .isEqualTo(1); }
@Test public void shouldRewriteSubscriptExpression() { final SubscriptExpression parsed = parseExpression("col4[1]"); when(processor.apply(parsed.getBase(), context)).thenReturn(expr1); when(processor.apply(parsed.getIndex(), context)).thenReturn(expr2); final Expression rewritten = expressionRewriter.rewrite(parsed, context); assertThat(rewritten, equalTo(new SubscriptExpression(parsed.getLocation(), expr1, expr2))); }
@Test public void relacionEntregaDBEntityTest() { Assert.notNull(getManager(), "ArchidocManager es nulo"); IRelacionEntregaDBEntity dbEntity = getManager() .getRelacionEntregaDBEntity(); Assert.notNull(dbEntity, "entity es nulo"); Assert.isTrue(ArchivoTables.ASGTRENTREGA_TABLE_NAME.equals(dbEntity .getTableName()),"Las tablas no coinciden"); logger.info(getTextoCount(dbEntity.getTableName(), dbEntity.getCount())); }
@Test public void shouldBuildValueSerdeCorrectlyForWindowedAggregate() { for (final Runnable given : given()) { clearInvocations(groupedStream, timeWindowedStream, sessionWindowedStream, aggregated, queryBuilder); given.run(); windowedAggregate.build(planBuilder); verify(queryBuilder) .buildValueSerde(VALUE_FORMAT, PHYSICAL_AGGREGATE_SCHEMA, MATERIALIZE_CTX); } }
@Ignore("Disabled for now until FavoredNodes gets finished as a feature") @Test public void testSecondaryAndTertiaryPlacementWithSingleServer() { Map<String,Integer> rackToServerCount = new HashMap<String,Integer>(); rackToServerCount.put("rack1", 1); Triple<Map<HRegionInfo, ServerName>, FavoredNodeAssignmentHelper, List<HRegionInfo>> primaryRSMapAndHelper = secondaryAndTertiaryRSPlacementHelper(1, rackToServerCount); FavoredNodeAssignmentHelper helper = primaryRSMapAndHelper.getSecond(); Map<HRegionInfo, ServerName> primaryRSMap = primaryRSMapAndHelper.getFirst(); List<HRegionInfo> regions = primaryRSMapAndHelper.getThird(); Map<HRegionInfo, ServerName[]> secondaryAndTertiaryMap = helper.placeSecondaryAndTertiaryRS(primaryRSMap); assertTrue(secondaryAndTertiaryMap.get(regions.get(0)) == null); }
@Test public void whenCallFormType(){ Interpreter.FormType formType =interpreter.getFormType(); Assert.assertThat("Always return SIMPLE", formType, is(Interpreter.FormType.SIMPLE)); }
@Test public void testGetVmDetailsForPagination() throws IOException { Vm vm1 = new Vm(); vm1.setId("vm1-testId"); vm1.setName("vm1"); Vm vm2 = new Vm(); vm2.setId("vm2-testId"); vm2.setName("vm2"); Vm vm3 = new Vm(); vm2.setId("vm3-testId"); vm2.setName("vm3"); String nextPageLink = "nextPageLink"; ResourceList<Vm> vmSummaryList = new ResourceList<>(Arrays.asList(vm1, vm2), nextPageLink, null); ResourceList<Vm> vmSummaryListNextPage = new ResourceList<>(Arrays.asList(vm3)); ObjectMapper mapper = new ObjectMapper(); String serializedTask = mapper.writeValueAsString(vmSummaryList); String serializedTaskNextPage = mapper.writeValueAsString(vmSummaryListNextPage); setupMocksForPagination(serializedTask, serializedTaskNextPage, nextPageLink, HttpStatus.SC_OK); ProjectApi projectApi = new ProjectRestApi(restClient); ResourceList<Vm> response = projectApi.getVmDetailsInProject("foo"); assertEquals(response.getItems().size(), vmSummaryList.getItems().size() + vmSummaryListNextPage.getItems().size()); assertTrue(response.getItems().containsAll(vmSummaryList.getItems())); assertTrue(response.getItems().containsAll(vmSummaryListNextPage.getItems())); }
@Test public void test1(){ List<SysRole> sysRoleList=sysRoleService.SelectAll(); log.info("[普通写法] - [{}]", sysRoleList); PageInfo<Object> pageInfo= PageHelper.startPage(1,1).doSelectPageInfo(() -> sysRoleService.SelectAll()); log.info("[分页]-[{}]",pageInfo); }
@Test public void testVarInBind() throws Exception { String queryStr = "SELECT * {\n" + " BIND (?a AS ?b)\n" + "}"; ASTQueryContainer qc = SyntaxTreeBuilder.parseQuery(queryStr); WildcardProjectionProcessor.process(qc); List<ASTProjectionElem> projection = ((ASTSelectQuery) qc.getQuery()).getSelect().getProjectionElemList(); assertThat(projection.size()).isEqualTo(1); assertThat(((ASTVar) projection.get(0).jjtGetChild(0)).getName()).isEqualTo("b"); }
@Test public void equals() { EntityReference entityReference = new EntityReference("test", EntityType.PAGE); EntitySelection selected = new EntitySelection(entityReference); EntitySelection unselected = new EntitySelection(entityReference); unselected.setSelected(false); assertFalse(selected.equals(null)); assertTrue(selected.equals(selected)); assertFalse(selected.equals(entityReference)); assertFalse(selected.equals(unselected)); assertTrue(selected.equals(new EntitySelection(entityReference))); }
@Test void updateAuthorisationStatus_withInvalidScaStatus_shouldReturnBadRequest() throws Exception { String invalidScaStatus = "invalid SCA status"; String authenticationDataHolderContent = jsonReader.getStringFromFile("json/pis/request/authentication-data-holder.json"); mockMvc.perform(put("/psu-api/v1/payment/{payment-id}/authorisation/{authorisation-id}/status/{status}", PAYMENT_ID, AUTHORISATION_ID, invalidScaStatus) .headers(INSTANCE_ID_HEADERS) .headers(PSU_HEADERS) .contentType(MediaType.APPLICATION_JSON_VALUE) .content(authenticationDataHolderContent)) .andExpect(status().isBadRequest()) .andExpect(content().bytes(EMPTY_BODY)); verify(cmsPsuPisService, never()).updateAuthorisationStatus(any(), anyString(), anyString(), any(), anyString(), any()); }
@Test public void testCreateStream() throws Exception { String queryStr = "CREATE STREAM orders (ordertime bigint, orderid varchar, itemid varchar, orderunits " + "double) WITH (value_format = 'avro', " + "avroschemafile='/Users/hojjat/avro_order_schema.avro',kafka_topic='orders_topic');"; Statement statement = KSQL_PARSER.buildAst(queryStr, metaStore).get(0); Assert.assertTrue("testCreateStream failed.", statement instanceof CreateStream); CreateStream createStream = (CreateStream)statement; Assert.assertTrue("testCreateStream failed.", createStream.getName().toString().equalsIgnoreCase("ORDERS")); Assert.assertTrue("testCreateStream failed.", createStream.getElements().size() == 4); Assert.assertTrue("testCreateStream failed.", createStream.getElements().get(0).getName().toString().equalsIgnoreCase("ordertime")); Assert.assertTrue("testCreateStream failed.", createStream.getProperties().get(DdlConfig.KAFKA_TOPIC_NAME_PROPERTY).toString().equalsIgnoreCase("'orders_topic'")); Assert.assertTrue("testCreateStream failed.", createStream.getProperties().get(DdlConfig .VALUE_FORMAT_PROPERTY).toString().equalsIgnoreCase("'avro'")); Assert.assertTrue("testCreateStream failed.", createStream.getProperties().get(DdlConfig.AVRO_SCHEMA_FILE).toString().equalsIgnoreCase("'/Users/hojjat/avro_order_schema.avro'")); }
@Test public void testGetRelativePathRoot() { Path root = new Path("/tmp/abc"); Path child = new Path("/tmp/abc/xyz/file"); Assert.assertEquals(DistCpUtils.getRelativePath(root, child), "/xyz/file"); root = new Path("/"); child = new Path("/a"); Assert.assertEquals(DistCpUtils.getRelativePath(root, child), "/a"); }
@Test void doScaReceived_withPsuIdentificationRequest_withoutPsuData_shouldReturnError() { UpdateConsentPsuDataReq updateAuthorisationRequest = buildUpdateConsentPsuDataReq(); updateAuthorisationRequest.setUpdatePsuIdentification(true); updateAuthorisationRequest.setPsuData(null); AuthorisationProcessorRequest processorRequest = buildAuthorisationProcessorRequest(ScaStatus.RECEIVED, updateAuthorisationRequest, authorisation); AuthorisationProcessorResponse processorResponse = aisAuthorisationProcessorService.doScaReceived(processorRequest); assertTrue(processorResponse.hasError()); ErrorHolder errorHolder = processorResponse.getErrorHolder(); assertEquals(AIS_400, errorHolder.getErrorType()); assertEquals(Collections.singletonList(TppMessageInformation.of(MessageErrorCode.FORMAT_ERROR_NO_PSU)), errorHolder.getTppMessageInformationList()); }
@Test(expected = IllegalArgumentException.class) public void testSetRampDownPercent_lessThan0() { sampler.setRampDownPercent(-1); }
@Test public void testDoJob() throws IOException { System.out.println("doJob 1"); instance.setInputFile(basedir + "/short.jtl"); File pngfile = File.createTempFile("test", ".png"); instance.setOutputPNGFile(pngfile.getAbsolutePath()); instance.setYAxisLabel("Response time [ms]"); File csvfile = File.createTempFile("test", ".csv"); instance.setOutputCSVFile(csvfile.getAbsolutePath()); instance.setPluginType("ResponseTimesOverTime"); instance.addExportMode(PluginsCMDWorker.EXPORT_PNG); instance.addExportMode(PluginsCMDWorker.EXPORT_CSV); int result = instance.doJob(); int expResult = 0; assertEquals(expResult, result); System.out.println(csvfile.length()); System.out.println(pngfile.length()); assertTrue(110 < csvfile.length()); assertTrue(16000 < pngfile.length()); }
@Test(expected = Exception.class) public void merge_given_b_null_throw_exception() throws Exception { BinomialTreeNode.merge(a, null); }
@Test public void testToString() { final ColumnPermutation expectedLhs = new ColumnPermutation(new ColumnIdentifier("table1", "column1"), new ColumnIdentifier( "table1", "column2")); final ColumnPermutation expectedRhs = new ColumnPermutation(new ColumnIdentifier("table1", "column3"), new ColumnIdentifier( "table1", "column4")); final OrderDependency orderDependency = new OrderDependency(expectedLhs, expectedRhs, OrderType.LEXICOGRAPHICAL, ComparisonOperator.SMALLER_EQUAL); final String expectedStringRepresentation = expectedLhs + OrderDependency.OD_SEPARATOR + "[" + "<=" + "," + "lex" + "]" + expectedRhs; assertEquals(expectedStringRepresentation, orderDependency.toString()); }
@Test public void provisions_new_certificate_in_dev() { ZoneId testZone = zoneRegistryMock.zones().directlyRouted().in(Environment.dev).zones().stream().findFirst().orElseThrow().getId(); Optional<EndpointCertificateMetadata> endpointCertificateMetadata = endpointCertificateManager.getEndpointCertificateMetadata(testInstance, testZone, Optional.empty()); assertTrue(endpointCertificateMetadata.isPresent()); assertTrue(endpointCertificateMetadata.get().keyName().matches("vespa.tls.default.default.*-key")); assertTrue(endpointCertificateMetadata.get().certName().matches("vespa.tls.default.default.*-cert")); assertEquals(0, endpointCertificateMetadata.get().version()); assertEquals(expectedDevSans, endpointCertificateMetadata.get().requestedDnsSans().orElseThrow()); }
@Test public void taskItemPath() { assertEquals("/task/test/test$run/taskItem/item", PathUtil.taskItemPath("test", "run", "item")); }
@Test public void generate_specified_space() { when(organisationIdRepository.claimNextAvailableIndex("DW", SOURCE)).thenReturn(new OrganisationId("DW", 10, SOURCE)); final OrganisationId organisationId = subject.generate("AUTO-1234567DW", RpslObject.parse("organisation: AUTO\norg-name: name")); assertThat(organisationId.toString(), is("ORG-DW10-RIPE")); }
@Test public void testConvertToInt() { final Object[][] testParameters = new Object[][] {{"1", 1}, {"10", 10}, {"100", 100}, {"Not", 0}}; for (final Object[] testParameter : testParameters) { int expected = (Integer) testParameter[1]; String val = (String) testParameter[0]; assertEquals(expected, ParsingUtils.convertToInt(val)); } }
@Test public void createBeginAdapterDelegation() { Event event = eventFactory.createBeginAdapterDelegation(); assertTrue(event instanceof BeginAdapterDelegationEvent); }
@Test(expected = NoSuchElementException.class) public void testPassword() { base.getAccumuloPassword(); }
@Test public void testReleaseToken() { listener = spy(listener); listener.releaseToken(); verify(leakyBucket, times(1)).release(); int INIT_STATE = 1; Assert.assertEquals(INIT_STATE, listener.psyncEverSucceed.get()); }
@Test public void valueOfKnownRealmName() { Realm testRealm = Realm.valueOf("OC1"); assertEquals(Realm.OC1, testRealm); assertSame(Realm.OC1, testRealm); }
@Test(expected = JsonFormatException.class) public void read_malformed_object() throws Exception { JsonFormat<Data> format = reader((r, d) -> d.object = r.readString()) .build(); try (ModelInput<Data> in = format.open("<testing>", input("{1}"), IOPTS)) { read(in); } }
@Test public void removeEquipmentsFromJedi() { when(jediDao.findById(jediId)).thenReturn(jedi); serviceUnderTest.removeEquipmentsFromJedi(jediId); verify(jediDao).findById(jediId); verify(equipmentDao, times(jedi.getEquipments().size())).delete(any(Equipment.class)); }
@Test public void testPreExecuteWithNullToken() throws Exception { when(ozoneManager.getDelegationToken(tester)).thenReturn(null); modifiedRequest = omGetDelegationTokenRequest.preExecute(ozoneManager); verifyUnchangedRequest(); Assert.assertEquals(checkResponse, modifiedRequest.getUpdateGetDelegationTokenRequest() .getGetDelegationTokenResponse() .toString()); }
@Test public void testCompareEqual() { assertEquals(bigIntegerType.compare((Object) BigInteger.ONE, (Object) BigInteger.ONE), 0); }
@Test public void testOnRefresh() { presenter.onRefresh(); verify(refreshRuntimeEvent, times(1)).fire(new RefreshRuntimeEvent(providerKey)); }
@Test public void testResolveTypeVariable03() throws Exception { try { GenericsUtil.resolveTypeVariable( new GenericsUtil_GenericArrayTypeStub03(), new ArrayList<ParameterizedType>()); fail("例外が発生しませんでした。"); } catch (IllegalStateException e) { assertNotNull(e); assertEquals(IllegalStateException.class.getName(), e.getClass() .getName()); } }
@Test public void testIsCompareModeFalse() { result = new ComparedGenerationResult(originalResult); Assert.assertFalse(result.isCompareMode()); }
@Test void testValues() throws Exception { Document document = json("abc: 123, efg: 456"); assertThat(document.values()).containsExactly(123, 456); }
@Test public void testProject() throws Exception { final RequestSummary requestSummary = spdxBOMImporter.importSpdxBOMAsProject(inputStream, attachmentContent); assertNotNull(requestSummary); verify(spdxBOMImporterSink, times(1)).addProject(Matchers.any()); verify(spdxBOMImporterSink, times(3)).addComponent(Matchers.any()); verify(spdxBOMImporterSink, times(3)).addRelease(Matchers.any()); }
@Test public void no_annotation() { PropertyConduit conduit = mockPropertyConduit(); train_getAnnotation(conduit, Validate.class, null); replay(); ValidationConstraintGenerator gen = new ValidateAnnotationConstraintGenerator(); assertNull(gen.buildConstraints(Object.class, conduit)); verify(); }
@Test public void testHashCode() { VariantEffectFilter anotherTargetFilter = new VariantEffectFilter(offTargetVariantEffects); assertThat(instance.hashCode(), equalTo(anotherTargetFilter.hashCode())); }
@Test public void mergeShouldNotMergeRangeWithDistanceGreaterThen1() { List<UidRange> actual = UidRange .mergeRanges( ImmutableList.of( new UidRange(_1, _2), new UidRange(_4, _5))); assertThat(actual).containsOnly(new UidRange(_1, _2), new UidRange(_4, _5)); }
@Test public void testFormatInchiString() throws Exception { ImportantChemicalsWikipedia importantChemicalsWikipedia = new ImportantChemicalsWikipedia(); for (InchiFormattingTestCase testcase : INCHI_FORMATTING_TEST_CASES) { assertEquals( "Testing case: " + testcase.getDescription(), importantChemicalsWikipedia.formatInchiString(testcase.getMatchedInchi()), testcase.getExpectedInchi() ); } }
@Test(groups = {"getPermissions"}) public void testGetPermissionsEntryPoint_getPermissions_basicPagination() throws Exception { UriInfo info = new UriInfoImpl("permissions/public"); Response response = service.getPermissionsEntryPoint(info); MultivaluedMap<String, ?> metadata = response.getMetadata(); assertEquals((int)((List<Integer>)metadata.get(RestConstants.HEADER_START_INDEX)).get(0), 0); assertEquals((int)((List<Integer>)metadata.get(RestConstants.HEADER_RESULT_COUNT)).get(0), mockPermissons.size()); assertEquals((int)((List<Integer>)metadata.get(RestConstants.HEADER_TOTAL_COUNT)).get(0), mockPermissons.size()); }
@Test public void testCardinalityInBuckets_sparse_contained() throws Exception { RoaringBitmap bitmap = new RoaringBitmap(); for (int i = 0; i < 131_073; i += 128) { bitmap.add(i); } int[][] indexes = new int[][] { { 0, 65_536, 131_072 }, { 1, 65_537, 131_073 } }; long[][] cardinalityInBuckets = new long[2][indexes[0].length - 1]; RoaringInspection.cardinalityInBuckets(bitmap, indexes, cardinalityInBuckets); for (int i = 0; i < 2; i++) { assertEquals(cardinalityInBuckets[i].length, 2); for (long cardinalityInBucket : cardinalityInBuckets[i]) { assertEquals(cardinalityInBucket, 512); } } }
@Test public void test() { String s = IoUtil.loadFile("performancescript/performance_search_template.txt"); assertTrue(s.contains("orderby")); }
@Test public void dataFrameShouldBeAccepted() throws Http2Exception { receiveFlowControlledFrame(STREAM_ID, 10, 0, false); verifyWindowUpdateNotSent(); }
@Test(expected = IllegalArgumentException.class) public void testBadSofaMapping() { AggregateBuilder builder = new AggregateBuilder(); builder.addSofaMapping("name", ViewNames.PARENTHESES_VIEW, "A"); }
@Test public void testRemoveColumnMetaFromExtendedPagedTableForAddDomainSpecifColumns() { GridGlobalPreferences gridPreferences = new GridGlobalPreferences("test", view.getInitColumns(), view.getBannedColumns()); ListTable<TaskSummary> extendedPagedTable = new ListTable<TaskSummary>(gridPreferences); when(view.getListGrid()).thenReturn(extendedPagedTable); Column<TaskSummary, String> column = view.createTextColumn("Extra", taskSummary -> taskSummary.getName()); ColumnMeta<TaskSummary> columnMeta = new ColumnMeta<TaskSummary>(column, "Extra", true, true); Set<String> set = Collections.singleton("Extra_test"); view.initColumns(extendedPagedTable); assertThat(extendedPagedTable.getColumnMetaList().size()).isEqualTo(18); extendedPagedTable.addColumns(Collections.singletonList(columnMeta)); assertThat(extendedPagedTable.getColumnMetaList().stream()).extracting(c -> c.getCaption()).hasSize(19).containsOnlyOnce("Extra"); view.addDomainSpecifColumns(set); assertThat(extendedPagedTable.getColumnMetaList().stream()).extracting(c -> c.getCaption()).hasSize(19).doesNotContain("Extra"); assertThat(set.size()).isEqualTo(1); }
@Test public void testEmptyIndentDedentInputBuffer() { InputBuffer buf = new IndentDedentInputBuffer(new char[0], 2, "#", false); assertEquals(buf.extract(0, 1), ""); }
@Test public void testIsLandsat5Filename() throws Exception { assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51231232013068GSI01_MTL.txt")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51231232013068GSI01_MTL.TXT")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51920342011274MPS00.tar.gz")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51920342011274MPS00.tgz")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51700572011312MLK00.tar.bz")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51940252011320KIS00.tar.gz")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51970241984299FUI00.ZIP")); assertFalse(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT51231232013068GSI01_B3.txt")); assertFalse(LandsatGeotiffReaderPlugin.isLandsat5Filename("L5196030_03020031023_MTL.txt")); assertFalse(LandsatGeotiffReaderPlugin.isLandsat5Filename("LT71920342011274MPS00.tar.gz")); }
@Test public void drop_table_with_environment_context() throws TException { EnvironmentContext environmentContext = new EnvironmentContext(); when(primaryMapping.transformInboundDatabaseName(DB_P)).thenReturn("inbound"); handler.drop_table_with_environment_context(DB_P, "table", false, environmentContext); verify(primaryMapping).checkWritePermissions(DB_P); verify(primaryClient).drop_table_with_environment_context("inbound", "table", false, environmentContext); }
@Test public void noScopes_emptyCollection() { Collection<String> scope = newArrayList(); Collection<String> translatedScope = cut.convert(scope); assertThat(translatedScope).isEmpty(); }
@Test public void testNth() { assertThat(somePair.nth(0)).isEqualTo(1); assertThat(somePair.nth(1)).isEqualTo(3); assertThat(somePair.getItem1()).isEqualTo(1); assertThat(somePair.getItem2()).isEqualTo(3); assertThat(somePair.size()).isEqualTo(2); }
@Test public void testAtPosition() { String composer = "main"; int position = 5; try { query = new SearchQueryImpl(site); query.atPosition(position); fail("Was able to specify pagelet position without pagelet"); } catch (IllegalStateException e) { } query = new SearchQueryImpl(site); query.withPagelet(new PageletImpl(pagelet.getModule(), pagelet.getIdentifier())); query.atPosition(position); assertEquals(1, query.getPagelets().size()); Collection<SearchTerms<Pagelet>> pagelets = query.getPagelets(); Pagelet firstPagelet = pagelets.iterator().next().getTerms().iterator().next(); assertEquals(position, firstPagelet.getURI().getPosition()); query = new SearchQueryImpl(site); query.withPagelet(new PageletImpl(pagelet.getModule(), pagelet.getIdentifier())); query.inComposer(composer); query.atPosition(position); assertEquals(1, query.getPagelets().size()); pagelets = query.getPagelets(); firstPagelet = pagelets.iterator().next().getTerms().iterator().next(); assertEquals(composer, firstPagelet.getURI().getComposer()); assertEquals(position, firstPagelet.getURI().getPosition()); }
@Test public void assertGenerateKeyWithMultipleThreads() throws ExecutionException, InterruptedException { int threadNumber = Runtime.getRuntime().availableProcessors() << 1; ExecutorService executor = Executors.newFixedThreadPool(threadNumber); int taskNumber = threadNumber << 2; SnowflakeKeyGenerateAlgorithm keyGenerateAlgorithm = new SnowflakeKeyGenerateAlgorithm(); keyGenerateAlgorithm.setProps(new Properties()); keyGenerateAlgorithm.init(); Set<Comparable<?>> actual = new HashSet<>(); for (int i = 0; i < taskNumber; i++) { actual.add(executor.submit((Callable<Comparable<?>>) keyGenerateAlgorithm::generateKey).get()); } assertThat(actual.size(), is(taskNumber)); }
@Test public void testGetParametersWithDefaultEntityAndDisabledDefaults() throws Exception { unit.setActive(false); unit.setSecurity(false); EnrolmentForeignType entity = new EnrolmentForeignType(); Map<String, Object> expected = new HashMap<String, Object>(); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void testCreateStringHttpBody() throws IOException { String str = "Hello world"; byte[] content = str.getBytes(); int size = content.length; InputStream is = new ByteArrayInputStream(content); RecordedHttpBody recordedHttpBody = RecordedHttpBodyFactory.create("text/html", "identity", is, "UTF-8"); Assert.assertTrue(recordedHttpBody instanceof RecordedStringHttpBody); Assert.assertFalse(recordedHttpBody instanceof RecordedByteHttpBody); Assert.assertEquals(size, recordedHttpBody.getContent("UTF-8").length); }
@Test public void testInvalidContentDispositionFilename() throws Exception { StringBuilder sb = new StringBuilder(1000); sb.append("SomeHeader: foo\n") .append("------=_Part_34950_1098328613.1263781527359\n") .append("Content-Type: text/xml; charset=UTF-8\n") .append("Content-Transfer-Encoding: binary\n") .append("Content-Id: <318731183421.1263781527359.IBM.WEBSERVICES@auhpap02>\n") .append('\n') .append("<envelope/>\n"); sb.append("------=_Part_34950_1098328613.1263781527359\n") .append("Content-Type: text/xml\n") .append("Content-Transfer-Encoding: binary\n") .append("Content-Id: <b86a5f2d-e7af-4e5e-b71a-9f6f2307cab0>\n") .append("Content-Disposition: attachment; filename=../../../../../../../../etc/passwd\n") .append('\n') .append("<message>\n") .append("------=_Part_34950_1098328613.1263781527359--\n"); msg = new MessageImpl(); msg.setContent(InputStream.class, new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))); msg.put(Message.CONTENT_TYPE, "multipart/related"); AttachmentDeserializer ad = new AttachmentDeserializer(msg); ad.initializeAttachments(); assertEquals(1, msg.getAttachments().size()); Attachment attachment = msg.getAttachments().iterator().next(); AttachmentDataSource dataSource = (AttachmentDataSource)attachment.getDataHandler().getDataSource(); assertEquals("passwd", dataSource.getName()); }
@Test public void should_Ko_OneLine_ManyData() { UtilsProcessService utilsProcessService = new UtilsProcessService(); String data = "value;key1;key2;key2;value2;key3"; Map<String, List<ProcessKeyValue>> map = utilsProcessService.computeDataFromCsv(data); assertThat(map.size()).isEqualTo(0); }
@Test public void testEqualsNull() throws Exception { assertFalse( attributeValueItemA.equals( null ) ); }
@Test public void getIntegerFromJsonMap() { Assert.assertNull(SearchUtils.getIntegerFromJsonMap(null, KEY)); Map<String, Object> m = new HashMap<>(); Assert.assertNull(SearchUtils.getIntegerFromJsonMap(m, KEY)); m.put(KEY, new Integer(10)); Assert.assertEquals(new Integer(10), SearchUtils.getIntegerFromJsonMap(m, KEY)); m.put(KEY, new Long(12)); Assert.assertEquals(new Integer(12), SearchUtils.getIntegerFromJsonMap(m, KEY)); m.put(KEY, new Float(15)); Assert.assertEquals(new Integer(15), SearchUtils.getIntegerFromJsonMap(m, KEY)); m.put(KEY, "20"); Assert.assertEquals(new Integer(20), SearchUtils.getIntegerFromJsonMap(m, KEY)); m.put(KEY, "-20"); Assert.assertEquals(new Integer(-20), SearchUtils.getIntegerFromJsonMap(m, KEY)); m.put(KEY, "a"); try { SearchUtils.getIntegerFromJsonMap(m, KEY); Assert.fail("NumberFormatException must be thrown"); } catch (NumberFormatException e) { } m.put(KEY, new Object()); try { SearchUtils.getIntegerFromJsonMap(m, KEY); Assert.fail("NumberFormatException must be thrown"); } catch (NumberFormatException e) { } }
@Test(expected = IllegalArgumentException.class) public void testTypeCreationPrimitive() throws Exception { when(typeDescription.isPrimitive()).thenReturn(true); TypeCreation.of(typeDescription); }
@Test public void testSerializerTypeMismatch_repeatedItemSerializer() throws Exception { final class TestSerializer extends DefaultValueSerializer<String, Boolean> {} config.getApiClassConfig().getMethods() .get(methodToEndpointMethod(TestEndpoint.class.getMethod("getResultNoParams"))) .addParameter("param", null, false, null, TypeToken.of(Integer[].class)) .setRepeatedItemSerializer(TestSerializer.class); try { validator.validate(config); fail("Expected WrongSerializerTypeException."); } catch (WrongTransformerTypeException expected) { } }
@Test public void testDeleteBigFile() { System.out.println("快速删除超大文件"); String delete = TestUtil.path + "temp/bigfile.txt"; FileUtil.deleteBigFile(new File(delete)); }
@Test public void coverage() { LabelParameterMetadata test = LabelParameterMetadata.of("Label"); coverImmutableBean(test); LabelParameterMetadata test2 = LabelParameterMetadata.of("Label2"); coverBeanEquals(test, test2); }
@Test public void checkIfTopPossibleTest(){ MockedPoint point = new MockedPoint(600, 300); assertEquals(true, mPopUpCoachMarkPresenter.checkIfTopPossible(point, mCoachMarkPixelInfo)); point = new MockedPoint(400, 200); assertEquals(true, mPopUpCoachMarkPresenter.checkIfTopPossible(point, mCoachMarkPixelInfo)); point = new MockedPoint(100, 200); assertEquals(true, mPopUpCoachMarkPresenter.checkIfTopPossible(point, mCoachMarkPixelInfo)); point = new MockedPoint(700, 700); assertEquals(true, mPopUpCoachMarkPresenter.checkIfTopPossible(point, mCoachMarkPixelInfo)); point = new MockedPoint(400, 50); assertEquals(false, mPopUpCoachMarkPresenter.checkIfTopPossible(point, mCoachMarkPixelInfo)); point = new MockedPoint(0, 50); assertEquals(false, mPopUpCoachMarkPresenter.checkIfTopPossible(point, mCoachMarkPixelInfo)); }
@Test public void newDocumentButNonTerminalFromURL() throws Exception { DocumentReference documentReference = new DocumentReference("xwiki", Arrays.asList("X"), "Y"); XWikiDocument document = mock(XWikiDocument.class); when(document.getDocumentReference()).thenReturn(documentReference); when(document.isNew()).thenReturn(true); when(document.getLocalReferenceMaxLength()).thenReturn(255); context.setDoc(document); when(mockRequest.getParameter("tocreate")).thenReturn("nonterminal"); String result = action.render(context); assertNull(result); verify(mockURLFactory).createURL("X.Y", "WebHome", "edit", "template=&parent=Main.WebHome&title=Y", null, "xwiki", context); }
@Test public void testShouldReplacePartitionDisabledByCodePath() throws IOException { Assert.assertFalse(HiveDatasetVersionCleaner.shouldReplacePartition(config, replacedDb, replacedTable, Optional.of(replacedDb), Optional.of(replacedTable)), "Replaced and replacement db / table are same. " + "This should have been false. "); Assert.assertFalse(HiveDatasetVersionCleaner.shouldReplacePartition(config, replacedDb, replacedTable, Optional.<String>absent(), Optional.of(replacementTable)), "Replacement DB name is missing. " + "This should have been false. "); Assert.assertFalse(HiveDatasetVersionCleaner.shouldReplacePartition(config, replacedDb, replacedTable, Optional.of(replacementDb), Optional.<String>absent()), "Replacement table name is missing. " + "This should have been false. "); Assert.assertFalse(HiveDatasetVersionCleaner.shouldReplacePartition(config, replacedDb, replacedTable, Optional.<String>absent(), Optional.<String>absent()), "Replacement DB and table names are missing. " + "This should have been false. "); }
@Test public void callInterpolateColorWithGreenBlueColorsAndFractionIsZero_returnBeakerColorWithGreenValue() { Color color = ColorUtils.interpolateColor(java.awt.Color.GREEN, java.awt.Color.BLUE, 0f); Assertions.assertThat(color).isEqualTo(Color.GREEN); }
@Test public void testInterfaceNotInHierarchy() { final Index index = index(Single.class, SingleImpl.class, Multiple.class); final DotName impl = DotName.createSimple(SingleImpl.class.getName()); final List<Type> result = JandexUtil.resolveTypeParameters(impl, MULTIPLE, index); assertThat(result).isEmpty(); }
@Test public void testIsEmpty() { RangeSet rs = new RangeSet(0); assertTrue(rs.isEmpty()); rs = new RangeSet(3); assertFalse(rs.isEmpty()); }
@Test public void testDescribeMismatchSafely() throws Exception { assertHasMismatchDescription(format("<%s> is not a valid yaml", NON_VALID_YAML), isYamlMatcher, NON_VALID_YAML); }
@Test public void testSystemExceptionThrowableStringStringArray04() throws Exception { Throwable cause = new Throwable("testException"); String[] optionStrings = null; se1 = new SystemException(cause, "", optionStrings); String throwWord = ((Throwable) ReflectionTestUtils.getField(se1, "cause")).getMessage(); String errorCode = (String) ReflectionTestUtils.getField(se1, "errorCode"); String[] options = (String[]) ReflectionTestUtils.getField(se1, "options"); assertEquals("testException", throwWord); assertEquals("", errorCode); assertNull(options); }
@Test public void testCreateDataTransferer() { System.setProperty(BUCKET_NAME_PROPERTY, "test-bucket"); System.setProperty(REGION_PROPERTY, "US_WEST_1"); System.setProperty(ACCESS_KEY_PROPERTY, "23123123123"); System.setProperty(SECRET_KEY_PROPERTY, "00101010101"); System.setProperty(ENCRYPT_PROPERTY, "true"); S3DataTransfererFactory factory = new S3DataTransfererFactory(); S3DataTransferer transferer = factory.createDataTransfer(); assertThat(transferer, is(not(nullValue()))); }
@Test public void testJSON() throws IOException { ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(action); ClickLinkAction c2 = mapper.readValue(json, ClickLinkAction.class); assertEquals(action.getValue(), c2.getValue()); }
@Test public void testNoPenalizationPeriod() { Map<String, Object> map = createMap(); map.remove(PENALIZATION_PERIOD_KEY); assertEquals(DEFAULT_PENALIZATION_PERIOD, createSchema(map, 0).convert().getPenalizationPeriod()); }
@Test public void getAnnotatedElement() { AnnotatedElement annotatedElement = ReflectionUtils.getAnnotatedElement(ReflectionUtilsTest.class, "property", String.class); assertNotNull(annotatedElement.getAnnotation(Nullable.class)); }
@Test public void parseLockFileTest() { final String lockFileText = testUtil.getResourceAsUTF8String("/npm/package-lock.json"); final NpmParseResult result = npmLockfileParser.parse("source", Optional.empty(), lockFileText, true); Assert.assertEquals(result.projectName, "knockout-tournament"); Assert.assertEquals(result.projectVersion, "1.0.0"); DependencyGraphResourceTestUtil.assertGraph("/npm/packageLockExpected_graph.json", result.codeLocation.getDependencyGraph()); }
@Test public void testThreadPoolOnlyHasInstanceOverride() throws Exception { HystrixCommandProperties properties = new TestPropertiesCommand(TestKey.TEST, new HystrixCommandProperties.Setter(), "unitTestPrefix"); ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.default.threadPoolKeyOverride", 1234); assertEquals(null, properties.executionIsolationThreadPoolKeyOverride().get()); ConfigurationManager.getConfigInstance().setProperty("unitTestPrefix.command.TEST.threadPoolKeyOverride", "testPool"); assertEquals("testPool", properties.executionIsolationThreadPoolKeyOverride().get()); ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.default.threadPoolKeyOverride"); ConfigurationManager.getConfigInstance().clearProperty("unitTestPrefix.command.TEST.threadPoolKeyOverride"); }
@Test public void testHashCode() { byte[] a = new byte[] { 0x00, 0x01, 0x02 }; byte[] b = new byte[] { 0x00, 0x01, 0x02 }; ByteArrayWrapper wrapA = new ByteArrayWrapper(a); ByteArrayWrapper wrapB = new ByteArrayWrapper(b); assertEquals(wrapA.hashCode(), wrapB.hashCode()); }
@Test public void testMergeCleanupSubscription() { FunctionConfig functionConfig = createFunctionConfig(); FunctionConfig newFunctionConfig = createUpdatedFunctionConfig("cleanupSubscription", true); FunctionConfig mergedConfig = FunctionConfigUtils.validateUpdate(functionConfig, newFunctionConfig); assertTrue(mergedConfig.getCleanupSubscription()); newFunctionConfig = createUpdatedFunctionConfig("cleanupSubscription", false); mergedConfig = FunctionConfigUtils.validateUpdate(functionConfig, newFunctionConfig); assertFalse(mergedConfig.getCleanupSubscription()); newFunctionConfig = createUpdatedFunctionConfig("cleanupSubscription", true); mergedConfig = FunctionConfigUtils.validateUpdate(functionConfig, newFunctionConfig); assertTrue(mergedConfig.getCleanupSubscription()); }
@Test void testPickBestResponse() { SchedulingConfig schedulerConfig = mock(SchedulingConfig.class); doReturn(schedulerConfig).when(config).getRoot(); ScoreCalculator calculator = new ScoreCalculator(config.getRoot()); PlaceResponse better = new PlaceResponse(PlaceResultCode.OK); PlaceResponse worse = new PlaceResponse(PlaceResultCode.OK); doReturn(1.0).when(schedulerConfig).getUtilizationTransferRatio(); better.setScore(new Score(2, 0)); worse.setScore(new Score(1, 0)); Set<PlaceResponse> responses = ImmutableSet.of(better, worse); assertThat(calculator.pickBestResponse(responses), is(better)); doReturn(0.0).when(schedulerConfig).getUtilizationTransferRatio(); better.setScore(new Score(1, 1)); worse.setScore(new Score(2, 0)); responses = ImmutableSet.of(better, worse); assertThat(calculator.pickBestResponse(responses), is(better)); }
@Test public void testExecute() throws FileStorageException { cleaner.execute(EXPIRATION_TIME); verify(processLogsPersistenceService).deleteModifiedBefore(EXPIRATION_TIME); }
@Test public void testLogInWithAccessToken() { Map<String, String> authData = new HashMap<>(); when(controller.getAuthData(any(AccessToken.class))).thenReturn(authData); ParseFacebookUtils.isInitialized = true; ParseUser user = mock(ParseUser.class); when(userDelegate.logInWithInBackground(anyString(), anyMapOf(String.class, String.class))) .thenReturn(Task.forResult(user)); AccessToken token = TestUtils.newAccessToken(); Task<ParseUser> task = ParseFacebookUtils.logInInBackground(token); verify(controller).getAuthData(token); verify(userDelegate).logInWithInBackground("facebook", authData); assertTrue(task.isCompleted()); assertEquals(user, task.getResult()); }
@Test public void testCreateGroup() { EasyMockSupport support = new EasyMockSupport(); Toolbox toolbox = support.createMock(Toolbox.class); support.replayAll(); DefaultDataGroupAndTypeFactory factory = new DefaultDataGroupAndTypeFactory(); DefaultDataGroupInfo group = factory.createGroup(toolbox, ourProviderType, ourFolderName, null); assertEquals(toolbox, group.getToolbox()); assertEquals(ourProviderType, group.getProviderType()); assertEquals(ourFolderName, group.getDisplayName()); support.verifyAll(); }
@Test public void getKey() { final IfNoneMatchPreconditionHeader ifNoneMatchPreconditionHeader = createIfNoneMatchPreconditionHeader(EntityTagMatchers.fromCommaSeparatedString("\"test\"")); assertThat(ifNoneMatchPreconditionHeader.getKey()).isEqualTo("if-none-match"); }
@Test public void should_sign_a_time_stamp_request() throws TSPException, CertificateEncodingException, OperatorCreationException, IOException { final TimeStampRequestGenerator reqGen = new TimeStampRequestGenerator(); reqGen.setCertReq(true); final byte[] hash = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; final BigInteger nonce = BigInteger.TEN; final TimeStampRequest request = reqGen.generate(TSPAlgorithms.SHA1, hash, nonce); final TimeStampResponse timeStampResponse = timeStampSignatureWithKeystore.sign(request); final TimeStampToken timeStampToken = timeStampResponse.getTimeStampToken(); assertThat(timeStampResponse.getStatus()).isEqualTo(0); assertThat(timeStampResponse.getEncoded()).isNotNull(); assertThat(timeStampToken.getTimeStampInfo().getNonce()).isEqualTo(nonce); assertThat(timeStampToken.getTimeStampInfo().getMessageImprintDigest()).isEqualTo(hash); assertThat(timeStampToken.getCertificates().getMatches(null)).hasSize(2); }
@Test public void shouldReturnName() { final String name = randomString(); final InMemoryExchange<TypedMessage> inMemoryExchange = new InMemoryExchange<TypedMessage>(name); final String returnedName = inMemoryExchange.getName(); assertEquals(name, returnedName); }
@Test public void getPeople_shouldGetOnePersonByNameAndAttribute() { Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller")); List<Person> people = hibernatePersonDAO.getPeople("Bilbo Story Teller", false); logPeople(people); Assert.assertEquals(1, people.size()); Assert.assertEquals("Bilbo Odilon", people.get(0).getGivenName()); }
@Test public void create() throws NamingException { final UserDAO dao = (UserDAO) container.getContext().lookup("java:global/rest-example/UserDAO"); final User user = dao.create("foo", "dummy", "foo@bar.org"); assertNotNull(dao.find(user.getId())); }
@Test public void shouldReturnRegularRequisitionWithoutLineItems() throws Exception { long periodId = 8L; long programId = 5L; long facilityId = 3L; Rnr requisition = new Rnr(); when(requisitionMapper.getRequisitionWithoutLineItems(facilityId, programId, periodId)).thenReturn(requisition); Rnr receivedRnr = requisitionRepository.getRequisitionWithoutLineItems(facilityId, programId, periodId); assertThat(receivedRnr, is(requisition)); }
@Test public void findTemplateFile() throws Exception { long formInputId = 1L; FileEntry fileEntry = newFileEntry().build(); FormInput formInput = newFormInput() .withFile(fileEntry) .build(); FileEntryResource fileEntryResource = newFileEntryResource().build(); when(formInputRepository.findById(formInputId)).thenReturn(Optional.of(formInput)); when(fileEntryServiceMock.findOne(fileEntry.getId())).thenReturn(serviceSuccess(fileEntryResource)); FileEntryResource response = service.findFile(formInputId).getSuccess(); assertEquals(fileEntryResource, response); }
@Test public void testMatchingWithRegularGrammar(){ Assert.assertTrue(new RegexMatcher("foo?").matching("fo")); Assert.assertTrue(new RegexMatcher("foo?").matching("foo")); Assert.assertTrue(new RegexMatcher("foo.").matching("fooo")); Assert.assertTrue(new RegexMatcher("foo*").matching("fooooo")); Assert.assertTrue(new RegexMatcher("foo.*").matching("foobarbarbar")); Assert.assertFalse(new RegexMatcher("foo+").matching("fo")); Assert.assertTrue(new RegexMatcher("foo+").matching("fooooo")); Assert.assertTrue(new RegexMatcher("foo\\s").matching("foo ")); Assert.assertFalse(new RegexMatcher("foo\\S").matching("foo ")); Assert.assertTrue(new RegexMatcher("foo\\w").matching("fooo")); Assert.assertTrue(new RegexMatcher("foo\\W").matching("foo ")); Assert.assertFalse(new RegexMatcher("foo\\W").matching("fooo")); Assert.assertTrue(new RegexMatcher("foo[1234]").matching("foo1")); Assert.assertFalse(new RegexMatcher("foo[1234]").matching("foo5")); Assert.assertTrue(new RegexMatcher("foo\\\\").matching("foo\\")); Assert.assertTrue(new RegexMatcher("foo\\d").matching("foo5")); Assert.assertTrue(new RegexMatcher("fo{1,3}").matching("fo")); Assert.assertFalse(new RegexMatcher("fo{1,3}").matching("foooo")); }
@Test public void testContainsExceptionsSuite() throws Exception { TestSuite ts = new TestSuite(); ts.addException(new SakuliCheckedException("bla")); TestCase tc = new TestCase(null, null); ts.addTestCase(tc); TestCaseStep step = new TestCaseStep(); tc.addStep(step); assertTrue(SakuliExceptionHandler.containsException(ts)); }
@Test public void testByteToHex() throws Exception { try { HoodUtil.byteToHex(null); fail(); } catch (NullPointerException ignored) { } assertEquals("", HoodUtil.byteToHex(new byte[0]).toLowerCase()); assertEquals("e5", HoodUtil.byteToHex(new byte[]{-27}).toLowerCase()); assertEquals("cfac", HoodUtil.byteToHex(new byte[]{-49, -84}).toLowerCase()); assertEquals("88fd8c", HoodUtil.byteToHex(new byte[]{-120, -3, -116}).toLowerCase()); assertEquals("2516c585", HoodUtil.byteToHex(new byte[]{37, 22, -59, -123}).toLowerCase()); assertEquals("01a1bc1e65", HoodUtil.byteToHex(new byte[]{1, -95, -68, 30, 101}).toLowerCase()); assertEquals("b8cc92ee1711", HoodUtil.byteToHex(new byte[]{-72, -52, -110, -18, 23, 17}).toLowerCase()); assertEquals("5fc1e2958c699d", HoodUtil.byteToHex(new byte[]{95, -63, -30, -107, -116, 105, -99}).toLowerCase()); assertEquals("f9373f5de142dfec", HoodUtil.byteToHex(new byte[]{-7, 55, 63, 93, -31, 66, -33, -20}).toLowerCase()); assertEquals("f3fd69c164245a7ff0", HoodUtil.byteToHex(new byte[]{-13, -3, 105, -63, 100, 36, 90, 127, -16}).toLowerCase()); assertNotSame("eefd19c164245a72f1", HoodUtil.byteToHex(new byte[]{-13, -3, 105, -63, 100, 36, 90, 127, -16}).toLowerCase()); }
@Test public void printOnCompleteMessageBeforeSubscriberOnCompleteExecution() { logSubscriber.beforeOnCompletedExecution(joinPoint); verify(stopWatch).stop(); verify(messageManager).printSubscriberOnCompleted(eq(subscriber.getClass().getSimpleName()), anyLong(), anyInt()); verify(counter).tally(); verify(counter).clear(); verify(stopWatch).getTotalTimeMillis(); verify(stopWatch).reset(); }
@Test public void deleteUnitsAndProgeny_EmptyOK() throws Exception { repository.deleteReportByIdAndTenant("procId1", VitamThreadUtils.getVitamSession().getTenantId()); assertThat(mongoCollection.countDocuments()).isEqualTo(0); }
@Test public void testProcessInstanceVariableMapperTest() { final VariableInstance vi = VariableInstance.builder() .name("variableName") .processInstanceId(1L) .value("variableNewValue") .oldValue("variableOldValue") .date(new Date()) .build(); final ProcessVariableSummary pivs = new ProcessInstanceVariableMapper(deploymentId, serverTemplateId, varType).apply(vi); assertVariableInstance(vi, pivs); assertEquals(deploymentId, pivs.getDeploymentId()); assertEquals(serverTemplateId, pivs.getServerTemplateId()); assertEquals(varType, pivs.getType()); }
@Test public void testTerminateProcessOnAllHealthyInstances() throws Exception { PowerMockito.when(ec2Raider.getInstancesByName("test")).thenReturn(createInstances()); instanceFailureStepDefinitions.givenEC2InstanceName("test"); Assert.assertEquals(executionStateCache.getEc2Tag(), "test"); Assert.assertTrue(executionStateCache.getInstances().size()>0); try { instanceFailureStepDefinitions.terminateProcessOnAllHealthyInstances("nginx"); } catch (Throwable t) { t.printStackTrace(); } Assert.assertTrue(executionStateCache.getProcessNames().contains("nginx")); Assert.assertFalse(executionStateCache.getUnhealthyInstances().isEmpty()); }
@Test public void testClose() throws Exception { manager.close(); verify(impl, times(1)).close(); }
@Test public void givenAContenderIsSavedInTheDatabase_whenCallingFindById_thenTheContenderIsReturned() { Contender contender1 = new Contender(); contender1.setName("name"); testEntityManager.persist(contender1); testEntityManager.flush(); Contender contender2 = contenderRepository.findById(1L).orElse(null); assertEquals(contender1, contender2); }
@Test public void commaNonDroppingParticles() { CSLName[] names = NameParser.parse("Van der Voort, Vincent"); assertEquals(1, names.length); assertEquals("Vincent", names[0].getGiven()); assertEquals("Van der", names[0].getNonDroppingParticle()); assertEquals("Voort", names[0].getFamily()); }
@Test public void onMapReady_shouldSetMapControllerSceneLoadListenerNull() throws Exception { MapView mapView = mock(MapView.class); Context context = mock(Context.class); when(mapView.getContext()).thenReturn(context); when(context.getApplicationContext()).thenReturn(mock(Context.class)); TangramMapView tangramMapView = mock(TangramMapView.class); MapController mapController = mock(MapController.class); when(mapView.getTangramMapView()).thenReturn(tangramMapView); when(tangramMapView.getMap(any(MapController.SceneLoadListener.class))).thenReturn( mapController); initializer.onMapReady(mapView, mock(MapzenMapHttpHandler.class), mock(OnMapReadyCallback.class), mock(MapDataManager.class), mock(MapStateManager.class), mock(SceneUpdateManager.class), new Locale("en_us"), mock(BitmapMarkerManager.class), mock(ImportYamlGenerator.class)); verify(mapController).setSceneLoadListener(null); }
@Test public void testSimpleContextValueObjectModel() { ObjectModel model = new ObjectModel("org.jbpm.runtime.manager.impl.deploy.testobject.SimpleCustomObject", new Object[]{"context"}); ObjectModelResolver resolver = new ReflectionObjectModelResolver(); Map<String, Object> contextParam = new HashMap<String, Object>(); contextParam.put("context", "value from the context"); Object result = resolver.getInstance(model, this.getClass().getClassLoader(), contextParam); assertNotNull(result); assertTrue(result instanceof SimpleCustomObject); assertEquals("value from the context", ((SimpleCustomObject) result).getName()); }
@Test(dataProvider = "getSetValidStateParams") public void testSetValidState(ImageState originalState, ImageState newState) throws Exception { ImageEntity image = new ImageEntity(); image.setState(originalState); image.setState(newState); }
@Test public void testLoadPropertiesShouldReturnProperties() { Properties actual = underTest.loadProperties(configFile); assertEquals(actual.getProperty("webapp.port"), "8080"); }
@Test public void testEmptyDependencies() throws IOException { final Map<String, MavenArtifact> webappDependencies = Collections.emptyMap(); final StringWriter writer = new StringWriter(); final HtmlDependenciesReport htmlDependenciesReport = new HtmlDependenciesReport( webappDependencies, writer); htmlDependenciesReport.toHtml(); assertNotEmptyAndClear(writer); }
@Test public void testDateAllNullNoData() { for (int i = 0; i < 50; i++) { expensesDataSet.setValueAt(i, 4, null); } SelectorSliderDisplayer presenter = createSelectorDisplayer(dateSelectorSettings); presenter.draw(); verify(presenter.getView()).noData(); }
@Test public void testCannotOverwriteExistingGroupPartitioner() { final String group = "GROUP1"; final PartitionKey key1 = new PartitionKey(new Object[]{1L, "B"}); final PartitionKey key2 = new PartitionKey(new Object[]{5L, "A"}); final PartitionKey key3 = new PartitionKey(new Object[]{100L, "Z"}); final List<PartitionKey> splitPoints1 = new ArrayList<>(Arrays.asList(key1, key2, key3)); final GroupPartitioner partitioner1 = new GroupPartitioner(group, splitPoints1); final GraphPartitioner graphPartitioner = new GraphPartitioner(); graphPartitioner.addGroupPartitioner(group, partitioner1); final PartitionKey key4 = new PartitionKey(new Object[]{"A", "C", 1000L}); final PartitionKey key5 = new PartitionKey(new Object[]{"A", "Z", 1L}); final PartitionKey key6 = new PartitionKey(new Object[]{"T", "B", 500L}); final List<PartitionKey> splitPoints2 = new ArrayList<>(Arrays.asList(key4, key5, key6)); final GroupPartitioner partitioner2 = new GroupPartitioner(group, splitPoints2); try { graphPartitioner.addGroupPartitioner(group, partitioner2); } catch (final IllegalArgumentException e) { return; } fail("IllegalArgumentException should have been thrown"); }
@Test public void testRetryableCheckAndMutateRow() { CheckAndMutateRowRequest request = CheckAndMutateRowRequest.newBuilder().setTableName(TABLE_NAME).build(); setResponse(CheckAndMutateRowResponse.getDefaultInstance()); defaultClient.checkAndMutateRow(request); verifyRequestCalled(request); }
@Test public void testFindLocalArtifact() throws Exception { addLocalArtifact( artifact ); LocalArtifactRequest request = new LocalArtifactRequest( artifact, null, null ); LocalArtifactResult result = manager.find( session, request ); assertTrue( result.isAvailable() ); assertEquals( null, result.getRepository() ); snapshot = snapshot.setVersion( snapshot.getBaseVersion() ); addLocalArtifact( snapshot ); request = new LocalArtifactRequest( snapshot, null, null ); result = manager.find( session, request ); assertTrue( result.isAvailable() ); assertEquals( null, result.getRepository() ); }
@Test(expected = ParametersException.class) public void setParametersTest_invalid() throws ParametersException { when(validationResultBuilder.hasErrors()).thenReturn(true); tested.setParameters(params); }
@Test public void testGetFactById() { UUID id = UUID.randomUUID(); FactEntity entity = new FactEntity(); FactRecord record = new FactRecord(); when(factManager.getFact(id)).thenReturn(entity); when(factRecordConverter.fromEntity(entity)).thenReturn(record); assertSame(record, dao.getFact(id)); verify(factManager).getFact(id); verify(factRecordConverter).fromEntity(entity); }
@Test(timeout=10000) public void testSetLoginUser() throws IOException { UserGroupInformation ugi = UserGroupInformation.createRemoteUser("test-user"); UserGroupInformation.setLoginUser(ugi); assertEquals(ugi, UserGroupInformation.getLoginUser()); }
@Override @Test public void convertNullSDKToAPI() { sdkFieldValidator1 = null; FieldValidatorConverter converter = new FieldValidatorConverter(sdkFieldValidator1); assertThat( "Converter didn't return a null api object for a null sdk object", converter.toAPIFieldValidation(), is( nullValue() ) ); }
@Test public void deleteDefinitionFromAdaptable() { final DeleteThingDefinition expected = DeleteThingDefinition.of(TestConstants.THING_ID, TestConstants.DITTO_HEADERS_V_2); final TopicPath topicPath = topicPath(TopicPath.Action.DELETE); final JsonPointer path = JsonPointer.of("/definition"); final Adaptable adaptable = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ThingModifyCommand<?> actual = underTest.fromAdaptable(adaptable); assertWithExternalHeadersThat(actual).isEqualTo(expected); }
@Test public void testPutAll() { CoordinatorStreamStore spyCoordinatorStreamStore = Mockito.spy(coordinatorStreamStore); String key1 = getCoordinatorMessageKey("test-key1"); String key2 = getCoordinatorMessageKey("test-key2"); String key3 = getCoordinatorMessageKey("test-key3"); String key4 = getCoordinatorMessageKey("test-key4"); String key5 = getCoordinatorMessageKey("test-key5"); byte[] value1 = getValue("test-value1"); byte[] value2 = getValue("test-value2"); byte[] value3 = getValue("test-value3"); byte[] value4 = getValue("test-value4"); byte[] value5 = getValue("test-value5"); ImmutableMap<String, byte[]> map = ImmutableMap.of(key1, value1, key2, value2, key3, value3, key4, value4, key5, value5); spyCoordinatorStreamStore.putAll(map); Assert.assertEquals(value1, spyCoordinatorStreamStore.get(key1)); Assert.assertEquals(value2, spyCoordinatorStreamStore.get(key2)); Assert.assertEquals(value3, spyCoordinatorStreamStore.get(key3)); Assert.assertEquals(value4, spyCoordinatorStreamStore.get(key4)); Assert.assertEquals(value5, spyCoordinatorStreamStore.get(key5)); }
@Test public void checkData() { byte[] data = cvs.getData(BigInteger.valueOf(offset), BigInteger.valueOf(length)); assertEquals(length, data.length); for (int i = 0; i < length; i++) { assertEquals(offset+i, data[i]); } }
@Test (timeout = 30000) public void testValidateResourceRequest() { YarnScheduler mockScheduler = mock(YarnScheduler.class); Resource maxResource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_GCORES); try { Resource resource = Resources.createResource(0, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); } catch (InvalidResourceRequestException e) { fail("Zero memory should be accepted"); } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, 0, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); } catch (InvalidResourceRequestException e) { fail("Zero vcores should be accepted"); } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, 0); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); } catch (InvalidResourceRequestException e) { fail("Zero vcores should be accepted"); } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); } catch (InvalidResourceRequestException e) { fail("Max memory should be accepted"); } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); } catch (InvalidResourceRequestException e) { fail("Max vcores should not be accepted"); } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); } catch (InvalidResourceRequestException e) { fail("Max gcores should not be accepted"); } try { Resource resource = Resources.createResource(-1, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); fail("Negative memory should not be accepted"); } catch (InvalidResourceRequestException e) { } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, -1, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); fail("Negative vcores should not be accepted"); } catch (InvalidResourceRequestException e) { } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, -1); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); fail("Negative gcores should not be accepted"); } catch (InvalidResourceRequestException e) { } try { Resource resource = Resources.createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB + 1, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); fail("More than max memory should not be accepted"); } catch (InvalidResourceRequestException e) { } try { Resource resource = Resources .createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES + 1, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_GCORES); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); fail("More than max vcores should not be accepted"); } catch (InvalidResourceRequestException e) { } try { Resource resource = Resources .createResource( YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES, YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_GCORES + 1); ResourceRequest resReq = BuilderUtils.newResourceRequest(mock(Priority.class), ResourceRequest.ANY, resource, 1); SchedulerUtils.normalizeAndvalidateRequest(resReq, maxResource, null, mockScheduler, rmContext); fail("More than max gcores should not be accepted"); } catch (InvalidResourceRequestException e) { } }
@Test public void serialize() throws IOException { com.fasterxml.jackson.core.JsonGenerator jsonGenerator = mock(com.fasterxml.jackson.core.JsonGenerator.class); SerializerProvider serializerProvider = mock(SerializerProvider.class); LocalDateTime localDateTime = LocalDateTime.now(); new IsoLocalDateTimeSerializer().serialize(localDateTime, jsonGenerator, serializerProvider); verify(jsonGenerator).writeStartObject(); verify(jsonGenerator).writeFieldName("$date"); verify(jsonGenerator).writeString(localDateTime.format(DateTimeFormatter.ISO_DATE_TIME)); verify(jsonGenerator).writeEndObject(); verifyNoMoreInteractions(jsonGenerator); verifyZeroInteractions(serializerProvider); }
@Test void parseShouldNotThrowWhenSecondOfMinuteIsLesserThanTwoDigits() { ZonedDateTime dateTime = ZonedDateTime.parse("3 Jun 2017 04:35:1 -0700", ImapDateTimeFormatter.rfc5322()); assertThat(dateTime.getSecond()).isEqualTo(1); }
@Test public void testFirstConnectionWhenPropsHasTenantId() throws Exception { Properties props = new Properties(); final String tenantId = "00Dxx0000001234"; props.put(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId); Connection connection = new PhoenixTestDriver().connect(getUrl(), props); assertEquals(tenantId, connection.getClientInfo(PhoenixRuntime.TENANT_ID_ATTRIB)); }
@Test public void testNullOptions() throws P4JavaException { when(server.execMapCmdList(eq(JOURNALWAIT.toString()), argThat(WAIT_MATCHER), eq(null))) .thenReturn(new ArrayList<>()); journalWaitDelegator.journalWait(null); verify(server).execMapCmdList(eq(JOURNALWAIT.toString()), argThat(WAIT_MATCHER), eq(null)); }
@Test public void delete処理が正常に終了する() { EsIndex index = esClient.idxUser(UNIT_PREFIX, UNIT_USER_NAME); assertNotNull(index); ODataLinkAccessor linkAccessor = new ODataLinkAccessor(index, TYPE_NAME, ROUTING_ID); LinkDocHandler docHandler = createTestLinkDocHandler(); DcIndexResponse response = linkAccessor.create(docHandler); assertNotNull(response); assertFalse(response.getId().equals("")); linkAccessor.delete(docHandler); if (linkAccessor.getAds() != null) { JdbcAds ads = null; try { ads = new JdbcAds(); assertEquals(0, ads.countLink(INDEX_NAME)); } catch (Exception e) { fail(e.getMessage()); } } }
@Test void findMailboxByPathShouldReturnMailboxWhenExistsInBothTables() { mailboxDAO.save(MAILBOX) .block(); mailboxPathDAO.save(MAILBOX_PATH, MAILBOX_ID) .block(); mailboxPathV2DAO.save(MAILBOX_PATH, MAILBOX_ID) .block(); Mailbox mailbox = testee.findMailboxByPath(MAILBOX_PATH).block(); assertThat(mailbox.generateAssociatedPath()).isEqualTo(MAILBOX_PATH); }
@Test public void testContentFormattingDontMoveEndTag() throws BadLocationException { String content = "<a>\r" + " Content\r" + " <b>\r" + " Content2\r" + " Content3 </b>\r" + "</a>"; String expected = "<a>\r" + " Content\r" + " <b>\r" + " Content2\r" + " Content3 </b>\r" + "</a>"; format(content, expected); }
@Test public void testInvalidIp() { _thrown.expect(IllegalArgumentException.class); _thrown.expectMessage("Invalid IPv4 address: 1.1.1.256. 256 is an invalid octet"); Ip.parse("1.1.1.256"); }
@Test public void testExists() { jedisSentinel.exists("key"); }
@Test public void testGetNormalizedVdWVolume() throws Exception { AtomicProperties props = AtomicProperties.getInstance(); double vol = props.getNormalizedVdWVolume("C"); Assert.assertTrue(vol > 0); }
@Test public void overwritesArraysInInclude() throws Exception { String yaml = "" + "include: %s\n" + "array:\n" + "- \"right1\"\n" + "- \"right2\"\n"; String include = "" + "array:\n" + "- \"wrong1\"\n" + "- \"wrong2\"\n"; testYamlWithInclude(yaml, include, yamlConfig -> assertThat(yamlConfig.get("array", List.class), IsOptional.isIterable(contains("right1", "right2")))); }
@Test public void oneMBeanOneMetricUnsupportedApp() { AppType appType = null; Throwable ex = catchThrowable(() -> metricsEnquirer.getMBeanMetrics(appType)); assertThat(ex).isEqualToComparingFieldByField(new MonitoringNotSupportedException(appType)); }
@Test public void testEquals() throws Exception { ResourceSpec rs1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build(); ResourceSpec rs2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build(); assertTrue(rs1.equals(rs2)); assertTrue(rs2.equals(rs1)); ResourceSpec rs3 = ResourceSpec.newBuilder(). setCpuCores(1.0). setHeapMemoryInMB(100). setGPUResource(2.2). build(); ResourceSpec rs4 = ResourceSpec.newBuilder(). setCpuCores(1.0). setHeapMemoryInMB(100). setGPUResource(1). build(); assertFalse(rs3.equals(rs4)); ResourceSpec rs5 = ResourceSpec.newBuilder(). setCpuCores(1.0). setHeapMemoryInMB(100). setGPUResource(2.2). build(); assertTrue(rs3.equals(rs5)); }
@Test public void getAverageTimeFromStepTest() { allStepsPageCollection = new AllStepsPageCollection(getTestReports(), ""); Step step = allStepsPageCollection.getSteps().iterator().next(); assertThat(allStepsPageCollection.getAverageTimeFromStep(step), is("0m 00s 000ms")); }
@Test public void testEmptyListReturnedWhenImageSeqIsEqualToLatest() throws Exception { Mockito.when(imageRetriever.getLatestImageID()).thenReturn(1L); Mockito.when(deltaRetriever.getLatestDeltaID()).thenReturn(10L); List<PathsUpdate> updates = updater.getAllUpdatesFrom(11, 1); assertTrue(updates.isEmpty()); }
@Test public void testExcludingSmallTrafficBroker() { SlowBrokerFinder slowBrokerFinder = createSlowBrokerFinder(); Map<BrokerEntity, ValuesAndExtrapolations> currentMetrics = new HashMap<>(BROKER_ENTITIES.size()); Map<BrokerEntity, ValuesAndExtrapolations> history = new HashMap<>(BROKER_ENTITIES.size()); currentMetrics.putAll(createCurrentMetrics(populateMetricValues(SMALL_BYTES_IN_RATE, SMALL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS), CURRENT_METRIC_WINDOW, BROKER_ENTITIES.get(0))); history.putAll(createHistory(populateMetricValues(SMALL_BYTES_IN_RATE, SMALL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS), populateMetricValues(SMALL_BYTES_IN_RATE * BYTE_IN_RATE_VARIANCE_RATIO, SMALL_BYTES_IN_RATE * BYTE_IN_RATE_VARIANCE_RATIO, NORMAL_LOG_FLUSH_TIME_MS * LOG_FLUSH_TIME_MS_VARIANCE_RATIO), METRIC_HISTORY_WINDOW_SIZE, BROKER_ENTITIES.get(0))); for (int i = 1; i < BROKER_ENTITIES.size(); i++) { currentMetrics.putAll(createCurrentMetrics(populateMetricValues(NORMAL_BYTES_IN_RATE, NORMAL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS), CURRENT_METRIC_WINDOW, BROKER_ENTITIES.get(i))); history.putAll(createHistory(populateMetricValues(NORMAL_BYTES_IN_RATE, NORMAL_BYTES_IN_RATE, NORMAL_LOG_FLUSH_TIME_MS), populateMetricValues(NORMAL_BYTES_IN_RATE * BYTE_IN_RATE_VARIANCE_RATIO, NORMAL_BYTES_IN_RATE * BYTE_IN_RATE_VARIANCE_RATIO, NORMAL_LOG_FLUSH_TIME_MS * LOG_FLUSH_TIME_MS_VARIANCE_RATIO), METRIC_HISTORY_WINDOW_SIZE, BROKER_ENTITIES.get(0))); } Collection<MetricAnomaly<BrokerEntity>> anomalies = slowBrokerFinder.metricAnomalies(history, currentMetrics); assertTrue(anomalies.isEmpty()); }
@Test public void when_multipleTypeSerializersRegistered_then_localHasPrecedence() { Serializer serializer = new ValueSerializer(); Map<Class<?>, Serializer> serializers = ImmutableMap.of(Byte.class, serializer); DelegatingSerializationService service = new DelegatingSerializationService(serializers, DELEGATE); assertThat(service.serializerFor(TYPE_ID).getImpl()).isEqualTo(serializer); assertThat(service.serializerFor(Byte.valueOf((byte) 1)).getImpl()).isEqualTo(serializer); }
@Test public void convertDoubleTicks() { assumeThat(escape).isTrue(); assertThat(format("this <''> is a single tick")).isEqualTo("this <'> is a single tick"); }
@Test(expected = ActionExecuteException.class) public void ShouldThrowRuntimeException_When_LambdaThrowsException() throws Exception { when(Keys.getOrAdd(CollectionName.class.getCanonicalName())).thenThrow(new ResolutionException("")); BootstrapItem bootstrapItem = mock(BootstrapItem.class); whenNew(BootstrapItem.class).withArguments("CollectionNamePlugin").thenReturn(bootstrapItem); when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem); when(bootstrapItem.before(anyString())).thenReturn(bootstrapItem); HashMap<String, CollectionName> collectionMap = mock(HashMap.class); whenNew(HashMap.class).withNoArguments().thenReturn(collectionMap); plugin.load(); verifyNew(BootstrapItem.class).withArguments("CollectionNamePlugin"); ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class); verify(bootstrapItem).process(actionArgumentCaptor.capture()); actionArgumentCaptor.getValue().execute(); }
@Test public void doPageAssignmentsTest() throws IOException { Application.Name appName = Application.Name.valueOf("Test"); Page.Name pageName = Page.Name.valueOf("TestPage1"); User.ID user = User.ID.valueOf("testUser"); Context context = Context.valueOf("TEST"); SegmentationProfile segmentationProfile = mock(SegmentationProfile.class); HttpHeaders headers = mock(HttpHeaders.class); Calendar date1 = Calendar.getInstance(); date1.add(Calendar.DAY_OF_MONTH, -1); Calendar date2 = Calendar.getInstance(); date2.add(Calendar.DAY_OF_MONTH, 10); Experiment exp1 = Experiment.withID(Experiment.ID.newInstance()) .withApplicationName(appName) .withLabel(Experiment.Label.valueOf("exp1Label")) .withStartTime(date1.getTime()) .withEndTime(date2.getTime()) .withSamplingPercent(1.0) .withState(Experiment.State.RUNNING) .withIsPersonalizationEnabled(false) .build(); Experiment exp2 = Experiment.withID(Experiment.ID.newInstance()) .withApplicationName(appName) .withLabel(Experiment.Label.valueOf("exp2Label")) .withStartTime(date1.getTime()) .withEndTime(date2.getTime()) .withSamplingPercent(1.0) .withState(Experiment.State.RUNNING) .withIsPersonalizationEnabled(false) .build(); List<PageExperiment> pageExperiments = newArrayList(); pageExperiments.add(PageExperiment.withAttributes(exp1.getID(), exp1.getLabel(), true).build()); pageExperiments.add(PageExperiment.withAttributes(exp2.getID(), exp2.getLabel(), true).build()); ExperimentBatch experimentBatch = ExperimentBatch.newInstance().withLabels(newHashSet(exp1.getLabel(), exp2.getLabel())).build(); List<Experiment> expList = newArrayList(exp1, exp2); Map expMap = newHashMap(); expMap.put(exp1.getID(), exp1); expMap.put(exp2.getID(), exp2); PrioritizedExperimentList pExpList = new PrioritizedExperimentList(); pExpList.addPrioritizedExperiment(PrioritizedExperiment.from(exp1, 1).build()); pExpList.addPrioritizedExperiment(PrioritizedExperiment.from(exp2, 2).build()); Optional<PrioritizedExperimentList> prioritizedExperimentListOptional = Optional.of(pExpList); BucketList bucketList1 = new BucketList(); bucketList1.addBucket(Bucket.newInstance(exp1.getID(), Bucket.Label.valueOf("red")).withAllocationPercent(0.5).build()); bucketList1.addBucket(Bucket.newInstance(exp1.getID(), Bucket.Label.valueOf("blue")).withAllocationPercent(0.5).build()); BucketList bucketList2 = new BucketList(); bucketList2.addBucket(Bucket.newInstance(exp2.getID(), Bucket.Label.valueOf("yellow")).withAllocationPercent(1.0).build()); List<Experiment.ID> exclusionList = newArrayList(); when(metadataCache.getPageExperiments(appName, pageName)).thenReturn(pageExperiments); when(metadataCache.getExperimentById(exp1.getID())).thenReturn(Optional.of(exp1)); when(metadataCache.getExperimentById(exp2.getID())).thenReturn(Optional.of(exp2)); when(metadataCache.getExperimentsByAppName(appName)).thenReturn(expList); when(metadataCache.getPrioritizedExperimentListMap(appName)).thenReturn(prioritizedExperimentListOptional); when(metadataCache.getBucketList(exp1.getID())).thenReturn(bucketList1); when(metadataCache.getBucketList(exp2.getID())).thenReturn(bucketList2); when(metadataCache.getExclusionList(exp1.getID())).thenReturn(exclusionList); when(metadataCache.getExclusionList(exp2.getID())).thenReturn(exclusionList); List<Pair<Experiment, String>> existingAssignments = newArrayList(new ImmutablePair<>(exp2, "yellow")); Mockito.when(assignmentsRepository.getAssignments(user, appName, context, expMap)).thenReturn(existingAssignments); List<Assignment> resultAssignments = assignmentsImpl.doPageAssignments(appName, pageName, user, context, true, false, headers, segmentationProfile,false); assertThat(resultAssignments.size(), is(2)); assertThat(resultAssignments.get(0).getBucketLabel().toString(), anyOf(is("red"), is("blue"))); assertThat(resultAssignments.get(0).getStatus().toString(), is(Assignment.Status.NEW_ASSIGNMENT.toString())); assertThat(resultAssignments.get(1).getBucketLabel().toString(), is("yellow")); assertThat(resultAssignments.get(1).getStatus().toString(), is(Assignment.Status.EXISTING_ASSIGNMENT.toString())); }
@Test public void findWithDispersalInteractionTypeParasitoidByInternalName() { final String typeSelector = CypherQueryBuilder.createInteractionTypeSelector(Collections.singletonList("HAS_PARASITOID")); assertThat(typeSelector, is("HAS_HYPERPARASITOID|HAS_PARASITOID|HAS_ENDOPARASITOID|HAS_ECTOPARASITOID")); }
@Test void test_method_throwing_exception() throws Exception { MethodBehavior methodBehavior = getMethodBehavior("throw_exception()V"); assertThat(methodBehavior.yields()).hasSize(1); MethodYield methodYield = methodBehavior.yields().get(0); assertThat(methodYield).isInstanceOf(ExceptionalYield.class); }
@Test(expected = LogbookClientNotFoundException.class) public void getObjectGroupLifeCycleStatus_ThrowLogbookClientNotFoundException() throws LogbookClientNotFoundException, LogbookClientServerException { when(mock.head()).thenReturn(Response.status(Response.Status.NOT_FOUND).build()); GUID objectGroupId = GUIDFactory.newObjectGroupGUID(0); client.getObjectGroupLifeCycleStatus(objectGroupId.toString()); }
@Test public void testInvalidSequence() throws Exception { try { XMLUtils.unmangleXmlString("\\000g;foo", false); Assert.fail("expected an unmangling error"); } catch (UnmanglingError e) { } try { XMLUtils.unmangleXmlString("\\0", false); Assert.fail("expected an unmangling error"); } catch (UnmanglingError e) { } }
@Test public void badNumberOfBuckets() throws ConfigException { try { TrendingConfiguration.builder() .dateField(fieldPathNormaliser.normaliseFieldPath(ParametricValuesService.AUTN_DATE_FIELD)) .numberOfValues(10) .defaultNumberOfBuckets(15) .maxNumberOfBuckets(20) .minNumberOfBuckets(0) .build() .basicValidate(null); fail("Exception should have been thrown"); } catch(final ConfigException e) { assertThat("Exception has the correct message", e.getMessage(), containsString("Minimum number of buckets must be provided and must be greater than 0")); } }
@Test public void testGetDescription() { final String description = plugIn.getDescription(null); assertEquals("BigGeoTiff/GeoTiff data product.", description); }
@Test public void takeNextPage() throws Exception { List<List<?>> lists = tableDisplay.takeNextPage(); assertThat(lists.size()).isEqualTo(3); assertThat(lists.get(1).get(1)).isEqualTo(5); }
@Test public void testSlice() { byte[] data = new byte[] { 0, 1, 2, 3, 4}; ByteBuf byteBuffer = Unpooled.wrappedBuffer(data); AmqpReadableBuffer buffer = new AmqpReadableBuffer(byteBuffer); ReadableBuffer slice = buffer.slice(); for (int i = 0; i < data.length; i++) { assertEquals(data[i], slice.get()); } assertFalse(slice.hasRemaining()); }
@Test public void testGetCapacityGroup() { ApplicationSlaRepresentation result = resource.getApplicationSLA(CELL_1_CAPACITY_GROUP.getAppName(), false); assertThat(result).isNotNull(); }
@Test public void testConvert_BigDecimal() { assertEquals("123.32444", converter.convert(BigDecimal.valueOf(123.32444))); }
@Test public void testTruncateToSizeTextGreaterThanMax() { int size = _randomSize(); Assert.assertEquals( StringPool.BLANK, GCloudNaturalLanguageUtil.truncateToSize( RandomTestUtil.randomString(size + 1) + StringPool.SPACE + RandomTestUtil.randomString(size + 1), size)); }
@Test public void builderToTopLeftTest() throws IOException, InterruptedException { AbstractLinearGradientBuilder gradientBuilder = new StrategyBasedLinearGradientBuilder() .setGradientDirectionAsStrategy(StrategyBasedLinearGradientBuilder.GradientStrategy.TO_TOP_LEFT) .addColorStop(new GradientColorStop(ColorConstants.RED.getColorValue(), 0d, OffsetType.RELATIVE)) .addColorStop(new GradientColorStop(ColorConstants.GREEN.getColorValue(), 0.5, OffsetType.RELATIVE)) .addColorStop(new GradientColorStop(ColorConstants.BLUE.getColorValue(), 1d, OffsetType.RELATIVE)); generateAndComparePdfs("builderToTopLeftTest.pdf", null, gradientBuilder); }
@Test public void testGetDefaultFileExtensions(){ final String[] extensions = plugIn.getDefaultFileExtensions(); assertEquals(1, extensions.length); assertEquals(".hdf", extensions[0]); }
@Test public void testReconstructDeletedSequenceWithDelCombinedWithSnv() { assertEquals("GATCAA", new String(Microhomology.reconstructDeletedSequence(1, "GACAA".getBytes(), "TT"))); assertEquals("GATCAA", new String(Microhomology.reconstructDeletedSequence(1, "GACAA".getBytes(), "AT"))); }
@Test public void unknown_lwm2m_code_to_unknown_coap_code() { ResponseCode coapResponseCode = ResponseCodeUtil.toCoapResponseCode(new org.eclipse.leshan.core.ResponseCode(206)); Assert.assertEquals(ResponseCode._UNKNOWN_SUCCESS_CODE, coapResponseCode); coapResponseCode = ResponseCodeUtil.toCoapResponseCode(new org.eclipse.leshan.core.ResponseCode(425)); Assert.assertEquals(ResponseCode.BAD_REQUEST, coapResponseCode); coapResponseCode = ResponseCodeUtil.toCoapResponseCode(new org.eclipse.leshan.core.ResponseCode(509)); Assert.assertEquals(ResponseCode.INTERNAL_SERVER_ERROR, coapResponseCode); }
@Test public void getMetadataISOGMLTest() throws Exception { Node result = reader.getMetadata("IGNF_PVA_1-0__1968__C0620-0111_CDP_5569_8959.xml", MetadataType.ISO_19115); Node expResult = getNodeFromStream(Util.getResourceAsStream("org/constellation/xml/metadata/meta10.xml"), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("af24f70a-818c-4da1-9afb-1fc1e0058760", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_11), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("1c7d52ac-66c5-449b-a88b-8a0feeccb5fa", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_12), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("4c017cc5-3e0e-49d5-9f68-549943247e7e", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_13), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("4c017cc5-3e0e-49d5-9f68-549943247e89", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_14), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("484fc4d9-8d11-48a5-a386-65c19398f7c3", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_15), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("484fc4d9-8d11-48a5-a386-65c19398f7k7", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_16), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("28644bf0-5d9d-4ebd-bef0-f2b0b2067b26", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_18), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); result = reader.getMetadata("937491cd-4bc4-43e4-9509-f6cc606f906e", MetadataType.ISO_19115); expResult = getNodeFromString((StaticMetadata.META_19), MetadataType.ISO_19115); assertTrue(result instanceof Node); compare(expResult, result); }
@Test public void testGetAnswerBdds() { BDDPacket pkt = new BDDPacket(); BDDInteger var = pkt.getDstIp(); BDD bdd1 = var.value(1); BDD bdd2 = var.value(2); BDD bdd3 = var.value(3); Location loc = new InterfaceLocation("node", "iface"); { Map<Location, BDD> success = ImmutableMap.of(loc, bdd1); BidirectionalReachabilityResult result = new BidirectionalReachabilityResult(success, ImmutableMap.of()); assertEquals(getAnswerBdds(result, SUCCESS), success); assertTrue(getAnswerBdds(result, FAILURE).isEmpty()); assertTrue(getAnswerBdds(result, MULTIPATH_INCONSISTENT).isEmpty()); } { Map<Location, BDD> failure = ImmutableMap.of(loc, bdd1); BidirectionalReachabilityResult result = new BidirectionalReachabilityResult(ImmutableMap.of(), failure); assertTrue(getAnswerBdds(result, SUCCESS).isEmpty()); assertEquals(getAnswerBdds(result, FAILURE), failure); assertTrue(getAnswerBdds(result, MULTIPATH_INCONSISTENT).isEmpty()); } { Map<Location, BDD> success = ImmutableMap.of(loc, bdd1.or(bdd2)); Map<Location, BDD> failure = ImmutableMap.of(loc, bdd2.or(bdd3)); BidirectionalReachabilityResult result = new BidirectionalReachabilityResult(success, failure); assertEquals(getAnswerBdds(result, SUCCESS), ImmutableMap.of(loc, bdd1)); assertEquals(getAnswerBdds(result, FAILURE), ImmutableMap.of(loc, bdd3)); assertEquals(getAnswerBdds(result, MULTIPATH_INCONSISTENT), ImmutableMap.of(loc, bdd2)); } { Map<Location, BDD> successAndFailure = ImmutableMap.of(loc, bdd1); BidirectionalReachabilityResult result = new BidirectionalReachabilityResult(successAndFailure, successAndFailure); assertEquals(getAnswerBdds(result, SUCCESS), successAndFailure); assertEquals(getAnswerBdds(result, FAILURE), successAndFailure); assertEquals(getAnswerBdds(result, MULTIPATH_INCONSISTENT), successAndFailure); } }
@Test public void evalOpInternalShouldHandleAllEvaluationExceptions() throws OpProcessorException { final AbstractEvalOpProcessor processor = new StandardOpProcessor(); final RequestMessage request = RequestMessage.build("test"). addArg(Tokens.ARGS_LANGUAGE, "gremlin-groovy"). addArg(Tokens.ARGS_GREMLIN, "1+1").create(); final Settings settings = new Settings(); final ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class); final ArgumentCaptor<ResponseMessage> responseCaptor = ArgumentCaptor.forClass(ResponseMessage.class); final GremlinExecutor gremlinExecutor = Mockito.mock(GremlinExecutor.class); final CompletableFuture<Object> exFut = new CompletableFuture<>(); Mockito.when(gremlinExecutor.eval(anyString(), anyString(), Mockito.any(), Mockito.<GremlinExecutor.LifeCycle>any())) .thenReturn(exFut); exFut.completeExceptionally(new IllegalStateException("test-exception")); final Context contextspy = Mockito.spy(new Context(request, ctx, settings, null, gremlinExecutor, null)); processor.evalOpInternal(contextspy, contextspy::getGremlinExecutor, SimpleBindings::new); Mockito.verify(contextspy, Mockito.times(1)).writeAndFlush(responseCaptor.capture()); assertEquals(ResponseStatusCode.SERVER_ERROR_EVALUATION, responseCaptor.getValue().getStatus().getCode()); assertEquals(request.getRequestId(), responseCaptor.getValue().getRequestId()); assertThat(responseCaptor.getValue().getStatus().getMessage(), CoreMatchers.containsString("test-exception")); }
@Test public void testWithCycle2_assertNoLoop() throws Exception { GMLAppSchemaReader xsdDecoder = new GMLAppSchemaReader( null, null, schemaWithCycle2 ); AppSchema appSchema = xsdDecoder.extractAppSchema(); CRSRef storageCrs = CRSManager.getCRSRef( "EPSG:4326" ); GeometryStorageParams geometryParams = new GeometryStorageParams( storageCrs, String.valueOf( "0" ), DIM_2 ); AppSchemaMapper mapper = new AppSchemaMapper( appSchema, false, true, geometryParams, 63, true, true, 2 ); MappedAppSchema mappedSchema = mapper.getMappedSchema(); Map<QName, FeatureTypeMapping> ftMappings = mappedSchema.getFtMappings(); assertThat( ftMappings.size(), is( 1 ) ); }
@Test public void testShouldSendMailToContactListMembersWithFourAttachements() throws AddressException, MessagingException { systemEmailer.sendEmail(recipientsContactLists, ObjectMother.AN_EXAMPLE_SUBJECT, ObjectMother.HELLOY_KITTY_THIS_IS_AN_EXAMPLE_BODY, fourAttachmentsMocked); verify(webappAndMailhelperMockSystemMailer, times(1)).send(any(MimeMessage.class), any(MailerResult.class)); caputureAndVerifyValuesForCreateMessage(recipientsContactLists, ObjectMother.AN_EXAMPLE_SUBJECT, ObjectMother.HELLOY_KITTY_THIS_IS_AN_EXAMPLE_BODY+ObjectMother.MAIL_TEMPLATE_FOOTER, fourAttachmentsMocked); }
@Test(expected = NullPointerException.class) public void getBlobLengthShouldAlwaysThrowAnExceptionWhenNullBlobIdIsPassed() throws IOException { given: { final BlobStore store = new LoopbackBlobStore(); when: { store.getBlobLength(null); } } }
@Test public void testBad_Message() throws BitcoinURIParseException { try { testObject = new BitcoinURI(MainNetParams.get(), BitcoinURI.BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS + "?message="); fail("Expecting BitcoinURIParseException"); } catch (BitcoinURIParseException e) { assertTrue(e.getMessage().contains("message")); } }
@Test public void getValuesTest() { UIntMap<String> map = new UIntMap<>(); int size = 1000; List<String> expected = new ArrayList<>(); for (int i = 0; i < size; i++) { String value = String.valueOf(i + 1); map.put(i, value); expected.add(value); } Assert.assertEquals(expected, map.getValuesSortedByKey()); }
@Test public void getUsersTest() throws SQLException, Exception { String[] tableTypes = { "TABLE" }; Mockito.when(connectionMock.isClosed()).thenReturn(false); DatabaseMetaData dbmMock = mock(DatabaseMetaData.class); Mockito.when(connectionMock.getMetaData()).thenReturn(dbmMock); ResultSet rsUserMock = mock(ResultSet.class); Mockito.when(dbmMock.getTables(null, null, "USERS", tableTypes)).thenReturn(rsUserMock); Mockito.when(rsUserMock.next()).thenReturn(true); Statement stmtMock = mock(Statement.class); Mockito.when(connectionMock.createStatement()).thenReturn(stmtMock); ResultSet rsMock = getMockedResultSet(); Mockito.when(stmtMock.executeQuery(anyString())).thenReturn(rsMock); Users users = userStoreUnderTest.getUsers(); assertTrue(users.getUsers().size() == 1); verify(stmtMock).close(); }
@Test public void handleRequestWithMockContext() { var lambdaInfoApiHandler = new LambdaInfoApiHandler(); var context = mock(Context.class); when(context.getAwsRequestId()).thenReturn("mock aws request id"); assertThat(lambdaInfoApiHandler.handleRequest(null, context), notNullValue()); }
@Test public void randomBounds() { for (int i = 0; i < 1000_000; i++) { final long v = StreamId.random(true, true); assertTrue(Long.toString(v), v > 1 && v < 4611686018427387903L); } }
@Test void testMapEntityWithDataPropertyNullValue() throws Exception { final OWLClassA entity = new OWLClassA(); entity.setUri(entityA.getUri()); final Descriptor aDescriptor = new EntityDescriptor(); final AxiomValueGatherer builder = sut.mapEntityToAxioms(entity.getUri(), entity, mocks.forOwlClassA().entityType(), aDescriptor); final AxiomValueDescriptor res = getAxiomValueDescriptor(builder); assertNotNull(res); assertEquals(entity.getUri(), res.getSubject().getIdentifier()); assertEquals(2, res.getAssertions().size()); assertTrue(containsInstanceClassAssertion(res, OWLClassA.getClassIri())); final List<Value<?>> v = res.getAssertionValues(Assertion.createDataPropertyAssertion( strAttAIdentifier, false)); assertEquals(1, v.size()); assertEquals(Value.nullValue(), v.get(0)); }
@Test public void removeClassifierDpdkScenario() { when(sff.getSffDataPlaneLocator()).thenReturn(new ArrayList<>()); PowerMockito.when(SfcOvsUtil.getDpdkOfPort(anyString(), anyString())).thenReturn(null); BareClassifier classifierInterface = Mockito.spy(new BareClassifier(sff)); doReturn(Optional.of(FIRST_SF_NODE_NAME)).when(classifierInterface).getNodeName(anyString()); OpenflowClassifierProcessor classifierManager = new OpenflowClassifierProcessor(readWriteTransaction, new LogicallyAttachedClassifier(dataGetter), classifierInterface); List<FlowDetails> theFlows = classifierManager.processClassifier(sffClassifier, acl, false); Assert.assertFalse(theFlows.isEmpty()); Assert.assertEquals(1 + 1, theFlows.size()); }
@Test public void testIsAuthorizedUserHasReadAccess() throws Exception { createUser( USER_ALPACA, "Al 'Archiva' Paca" ); assignRepositoryObserverRole( USER_ALPACA, "corporate" ); UserManager userManager = securitySystem.getUserManager(); User user = userManager.findUser( USER_ALPACA ); AuthenticationResult result = new AuthenticationResult( true, USER_ALPACA, null ); SecuritySession session = new DefaultSecuritySession( result, user ); boolean isAuthorized = servletAuth.isAuthorized( request, session, "corporate", ArchivaRoleConstants.OPERATION_REPOSITORY_ACCESS ); assertTrue( isAuthorized ); restoreGuestInitialValues( USER_ALPACA ); }
@Test public void testNoMatchNoDefault() { assertNull(typeMapping.getTypeName(metaData.getPropertyMetaData("first"))); }
@Test public void testInitParamsCreation() throws Exception { servletConfig = new SwaggerServletConfig(context, configuration); assertNotNull(servletConfig); assertEquals(configId, servletConfig.getInitParameter(CONFIG_ID_KEY)); assertEquals(scannerId, servletConfig.getInitParameter(SCANNER_ID_KEY)); assertEquals(contextId, servletConfig.getInitParameter(CONTEXT_ID_KEY)); }
@Test public void emptyVersion_ReturnsUnknownVersion() { JavaVersion version = JavaVersionParser.parseJavaVersion(""); assertJavaVersionsEqual(jv(null, null, null, null), version); assertEquals(KnownJavaVersions.UNKNOWN, version.getKnownVersion()); }
@Test public void testDelTemplate() throws Exception { List<Integer> list = Lists.newArrayList(); list.add(1); list.add(20); list.add(84); WxMaTemplateAddResult result = this.wxService.getTemplateService().addTemplate("AT0004", list); this.wxService.getTemplateService().delTemplate(result.getTemplateId()); }
@Test public void saveEntity() throws IOException { Path entityDir = projectDir.resolve("entities"); String entityFilename = ENTITY2 + EntityManagerService.ENTITY_FILE_EXTENSION; JsonNode node = getJsonFromResource(entityFilename); EntityModel entity = EntityModel.fromJson(entityFilename, node); entity.setFilename(entityDir.resolve(entityFilename).toString()); entityMgrService.saveEntity(entity); List<EntityModel> entities = entityMgrService.getEntities(); assertEquals(2, entities.size()); List<String> expected = Arrays.asList(ENTITY, ENTITY2); List<String> actual = Arrays.asList(entities.get(0).getName(), entities.get(1).getName()); assertTrue(expected.containsAll(actual)); }
@Test public void testPrefix() { byte[] prefix = Bytes.toBytes("prefix"); byte[] prefixEnd = calculatePrefixEnd(prefix); Scan scan = new Scan(); scan.setRowPrefixFilter(prefix); scanAdapter.adapt(scan, throwingReadHooks, query); Assert.assertEquals( toRowSet(toRange(prefix, prefixEnd)), query.toProto(requestContext).getRows()); }
@Test void build() { SSLContext context = new SSLContextBuilder().build(); assertThat(context).isNotNull(); }
@Test public void checkStatusShouldBeChangedToUncheckedStyle() throws Exception { reset(runnerCss); widget.setCheckedStatus(false); verify(runnerCss).activeConsoleButton(); verify(runnerCss).whiteColor(); }
@Test public void testDeleteAbsent() { String network = "network1"; String key = "foo/bar"; Main.getWorkMgr().initNetwork(network, null); try (Response response = getTarget(network, key).delete()) { assertThat(response.getStatus(), equalTo(NOT_FOUND.getStatusCode())); } }
@Test public void testUndeploy_template() throws Exception { Assume.assumeTrue( isLinuxSystem()); copyResources( "/BashTemplate" ); File file = new File( OUTPUT_DIR, "BashTemplateFile.undeploy" ); Assert.assertFalse( file.exists()); this.plugin.undeploy( this.inst ); assertTrue( file.exists()); }
@Test public void offer_failsWhenFull_sizeInBytes() { assertThat(queue.offer(new byte[10], 10)).isTrue(); assertThat(queue.offer(new byte[1], 1)).isFalse(); }
@Test void getConsentById_noConsent() { when(consentJpaRepository.findByExternalId(EXTERNAL_CONSENT_ID)) .thenReturn(Optional.empty()); CmsResponse<CmsConsent> response = consentServiceInternal.getConsentById(EXTERNAL_CONSENT_ID); assertTrue(response.hasError()); assertEquals(CmsError.LOGICAL_ERROR, response.getError()); }
@Test public void testFunctionDependingOnUnknownInput() { IdentityMapper3<Boolean, String> function = new IdentityMapper3<Boolean, String>(); TypeInformation<?> ti = TypeExtractor.getMapReturnTypes(function, BasicTypeInfo.BOOLEAN_TYPE_INFO, "name", true); Assert.assertTrue(ti instanceof MissingTypeInfo); try { TypeExtractor.getMapReturnTypes(function, BasicTypeInfo.BOOLEAN_TYPE_INFO); Assert.fail("Expected an exception"); } catch (InvalidTypesException e) { } }
@Test void testEventTimeToString_PrimitiveDouble_MinPaddedTime() { assertEquals("+10000-01-01 00:00:00.000", EventUtil.eventTimeToString(253402300800000d)); }
@Test public void testSetupBindings_ThrowsExceptionForMethodReturningNull() { TestView view = new TestView(); view.fieldForMethodBinding = null; assertThat(view.methodForMethodBinding(), is(nullValue())); Binder binder = new Binder(view, new TestPmo()); Assertions.assertThrows(NullPointerException.class, () -> { binder.setupBindings(bindingContext); }); }
@Test public void testGetBalance() throws Exception { neow3j.getBalance("9bde8f209c88dd0e7ca3bf0af0f476cdd8207789").send(); verifyResult( "{\"jsonrpc\":\"2.0\",\"method\":\"getbalance\"," + "\"params\":[\"9bde8f209c88dd0e7ca3bf0af0f476cdd8207789\"],\"id\":1}"); }
@Test public void shouldCreateTaskStateDirectory() { final TaskId taskId = new TaskId(0, 0); final File taskDirectory = directory.directoryForTask(taskId); assertTrue(taskDirectory.exists()); assertTrue(taskDirectory.isDirectory()); }
@Test public void testParsingPKCS8WithoutPassword() throws IOException, GeneralSecurityException { KeyStore keystore = PEMImporter.loadKeyStore(pemCert, privkeyWithoutPasswordPKCS8, ""); assertEquals(1, keystore.size()); assertTrue(keystore.containsAlias("key")); assertEquals(1, keystore.getCertificateChain("key").length); }
@Test public void behaviorDefaultConfigVersion_2_0_0() throws Exception { FormatterStep step = ScalaFmtStep.create("2.0.0", TestProvisioner.mavenCentral(), null); StepHarness.forStep(step) .testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basicPost2.0.0.clean"); }
@Test public void shouldCreateAsSelectExistingTopicWithWritePermissionsAllowed() { final Statement statement = givenStatement(String.format( "CREATE STREAM %s AS SELECT * FROM %s;", STREAM_TOPIC_2, STREAM_TOPIC_1) ); authorizationValidator.checkAuthorization(securityContext, metaStore, statement); }
@Test public void testCharSeqOrEmpty_nullCharSeq() { assertEquals("", Utils.charSeqOrEmpty(null)); }
@Test public void testMultipleStopOnceAssert() throws Exception { DrainBarrier barrier = new DrainBarrier(); barrier.stopAndDrainOpsOnce(); try { barrier.stopAndDrainOpsOnce(); fail("Should have asserted"); } catch (AssertionError e) { } }
@Test public void testDefaultThreadFactoryWithName() throws Exception { final ThreadFactory threadFactory = InstrumentedExecutors.defaultThreadFactory(registry, "tf"); threadFactory.newThread(new NoopRunnable()); assertThat(registry.meter("tf.created").getCount()).isEqualTo(1L); final Field delegateField = InstrumentedThreadFactory.class.getDeclaredField("delegate"); delegateField.setAccessible(true); final ThreadFactory delegate = (ThreadFactory) delegateField.get(threadFactory); assertThat(delegate.getClass().getCanonicalName()).isEqualTo("java.util.concurrent.Executors.DefaultThreadFactory"); }
@Test public void onTokenRefresh() { TokenService service = new TokenService(); service.onNewToken(null); verify(mPush).onTokenRefresh(null); String testToken = "TEST"; service.onNewToken(testToken); verify(mPush).onTokenRefresh(eq(testToken)); }
@Test public void testGetDigestRollingPolicy() { String rollingPolicy = this.clientReporter.getDigestRollingPolicy(); assertEquals(expectRollingPolicy, rollingPolicy); }
@Test public void shouldMatchByFormBodyWithRequiredFalse() { HttpRequestsPropertiesMatcher httpRequestsPropertiesMatcher = new HttpRequestsPropertiesMatcher(mockServerLogger); httpRequestsPropertiesMatcher.update(new Expectation( new OpenAPIDefinition() .withSpecUrlOrPayload("---" + NEW_LINE + "openapi: 3.0.0" + NEW_LINE + "paths:" + NEW_LINE + " \"/somePath\":" + NEW_LINE + " post:" + NEW_LINE + " operationId: someOperation" + NEW_LINE + " requestBody:" + NEW_LINE + " required: false" + NEW_LINE + " content:" + NEW_LINE + " application/x-www-form-urlencoded:" + NEW_LINE + " schema:" + NEW_LINE + " type: object" + NEW_LINE + " required:" + NEW_LINE + " - id" + NEW_LINE + " - name" + NEW_LINE + " properties:" + NEW_LINE + " id:" + NEW_LINE + " type: integer" + NEW_LINE + " format: int64" + NEW_LINE + " name:" + NEW_LINE + " type: string" + NEW_LINE + " text/plain:" + NEW_LINE + " schema:" + NEW_LINE + " type: string" + NEW_LINE) )); assertTrue(httpRequestsPropertiesMatcher.matches( request() .withPath("/somePath") .withHeader("content-type", "application/x-www-form-urlencoded") .withBody("id=1&name=abc") )); assertTrue(httpRequestsPropertiesMatcher.matches( request() .withPath("/somePath") .withHeader("content-type", "application/x-www-form-urlencoded; charset=utf-8") .withBody("id=1&name=abc") )); assertTrue(httpRequestsPropertiesMatcher.matches( request() .withPath("/somePath") )); assertTrue(httpRequestsPropertiesMatcher.matches( request() .withPath("/somePath") .withHeader("content-type", "application/x-www-form-urlencoded; charset=utf-8") )); assertFalse(httpRequestsPropertiesMatcher.matches( request() .withPath("/somePath") .withHeader("content-type", "application/x-www-form-urlencoded") .withBody("id=1&name=1") )); assertFalse(httpRequestsPropertiesMatcher.matches( request() .withPath("/somePath") .withHeader("content-type", "application/x-www-form-urlencoded") .withBody("id=abc&name=1") )); }
@Test public void assertWriteWithPayload() { when(payload.readInt1()).thenReturn(1, MySQLColumnType.MYSQL_TYPE_LONG.getValue(), 0); when(payload.readInt2()).thenReturn(MySQLServerInfo.CHARSET, 0); when(payload.readInt4()).thenReturn(10); when(payload.readIntLenenc()).thenReturn((long) 0x0c); when(payload.readStringLenenc()).thenReturn("def", "logic_db", "tbl", "tbl", "id", "id"); MySQLColumnDefinition41Packet actual = new MySQLColumnDefinition41Packet(payload); assertThat(actual.getSequenceId(), is(1)); actual.write(payload); verifyWrite(); }
@Test public void welcomeWithObject() throws Exception { mvc.perform(MockMvcRequestBuilders.get("/welcome-with-object").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()).andExpect(content().string(containsString("Hello World"))); }
@Test public void getMonitoringOfficer() throws Exception { LegacyMonitoringOfficerResource monitoringOfficer = newLegacyMonitoringOfficerResource().build(); when(monitoringOfficerServiceMock.getMonitoringOfficer(123L)).thenReturn(serviceSuccess(monitoringOfficer)); mockMvc.perform(get("/project/{projectId}/monitoring-officer", 123L)). andExpect(status().isOk()). andExpect(content().json(toJson(monitoringOfficer))); }
@Test public void multiValueColumns_withCsvColumns_invalidDelimiterColumnName_throwsException() throws IOException { File tmpfile = temporaryFolder.newFile("testMultiValueFields.csv"); createFile(tmpfile, UTF_8, "term, synonyms", "small, \"diminutive,little,slight\""); Properties config = new Properties(); config.put(CSVFileManager.FILEPATH, tmpfile.getAbsolutePath()); config.put(CSVFileManager.CSVCOLUMNS, "term, synonyms"); config.put(UrlBuilder.CONFIG_COLUMNS, "term"); config.put(CONTENT_TITLE, "term"); config.put(CSVFileManager.MULTIVALUE_COLUMNS, "synonyms"); config.put("csv.multiValue.synonyms", "*"); config.put("csv.multiValue.notAColumn", "*"); setupConfig.initConfig(config); thrown.expect(InvalidConfigurationException.class); thrown.expectMessage(containsString("csv.multiValue.*")); thrown.expectMessage(containsString("[notAColumn]")); CSVFileManager csvFileManager = CSVFileManager.fromConfiguration(); }
@Test public void testIsEqualWithTerminology() { assertNull("equality is ok if terminology says so",getFixture().review(mock(PropertyFileDescriptor.class), createProperty("test", "test"), createProperty("test", "test"))); }
@Test public void removeSchema() throws Exception { File dir = temporaryFolder.newFolder("layers"); File file1 = Files.createFile(Paths.get(dir.getAbsolutePath(), "points.fgb")).toFile(); File file2 = Files.createFile(Paths.get(dir.getAbsolutePath(), "lines.fgb")).toFile(); Map<String, Serializable> params = new HashMap<>(); params.put("flatgeobuf-file", dir); DataStore store = DataStoreFinder.getDataStore(params); assertTrue(file1.exists()); store.removeSchema("points"); assertFalse(file1.exists()); assertTrue(file2.exists()); store.removeSchema("lines.fgb"); assertFalse(file2.exists()); }
@Test(expected = NotfoundException.class) public void testFindFileEuCentral() throws Exception { final Path container = new Path("test-eu-central-1-cyberduck", EnumSet.of(Path.Type.directory, Path.Type.volume)); final Path test = new Path(container, UUID.randomUUID().toString(), EnumSet.of(Path.Type.file)); final S3AttributesFinderFeature f = new S3AttributesFinderFeature(session); f.find(test); }
@Test public void updateGameValidityUnrankedMod() throws Exception { Game game = hostGame(player1, 1); game.getSimMods().add(new ModVersion().setRanked(false).setMod(new Mod().setDisplayName("Mod"))); launchGame(game); instance.updateGameValidity(game); assertThat(game.getValidity(), is(Validity.BAD_MOD)); }
@Test public void testRemoveAllSubNodesExceptAttributes() throws Exception { Document doc = XMLUtil.parseXML(getClass().getResourceAsStream( "testRemoveAllSubNodesExceptAttributes.xml")); Element root = doc.getDocumentElement(); NodeList childNodes = root.getChildNodes(); assertEquals(5, childNodes.getLength()); assertEquals("a", root.getAttribute("a")); assertEquals("b", root.getAttribute("b")); XMLUtil.removeAllSubNodesExceptAttributes(root); childNodes = root.getChildNodes(); assertEquals(0, childNodes.getLength()); assertEquals("a", root.getAttribute("a")); assertEquals("b", root.getAttribute("b")); }
@Test(expected = UnsupportedOperationException.class) @SuppressWarnings("rawtypes") public void testCreateStoredProcedureQuery2() { em.createStoredProcedureQuery("", Widget.class); }
@Test public void metadataMarshaller_roundtrip() { Metadata.BinaryMarshaller<Type> metadataMarshaller = ProtoLiteUtils.metadataMarshaller(Type.getDefaultInstance()); assertEquals(proto, metadataMarshaller.parseBytes(metadataMarshaller.toBytes(proto))); }
@Test public void testDetectParameters() throws FileNotFoundException { final DateFormatsConfig formatsConfig = new DateFormatsConfig(); final DateFormat dateFormat = new DateFormat(Type.TIMESTAMP, "yyyy-MM-dd'T'HH:mm:ss'Z'", "\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}Z"); formatsConfig.addFormat(dateFormat); final PreferencesRegistry prefsRegistry = createMock(PreferencesRegistry.class); final Preferences prefs = createMock(Preferences.class); final Preferences oldPrefs = createNiceMock(Preferences.class); EasyMock.expect(prefsRegistry.getPreferences(MantleConstants.USER_DATE_FORMAT_CONFIG_FILE_TOPIC)).andReturn(prefs) .anyTimes(); EasyMock.expect(prefsRegistry.getPreferences("DateFormatConfiguration")).andReturn(oldPrefs).anyTimes(); EasyMock.expect(prefs.getJAXBObject(EasyMock.eq(DateFormatsConfig.class), EasyMock.eq(MantleConstants.USER_DATE_FORMAT_CONFIG_FILE_KEY), EasyMock.isA(DateFormatsConfig.class))) .andReturn(formatsConfig).anyTimes(); EasyMock.expect(prefs.getBoolean(EasyMock.isA(String.class), EasyMock.eq(false))).andReturn(true).anyTimes(); LocationTestUtils.loadLocationColumnLists(prefs); EasyMock.expect(prefsRegistry.getPreferences(CSVColumnPrefsUtil.class)).andReturn(prefs).anyTimes(); final ListLineSampler listLineSampler = new ListLineSampler(CsvTestUtils.createBasicDelimitedData(", "), CsvTestUtils.createBasicDelimitedData(", "), 10); final LineSamplerFactory factory = createNiceMock(LineSamplerFactory.class); factory.createSampler((char[])EasyMock.isNull()); EasyMock.expectLastCall().andReturn(listLineSampler); EasyMock.expect(prefs.getStringList("COLOR", null)).andReturn(New.list()).times(2); replayAll(); final DetectionControllerImpl controller = new DetectionControllerImpl(prefsRegistry, null); final DetectedParameters result = controller.detectParameters(new CSVParseParameters(), listLineSampler, factory, null); Assert.assertEquals(new DelimitedColumnFormatParameters(Character.valueOf(','), null, 5), result.getColumnFormatParameter().getBestValue()); Assert.assertNull(result.getCommentParameter().getBestValue()); Assert.assertEquals(new IntegerRange(0, 210), result.getDataLinesParameter().getBestValue()); Assert.assertEquals(Integer.valueOf(0), result.getHeaderLineParameter().getBestValue()); final DateColumnResults dateColumn = result.getDateColumnParameter().getBestValue(); Assert.assertNull(dateColumn.getDownTimeColumn()); final DateColumn upColumn = dateColumn.getUpTimeColumn(); Assert.assertEquals(DateFormat.Type.TIMESTAMP, upColumn.getDateColumnType()); Assert.assertEquals(0, upColumn.getPrimaryColumnIndex()); Assert.assertEquals(dateFormat.getSdf(), upColumn.getPrimaryColumnFormat()); }
@Test void changeCredentialByEnvironmentCrn() { String credentialName = "credentialName"; final Credential value = new Credential(); EnvironmentChangeCredentialDto environmentChangeDto = EnvironmentChangeCredentialDto.EnvironmentChangeCredentialDtoBuilder .anEnvironmentChangeCredentialDto() .withCredentialName(credentialName) .build(); when(environmentService .findByResourceCrnAndAccountIdAndArchivedIsFalse(eq(CRN), eq(ACCOUNT_ID))).thenReturn(Optional.of(new Environment())); when(credentialService.getByNameForAccountId(eq(credentialName), eq(ACCOUNT_ID))).thenReturn(value); environmentModificationServiceUnderTest.changeCredentialByEnvironmentCrn(ACCOUNT_ID, CRN, environmentChangeDto); ArgumentCaptor<Environment> environmentArgumentCaptor = ArgumentCaptor.forClass(Environment.class); verify(environmentService).save(environmentArgumentCaptor.capture()); assertEquals(value, environmentArgumentCaptor.getValue().getCredential()); }
@Test public void shouldAddReceivedTransactionsToTransactionPool() { messageHandler.processTransactionsMessage( peer1, TransactionsMessage.create(asList(transaction1, transaction2, transaction3)), now(), ofMinutes(1)); verify(transactionPool) .addRemoteTransactions(ImmutableSet.of(transaction1, transaction2, transaction3)); }
@Test public void changeAwayStatusToBackWithSomeoneElseShouldOnlyChangeStatus() throws CommandException { final UserListController userListController = TestUtils.setFieldValueWithMock(controller, "userListController", UserListController.class); controller.changeAwayStatus(654, false, ""); verifyZeroInteractions(networkMessages); verify(userListController).changeAwayStatus(654, false, ""); }
@Test public void testReplaceWord() { assertEquals("a b", StringHelper.removeWord("test", "a test b")); assertEquals("atest b", StringHelper.removeWord("test", "atest b")); assertEquals("atestb", StringHelper.removeWord("test", "atestb")); assertEquals("a testb", StringHelper.removeWord("test", "a testb")); assertEquals("", StringHelper.removeWord("test", "test")); assertEquals(".", StringHelper.removeWord("test", "test.")); assertEquals("!", StringHelper.removeWord("test", "test!")); assertEquals("?", StringHelper.removeWord("test", "test?")); assertEquals(",", StringHelper.removeWord("test", "test,")); assertEquals(";", StringHelper.removeWord("test", "test;")); assertEquals("()", StringHelper.removeWord("test", "(test)")); assertEquals("", StringHelper.removeWord("", "")); assertEquals("", StringHelper.removeWord("abc", "")); assertEquals("abc", StringHelper.removeWord("", "abc")); assertEquals("it and or ", StringHelper.removeWord("abc", "it abc and Abc or aBc")); assertEquals("a (test) b", StringHelper.replaceWord("test", "(test)", "a test b")); assertEquals("a b", StringHelper.replaceWord("test", "", "a test b")); assertEquals("a test b", StringHelper.replaceWord("", "", "a test b")); assertEquals("plug-in", StringHelper.replaceWord("in", "", "plug-in")); }
@Test public void invokingSCardCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.SCARD, () -> getConnection().sCard("key".getBytes())); verify(mockRedisConnection()).sCard("key".getBytes()); }
@Test public BinaryTree searchTree() { Integer[] intArr = new Integer[]{50, 76, 21, 4, 32, 100, 64, 52}; BinaryTree node = new BinaryTree(String.valueOf(50)); for (int i = 1; i < intArr.length; i++) { node.insertNode(node, intArr[i]); } return node; }
@Test public void awaitWithTimeoutAndTimeUnitReturnsFalseAfterTimeout() throws Exception { StoppableCountDownLatch latch = new StoppableCountDownLatch(stopper, 1, MILLISECONDS.toNanos(2), System::nanoTime); long theTimeoutMillis = 2; long startNanos = System.nanoTime(); Future<Boolean> latchFuture = executorServiceRule.submit(() -> latch.await(theTimeoutMillis, MILLISECONDS)); assertThat(latchFuture.get(TIMEOUT_MILLIS, MILLISECONDS)).isFalse(); assertThat(System.nanoTime() - startNanos).isGreaterThanOrEqualTo(theTimeoutMillis); }
@Test public void testMarkDependentEntitlementsDirtyDoesNotUpdateUnrelatedEntitlements() { Owner owner = this.createOwner("test_owner"); Consumer consumer = this.createConsumer(owner); List<Product> requiredProducts = this.createProducts(owner, 3, "test_req_prod"); List<Product> dependentProduct1 = this.createDependentProducts(owner, 1, "test_dep_prod_a", requiredProducts.subList(0, 1)); List<Product> dependentProduct2 = this.createDependentProducts(owner, 1, "test_dep_prod_b", requiredProducts.subList(1, 2)); List<Product> dependentProduct3 = this.createDependentProducts(owner, 1, "test_dep_prod_c", requiredProducts.subList(2, 3)); Pool requiredPool1 = this.createPoolWithProducts(owner, "reqPool1", requiredProducts.subList(0, 1)); Pool requiredPool2 = this.createPoolWithProducts(owner, "reqPool2", requiredProducts.subList(1, 2)); Pool requiredPool3 = this.createPoolWithProducts(owner, "reqPool3", requiredProducts.subList(2, 3)); Pool dependentPool1 = this.createPoolWithProducts(owner, "depPool1", dependentProduct1); Pool dependentPool2 = this.createPoolWithProducts(owner, "depPool2", dependentProduct2); Pool dependentPool3 = this.createPoolWithProducts(owner, "depPool3", dependentProduct3); Entitlement reqPool1Ent = this.bind(consumer, requiredPool1); Entitlement depPool1Ent = this.bind(consumer, dependentPool1); Entitlement depPool2Ent = this.bind(consumer, dependentPool2); Entitlement depPool3Ent = this.bind(consumer, dependentPool3); int count = this.entitlementCurator.markDependentEntitlementsDirty( Arrays.asList(reqPool1Ent.getId())); assertEquals(1, count); this.entitlementCurator.refresh(reqPool1Ent, depPool1Ent, depPool2Ent, depPool3Ent); assertFalse(reqPool1Ent.isDirty()); assertTrue(depPool1Ent.isDirty()); assertFalse(depPool2Ent.isDirty()); assertFalse(depPool3Ent.isDirty()); }
@Test public void noCertificatesAreAvailableForSigningOfKey() throws Exception { final KeyStore keyStore = context.mock(KeyStore.class); context.checking(new Expectations() {{ oneOf(keyStore).getKeys(); will(returnValue(Collections.emptyList())); }}); JjwtIdTokenFactory factory = new JjwtIdTokenFactory(keyStore); Optional<String> possibleIdToken = factory.create("::any host::", "::any client::", aNewIdentity().withId("123").build(), 10L, new DateTime()); assertThat(possibleIdToken.isPresent(), is(false)); }
@Test public void testMatchAgainstItself() { IAtomType element1 = mock(IAtomType.class); String result = AtomTypeDiff.diff(element1, element1); assertZeroLength(result); }
@Test void testPointToPointQueryWhenQueryBusThrowsException() throws Exception { Throwable expected = new Throwable("oops"); CompletableFuture<QueryResponseMessage<String>> queryResponseCompletableFuture = new CompletableFuture<>(); queryResponseCompletableFuture.completeExceptionally(expected); when(mockBus.query(anyMessage(String.class, String.class))).thenReturn(queryResponseCompletableFuture); CompletableFuture<String> result = testSubject.query("query", String.class); assertTrue(result.isDone()); assertTrue(result.isCompletedExceptionally()); assertEquals(expected.getMessage(), result.exceptionally(Throwable::getMessage).get()); }
@Test public void testUpdatedWithNonInstantiableFilter() { final String cannotInstantiateClassName = "org.opendaylight.aaa.filterchain.filters.CannotInstantiate"; final Map<String, String> cannotInstantiateDictionary = new HashMap<>(); cannotInstantiateDictionary.put(CustomFilterAdapterConfigurationImpl.CUSTOM_FILTER_LIST_KEY, cannotInstantiateClassName); config.update(cannotInstantiateDictionary); assertEquals(0, listener.updatedInjectedFilters.size()); }
@Test public void testRequestValidationFailsOnNull() { Set<ConstraintViolation<CreateObjectTypeRequest>> violations = getValidator().validate(new CreateObjectTypeRequest()); assertEquals(2, violations.size()); assertPropertyInvalid(violations, "name"); assertPropertyInvalid(violations, "validator"); }
@Test public final void testIsBroadcast() { int frameID = 0x10; XBee64BitAddress source64Addr = new XBee64BitAddress("0013A2004032D9AB"); XBee16BitAddress source16Addr = new XBee16BitAddress("D817"); ATCommandStatus status = ATCommandStatus.OK; String command = "DL"; byte[] parameter = new byte[]{0x6D, 0x79}; RemoteATCommandResponsePacket packet = new RemoteATCommandResponsePacket(frameID, source64Addr, source16Addr, command, status, parameter); assertThat("Packet should not be broadcast", packet.isBroadcast(), is(equalTo(false))); }
@Test public void warn() { AppCenter.setLogLevel(Log.WARN); assertEquals(AppCenter.getLogLevel(), AppCenterLog.getLogLevel()); callLogs(); verifyVerbose(never()); verifyDebug(never()); verifyInfo(never()); verifyWarn(times(1)); verifyError(times(1)); verifyAssert(times(1)); }
@Test(expected = HectorObjectMapperException.class) public void testValidateMissingDiscriminatorColumn() { CFMappingDef<MyTestBean> cfMapDef = new CFMappingDef<MyTestBean>(MyTestBean.class); cfMapDef.setInheritanceType(InheritanceType.SINGLE_TABLE); InheritanceParserValidator val = new InheritanceParserValidator(); val.validateAndSetDefaults(null, cfMapDef); fail("should have reported missing discriminator column annotation"); }
@Test public void batchesExact() { for (int i = 0; i < 9; ++i) { registry.counter("" + i).increment(); } Assertions.assertEquals(3, getBatches().size()); for (List<Measurement> batch : getBatches()) { Assertions.assertEquals(3, batch.size()); } }
@Ignore("Remove to run test") @Test public void testVerseNine() { String expectedVerseNine = "On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, " + "eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, " + "four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n"; assertEquals(expectedVerseNine, twelveDays.verse(9)); }
@Test public void shouldReturnWantedUrlWithPartialParamArgs() { String a = "test"; when(router.urlFor(TestController.class, anotherMethod, new Object[]{a, null})).thenReturn("/expectedUrl"); String uri = handler.get(TestController.class).get("anotherMethod").get(a).toString(); assertThat(uri, is("/path/expectedUrl")); }
@Test public void failTwice() { Instruction instruction = Instruction.failTwice(); assertThat(instruction).isInstanceOf(FailTwiceInstruction.class); assertThat(instruction.toString()).isEqualTo("FailTwice"); assertThat(instruction).as("singleton").isSameAs(Instruction.failTwice()); MachineStack stack = mock(MachineStack.class); when(stack.index()).thenReturn(13); when(machine.peek()).thenReturn(stack); instruction.execute(machine); InOrder inOrder = Mockito.inOrder(machine); inOrder.verify(machine).peek(); inOrder.verify(machine).setIndex(13); inOrder.verify(machine).pop(); inOrder.verify(machine).backtrack(); verifyNoMoreInteractions(machine); }
@Test public void getNameTest() { Objective o = new Objective("obj", Sign.MAX); Assert.assertEquals("obj", o.getName()); }
@Test public void shouldConvertToStringWhenFormatSpecifiedAndDefaultZone() { Instant toConvert = Instant.EPOCH; String format = "yyyy MM dd HH:mm"; Map<String, String> attributes = singletonMap("format", format); String converted = instantConverter.toString(Instant.class, toConvert, attributes); assertThat(converted).isEqualTo("1969 12 31 18:00"); }
@Test public void testDisableMoveDetection() { initWithSize(5); move(0, 4); List<Item> applied = applyUpdates(mBefore, DiffUtil.calculateDiff(mCallback, false)); assertThat(applied.size(), is(5)); assertThat(applied.get(4).newItem, is(true)); assertThat(applied.contains(mBefore.get(0)), is(false)); }
@Test public void getEscapedValue_shouldEscapeValueCorrectly() throws Exception { Assert.assertEquals("\\(foo\\)", FacetItem.getEscapedValue("(foo)")); }
@Test public void testSubscribeLevel1() { testQuoteEngine.websocketClient = mockClient; Ticker ticker = new GenericTicker("ABC"); testQuoteEngine.subscribeLevel1(ticker, (ILevel1Quote quote) -> { }); assertEquals(ticker, testQuoteEngine.tickerMap.get("ABC")); verify(mockClient, times(1)).subscribeQuotes(ticker, testQuoteEngine); }
@Test public void queryWorldBounds() throws IOException, SQLException { MBTilesFeatureSource fs = getMadagascarSource("water"); BBOX bbox = FF.bbox(DEFAULT_GEOM, MBTilesFile.WORLD_ENVELOPE); List<RectangleLong> bounds = fs.getTileBoundsFor(new Query("water", bbox), 7); assertThat(bounds, contains(new RectangleLong(0, 127, 0, 127))); }
@Test public void testUser() throws InvalidImageReferenceException, IOException, CacheDirectoryCreationException, MainClassInferenceException, InvalidAppRootException, InvalidWorkingDirectoryException, InvalidContainerVolumeException, IncompatibleBaseImageJavaVersionException, NumberFormatException, InvalidContainerizingModeException, InvalidFilesModificationTimeException, InvalidCreationTimeException { Mockito.when(rawConfiguration.getUser()).thenReturn(Optional.of("customUser")); BuildContext buildContext = getBuildContext(processCommonConfiguration()); Assert.assertNotNull(buildContext.getContainerConfiguration()); Assert.assertEquals("customUser", buildContext.getContainerConfiguration().getUser()); }
@Test public void testTranslateToFieldWest() { BattleField battleField = newBattleField(800, 600); Double p = battleField.translateToField(newLocation(-99, 300)); assertEquals(18, p.x, 0.0001); assertEquals(300, p.y, 0.0001); }
@Test void testPairForEach() { List<String> strings = Arrays.asList("paul", "george", "john", "ringo"); List<Integer> integers = Arrays.asList(1942, 1943, 1940); final AtomicInteger size = new AtomicInteger(); Pair.forEach(strings, integers, (s, i) -> size.incrementAndGet()); assertThat(size.get(), is(3)); size.set(0); Pair.forEach(integers, strings, (i, s) -> size.incrementAndGet()); assertThat(size.get(), is(3)); size.set(0); Pair.forEach(strings, strings, (s1, s2) -> size.incrementAndGet()); assertThat(size.get(), is(4)); size.set(0); Pair.forEach(strings, ImmutableList.of(), (s, i) -> size.incrementAndGet()); assertThat(size.get(), is(0)); size.set(0); Pair.forEach(strings, ImmutableList.of(), (s, i) -> size.incrementAndGet()); assertThat(size.get(), is(0)); size.set(0); Pair.forEach(ImmutableList.<String>of(), integers, (s, i) -> size.incrementAndGet()); assertThat(size.get(), is(0)); size.set(0); Pair.forEach(ImmutableList.<String>of(), ImmutableList.<Integer>of(), (s, i) -> size.incrementAndGet()); assertThat(size.get(), is(0)); final StringBuilder b = new StringBuilder(); Pair.forEach(strings, integers, (s, i) -> b.append(s).append(":").append(i).append(";")); assertThat(b.toString(), is("paul:1942;george:1943;john:1940;")); }
@Test public void givenFalse_whenSetActionTextAllCaps_thenActionNotAllCaps() { TextViewExtension.from(getActionView()).setAllCaps(true); wrapper.setActionTextAllCaps(false); assertThat(getActionView().getTransformationMethod()).isNull(); }
@Test void shouldThrowWhenConditionHasNoValue() { assertThatThrownBy(() -> matcher.init(FakeMatcherConfig.builder() .matcherName("HasMimeType") .condition("abc=") .build())) .isInstanceOf(MailetException.class); }
@Ignore("Remove to run test") @Test public void testStopRnaSequence2() { List<String> expected = Arrays.asList(); assertEquals(expected, proteinTranslator.translate("UAG")); }
@Test public void shouldNotResolveTokenRequest_unknownScope() { final String scope = "read"; TokenRequest tokenRequest = new TokenRequest(); tokenRequest.setScopes(Collections.singleton(scope)); Client client = new Client(); TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test(); testObserver.assertNotComplete(); testObserver.assertError(InvalidScopeException.class); }
@Test public void testJustDisabled() { Config node = testConfig.get("just-disabled"); assertThat(node, is(notNullValue())); assertThat(node.exists(), is(true)); CrossOriginConfig b = node.as(CrossOriginConfig::create).get(); assertThat(b.isEnabled(), is(false)); }
@Test @Order(order=3) public void writeMetadataISOXlinkTest() throws Exception { Node absExpResult = getNodeFromString(StaticMetadata.META_20, MetadataType.ISO_19115); writer.storeMetadata(absExpResult); Node result = reader.getMetadata("666-999-666", MetadataType.ISO_19115); assertTrue(result != null); Node expResult = getNodeFromString(StaticMetadata.META_20, MetadataType.ISO_19115); compare(expResult,result); absExpResult = getNodeFromString(StaticMetadata.META_21, MetadataType.ISO_19115); writer.storeMetadata(absExpResult); result = reader.getMetadata("999-666-999", MetadataType.ISO_19115); assertTrue(result != null); expResult = getNodeFromString(StaticMetadata.META_21, MetadataType.ISO_19115); compare(expResult, result); }
@Test public void loadFormShouldUpdateOutdatedForm() { TestObserver observer = new TestObserver<Boolean>(); when(mockDatabaseDataSource.formNeedsUpdate(any(ApiFormHeader.class))) .thenReturn(Observable.just(true)); when(mockXmlParser.parse(mockInputStream)).thenReturn(mockForm); mockWebServer.enqueue(new MockResponse().setResponseCode(200) .setBody(",1,cde,abc,cde,6.0,cde,true,33")); mockWebServer.enqueue(new MockResponse().setResponseCode(200) .setBody("{}")); formDataRepository.loadForm("1", "deviceId").subscribe(observer); observer.awaitTerminalEvent(2, TimeUnit.SECONDS); observer.assertNoErrors(); observer.assertValueCount(1); verify(s3RestApi, times(1)).downloadArchive("123456.zip"); verify(mockFileDataSource, times(1)) .extractRemoteArchive(any(ResponseBody.class), anyString()); }
@Test public void testParseOneEntryPerLine() throws IOException { String testDictionary = "1a 1b 1c 1d \n 2a 2b 2c \n 3a \n 4a 4b "; Dictionary dictionay = Dictionary.parseOneEntryPerLine(new StringReader(testDictionary)); Assert.assertTrue(dictionay.size() == 4); Assert.assertTrue(dictionay.contains(new StringList("1a", "1b", "1c", "1d"))); Assert.assertTrue(dictionay.contains(new StringList("2a", "2b", "2c"))); Assert.assertTrue(dictionay.contains(new StringList(new String[]{"3a"}))); Assert.assertTrue(dictionay.contains(new StringList("4a", "4b"))); }
@Test(expectedExceptions = SessionException.class) public void shouldDThrowExceptionWhenGivenLocalSession() throws SessionException { SessionID mockSessionID = mock(SessionID.class); given(mockSession.getID()).willReturn(mockSessionID); given(mockSessionService.checkSessionLocal(mockSessionID)).willReturn(true); ctsOperations.logout(mockSession); }
@Test public void validate_tokenClientIdMatchesTrustedBrokerClientId() { Mockito.when(token.getAudiences()).thenReturn(Collections.emptySet()); Mockito.when(token.getClaimAsString(TokenClaims.XSUAA.CLIENT_ID)) .thenReturn("sb-clone-app-id!b123|" + XSUAA_BROKER_XSAPPNAME); ValidationResult result = new JwtAudienceValidator(XSUAA_BROKER_XSAPPNAME) .validate(token); assertThat(result.isValid()).isTrue(); }
@Test public void completedOrMarkedAsCompleteTest() throws Exception{ QuestionResource questionResource = newQuestionResource() .with(questionResource1 -> { questionResource1.setId(1L); questionResource1.setMarkAsCompletedEnabled(Boolean.TRUE); }) .build(); SectionResource sectionResource = newSectionResource().withId(54L).build(); assertTrue(viewModel.completedOrMarkedAsComplete(questionResource, sectionResource)); questionResource = newQuestionResource() .with(questionResource1 -> { questionResource1.setId(23L); questionResource1.setMarkAsCompletedEnabled(Boolean.TRUE); }) .build(); assertFalse(viewModel.completedOrMarkedAsComplete(questionResource, sectionResource)); questionResource = newQuestionResource() .with(questionResource1 -> { questionResource1.setId(3L); questionResource1.setMarkAsCompletedEnabled(Boolean.FALSE); }) .build(); assertFalse(viewModel.completedOrMarkedAsComplete(questionResource, sectionResource)); sectionResource = newSectionResource().withId(1L).build(); assertTrue(viewModel.completedOrMarkedAsComplete(questionResource, sectionResource)); }
@Test public void testEstimatedSizeBytes() throws Exception { PipelineOptions pipelineOptions = PipelineOptionsFactory.create(); CassandraIO.Read<Scientist> read = CassandraIO.<Scientist>read() .withHosts(Collections.singletonList(CASSANDRA_HOST)) .withPort(cassandraPort) .withKeyspace(CASSANDRA_KEYSPACE) .withTable(CASSANDRA_TABLE); CassandraIO.CassandraSource<Scientist> source = new CassandraIO.CassandraSource<>(read, null); long estimatedSizeBytes = source.getEstimatedSizeBytes(pipelineOptions); assertTrue((estimatedSizeBytes >= 12960L * 0.9f) && (estimatedSizeBytes <= 12960L * 1.1f)); }
@Test public void testGetKeyManager_shouldWorkAesEax() throws Exception { assertThat( Registry.getKeyManager(AeadConfig.AES_EAX_TYPE_URL, Aead.class).getClass().toString()) .contains("KeyManagerImpl"); }
@Test public void setParameters() throws Exception { methodInfo.setParameters(new Object[] {"a", "b"}); assertTrue(methodInfo.parametersWereSet()); }
@Test public void testBindApplication_invalidBoundTemplate() throws Exception { TestApplication app2 = new TestApplication(); app2.setDirectory( this.folder.newFolder()); app2.getTemplate().setName( "tpl-other" ); app2.setName( "app-other" ); this.managerWrapper.addManagedApplication( new ManagedApplication( app2 )); Response resp = this.resource.bindApplication( this.ma.getName(), this.ma.getApplication().getTemplate().getName(), app2.getName()); Assert.assertEquals( Status.FORBIDDEN.getStatusCode(), resp.getStatus()); Assert.assertEquals( 0, this.msgClient.allSentMessages.size()); }
@Test public void testGetTextUnitDTO() { ITextUnit textUnit = new TextUnit(); TextUnitDTO textUnitDTO = new TextUnitDTO(); textUnit.setAnnotation(new TextUnitDTOAnnotation(textUnitDTO)); TextUnitDTOAnnotations instance = new TextUnitDTOAnnotations(); TextUnitDTO expResult = textUnitDTO; TextUnitDTO result = instance.getTextUnitDTO(textUnit); assertEquals(expResult, result); }
@Test(expected = UnsupportedOperationException.class) public void rejectReturn() { RejectingArrayBitSetPool.INSTANCE.returnSet(LongArrayBitSet.one(1)); }
@Test public void testMonth() { assertNull(getLib().month((LocalDate) null)); assertEquals(makeNumber("12"), getLib().month(makeDate("2015-12-02"))); assertEquals(makeNumber("12"), getLib().month(makeDateAndTime("2015-12-24T12:15:00.000+01:00"))); }
@Test public void fetch_cacheHasNotExpired_doesNotFetchFromBackend() throws Exception { loadCacheAndClockWithConfig(mockFetchedCache, firstFetchedContainer); mockClock.advance(DEFAULT_CACHE_EXPIRATION_IN_MILLISECONDS - 1); assertWithMessage("Fetch() failed even though cache has not expired!") .that(fetchHandler.fetch().isSuccessful()) .isTrue(); verifyBackendIsNeverCalled(); }
@Test(expected = AzureExecutionException.class) public void publishArtifactsViaWarDeployThrowException() throws AzureExecutionException { final DeployTarget target = mock(DeployTarget.class); final String stagingDirectoryPath = ""; final List<File> warArtifacts = null; buildHandler(); handlerSpy.publishArtifactsViaWarDeploy(target, stagingDirectoryPath, warArtifacts); }
@Test public void testSetDlt() throws Exception { ph.setDlt(ph.getDlt()); }
@Test public void testFirstValue() throws Exception { Over func = new Over(); DataBag inbag = BagFactory.getInstance().newDefaultBag(); for (int i = 0; i < 10; i++) { Tuple t = TupleFactory.getInstance().newTuple(1); t.set(0, (double)i); inbag.add(t); } Tuple t = TupleFactory.getInstance().newTuple(2); t.set(0, inbag); t.set(1, "first_value"); DataBag outbag = func.exec(t); assertEquals(10, outbag.size()); for (Tuple to : outbag) { assertEquals(1, to.size()); assertEquals(new Double(0.0), to.get(0)); } }
@Test public void shouldNotReportInvalidWeightValue() throws Exception { when(allChildren.findByCaseId("CASE X")).thenReturn(new Child("CASE X", "MOTHER-CASE-1", "boo", "---", "female") .withAnm("ANM X") .withDateOfBirth("2012-01-01") .withThayiCard("TC 1")); when(allMothers.findByCaseId("MOTHER-CASE-1")).thenReturn(new Mother("MOTHER-CASE-1", "EC-CASE-1", "TC 1")); when(allEligibleCouples.findByCaseId("EC-CASE-1")).thenReturn(new EligibleCouple().withLocation("bherya", "Sub Center", "PHC X")); when(reportMonth.areDatesBelongToSameReportingMonth(LocalDate.parse("2012-01-01"), LocalDate.parse("2012-01-02"))).thenReturn(true); SafeMap reportData = new SafeMap(); reportData.put("childId", "CASE X"); reportData.put("didBreastfeedingStart", ""); reportData.put("deliveryPlace", "phc"); reportData.put("deliveryDate", "2012-01-01"); reportData.put("deliveryOutcome", "live_birth"); reportData.put("submissionDate", "2012-01-02"); service.registerChild(reportData); verifyNoReportingCalls(LBW, "2012-01-01"); }
@Test public void testCreateComplexJobTriggerProxy1() throws Exception { assertNotNull( factory.createComplexJobTriggerProxy( mock( ComplexJobTriggerProxy.class ) ) ); }
@Test(expected=IllegalArgumentException.class) public void constructionShouldRejectMoreThanMaxintWindows() { TimeWindow.of(1000, 4000000000000L, "foo"); }
@Test @Config(sdk = 22) public void shouldDisableLoggingTLS12Enforced_postLollipopTLS12NoEffect() { List list = generateInterceptorsMockList(mockClient); OkHttpClient client = factory.modifyClient(mockClient, false, true, 0, 0, 0); verifyLoggingDisabled(client, list); verifyTLS12NotEnforced(client); }
@Test public void shouldThrowException_onExceptionForReceiveMessages() { doThrow(AmazonClientException.class).when(amazonSqsClient).receiveMessage(any(ReceiveMessageRequest.class)); AmazonClientException thrownException = null; try { sqsQueueResource.receiveMessages(); } catch (final AmazonClientException e) { thrownException = e; } assertNotNull(thrownException); }
@Test public void testZero() throws Exception { order.addElement(asc); order.addElement(asc); cmp.setIterator(Arrays.asList(ZERO, POS).iterator()); OrderComparator sud = new OrderComparator(strategy, order, cmp); assertTrue(sud.compare(null, null) > 0); }
@Test public void testFindClassesByParentClass() throws Exception { List<Class<?>> classes = ClassUtils.findClassesByParentClass(Object.class, "coo.base"); log.debug("找到 " + classes.size() + " 个目标类："); for (Class<?> clazz : classes) { log.debug(clazz.getName()); } }
@Test public void testPreInvocation() { long startNanoseconds = System.nanoTime(); InvocationContext context = handler.preInvocation(instance, method, args); assertThat(context).isNotNull(); assertThat(context.getMethod()).isEqualTo(method); assertThat(context.getArgs()).isEqualTo(args); assertThat(context.getStartTimeNanos()).isGreaterThan(startNanoseconds); assertThat(context.getStartTimeNanos()).isLessThan(System.nanoTime()); assertThat(MDC.get(Tracers.TRACE_ID_KEY)).isNotNull(); }
@Test public void serializeSizeCategoryPoints_resultJsonHasSize() throws IOException { CategoryPoints categoryPoints = new CategoryPoints(); categoryPoints.setSize(11); categoryPointsSerializer.serialize(categoryPoints, jgen, new DefaultSerializerProvider.Impl()); jgen.flush(); JsonNode actualObj = mapper.readTree(sw.toString()); Assertions.assertThat(actualObj.has("size")).isTrue(); Assertions.assertThat(actualObj.get("size").asInt()).isEqualTo(11); }
@Test public void testGetNativeValue() { assertEquals("value1", Pql.getNativeValue(textValue1)); assertEquals(false, Pql.getNativeValue(booleanValue1)); assertEquals(1L, Pql.getNativeValue(numberValue1)); assertEquals(1.02, Pql.getNativeValue(numberValue2)); assertEquals(-1L, Pql.getNativeValue(numberValue3)); assertEquals(null, Pql.getNativeValue(numberValue4)); assertEquals(null, Pql.getNativeValue(numberValue5)); assertEquals( DateTimes.toDateTime(dateTimeValue1.getValue()), Pql.getNativeValue(dateTimeValue1)); assertEquals("2012-12-02", Pql.getNativeValue(dateValue1)); }
@Test public void testCombineSUM() { IntArrCombiner combiner = new IntArrCombiner(Operation.SUM); int length = 128; IntArray a1 = new IntArray(createArr(length, (int) 1), 0, length); IntArray a2 = new IntArray(createArr(length, (int) 2), 0, length); combiner.combine(a1, a2); for (int i = 0; i < length; i++) { Assert.assertEquals((int)1 + (int)2, a1.get()[i], 0.00001); } }
@Test public void testNodeHeartbeatForAppCollectorsMap() throws Exception { Configuration conf = new Configuration(); conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true); conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f); conf.set(YarnConfiguration.NM_AUX_SERVICES, "timeline_collector"); conf.set(YarnConfiguration.NM_AUX_SERVICES + "." + "timeline_collector" + ".class", PerNodeTimelineCollectorsAuxService.class.getName()); conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class); rm = new MockRM(conf); rm.start(); MockNM nm1 = rm.registerNode("host1:1234", 5120); MockNM nm2 = rm.registerNode("host2:1234", 2048); NodeHeartbeatResponse nodeHeartbeat1 = nm1.nodeHeartbeat(true); NodeHeartbeatResponse nodeHeartbeat2 = nm2.nodeHeartbeat(true); RMNodeImpl node1 = (RMNodeImpl) rm.getRMContext().getRMNodes().get(nm1.getNodeId()); RMNodeImpl node2 = (RMNodeImpl) rm.getRMContext().getRMNodes().get(nm2.getNodeId()); RMAppImpl app1 = (RMAppImpl) rm.submitApp(1024); String collectorAddr1 = "1.2.3.4:5"; app1.setCollectorData(AppCollectorData.newInstance( app1.getApplicationId(), collectorAddr1)); String collectorAddr2 = "5.4.3.2:1"; RMAppImpl app2 = (RMAppImpl) rm.submitApp(1024); app2.setCollectorData(AppCollectorData.newInstance( app2.getApplicationId(), collectorAddr2)); String collectorAddr3 = "5.4.3.2:2"; app2.setCollectorData(AppCollectorData.newInstance( app2.getApplicationId(), collectorAddr3, 0, 1)); String collectorAddr4 = "5.4.3.2:3"; app2.setCollectorData(AppCollectorData.newInstance( app2.getApplicationId(), collectorAddr4, 1, 0)); ContainerId runningContainerId1 = BuilderUtils.newContainerId( BuilderUtils.newApplicationAttemptId( app1.getApplicationId(), 0), 0); ContainerStatus status1 = ContainerStatus.newInstance(runningContainerId1, ContainerState.RUNNING, "", 0); List<ContainerStatus> statusList = new ArrayList<ContainerStatus>(); statusList.add(status1); NodeHealthStatus nodeHealth = NodeHealthStatus.newInstance(true, "", System.currentTimeMillis()); NodeStatus nodeStatus = NodeStatus.newInstance(nm1.getNodeId(), 0, statusList, null, nodeHealth, null, null, null); node1.handle(new RMNodeStatusEvent(nm1.getNodeId(), nodeStatus)); Assert.assertEquals(1, node1.getRunningApps().size()); Assert.assertEquals(app1.getApplicationId(), node1.getRunningApps().get(0)); ContainerId runningContainerId2 = BuilderUtils.newContainerId( BuilderUtils.newApplicationAttemptId( app2.getApplicationId(), 0), 0); ContainerStatus status2 = ContainerStatus.newInstance(runningContainerId2, ContainerState.RUNNING, "", 0); statusList = new ArrayList<ContainerStatus>(); statusList.add(status2); nodeStatus = NodeStatus.newInstance(nm1.getNodeId(), 0, statusList, null, nodeHealth, null, null, null); node2.handle(new RMNodeStatusEvent(nm2.getNodeId(), nodeStatus)); Assert.assertEquals(1, node2.getRunningApps().size()); Assert.assertEquals(app2.getApplicationId(), node2.getRunningApps().get(0)); nodeHeartbeat1 = nm1.nodeHeartbeat(true); Map<ApplicationId, AppCollectorData> map1 = nodeHeartbeat1.getAppCollectors(); Assert.assertEquals(1, map1.size()); Assert.assertEquals(collectorAddr1, map1.get(app1.getApplicationId()).getCollectorAddr()); nodeHeartbeat2 = nm2.nodeHeartbeat(true); Map<ApplicationId, AppCollectorData> map2 = nodeHeartbeat2.getAppCollectors(); Assert.assertEquals(1, map2.size()); Assert.assertEquals(collectorAddr4, map2.get(app2.getApplicationId()).getCollectorAddr()); }
@Test public void shouldDelegateHBTestFormSubmissionHandlingToHBTestHandler() throws Exception { FormSubmission formSubmission = create().withFormName("hb_test").withInstanceId("instance id 1").withVersion("122").build(); when(formDataRepository.fetchFromSubmission("instance id 1")).thenReturn(formSubmission); router.route("instance id 1"); verify(formDataRepository).fetchFromSubmission("instance id 1"); verify(hbTestHandler).handle(formSubmission); }
@Test public void doGet_successfulyInvoked() throws Exception { servletUnderTest.doGet(mockRequest, mockResponse); assertWithMessage("DeleteServlet response") .that(responseWriter.toString()) .contains("Deleted documents."); }
@Test public void testGetName() { assertEquals(NAME, query.getName()); }
@Test public void testJsonGenerationWithNonUuidValueGroups() throws IOException { final DecisionTreeRuleSet originalRuleSet = CommisionRuleSetSupplier.getCommisionRuleSet().build(); assertNotNull(originalRuleSet); assertNotNull(originalRuleSet.getRules()); assertNotNull(originalRuleSet.getValueGroups()); final ByteArrayOutputStream stream = new ByteArrayOutputStream(); new JsonJacksonSerialiser().serialiseRuleSet(stream, originalRuleSet); final String jsonString = stream.toString("UTF-8"); assertNotNull(jsonString); LOGGER.debug("JsonString is \n{}", jsonString); final JsonJacksonParser parser = new JsonJacksonParser(); final DecisionTreeRuleSet serialisedRuleSet = parser.parseRuleSet( new ByteArrayInputStream(jsonString.getBytes(StandardCharsets.UTF_8))); assertNotNull(serialisedRuleSet); assertNotNull(serialisedRuleSet.getRules()); assertThat(serialisedRuleSet.getValueGroups().size(), equalTo(originalRuleSet.getValueGroups().size())); assertThat(serialisedRuleSet.getValueGroups().stream().findFirst().get(), equalTo(originalRuleSet.getValueGroups().stream().findFirst().get())); assertThat(serialisedRuleSet.getDriversByType(InputValueType.STRING), IsCollectionContaining.hasItems(originalRuleSet.getDriversByType(InputValueType.STRING) .toArray(new InputDriver[originalRuleSet.getDriversByType(InputValueType.STRING) .size()]))); assertThat(serialisedRuleSet.getDriversByType(InputValueType.REGEX), IsCollectionContaining.hasItems(originalRuleSet.getDriversByType(InputValueType.REGEX) .toArray(new InputDriver[originalRuleSet.getDriversByType(InputValueType.REGEX) .size()]))); for (final DecisionTreeRule rule : originalRuleSet.getRules().values()) { if (Arrays.stream(rule.getDrivers()).noneMatch(inputDriver -> InputValueType.VALUE_GROUP == inputDriver.getType())) { assertThat(rule, DecisionTreeRuleMatcher.isSame( serialisedRuleSet.getRules().get(rule.getRuleIdentifier()))); } else { final DecisionTreeRule other = serialisedRuleSet.getRules().get(rule.getRuleIdentifier()); final InputDriver[] drivers = rule.getDrivers(); final InputDriver[] otherDrivers = other.getDrivers(); for (int i = 0; i < drivers.length; ++i) { final InputDriver driver = drivers[i]; if (InputValueType.VALUE_GROUP == driver.getType()) { final ValueGroup group = serialisedRuleSet.getValueGroups().stream().findFirst().get(); assertNotNull(group); assertThat(driver.getValue(), equalTo(group.getId().toString())); } else { assertThat(driver, equalTo(otherDrivers[i])); } } } } }
@Test public void testAcceptValidType1() { DefaultValueStandardizer standardizer = new DefaultValueStandardizer("default"); assertTrue(standardizer.accepts("string-value")); }
@Test public void testFindByPlaceIdModelDaoThrowsException() { expectPlaceFound(); expectListModelsAndThrow(); replay(); Optional<SubsystemExecutor> executor = registry.loadByPlace(placeId); assertFalse(executor.isPresent()); verify(); }
@Test(expected = SelectorParseException.class) public void testEmptyStrings() throws SelectorParseException { this.selectionConverter.convert(":(,,)"); }
@Test public void test_getById() throws Exception { final AlertResource expected = AlertResourceBuilder.newAlertResource() .withId(9999L) .build(); when(alertServiceMock.findById(9999L)).thenReturn(serviceSuccess(expected)); mockMvc.perform(get("/alert/{id}", 9999L)) .andExpect(status().isOk()) .andExpect(content().string(objectMapper.writeValueAsString(expected))) .andDo(document("alert/find-by-id", pathParameters( parameterWithName("id").description("Id of the alert to find") ), PayloadDocumentation.responseFields(AlertDocs.alertResourceFields)) ); }
@Test @SuppressWarnings("UnassignedFluxMonoInstance") void createServiceInstance() { doReturn(Mono.just("si1")) .when(deployerClient).createServiceInstance(backingServices.get(0)); doReturn(Mono.just("si2")) .when(deployerClient).createServiceInstance(backingServices.get(1)); List<String> expectedValues = new ArrayList<>(); expectedValues.add("si1"); expectedValues.add("si2"); StepVerifier.create(backingServicesProvisionService.createServiceInstance(backingServices)) .expectNextMatches(expectedValues::remove) .expectNextMatches(expectedValues::remove) .verifyComplete(); }
@Test( expected = RepositoryException.class ) @FixFor( "MODE-1972" ) public void shouldNotClonePartialWorkspaceIntoWorkspaceRoot() throws Exception { otherWorkspace.clone(workspaceName, "/a/b", "/", false); }
@Test public void js_value_13() { read("\"abc\\bd\"", new JsonString("abc\bd")) ; }
@Test public void getCount() throws Exception { MonitorFactory.start("I_EXIST").stop(); assertThat(JmxUtils.getCount("I_EXIST", "ms.")).isEqualTo(1); assertThat(JmxUtils.getCount(beanPropertyList)).isEqualTo(1); }
@Test public void compare() { DebugChemObject co1 = new DebugChemObject(); DebugChemObject co2 = new DebugChemObject(); co1.setID(new String("a1")); co2.setID(new String("a1")); Assert.assertTrue(co1.compare(co2)); }
@Test public void createsNoSingleNodeForMultipleLayers() throws Exception { addNodesToLayer(layer, 1); ILayer nextLayer = mock(ILayer.class); addNodesToLayer(nextLayer, 1); assertThat(factory.create(layer, nextLayer).isSingleNode(), is(false)); }
@Test public void test_presentValue_afterExpiry() { CurrencyAmount computedRec = PRICER.presentValue(SWAPTION_REC_LONG, RATES_PROVIDER_AFTER_MATURITY, HW_PROVIDER_AFTER_MATURITY); CurrencyAmount computedPay = PRICER.presentValue(SWAPTION_PAY_SHORT, RATES_PROVIDER_AFTER_MATURITY, HW_PROVIDER_AFTER_MATURITY); assertThat(computedRec.getAmount()).isCloseTo(0d, offset(NOTIONAL * TOL)); assertThat(computedPay.getAmount()).isCloseTo(0d, offset(NOTIONAL * TOL)); }
@Test public void testNotEnabled() { this.customizer.customize(); assertThat( this.customizer.logging.subresources().customHandler("logstash-handler" ) ).isNull(); assertThat( this.customizer.logging.subresources().customFormatter( "logstash" )).isNull(); }
@Test public void testExecute() throws Exception { JMeterContext context = JMeterContextService.getContext(); context.setVariables(new JMeterVariables()); Collection<CompoundVariable> parameters = new ArrayList<>(); parameters.add(new CompoundVariable("test string")); parameters.add(new CompoundVariable("b64enc_res")); Base64Encode instance = new Base64Encode(); instance.setParameters(parameters); String res = instance.execute(null, null); Assert.assertEquals("dGVzdCBzdHJpbmc=", res); Assert.assertNotNull(context.getVariables().get("b64enc_res")); }
@Test public void testSorting() { searchResultsModel = context.request().adaptTo(SearchResultsImpl.class); SearchResultsSet resultSet = searchResultsModel.getSearchResultsSet(); Assert.assertNotNull(resultSet); Assert.assertTrue(resultSet.hasSorting()); Sorter sorter = resultSet.getSorter(); Assert.assertNotNull(sorter); SorterKey currentKey = sorter.getCurrentKey(); Assert.assertNotNull(currentKey); Assert.assertEquals("relevance", currentKey.getName()); Assert.assertEquals("Relevance", currentKey.getLabel()); Assert.assertEquals(Sorter.Order.DESC, currentKey.getOrder()); Assert.assertTrue(currentKey.isSelected()); Map<String, String> currentOrderParameters = currentKey.getCurrentOrderParameters(); Assert.assertNotNull(currentOrderParameters); Assert.assertEquals(resultSet.getAppliedQueryParameters().size() + 2, currentOrderParameters.size()); resultSet.getAppliedQueryParameters().forEach((key, value) -> Assert.assertEquals(value, currentOrderParameters.get(key))); Assert.assertEquals("relevance", currentOrderParameters.get(Sorter.PARAMETER_SORT_KEY)); Assert.assertEquals("desc", currentOrderParameters.get(Sorter.PARAMETER_SORT_ORDER)); Map<String, String> oppositeOrderParameters = currentKey.getOppositeOrderParameters(); Assert.assertNotNull(oppositeOrderParameters); Assert.assertEquals(resultSet.getAppliedQueryParameters().size() + 2, oppositeOrderParameters.size()); resultSet.getAppliedQueryParameters().forEach((key, value) -> Assert.assertEquals(value, oppositeOrderParameters.get(key))); Assert.assertEquals("relevance", oppositeOrderParameters.get(Sorter.PARAMETER_SORT_KEY)); Assert.assertEquals("asc", oppositeOrderParameters.get(Sorter.PARAMETER_SORT_ORDER)); List<SorterKey> keys = sorter.getKeys(); Assert.assertNotNull(keys); Assert.assertEquals(3, keys.size()); SorterKey defaultKey = keys.get(0); Assert.assertEquals(currentKey.getName(), defaultKey.getName()); SorterKey otherKey = keys.get(1); Assert.assertEquals("price", otherKey.getName()); Assert.assertEquals("Price", otherKey.getLabel()); Assert.assertEquals(Sorter.Order.ASC, otherKey.getOrder()); otherKey = keys.get(2); Assert.assertEquals("name", otherKey.getName()); Assert.assertEquals("Product Name", otherKey.getLabel()); Assert.assertEquals(Sorter.Order.ASC, otherKey.getOrder()); }
@Test public void nullName() { replicaCatalog.setName(null); Set<ConstraintViolation<ReplicaCatalog>> violations = validator.validate(replicaCatalog); assertThat(violations.size(), is(1)); }
@Test public void decryptDESTest() throws IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException { String encodedValue = Encryption.decryptDES(desKey, globalEncryptedDesValue); assertThat(encodedValue, equalTo(GLOBAL_VALUE)); }
@Test public void testIsLandsat4Filename() throws Exception { assertTrue(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT40140341983030XXX13_MTL.txt")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT40140341982315PAC00_MTL.txt")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT41160361989137XXX02_MTL.txt")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT41730601990155XXX01.tar.bz")); assertTrue(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT41930241992221XXX02.tar.gz")); assertFalse(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT40140341982315PAC00_B1.TIF")); assertFalse(LandsatGeotiffReaderPlugin.isLandsat4Filename("LT51920342011274MPS00.tgz")); }
@Test(expected = ExprEvalException.class) public void testExtractObjectArguments_3args_pos1_fail() { Node predicate = NodeFactory.createURI(SpatialExtension.NORTH_PROP); float lat = 0; float lon = 1; int limit = 10; Literal geometry = ConvertLatLon.toLiteral(lat, lon); List<Node> objectNodes = Arrays.asList(NodeValue.makeFloat(lat).asNode(), NodeValue.makeString("1").asNode(), NodeValue.makeInteger(limit).asNode()); PropFuncArg object = new PropFuncArg(objectNodes); GeometryWrapper geometryWrapper = GeometryWrapper.extract(geometry); NorthPF instance = new NorthPF(); SearchEnvelope searchEnvelope = instance.buildSearchEnvelope(geometryWrapper, SpatialIndexTestData.WGS_84_SRS_INFO); SpatialArguments expResult = new SpatialArguments(limit, geometryWrapper, searchEnvelope); SpatialArguments result = instance.extractObjectArguments(predicate, object, SpatialIndexTestData.WGS_84_SRS_INFO); assertEquals(expResult, result); }
@Test public void truncateShouldNotTruncateStringWithLengthEqualToMaximumLength() { String str = "This is the string with some text"; assertThat(StringUtil.truncate(str, str.length()), is(str)); assertThat(StringUtil.truncate(str, str.length(), null), is(str)); assertThat(StringUtil.truncate(str, str.length(), "really long suffix"), is(str)); }
@Test public void getVersion() { assertNotNull(Version.getVersion()); }
@Test public void testBye() throws Exception { ChannelHandlerContext context = mock(ChannelHandlerContext.class); TelnetProcessHandler handler = new TelnetProcessHandler(); ChannelFuture future = mock(ChannelFuture.class); when(context.writeAndFlush("BYE!\n")).thenReturn(future); handler.channelRead0(context, "quit"); verify(future).addListener(ChannelFutureListener.CLOSE); }
@Test public void testSameWeights() throws Exception { final DNSUtil.WeightedHostAddress hostA = new DNSUtil.WeightedHostAddress("hostA", 5222, false, 1, 10); final DNSUtil.WeightedHostAddress hostB = new DNSUtil.WeightedHostAddress("hostB", 5222, false, 1, 10); final DNSUtil.WeightedHostAddress[] hosts = new DNSUtil.WeightedHostAddress[] { hostA, hostB }; boolean hostAWasFirst = false; boolean hostBWasFirst = false; final int maxTries = Integer.MAX_VALUE; for (int i=0; i<maxTries; i++) { final List<DNSUtil.WeightedHostAddress> result = DNSUtil.prioritize(hosts); if (hostA.equals(result.get(0))) { hostAWasFirst = true; } if (hostB.equals(result.get(0))) { hostBWasFirst = true; } if (hostAWasFirst && hostBWasFirst) { break; } if (i%1000000==0 && i>0) { System.err.println("The last " + i + " iterations of this test all had the same result, which is very unlikely to occur (there should be an even distribution between two possible outcomes). We'll iterate up to "+ maxTries +" times, but you might want to abort the unit test at this point..."); } } Assert.assertTrue( hostAWasFirst ); Assert.assertTrue( hostBWasFirst ); }
@Test public void throwsExceptionWhenOptionISNull() { assertTrue(TrackingInfoUtils.getConfigUpdateInfo(null, "value").containsKey("error")); assertTrue(TrackingInfoUtils.getConfigUpdateInfo("option", null).containsKey("error")); assertFalse(TrackingInfoUtils.getConfigUpdateInfo(null, "value").containsKey("option")); PowerMockito.verifyStatic(LoggingService.class, Mockito.atLeastOnce()); LoggingService.logInfo(MODULE_NAME, "Start getting config update information"); PowerMockito.verifyStatic(LoggingService.class, Mockito.atLeastOnce()); LoggingService.logError(eq(MODULE_NAME), eq("can't update config info : option or value must not be null"), any()); PowerMockito.verifyStatic(LoggingService.class, Mockito.atLeastOnce()); LoggingService.logInfo(MODULE_NAME, "Finished getting config update information"); }
@Test public void testIndexPutOptionNotSupportedCreateAndVersion() { KVStoreOptionUtility.checkIndexPutOptionIsNotUsed(new KVStore.PutOption[]{createOption, versionOption}); }
@Test public void testLayoutVertical() { Layout layout = new TableLayout(1, GAP_X, GAP_Y); Rectangle2D bounds = new Rectangle2D.Double(5.0, 5.0, 50.0, 50.0); container.setBounds(bounds); layout.layout(container); assertEquals(bounds.getMinX(), a.getX(), DELTA); assertEquals(bounds.getMinX(), b.getX(), DELTA); assertEquals(bounds.getMinX(), c.getX(), DELTA); double meanCompHeight = (bounds.getHeight() - 2.0*GAP_Y)/3.0; assertEquals(bounds.getMinY() + 0.0*meanCompHeight + 0.0*GAP_Y, a.getY(), DELTA); assertEquals(bounds.getMinY() + 1.0*meanCompHeight + 1.0*GAP_Y, b.getY(), DELTA); assertEquals(bounds.getMinY() + 2.0*meanCompHeight + 2.0*GAP_Y, c.getY(), DELTA); }
@Test public void preventSettingRecursiveLogger() throws Exception { try { TiLog.setLogger(TiLog.TI_LOG); fail("did not throw"); } catch (Exception e) { assertThat(e).hasMessageContaining("Recursion"); } }
@Test public void testExtractX509CertOUField() throws Exception { try (InputStream inStream = new FileInputStream("src/test/resources/valid_cn_x509.cert")) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); X509Certificate cert = (X509Certificate) cf.generateCertificate(inStream); String ou = Crypto.extractX509CertSubjectOUField(cert); assertNull(ou); } try (InputStream inStream = new FileInputStream("src/test/resources/valid_email_x509.cert")) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); X509Certificate cert = (X509Certificate) cf.generateCertificate(inStream); String ou = Crypto.extractX509CertSubjectOUField(cert); assertEquals("Testing Domain", ou); } }
@Test public void testBoundsAndLineBreaks() { final ITextWrapper wrapper = TextWrapperProvider.get(TextWrapperStrategy.BOUNDS_AND_LINE_BREAKS, text); assertTrue(wrapper instanceof TextBoundsAndLineBreaksWrap); }
@Test public void testDateRangeConditionFull() { String actual = dateRange("field").from("2015/01/02").to("2015/01/05").operation("is_within").boost(2).build(); String expected = "{\"type\":\"date_range\"," + "\"field\":\"field\"," + "\"boost\":2.0," + "\"from\":\"2015/01/02\"," + "\"to\":\"2015/01/05\"," + "\"operation\":\"is_within\"}"; assertEquals("date range condition serialization is wrong", expected, actual); }
@Test public void testValidatePeerAuthenticator() throws Exception { config.getApiClassConfig().getMethods() .get(methodToEndpointMethod(TestEndpoint.class.getMethod("getResultNoParams"))) .setPeerAuthenticators( ImmutableList.<Class<? extends PeerAuthenticator>>of(PassPeerAuthenticator.class)); validator.validate(config); }
@Test public void testRemoveMapping() { Map<String, Object> data = createMap("key", "value"); RestElasticClient.removeMapping(null, "key", data, null); assertTrue(data.isEmpty()); data = createMap("key", "value", "parent", ImmutableMap.of("key", "value")); RestElasticClient.removeMapping(null, "key", data, null); assertEquals(data, ImmutableMap.of("parent", ImmutableMap.of("key", "value"))); data = ImmutableMap.of("key", "value", "parent", createMap("key", 10)); RestElasticClient.removeMapping("parent", "key", data, null); assertEquals(data, ImmutableMap.of("key", "value", "parent", new HashMap<>())); data = new HashMap<>(); RestElasticClient.removeMapping(null, "key", data, null); assertTrue(data.isEmpty()); data = ImmutableMap.of("parent", new HashMap<>()); RestElasticClient.removeMapping("parent", "key", data, null); assertEquals(data, ImmutableMap.of("parent", new HashMap<>())); data = createMap( "key", ImmutableList.of( ImmutableMap.of("key", "value"), ImmutableMap.of( "key", "value", "parent", createMap("key", "value", "key2", "value2")))); RestElasticClient.removeMapping("parent", "key", data, null); assertEquals( data, createMap( "key", ImmutableList.of( ImmutableMap.of("key", "value"), ImmutableMap.of( "key", "value", "parent", createMap("key2", "value2"))))); }
@Test(timeout = 60_000) public void testMarkAsUnusedAllSegmentsInDataSource() throws IOException, InterruptedException { sqlSegmentsMetadataManager.startPollingDatabasePeriodically(); sqlSegmentsMetadataManager.poll(); Assert.assertTrue(sqlSegmentsMetadataManager.isPollingDatabasePeriodically()); final String newDataSource = "wikipedia2"; final DataSegment newSegment = createNewSegment1(newDataSource); publisher.publishSegment(newSegment); awaitDataSourceAppeared(newDataSource); int numChangedSegments = sqlSegmentsMetadataManager.markAsUnusedAllSegmentsInDataSource(newDataSource); Assert.assertEquals(1, numChangedSegments); awaitDataSourceDisappeared(newDataSource); Assert.assertNull(sqlSegmentsMetadataManager.getImmutableDataSourceWithUsedSegments(newDataSource)); }
@Test void throwsExceptionWhenHeightMapIsNotProvided() { assertThatExceptionOfType(IllegalArgumentException.class) .isThrownBy(() -> FeatureLayers.from(without( () -> sc2ApiFeatureLayers().toBuilder(), Spatial.FeatureLayers.Builder::clearHeightMap).build())) .withMessage("height map is required"); }
@Test(expected = BadRequestException.class) public void testCreateAccount_invitationKeyMismatch() { createAccountAndDbUserWithAffiliation(); config.access.requireInvitationKey = true; when(mockCloudStorageService.readInvitationKey()).thenReturn("BLAH"); profileController.createAccount(createAccountRequest); }
@Test public void testXmlToClickEvent() throws IOException { String xml = IOUtils.toString(this.getClass().getClassLoader().getResourceAsStream("message/event/click.xml")); XmlMessageHeader xmlRequest = QyXmlMessages.fromXml(xml); Assert.assertNotNull(xmlRequest); Assert.assertTrue(xmlRequest instanceof QyClickEvent); Assert.assertEquals("EVENTKEY", ((QyClickEvent) xmlRequest).getEventKey()); }
@Test public void invalidKeySize() { char[] chars = new char[257]; Arrays.fill(chars, 'a'); String longKey = new String(chars); thrown.expect(IllegalArgumentException.class); EMPTY.toBuilder().set(longKey, FIRST_VALUE).build(); }
@Test public void testSetRouterDeadIntervalTime() throws Exception { ospfInterface.setRouterDeadIntervalTime(10); assertThat(ospfInterface.routerDeadIntervalTime(), is(10)); }
@Test public void testGetWarTask_normalJavaProject() { Project project = ProjectBuilder.builder().build(); project.getPlugins().apply(JavaPlugin.class); TaskProvider<Task> warProviderTask = TaskCommon.getWarTaskProvider(project); Assert.assertNull(warProviderTask); }
@Test public void maxHandlesDifferentUnits() { Duration sixtyOneMinutes = Duration.ofMinutes(61); Duration oneHour = Duration.ofHours(1); assertThat(Temporals.max(sixtyOneMinutes, oneHour)).isEqualTo(sixtyOneMinutes); }
@Test public void testParseExample() throws IOException { String json = "{\"degraded_router\": {\n" + " \"conditions\" : [\n" + " {\n" + " \"lt\": 70,\n" + " \"type\": \"cpu\"," + " \"query\": {\n" + " \"match_phrase\": {\n" + " \"text\": \"input query\"\n" + " }\n" + " }\n" + " }\n" + " ],\n" + " \"fallback\": {\n" + " \"match_none\": {}\n" + " }\n" + "}}"; QueryBuilder builder = QueryBuilderTestUtils.FULLY_FEATURED.parseQuery(json); assertThat(builder, instanceOf(DegradedRouterQueryBuilder.class)); DegradedRouterQueryBuilder qb = (DegradedRouterQueryBuilder) builder; assertNotNull(qb.systemLoad()); assertEquals(1, qb.conditionStream().count()); DegradedRouterQueryBuilder.DegradedCondition cond = qb.conditionStream().findFirst().get(); assertEquals(DegradedConditionType.cpu, cond.type()); assertThat(cond.query(), instanceOf(MatchPhraseQueryBuilder.class)); assertEquals(ConditionDefinition.lt, cond.definition()); assertEquals(70, cond.value()); assertThat(qb.fallback(), instanceOf(MatchNoneQueryBuilder.class)); DegradedRouterQueryBuilder expected = new DegradedRouterQueryBuilder(); expected.condition(ConditionDefinition.lt, DegradedConditionType.cpu, null, null, 70, new MatchPhraseQueryBuilder("text", "input query")); expected.fallback(new MatchNoneQueryBuilder()); assertEquals(expected, qb); }
@Test public void testCompareTo() { Generator<Integer> a = Generator.named("a").of(1); Generator<Integer> b = Generator.named("b").of(2); Generator<Integer> c = Generator.named("c").of(3); List<Generator> actuals = new ArrayList<>(); actuals.add(b); actuals.add(a); actuals.add(c); Collections.sort(actuals); assertSame(a, actuals.get(0)); assertSame(b, actuals.get(1)); assertSame(c, actuals.get(2)); }
@Test public void testSetContext() { System.out.println("setContext"); HttpSession session = mock(HttpSession.class); instance.setContext(session); instance.setContext(session); assertThat(ThreadLocalContextHolder.get(Constants.HTTPSESSION)).isEqualTo(session); assertThat(ThreadLocalContextHolder.get(Constants.HTTPREQUEST)).isEqualTo(request); }
@Test(expected = Error.class) public void bigIntegerTestNegativeValue() { BigInteger value = new BigInteger("-10547363686064609352314090266141472461989948074031"); ByteUtils.toByteArray(value); }
@Test public void testConverter() throws Exception { final PropertyManagement propMgmt = new PropertyManagement(); final PropertyManagementConverter conv = new PropertyManagementConverter(propMgmt); final DBScanOptions opts = new DBScanOptions(); opts.setGlobalBatchId("some-value"); conv.readProperties(opts); Assert.assertEquals("some-value", propMgmt.getProperty(GlobalParameters.Global.BATCH_ID)); }
@Test(expected = RuntimeException.class) public void otherRuntimeExceptionsThrow() { htmlRenderer.runtimeException = new RuntimeException("Help!"); renderer.render(makeContext("html")); }
@Test @PrepareForTest(AutonomiccsSystemVmDeploymentService.class) public void createTheAutonomiccsSystemVmTest() throws Exception { VMTemplateVO systemVmTemplate = Mockito.mock(VMTemplateVO.class); Account systemAcct = Mockito.mock(Account.class); UserVO user = Mockito.mock(UserVO.class); Mockito.doReturn(0l).when(autonomiccsSystemVmServiceOffering).getId(); Mockito.doReturn(0l).when(systemVmTemplate).getId(); Mockito.doReturn(HypervisorType.Any).when(systemVmTemplate).getHypervisorType(); Mockito.doReturn(0l).when(systemVmTemplate).getGuestOSId(); Mockito.doReturn(0l).when(systemAcct).getDomainId(); Mockito.doReturn(0l).when(systemAcct).getId(); Mockito.doReturn(user).when(accountManager).getSystemUser(); Mockito.doReturn(0l).when(user).getId(); Mockito.doReturn(true).when(autonomiccsSystemVmServiceOffering).getOfferHA(); AutonomiccsSystemVm autonomiccsSystemVm = Mockito.mock(AutonomiccsSystemVm.class); PowerMockito.whenNew(AutonomiccsSystemVm.class).withAnyArguments().thenReturn(autonomiccsSystemVm); Mockito.doReturn(true).when(systemVmTemplate).isDynamicallyScalable(); Mockito.doNothing().when(autonomiccsSystemVm).setDynamicallyScalable(Mockito.anyBoolean()); Mockito.doReturn(autonomiccsSystemVm).when(autonomiccsSystemVmDao).persist(Mockito.any(AutonomiccsSystemVm.class)); AutonomiccsSystemVm result = spy.createTheAutonomiccsSystemVm(systemVmTemplate, systemAcct, 0l, "name"); Mockito.verify(autonomiccsSystemVmServiceOffering).getId(); Mockito.verify(systemVmTemplate).getId(); Mockito.verify(systemVmTemplate).getHypervisorType(); Mockito.verify(systemVmTemplate).getGuestOSId(); Mockito.verify(systemAcct).getDomainId(); Mockito.verify(systemAcct).getId(); Mockito.verify(accountManager).getSystemUser(); Mockito.verify(user).getId(); Mockito.verify(autonomiccsSystemVmServiceOffering).getOfferHA(); Mockito.verify(systemVmTemplate).isDynamicallyScalable(); Mockito.verify(autonomiccsSystemVm).setDynamicallyScalable(Mockito.anyBoolean()); Mockito.verify(autonomiccsSystemVmDao).persist(Mockito.any(AutonomiccsSystemVm.class)); Assert.assertEquals(autonomiccsSystemVm, result); }
@Test public void testIterator_HasNext() throws Exception { MessageSplitterImp splitter = new LineCountSplitter(1); try (CloseableIterable<AdaptrisMessage> iterable = CloseableIterable .ensureCloseable(splitter.splitMessage(msg))) { Iterator<AdaptrisMessage> first = iterable.iterator(); assertTrue(first.hasNext()); assertTrue(first.hasNext()); } }
@Test public void typicalTwoReplicationsBothOverride() { transformation.tableReplicationStart(createEventTableReplication(OVERRIDE_KEY, OVERRIDE_VALUE),EVENT_ID); transformation.transform(table); assertThat(table.getParameters().size(), is(1)); assertThat(table.getParameters().get(OVERRIDE_KEY), is(OVERRIDE_VALUE)); transformation.tableReplicationStart(createEventTableReplication(SECOND_OVERRIDE_KEY, SECOND_OVERRIDE_VALUE), EVENT_ID); Table transformedTable = transformation.transform(new Table()); Map<String, String> tableParameters = transformedTable.getParameters(); assertThat(tableParameters.size(), is(1)); assertThat(tableParameters.get(SECOND_OVERRIDE_KEY), is(SECOND_OVERRIDE_VALUE)); }
@Test() public void shouldNotBuildSetupWhenHaveNoSettings() throws IOException { final String toolName = "tool"; final List<CommandLineArgument> args = Arrays.asList(new CommandLineArgument("arg1", CommandLineArgument.Type.PARAMETER), new CommandLineArgument("arg2", CommandLineArgument.Type.PARAMETER)); final List<CommandLineResource> resources = Arrays.asList(myCommandLineResource1, myCommandLineResource2); final CommandLineSetup baseSetup = new CommandLineSetup(toolName, args, resources); myCtx.checking(new Expectations() {{ oneOf(myUserCredentialsService).tryGetUserCredentials(); will(returnValue(null)); }}); final CommandLineSetupBuilder instance = createInstance(); final CommandLineSetup setup = instance.build(new CommandLineSetup(toolName, args, resources)).iterator().next(); myCtx.assertIsSatisfied(); then(setup).isEqualTo(baseSetup); }
@Test public void testInvalidAccessTeacher1() { setupCurrentUser(teacher1); Set<String> program = new HashSet<String>(Arrays.asList(program2.getEntityId())); Assert.assertFalse(validator.validate(EntityNames.PROGRAM, program).equals(program)); program = new HashSet<String>(Arrays.asList(program3.getEntityId())); Assert.assertFalse(validator.validate(EntityNames.PROGRAM, program).equals(program)); program = new HashSet<String>(Arrays.asList(program4.getEntityId())); Assert.assertFalse(validator.validate(EntityNames.PROGRAM, program).equals(program)); }
@Test public void testGetSingleStepFormFieldsShouldGetStep1Fields() throws JSONException { JSONArray actualFieldsJsonArr = JsonFormUtils.getSingleStepFormfields(new JSONObject(multiStepForm)); assertNotNull(actualFieldsJsonArr); String expectedFieldsJsonArr = new JSONArray(STEP_1_FIELDS).toString(); assertEquals(actualFieldsJsonArr.toString(), expectedFieldsJsonArr); }
@Test public void builderBuildsLayoutWithProvidedItemSourceFactoryIfConfigured() { JacksonJsonLayout.Builder builder = spy(createDefaultTestBuilder()); builder.withItemSourceFactory(new LayoutTestItemSourceFactory()); JacksonJsonLayout layout = builder.build(); LogEvent logEvent = new Log4jLogEvent(); ItemSource itemSource = layout.toSerializable(logEvent); assertEquals(LayoutTestItemSource.class, itemSource.getClass()); }
@Test public void select_multi_hit_with_overlap() throws Exception { List<Emit> list = new ArrayList<Emit>(); list.add(new Emit(0, 4, null)); list.add(new Emit(0, 4, null)); list.add(new Emit(0, 5, null)); list.add(new Emit(2, 3, null)); list.add(new Emit(2, 10, null)); list.add(new Emit(5, 7, null)); list.add(new Emit(7, 8, null)); list.add(new Emit(8, 9, null)); List<Emit> result = mSelector.select(list); assertThat(result.size(), is(2)); assertThat(result.get(0).getStart(), is(0)); assertThat(result.get(0).getEnd(), is(5)); assertThat(result.get(1).getStart(), is(7)); assertThat(result.get(1).getEnd(), is(8)); }
@Test public void testNestedUserQueueDefaultRule() throws Exception { configuredQueues.get(FSQueueType.PARENT).add("root.parentq"); StringBuffer sb = new StringBuffer(); sb.append("<queuePlacementPolicy>"); sb.append(" <rule name='specified' create='false' />"); sb.append(" <rule name='nestedUserQueue'>"); sb.append(" <rule name='default' queue='root.parentq'/>"); sb.append(" </rule>"); sb.append(" <rule name='default' />"); sb.append("</queuePlacementPolicy>"); QueuePlacementPolicy policy = parse(sb.toString()); assertEquals("root.parentq.user1", policy.assignAppToQueue("root.default", "user1")); }
@Test public void newHashTable() { System.out.println(MapUtils.newHashTable( Pair.create(0, "0"), Pair.create(1, "1"), Pair.create(2, "2"), Pair.create(3, "3") )); }
@Test(expected = DirectException.class) public void testSendWithNoURL() throws MessagingException { MimeMessage message = new MimeMessage(null, IOUtils.toInputStream(DirectUnitTestUtil .getFileAsString("Example_A.txt"))); RegistryResponseType resp = objectUnderTest.provideAndRegisterDocumentSetB(message); }
@Test public void testStepDown() { view.setHandle(2, 2); view.valueChanged(4.f); view.setHandle(1, 2); view.valueChanged(2.f); replay(view); scrollbar.bindToView(view, 4.f, 8.f, viewSize, 2.f, 4.f); scrollbar.stepDown(); }
@Test public void testToStringAddress() { try { String stringAddress = NetUtil.toStringAddress(InetSocketAddress.createUnresolved("127.0.0.1", 9828)); } catch (Exception e) { assertThat(e).isInstanceOf(NullPointerException.class); } }
@Test public void testColumnWiseUnion() { TupleDomain<ColumnHandle> tupleDomain1 = TupleDomain.withColumnDomains( ImmutableMap.<ColumnHandle, Domain>builder() .put(A, Domain.all(VARCHAR)) .put(B, Domain.notNull(DOUBLE)) .put(C, Domain.onlyNull(BIGINT)) .put(D, Domain.singleValue(BIGINT, 1L)) .put(E, Domain.create(ValueSet.ofRanges(Range.greaterThanOrEqual(DOUBLE, 0.0)), true)) .build()); TupleDomain<ColumnHandle> tupleDomain2 = TupleDomain.withColumnDomains( ImmutableMap.<ColumnHandle, Domain>builder() .put(A, Domain.singleValue(VARCHAR, utf8Slice("value"))) .put(B, Domain.singleValue(DOUBLE, 0.0)) .put(C, Domain.notNull(BIGINT)) .put(D, Domain.singleValue(BIGINT, 1L)) .put(E, Domain.create(ValueSet.ofRanges(Range.lessThan(DOUBLE, 10.0)), false)) .build()); TupleDomain<ColumnHandle> expectedTupleDomain = TupleDomain.withColumnDomains( ImmutableMap.<ColumnHandle, Domain>builder() .put(A, Domain.all(VARCHAR)) .put(B, Domain.notNull(DOUBLE)) .put(C, Domain.all(BIGINT)) .put(D, Domain.singleValue(BIGINT, 1L)) .put(E, Domain.all(DOUBLE)) .build()); assertEquals(columnWiseUnion(tupleDomain1, tupleDomain2), expectedTupleDomain); }
@Test public void testExtractClassName() { assertEquals("", CommonUtils.extractClassName("")); assertEquals("", CommonUtils.extractClassName("a.b.c.")); assertEquals("hello", CommonUtils.extractClassName("hello")); assertEquals("hello", CommonUtils.extractClassName("a.b.c.hello")); assertEquals("hello", CommonUtils.extractClassName(".hello")); }
@Test public void testGetIsotopes_IMolecularFormula() { IMolecularFormula molFor = MolecularFormulaManipulator.getMajorIsotopeMolecularFormula("C41H79N8O3P1", builder); IsotopePatternGenerator isotopeGe = new IsotopePatternGenerator(.1); IsotopePattern isos = isotopeGe.getIsotopes(molFor); Assert.assertEquals(2, isos.getNumberOfIsotopes(), 0.001); }
@Test public void testNearest() { System.out.println("nearest"); double[][] data = Matrix.randn(1000, 10).toArray(); KDTree<double[]> kdtree = new KDTree<>(data, data); LinearSearch<double[]> naive = new LinearSearch<>(data, new EuclideanDistance()); for (int i = 0; i < data.length; i++) { Neighbor<double[], double[]> n1 = naive.nearest(data[i]); Neighbor<double[], double[]> n2 = kdtree.nearest(data[i]); assertEquals(n1.index, n2.index); assertEquals(n1.value, n2.value); assertEquals(n1.distance, n2.distance, 1E-7); } }
@Test public void testShouldIncludeFeatured() { final Category nonRootCategory = CategoryFactory.bluesCategory(); final DiscoveryParams nonRootParams = DiscoveryParams.builder().category(nonRootCategory).build(); assertEquals(false, nonRootParams.shouldIncludeFeatured()); final Category rootCategory = CategoryFactory.gamesCategory(); final DiscoveryParams rootParams = DiscoveryParams.builder().category(rootCategory).build(); assertEquals(true, rootParams.shouldIncludeFeatured()); }
@Test public void extractCourtReporters_Null() { sJudgment.setRecorder(null); List<String> courtReporters = sourceCcJudgmentExtractor.extractCourtReporters(sJudgment, correctionList); assertNotNull(courtReporters); assertEquals(0, courtReporters.size()); }
@Test public void assertGetValueForInteger() { int actualExecutorMaxSize = shardingProperties.getValue(ShardingPropertiesConstant.EXECUTOR_SIZE); assertThat(actualExecutorMaxSize, is(10)); }
@Test public void doPipeHttpRequestAntiVirusTest() throws Exception { MockMultipartHttpServletRequest request = createMultipartHttpRequest(pipe, true); pipe.addParameter(createHttpRequestParameter(request, session)); pipe.configure(); pipe.start(); PipeRunResult pipeRunResult = doPipe(pipe, "", session); assertEquals("success", pipeRunResult.getPipeForward().getName()); String expectedResult = "<parts>" + "<part type=\"string\" name=\"string1\" sessionKey=\"part_string\" size=\"19\"/>" + "<part type=\"file\" name=\"doc001.pdf\" sessionKey=\"part_file\" size=\"26358\" mimeType=\"application/octet-stream; charset=ISO-8859-1\"/>" + "<part type=\"string\" name=\"antivirus_rc\" sessionKey=\"part_string2\" size=\"4\"/>" + "<part type=\"file\" name=\"doc002.pdf\" sessionKey=\"part_file2\" size=\"25879\" mimeType=\"application/octet-stream; charset=ISO-8859-1\"/>" + "<part type=\"string\" name=\"antivirus_rc\" sessionKey=\"part_string3\" size=\"4\"/>" + "</parts>"; assertEquals(expectedResult, pipeRunResult.getResult().asString()); }
@Test @SuppressWarnings("all") public void getMerchantCenterLinkTest() { String resourceName2 = "resourceName2625949903"; MerchantCenterLink expectedResponse = MerchantCenterLink.newBuilder().setResourceName(resourceName2).build(); mockMerchantCenterLinkService.addResponse(expectedResponse); String formattedResourceName = MerchantCenterLinkServiceClient.formatMerchantCenterLinkName( "[CUSTOMER]", "[MERCHANT_CENTER_LINK]"); MerchantCenterLink actualResponse = client.getMerchantCenterLink(formattedResourceName); Assert.assertEquals(expectedResponse, actualResponse); List<AbstractMessage> actualRequests = mockMerchantCenterLinkService.getRequests(); Assert.assertEquals(1, actualRequests.size()); GetMerchantCenterLinkRequest actualRequest = (GetMerchantCenterLinkRequest) actualRequests.get(0); Assert.assertEquals(formattedResourceName, actualRequest.getResourceName()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
@Test public void givenTouchActionDown_whenOnTouchEvent_thenPasswordVisibilityNotToggled() { passwordView.setPasswordVisible(false); float xPosition = passwordView.getLeft() + 10; float yPosition = passwordView.getTop() + 10; fireActionDownTouchEvent(passwordView, xPosition, yPosition); assertThat(passwordView) .hasHiddenPassword(); }
@Test public void testIsPriorityDisabled() { final Endpoint endpoint1 = new Endpoint("192.168.1.1", 8081); final PeerId peer1 = new PeerId(endpoint1, 0); assertEquals("192.168.1.1:8081", peer1.toString()); assertTrue(peer1.isPriorityDisabled()); }
@Test public void testNotAddLayer() throws Exception { TileLayer tl = mock(WMSLayer.class); when(tl.getName()).thenReturn("testLayer"); when(tl.isTransientLayer()).thenReturn(true); assertFalse(config.canSave(tl)); }
@Test public void execute() throws Exception { WikiCreationRequest request = new WikiCreationRequest(); request.setWikiId("wikiId"); request.setDescription("description"); request.setPrettyName("pretty name"); request.setOwnerId("ownerId"); request.setTemplate(false); request.setUserScope(UserScope.GLOBAL_ONLY); request.setMembershipType(MembershipType.INVITE); request.setWikiSource(WikiSource.EXTENSION); ExtensionId extensionId = new ExtensionId("id", "version"); request.setExtensionId(extensionId); WikiDescriptor descriptor = new WikiDescriptor("wikiId", "alias"); when(wikiDescriptorManager.getById("wikiId")).thenReturn(descriptor); mocker.getComponentUnderTest().execute(request); assertEquals("description", descriptor.getDescription()); assertEquals("pretty name", descriptor.getPrettyName()); verify(wikiDescriptorManager).saveDescriptor(descriptor); verify(wikiTemplateManager).setTemplate("wikiId", false); verify(wikiUserManager).setUserScope("wikiId", UserScope.GLOBAL_ONLY); verify(wikiUserManager).setMembershipType("wikiId", MembershipType.INVITE); }
@Test public void testGetNodeLoad() throws MonitorException { List<ResourceNode> nodelist = rmc.getNodes(); String node = rmc.getNodeLoad(nodelist.get(0).getNodeId()); assertNotNull(node); assertThat(node, equalTo("0/8")); }
@Test public void removeArchetypeTest() { doReturn(true).when(archetypePreferencesManager).containsArchetype(ARCHETYPE_ALIAS); archetypePreferencesManager.removeArchetype(ARCHETYPE_ALIAS); verify(archetypePreferences).load(); verify(archetypePreferences).save(any(PreferenceScope.class)); verify(workbenchPreferenceScopeResolutionStrategies, times(3)).getSpaceInfoFor(anyString()); verify(archetypePreferences, times(3)).load(any(PreferenceScopeResolutionStrategyInfo.class)); verify(archetypePreferences, times(3)).save(any(PreferenceScopeResolutionStrategyInfo.class)); }
@Test public void testSearchToken() throws Exception { final BinarySearchTokenMapper tokenMapper = new BinarySearchTokenMapper(new Murmur1HashPartitioner()); tokenMapper.initSearchMechanism(getTestTokens()); Long failures = 0L; failures += runTest(309687905L - 1000000L, 309687905L, "h1", tokenMapper); Assert.assertTrue("Failures: " + failures, failures == 0); failures += runTest(309687905L + 1L, 309687905L + 1000000L, "h2", tokenMapper); Assert.assertTrue("Failures: " + failures, failures == 0); failures += runTest(1383429731L + 1L, 1383429731L + 1000000L, "h3", tokenMapper); Assert.assertTrue("Failures: " + failures, failures == 0); failures += runTest(2457171554L + 1L, 2457171554L + 1000000L, "h4", tokenMapper); Assert.assertTrue("Failures: " + failures, failures == 0); failures += runTest(3530913377L + 1L, 3530913377L + 1000000L, "h1", tokenMapper); Assert.assertTrue("Failures: " + failures, failures == 0); }
@Test public void byteToJson() { JsonNode converted = parse(converter.fromConnectData(TOPIC, Schema.INT8_SCHEMA, (byte) 12)); validateEnvelope(converted); assertEquals(parse("{ \"type\": \"int8\", \"optional\": false }"), converted.get(JsonSchema.ENVELOPE_SCHEMA_FIELD_NAME)); assertEquals(12, converted.get(JsonSchema.ENVELOPE_PAYLOAD_FIELD_NAME).intValue()); }
@Test public void testBuildWithParametersWithOrderBy() throws Exception { String name = "name"; AssetState context = new AssetState(); context.setName(name); OrderBy orderBy1 = new OrderBy("name", OrderByType.DESC); List<OrderBy> orders = Arrays.asList(orderBy1); String expected = "SELECT e FROM AssetState e WHERE ( e.name LIKE CONCAT('%',:name,'%') ) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ORDER BY e.name DESC"; MultiplePagedSearch<AssetState> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); pagedSearch.setOrders(orders); String actualQuery = unit.build(pagedSearch); assertEquals(expected, actualQuery); }
@Test public void typesReturnsTypesHandler() { final JenaTypes types = connection.types(); assertNotNull(types); }
@Test public void testMax_doubleArr() { System.out.println("max"); double[] array = {-5, 2, 3}; double expResult = 3; double result = Arrays.max(array); assertEquals(expResult, result, 0.0); }
@Test public void AsSuggestionActivity() { Activity activity = createActivity(); activity.setType("suggestion"); Activity result = activity.asSuggestionActivity(); Assert.assertEquals(result.getType(), ActivityTypes.SUGGESTION); }
@Test void testGetSecond() { String second = arrayBi.getSecond(); assertEquals(second, "d", "Second should return the second object in a ngram"); }
@Test public void testShouldEncodeUidResponse() throws Exception { FetchResponse message = new FetchResponse(MSN, null, MessageUid.of(72), null, null, null, null, null, null, null); encoder.encode(message, composer); assertThat(writer.getString()).isEqualTo("* 100 FETCH (UID 72)\r\n"); }
@Test public void testArrowBatchSet() { Schema.Builder schema = new Schema.Builder(); List<String> single = new ArrayList<>(); for(int i = 0; i < 2; i++) { schema.addColumnInteger(String.valueOf(i)); single.add(String.valueOf(i)); } List<List<Writable>> input = Arrays.asList( Arrays.<Writable>asList(new IntWritable(0),new IntWritable(1)), Arrays.<Writable>asList(new IntWritable(2),new IntWritable(3)) ); List<FieldVector> fieldVector = ArrowConverter.toArrowColumns(bufferAllocator,schema.build(),input); ArrowWritableRecordBatch writableRecordBatch = new ArrowWritableRecordBatch(fieldVector,schema.build()); List<Writable> assertion = Arrays.<Writable>asList(new IntWritable(4), new IntWritable(5)); writableRecordBatch.set(1, Arrays.<Writable>asList(new IntWritable(4),new IntWritable(5))); List<Writable> recordTest = writableRecordBatch.get(1); assertEquals(assertion,recordTest); }
@Test public void showDefault() { createPage(defaultSiteId, "page1"); setPermission(new PageId(defaultSiteId, "page1"), "Everyone", "*:/platform/administrators"); root.getChild("child1").setVisibility(false); root.getChild("child2").setPageId(new PageId(defaultSiteId, "page1")); assertIterator(root.filter().showDefault().iterator(), "child0", "child3", "child4"); }
@Test public void printingAsciiStringAddsLengthToByteCount() throws Exception { wrapper.print("Testing"); assertThat(wrapper.getContentLength(), is(7L)); }
@Test public void testShow() throws Exception { final String iconTitle = "iconTitle"; doReturn(iconTitle).when(presenter).getTypeIconTitle(dataSetDef); final SafeUri iconUri = mock(SafeUri.class); doReturn(iconUri).when(presenter).getTypeIconUri(dataSetDef); final String parentPanelId = "parentPanel"; presenter.show(dataSetDef, parentPanelId); assertEquals(dataSetDef, presenter.getDataSetDef()); verify(view, times(0)).init(presenter); verify(view, times(0)).configure(any(DataSetSummary.View.class)); verify(view, times(1)).showHeader("uuid1", parentPanelId, iconUri, iconTitle, "name1"); verify(view, times(0)).showSummary(); verify(view, times(0)).hideSummary(); verify(view, times(0)).enableActionButton(anyString(), any(ClickHandler.class)); verify(view, times(0)).disableActionButton(); }
@Test @SuppressWarnings("unchecked") public void testCreateCombinedConfiguration_requiredUrlNoOverride() throws Exception { System.setProperty("testProperty", "testValue"); Configuration configuration = configurationHelper.createCombinedConfiguration(null, Lists.<ConfigurationInfo<URL>>newArrayList(new ConfigurationInfo<URL>( ConfigurationHelperTest.class.getResource("props/test3.properties"), true))); assertEquals("jklm", configuration.getString("a.b.c")); assertEquals("testValue", configuration.getString("testProperty")); }
@Test public void testGetDoubleOrDefault_not_number() throws Exception { double value = PtlWebElement.getDoubleOrDefault("middle", Double.NaN); assertThat(value, is(Double.NaN)); }
@Test public void invokingHKeysCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.HKEYS, () -> getConnection().hKeys("key".getBytes())); verify(mockRedisConnection()).hKeys("key".getBytes()); }
@Test public void shouldHandleSingleItem() { assertThat(joiner.join(ImmutableList.of(1)), is("1")); }
@Test public final void shouldCallSaveHook() throws Exception { given(entity.isValid()).willReturn(true); boolean result = dataDefinitionImpl.callSaveHook(entity); assertTrue(result); verify(saveHook).call(entity); }
@Test(expectedExceptions = IllegalArgumentException.class) public void testblockOnPortBadFormat() { NovaTemplateOptions options = new NovaTemplateOptions(); options.blockOnPort(-1, -1); }
@Test public void shouldBanPlayerIp() { Player player = mock(Player.class); String ip = "123.45.67.89"; TestHelper.mockPlayerIp(player, ip); String banReason = "IP ban too many logins"; given(messages.retrieveSingle(player, MessageKey.TEMPBAN_MAX_LOGINS)).willReturn(banReason); Settings settings = mockSettings(2, 100, ""); TempbanManager manager = new TempbanManager(bukkitService, messages, settings); setBukkitServiceToScheduleSyncDelayedTask(bukkitService); manager.tempbanPlayer(player); verify(player).kickPlayer(banReason); ArgumentCaptor<Date> captor = ArgumentCaptor.forClass(Date.class); verify(bukkitService).banIp(eq(ip), eq(banReason), captor.capture(), eq("AuthMe")); Calendar cal = Calendar.getInstance(); cal.add(Calendar.MINUTE, 100); long expectedExpiration = cal.getTime().getTime(); assertThat(Math.abs(captor.getValue().getTime() - expectedExpiration), lessThan(DATE_TOLERANCE_MILLISECONDS)); }
@Test public void testValidateVersion() throws Exception { InputStream stream = this.getClass().getResourceAsStream(PROCESS_XML); Process process = parser.parse(stream); Assert.assertEquals(process.getVersion(), 0); process.setVersion(10); parser.validate(process); Assert.assertEquals(process.getVersion(), 10); }
@Test public void shouldNotThrowAnyExceptionWhenAccountResourcesLimitIsValid() throws Exception { validator.check( DtoFactory.newDto(FreeResourcesLimitDto.class) .withAccountId("account123") .withResources( singletonList( DtoFactory.newDto(ResourceDto.class) .withType("test") .withUnit("mb") .withAmount(1230)))); }
@Test public void getTimestampsDelegates() { int numTimestamps = 5; TimestampRange timestamps = TimestampRange.createInclusiveRange(1L, numTimestamps); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(timestamps); assertThat(timelock.getFreshTimestamps(numTimestamps)).isEqualTo(timestamps); }
@Test public void testDirectBufferFor() throws Exception { fillRandom(); ByteBuffer buf = Uns.directBufferFor(((DirectBuffer) directBuffer).address(), 0, directBuffer.capacity(), false); for (int i = 0; i < CAPACITY; i++) { byte b = buf.get(); byte d = directBuffer.get(); assertEquals(b, d); assertEquals(buf.position(), directBuffer.position()); assertEquals(buf.limit(), directBuffer.limit()); assertEquals(buf.remaining(), directBuffer.remaining()); assertEquals(buf.capacity(), directBuffer.capacity()); } buf.clear(); directBuffer.clear(); while (buf.remaining() >= 8) { long b = buf.getLong(); long d = directBuffer.getLong(); assertEquals(b, d); assertEquals(buf.position(), directBuffer.position()); assertEquals(buf.remaining(), directBuffer.remaining()); } while (buf.remaining() >= 4) { int b = buf.getInt(); int d = directBuffer.getInt(); assertEquals(b, d); assertEquals(buf.position(), directBuffer.position()); assertEquals(buf.remaining(), directBuffer.remaining()); } for (int i = 0; i < CAPACITY; i++) { byte b = buf.get(i); byte d = directBuffer.get(i); assertEquals(b, d); if (i >= CAPACITY - 1) continue; char bufChar = buf.getChar(i); char dirChar = directBuffer.getChar(i); short bufShort = buf.getShort(i); short dirShort = directBuffer.getShort(i); assertEquals(bufChar, dirChar); assertEquals(bufShort, dirShort); if (i >= CAPACITY - 3) continue; int bufInt = buf.getInt(i); int dirInt = directBuffer.getInt(i); float bufFloat = buf.getFloat(i); float dirFloat = directBuffer.getFloat(i); assertEquals(bufInt, dirInt); assertEquals(bufFloat, dirFloat); if (i >= CAPACITY - 7) continue; long bufLong = buf.getLong(i); long dirLong = directBuffer.getLong(i); double bufDouble = buf.getDouble(i); double dirDouble = directBuffer.getDouble(i); assertEquals(bufLong, dirLong); assertEquals(bufDouble, dirDouble); } }
@Test public void snmpSessionListenExceptionShouldReturnError() { try { new Expectations() { { capturingSnmpSession.startListen(); result = new IOException("testException123"); } }; } catch (IOException e) { fail("Unexpected exception in expectations block: " + e); } ResponseEntity<String> actualResponse = testTimQueryController.bulkQuery("{\"request\":{},\"tim\":{}}"); assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, actualResponse.getStatusCode()); assertTrue(actualResponse.getBody().contains("Failed to create SNMP session.")); }
@Test public void getTaggingTest() throws Exception { Map<String, Long> taggingMap = new HashMap<>(); taggingMap.put("assets", 100l); taggingMap.put("tagged", 100l); when(complianceRepository.getTagging(anyString(), anyString())) .thenReturn(taggingMap); assertThat(complianceService.getTagging("dummyString", "dummyString"), is(notNullValue())); when(complianceRepository.getTagging(anyString(), anyString())) .thenThrow(new DataException()); assertThatThrownBy( () -> complianceService .getTagging("dummyString", "dummyString")) .isInstanceOf(ServiceException.class); }
@Test public void testGetIntPropertyMultipleTimesWithPropertyChanges() throws Exception { String someKey = "someKey"; Integer someValue = 2; Integer anotherValue = 3; Integer someDefaultValue = -1; someProperties = new Properties(); someProperties.setProperty(someKey, String.valueOf(someValue)); when(configRepository.getConfig()).thenReturn(someProperties); DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository); assertEquals(someValue, defaultConfig.getIntProperty(someKey, someDefaultValue)); Properties anotherProperties = new Properties(); anotherProperties.setProperty(someKey, String.valueOf(anotherValue)); defaultConfig.onRepositoryChange(someNamespace, anotherProperties); assertEquals(anotherValue, defaultConfig.getIntProperty(someKey, someDefaultValue)); }
@Test public void testJvmDeployConfigArchive() { Jvm mockJvm = mock(Jvm.class); when(mockJvm.getJvmName()).thenReturn("test-jvm-command-factory"); when(mockJvm.getJavaHome()).thenReturn("c:/jdk/java-home"); final Media tomcatMedia = new Media(); tomcatMedia.setRemoteDir(Paths.get("d:/ctp/app/instance")); when(mockJvm.getTomcatMedia()).thenReturn(tomcatMedia); when(Config.mockRemoteCommandExecutorService.executeCommand(any(RemoteExecCommand.class))).thenReturn(SUCCESS_REMOTE_COMMAND_INFO); when(Config.mockBinaryDistributionControlService.checkFileExists(anyString(), anyString())).thenReturn(new CommandOutput(new ExecReturnCode(0), "File exists", "")); RemoteCommandReturnInfo commandReturnInfo = jvmCommandFactory.executeCommand(mockJvm, JvmControlOperation.DEPLOY_JVM_ARCHIVE); assertEquals(SUCCESS_REMOTE_COMMAND_INFO, commandReturnInfo); verify(Config.mockSshConfig, times(1)).getEncryptedPassword(); verify(Config.mockSshConfig, times(1)).getUserName(); }
@Test public void resolve() throws Exception { EntityReferenceProvider currentEntityReferenceProvider = this.mocker.getInstance(EntityReferenceProvider.class, "current"); when(currentEntityReferenceProvider.getDefaultReference(EntityType.WIKI)).thenReturn(new WikiReference("test")); EntityReferenceResolver<String> resolver = mocker.getComponentUnderTest(); DocumentReference documentReference = new DocumentReference("test", Arrays.asList("My App", "Code", "Model"), "A Class"); assertEquals(new ClassPropertyReference("title", documentReference), new ClassPropertyReference(resolver.resolve("My App.Code.Model.A Class.title", EntityType.CLASS_PROPERTY))); documentReference = new DocumentReference("test", Arrays.asList("My.App", "Co.de"), "A.Class"); assertEquals(new ClassPropertyReference("ti.tle", documentReference), new ClassPropertyReference(resolver.resolve("My..App.Co..de.A..Class.ti..tle", EntityType.CLASS_PROPERTY))); assertEquals(new SpaceReference("0.9", new SpaceReference("a..z", new WikiReference("test"))), new SpaceReference(resolver.resolve("a....z.0..9", EntityType.SPACE))); assertEquals( new ClassPropertyReference("title", new DocumentReference("foo", Arrays.asList("Code", "Model"), "A Class")), new ClassPropertyReference(resolver.resolve("Code.Model.A Class.title", EntityType.CLASS_PROPERTY, new SpaceReference("My App", new WikiReference("foo"))))); when(currentEntityReferenceProvider.getDefaultReference(EntityType.SPACE)).thenReturn( new EntityReference("Code", EntityType.SPACE, new EntityReference("My App", EntityType.SPACE))); assertEquals( new ClassPropertyReference("title", new DocumentReference("bar", Arrays.asList("My App", "Code"), "A Class")), new ClassPropertyReference(resolver.resolve("A Class.title", EntityType.CLASS_PROPERTY, new WikiReference( "bar")))); }
@Test public void extract_InvalidTraceOptions_Size() throws SpanContextParseException { Map<String, String> invalidHeaders = new HashMap<String, String>(); invalidHeaders.put(TRACEPARENT, "00-" + TRACE_ID_BASE16 + "-" + SPAN_ID_BASE16 + "-0100"); thrown.expect(SpanContextParseException.class); thrown.expectMessage( "Invalid traceparent: " + "00-" + TRACE_ID_BASE16 + "-" + SPAN_ID_BASE16 + "-0100"); traceContextFormat.extract(invalidHeaders, getter); }
@Test public void testRetrievalOfConnectionsByAddress() { stubFor(get(urlEqualTo(connectionsUrl + "/127.0.0.1")).willReturn(aResponse().withBody("{\n" + " \"connections\": [{\n" + " \"host\": \"127.0.0.1\",\n" + " \"port\": 53806\n" + " }, {\n" + " \"host\": \"127.0.0.1\",\n" + " \"port\": 53807\n" + " }]\n" + "}"))); ConnectionReport report = underTest.getConnections(new InetSocketAddress("127.0.0.1", 1000).getAddress()); List<InetSocketAddress> connections = report.getAddresses(); assertEquals(2, connections.size()); InetSocketAddress connection0 = connections.get(0); assertEquals("127.0.0.1", connection0.getAddress().getHostAddress()); assertEquals(53806, connection0.getPort()); InetSocketAddress connection1 = connections.get(1); assertEquals("127.0.0.1", connection1.getAddress().getHostAddress()); assertEquals(53807, connection1.getPort()); }
@Test public void files() throws FileSystemException { MatcherAssert.assertThat( new FileSystemOfClasspathClasses().files(), Matchers.not(Matchers.empty())); }
@Test public void testIncludeFeats() throws IOException { ADPOSSampleStream stream = new ADPOSSampleStream( new PlainTextByLineStream( ADParagraphStreamTest.class .getResourceAsStream("/opennlp/tools/formats/ad.sample"), "UTF-8"), false, true); POSSample sample = stream.read(); assertEquals(23, sample.getSentence().length); assertEquals("Inicia", sample.getSentence()[0]); assertEquals("v-fin=PR=3S=IND=VFIN", sample.getTags()[0]); assertEquals("em", sample.getSentence()[1]); assertEquals("prp", sample.getTags()[1]); assertEquals("o", sample.getSentence()[2]); assertEquals("art=DET=M=S", sample.getTags()[2]); assertEquals("Porto_Poesia", sample.getSentence()[9]); assertEquals("prop=M=S", sample.getTags()[9]); }
@Test public void shouldDestructureToastWithImplicitFieldCapture() { transform( "module scotch.test", "data Toast { kind :: String, burnLevel :: Int }", "isBurned? Toast { burnLevel } = burnLevel > 3" ); shouldHavePattern("scotch.test.(#1)", asList( capture("isBurned?", t(0)), struct("Toast", t(1), asList( field("burnLevel", t(2), capture("burnLevel", t(2))) )) ), unshuffled(id("burnLevel", t(3)), id(">", t(4)), literal(3)) ); }
@Test public void testRemoteConfigurationRegistryUploadProviderConfigWithDestinationOverride() throws Exception { outContent.reset(); final String providerConfigName = "my-provider-config.xml"; final String entryName = "my-providers.xml"; final String providerConfigContent = "<gateway/>\n"; final File testRoot = TestUtils.createTempDir(this.getClass().getName()); try { final File testRegistry = new File(testRoot, "registryRoot"); final File testProviderConfig = new File(testRoot, providerConfigName); final String[] args = {"upload-provider-config", testProviderConfig.getAbsolutePath(), "--entry-name", entryName, "--registry-client", "test_client", "--master", "master"}; FileUtils.writeStringToFile(testProviderConfig, providerConfigContent, StandardCharsets.UTF_8); KnoxCLI cli = new KnoxCLI(); Configuration config = new GatewayConfigImpl(); config.set("gateway.remote.config.registry.test_client", "type=LocalFileSystem;address=" + testRegistry); cli.setConf(config); int rc = cli.run(args); assertEquals(0, rc); assertFalse((new File(testRegistry, "knox/config/shared-providers/" + providerConfigName)).exists()); File registryFile = new File(testRegistry, "knox/config/shared-providers/" + entryName); assertTrue(registryFile.exists()); assertEquals(FileUtils.readFileToString(registryFile, StandardCharsets.UTF_8), providerConfigContent); } finally { FileUtils.forceDelete(testRoot); } }
@Test public void testUpdate1() { List<Fund> expectedResult = getFunds(); FundEntity entity = new FundEntity().toEntity(expectedResult.get(0)); when(fundJdbcRepository.update(any(FundEntity.class))).thenReturn(entity); fundRepositoryWithOutKafka.update(expectedResult, requestInfo); verify(fundQueueRepository).addToSearch(any(Map.class)); }
@Test public void getFileContents() { String FILE_CONTENTS = "FILE_CONTENTS"; when(fileUploadPopupViewMock.getFileContents()).thenReturn(FILE_CONTENTS); assertEquals(FILE_CONTENTS, fileUploadPopupPresenter.getFileContents()); verify(fileUploadPopupViewMock, times(1)).getFileContents(); }
@Test public void shouldInsertRegimenColumn() throws Exception { Long userId = 5L; List<RegimenColumn> regimenColumns = new ArrayList<>(); RegimenColumn regimenColumn = new RegimenColumn(); regimenColumns.add(regimenColumn); RegimenTemplate regimenTemplate = new RegimenTemplate(1l, regimenColumns); repository.save(regimenTemplate, userId); verify(mapper).insert(regimenColumn, regimenTemplate.getProgramId()); assertThat(regimenColumn.getModifiedBy(), is(userId)); assertThat(regimenColumn.getCreatedBy(), is(userId)); }
@Test public void testDecodeBase64WithCharset() throws Exception { Assert.assertEquals(decodeBase64("Rm9v", Charset.forName("UTF-8"), context), "Foo"); }
@Test public void immediateComposeThrows() throws Exception { doThrow(cause).when(composeFn).apply(from); assertThat(base.thenComposeCompleted(composeFn, from), is(new ImmediateFailed<>(caller, cause))); }
@Test public void shouldReturnEmptyOptionalWhenAccountDoesNotUseRuntimes() throws Exception { when(accountManager.getById(any())).thenReturn(account); when(account.getName()).thenReturn("testAccount"); when(workspaceManager.getByNamespace(anyString(), anyBoolean(), anyInt(), anyLong())) .thenReturn(new Page<>(singletonList(createWorkspace(WorkspaceStatus.STOPPED)), 0, 1, 1)); Optional<Resource> usedRuntimesOpt = runtimeResourceUsageTracker.getUsedResource("account123"); assertFalse(usedRuntimesOpt.isPresent()); }
@Test public void testFullClassName() { assertEquals("org.wikibrain.utils.JvmUtils", JvmUtils.getFullClassName("JvmUtils")); assertNull(JvmUtils.getFullClassName("Foozkjasdf")); }
@Ignore("For ad-hoc testing with \\ in paths.") @Test public void mightResolveBackslashesToo() throws IOException { final String MY_VAR_FOLDERS = "\\var\\folders\\58\\546k9lk08xl56t0059bln0_h0000gp\\T"; final String EXPECTED_REL = MY_VAR_FOLDERS.substring("/var/".length()). replace('\\', '/'); String rel = PathUtils.getRelativeToCanonical(MY_VAR_FOLDERS, "/private/var"); Assert.assertEquals("/var/run rel to /private/var", EXPECTED_REL, rel); }
@Test public void contentEqualEmptyEmpty() throws Exception { assertThat( IOUtil.contentEquals( new DontCloseByteArrayInputStream( emptyByteArray() ), new DontCloseByteArrayInputStream( emptyByteArray() ) ), is( true ) ); }
@Test public void createKeyImageRequestRewrite() throws Exception { HttpRequest request = getMockImageRequest("100", "80", "70", true, "image/jpg", "Mozilla"); CacheKeyBuilder key = new CacheKeyBuilder() .setLegacyParam(0, IMAGE_URI) .setLegacyParam(1, AuthType.NONE) .setParam("rh", "100") .setParam("rw", "80") .setParam("rq", "70") .setParam("ne", "1") .setParam("rm", "image/jpg") .setParam("ua", "Mozilla"); assertEquals(key.build(), cache.createKey(request)); }
@Test public void testMany() { BehaviorSubject<List<Integer>> source = BehaviorSubject.create(); LoadBalancer<Integer> lb = LoadBalancer.fromSnapshotSource(source).build(ChoiceOfTwoLoadBalancer.create(COMPARATOR)); source.onNext(Lists.newArrayList(0,1,2,3,4,5,6,7,8,9)); AtomicIntegerArray counts = new AtomicIntegerArray(10); for (int i = 0; i < 100000; i++) { counts.incrementAndGet(lb.next()); } Double[] pct = new Double[counts.length()]; for (int i = 0; i < counts.length(); i++) { pct[i] = counts.get(i)/100000.0; } for (int i = 1; i < counts.length(); i++) { Assert.assertTrue(counts.get(i) > counts.get(i-1)); } }
@Test public void testGetPrimitiveTypeConverterWorksProperly() { Converter actual = underTest.getPrimitiveTypeConverter(); assertThat(actual).isNotNull(); }
@Test public void onLoginFailure_should_return_false() throws IOException { ServletRequest request = mock(ServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); AuthenticationToken token = mock(AuthenticationToken.class); AuthenticationException ex = mock(AuthenticationException.class); boolean result = underTest.onLoginFailure(token, ex, request, response); assertThat(result).isFalse(); verify(response).sendError(eq(HttpServletResponse.SC_UNAUTHORIZED), anyString()); }
@Test public void testGetLineCoverageFitness_unCoveredLine() throws IOException { BufferedReader obj = new BufferedReader(new StringReader("java.lang.IllegalArgumentException:\n" + "\tat eu.stamp.ClassA.method2(ClassA.java:10)\n" + "\tat eu.stamp.ClassB.method1(ClassB.java:20)")); StackTrace target = Mockito.spy(new StackTrace()); Mockito.doReturn(obj).when(target).readFromFile(anyString()); target.setup("", 2); Map<Integer, Integer> lineCoverage = new HashMap<>(); lineCoverage.put(10, 1); Map<String, Map<Integer, Integer>> methodCoverage = new HashMap<>(); methodCoverage.put("method2", lineCoverage); ExecutionTrace executionTrace = new ExecutionTraceImpl(); Map<String, Map<String, Map<Integer, Integer>>> classCoverage = executionTrace.getCoverageData(); classCoverage.put("eu.stamp.ClassB", methodCoverage); ExecutionResult result = new ExecutionResult(new DefaultTestCase()); result.setTrace(executionTrace); double fitness = calculator.getLineCoverageFitness(result, target, 11); assertEquals(Double.MAX_VALUE, fitness, 0.0001); }
@Test public void testYearMonthDayHourMinSecZulu() throws ParseException { String gt = "20080102121314Z"; GeneralizedTime generalizedTime = new GeneralizedTime( gt ); String result = generalizedTime.toGeneralizedTime(); assertEquals( gt, result ); }
@Test(expected = IllegalArgumentException.class) public void consecutive_wildcard() { FilePattern.compile("**.csv"); }
@Test public void addDetector() { final long WARNINGS = getWarnings(); assertTrue(detectorRegistry.addDetector(TestDetector.class)); assertEquals(WARNINGS + 2, getWarnings()); }
@Test public void testFindByInstanceId() { RegisterInstanceRequest registerInstanceRequest = RegisterInstanceUtil.setRegisterInstanceRequest(); RegisterInstanceResponse response = instanceService.registerInstance(registerInstanceRequest); InstanceEntity testInstanceEntity = RegisterInstanceUtil.createTestInstanceEntity(); InstanceEntity instanceEntity = instanceService.findByCandInstanceId("w545878765"); Assert.assertEquals(testInstanceEntity.getAppClusterName(), instanceEntity.getAppClusterName()); long instanceId=instanceEntity.getId(); AppClusterEntity appClusterEntity=(AppClusterEntity) uiAppClusterService.findByInstanceId(Long.toString(instanceId)).getData().get(0); Assert.assertEquals("wCluster", appClusterEntity.getClusterName()); }
@Test public void countChecklistChars () { String content = CHECKED_SYM + "done\n" + UNCHECKED_SYM + "undone yet"; Note note = getNote(1L, "checklist", content); note.setChecklist(true); assertEquals(22, new DefaultWordCounter().countChars(note)); }
@Test(expected = UnsupportedOperationException.class) public void testIsOpen() { em.isOpen(); }
@Test public void testByDefaultConstructor() throws ScriptException { DefaultConstructorStrategy constructorStrategy = DefaultConstructorStrategy.byDefaultConstructor(); TestConstructor constructed = (TestConstructor) constructorStrategy.construct(TestConstructor.class); assertThat(constructed.message).isEqualTo("TestConstructor()"); }
@Test void isEnabledFalseWhenNotReadableAndFieldUpdatable() { NestedPatch NestedPatch = new NestedPatch(metaResource, metaResourceField, relatedMetaResource); metaResource.setReadable(false); metaResourceField.setUpdatable(true); Assert.assertFalse(NestedPatch.isEnabled()); }
@Test void asDoubleStream() { assertEqualsApplying(s -> s.asDoubleStream().mapToInt(l -> (int) l)); }
@Test public void testRenameJsonWithTemplateInTo() { Map valueBeingRename = ImmutableMap.of("x", 5); Doc doc = createDoc( "field-a", "field-b", "field-c", valueBeingRename); Map<String, Object> config = createConfig( "from", "field-c", "to", "{{field-a}}"); RenameFieldProcessor renameFieldProcessor = createProcessor(RenameFieldProcessor.class, config); assertThat(renameFieldProcessor.process(doc).isSucceeded()).isTrue(); Map renamedValue = doc.getField("field-b"); assertThat(renamedValue.get("x")).isEqualTo(5); }
@Test(groups = "unit", expectedExceptions = NoSuchFieldError.class) public void errorUnchecked() throws Exception { Supplier<Object> supplier = LambdaUtils.unchecked(() -> { throw new NoSuchFieldError(); }); supplier.get(); }
@Test public void testHasStatement() { graph.add(statements); assertFalse(graph.hasStatement(null)); assertTrue(graph.hasStatement(new StatementImpl(doc2, isBasedOn, doc1))); assertFalse(graph.hasStatement(new StatementImpl(doc2, isBasedOn, doc2))); assertTrue(graph.hasStatement(new StatementImpl(doc2, isBasedOn, null))); assertFalse(graph.hasStatement(new StatementImpl(null, null, doc2))); }
@Test public void parseAltScaffold() throws Exception { assertThat(ChromosomeParser.parseChr("4_GL000008v2_alt"), equalTo((byte) 0)); }
@Test public void testBusLines() { Iterable<BusLine> iterable; Iterator<BusLine> iterator; iterable = this.network.busLines(); iterator = iterable.iterator(); assertFalse(iterator.hasNext()); initTest(); iterable = this.network.busLines(); iterator = iterable.iterator(); assertTrue(iterator.hasNext()); assertSame(this.line1, iterator.next()); assertTrue(iterator.hasNext()); assertSame(this.line2, iterator.next()); assertFalse(iterator.hasNext()); }
@Test public void testGetRampTime_2() throws Exception { BaseJob fixture = new JobConfiguration(); long result = fixture.getRampTime(); assertEquals(0L, result); }
@Test public void parserInteger() throws IOException, JsonFormatException { String json = "[0,null,2,3,4]"; JsonPullParser parser = JsonPullParser.newParser(json); State state = parser.getEventType(); assertThat(state, is(State.START_ARRAY)); assertThat(JsonParseUtil.parserInteger(parser), is(0)); assertThat(JsonParseUtil.parserInteger(parser), nullValue()); assertThat(JsonParseUtil.parserInteger(parser), is(2)); assertThat(JsonParseUtil.parserInteger(parser), is(3)); assertThat(JsonParseUtil.parserInteger(parser), is(4)); }
@Test public void testList() { given() .when().get("/legumes") .then() .statusCode(200) .body("$.size()", is(2), "name", containsInAnyOrder("Carrot", "Zucchini"), "description", containsInAnyOrder("Root vegetable, usually orange", "Summer squash")); }
@Test public void testGetAccept() { Assert.assertEquals(0, testAuthenticationMethodRetriever.getAccept().size()); }
@Test public void testGlobMatching() throws IOException { String json; List<JsonPath.Match> matches; JsonNode root; JsonPath.Expression expression; Set<String> matchValues; JsonFactory factory = new JsonFactory(); ObjectMapper mapper = new ObjectMapper( factory ); json = "{ \"field\" : \"value\" }"; root = mapper.readTree( json ); assertThat( root, notNullValue() ); expression = JsonPath.compile( "$..field" ); matches = expression.evaluate( root ); matchValues = new HashSet<>(); assertThat( matches.size(), is( 1 ) ); for( JsonPath.Match match : matches ) { matchValues.add( match.getNode().asText() ); } assertThat( matchValues, hasItem( "value" ) ); json = "{ \"field-1\" : { \"field-1-1\" : { \"field-1-1-1\" : \"value-1-1-1\", \"field\" : \"value-A\" }, \"field\" : \"value-B\"}, \"field-2\" : { \"field-2-1\" : { \"field-2-1-1\" : \"value-2-1-1\", \"field\" : \"value-C\" }, \"field\" : \"value-D\" }, \"field\" : \"value-E\" }"; root = mapper.readTree( json ); assertThat( root, notNullValue() ); expression = JsonPath.compile( "$..field" ); matches = expression.evaluate( root ); assertThat( matches.size(), is( 5 ) ); matchValues = new HashSet<>(); for( JsonPath.Match match : matches ) { matchValues.add( match.getNode().asText() ); } assertThat( matchValues, hasItem( "value-A" ) ); assertThat( matchValues, hasItem( "value-B" ) ); assertThat( matchValues, hasItem( "value-C" ) ); assertThat( matchValues, hasItem( "value-D" ) ); assertThat( matchValues, hasItem( "value-E" ) ); }
@Test public void doesNotConnectToSelf() { ConnectRandomlyToServerGroupStrategy connectRandomlyToServerGroupStrategy = new ConnectRandomlyToServerGroupStrategy(); MemberId myself = new MemberId( new UUID( 1234, 5678 ) ); LogProvider logProvider = NullLogProvider.getInstance(); Config config = Config.defaults(); config.augment( CausalClusteringSettings.connect_randomly_to_server_group_strategy, "firstGroup" ); TopologyService topologyService = new TopologyServiceThatPrioritisesItself( myself, "firstGroup" ); connectRandomlyToServerGroupStrategy.inject( topologyService, config, logProvider, myself ); Optional<MemberId> found = connectRandomlyToServerGroupStrategy.upstreamDatabase(); assertTrue( found.isPresent() ); assertNotEquals( myself, found.get() ); }
@Test public void testRefreshConnection() throws SQLException{ Connection mockInternalConnection = createNiceMock(Connection.class); this.testClass.connection = mockInternalConnection; mockInternalConnection.close(); expectLastCall().once(); replay(mockInternalConnection); this.testClass.refreshConnection(); assertNotSame(mockInternalConnection, this.testClass.getInternalConnection()); verify(mockInternalConnection); this.testClass.connection = mockInternalConnection; reset(this.mockPool, mockInternalConnection); mockInternalConnection.close(); expectLastCall().once(); expect(this.mockPool.obtainRawInternalConnection()).andThrow(new SQLException("foo", "1234")).once(); replay(this.mockPool, mockInternalConnection); try{ this.testClass.refreshConnection(); fail("Should throw exception"); } catch(SQLException e){ } }
@Test public void testTrimToSize() { tIntIntHashMap.trimToSize(); verify(delegate).trimToSize(); }
@Test public void testType() throws Exception { final Matcher<JsonNode> sut = jsonArray(); assertThat(NF.arrayNode(), is(sut)); }
@Test public void stringBinderBindsEnum() throws SQLException { Binder binder = Binders.stringBinder(); binder.bind(stmt, 1, TestEnum.BAR); verify(stmt).setString(1, "BAR"); }
@Test public void absExp() throws Exception { Expression exp1 = FunctionExpressionFactory.absExp(Artist.ARTIST_NAME.getExpression()); Expression exp2 = FunctionExpressionFactory.absExp(Artist.ARTIST_NAME.getName()); assertTrue(exp1 instanceof ASTAbs); assertEquals(1, exp1.getOperandCount()); assertEquals(Artist.ARTIST_NAME.getExpression(), exp1.getOperand(0)); assertEquals(exp1, exp2); }
@Test public void buildAndSkipDepsNonExistentProject() throws Exception{ DefaultLocalExecutor executor = new DefaultLocalExecutor(executorService); CompletableFuture<KieCompilationResponse> futureRes = executor.build(tmpRoot, mavenRepoPath, TestUtilMaven.getSettingsFile(), Boolean.FALSE); KieCompilationResponse res = futureRes.get(); assertThat(res.isSuccessful()).isFalse(); assertThat(res.getDependencies()).isEmpty(); }
@Test public void testDestroy() { tested.init(); tested.destroy(); verify(proxy, times(1)).destroy(); }
@Test public void testGetAllFiles() throws Exception { URL url = this.getClass().getResource("/partitioner"); FileSystemAdapter adapter = new HdfsFileSystemAdapter(); List<FileSystemAdapter.FileMetadata> result = adapter.getAllFiles(url.getPath()); Assert.assertEquals(3, result.size()); }
@Test public void test_isFalse_ok_args() { ArgChecker.isFalse(false, "Message {} {} {}", "A", 2., 3, true); }
@Test public void testConvolutionalWithPaddingBackPropagate() { final Matrix error = convolutionalWithPaddingLayer.backPropagate( input, expectedConvolutionalWithPaddingActivation, nextErrorWithPadding); assertTrue(expectedConvolutionalWithPaddingError.compare(error, TOLERANCE)); }
@Test public void countWords_noContent() throws Exception { assertEquals(0, StringFunctions.countWords(null)); }
@Test public void insertAuthRoleAdminAll() { List<AuthRoleAdmin> authRoleAdminList = new ArrayList<>(); long len = 3; for (long i = 1; i <= len; i++) { AuthRoleAdmin authRoleAdmin = new AuthRoleAdmin(); if (i % 2 == 0) { authRoleAdmin.setRoleId(i); } authRoleAdmin.setAdminId(i + 1); authRoleAdminList.add(authRoleAdmin); } int i = authRoleAdminService.insertAuthRoleAdminAll(authRoleAdminList); System.out.println(i); assertEquals(1, i); }
@Test public void getDimensionCountOfRandomRankArrayReturnsExpected() { Random rng = new Random(); for (int run = 0; run < 100; run++) { StringBuilder sb = new StringBuilder(); int expected = rng.nextInt(10); for (int i = 0; i < expected; i++) { sb.append('['); } sb.append("Lsome/Type;"); String typeReference = sb.toString(); int actual = ClassNameUtils.getDimensionCount(typeReference); assertEquals(expected, actual); } }
@Test public void checkEndpointAuthorizationFilterRegistrationForSecuredMethod() throws Exception { ResourceInfo resourceInfo = mock(ResourceInfo.class); when(resourceInfo.getResourceMethod()).thenReturn(AuthorizationFilterTest.class.getMethod("MySecuredMethod")); when(resourceInfo.getResourceClass()).thenReturn((Class) AuthorizationFilterTest.class); FeatureContext context = mock(FeatureContext.class); AuthorizationFilter instance = new AuthorizationFilter(); instance.configure(resourceInfo, context); ArgumentCaptor<EndpointPermissionAuthorizationFilter> endpointAuthorizationFilterArgumentCaptor = ArgumentCaptor.forClass(EndpointPermissionAuthorizationFilter.class); ArgumentCaptor<EndpointPersonalCertificateAuthorizationFilter> endpointPersonalCertificateAuthorizationFilterArgumentCaptor = ArgumentCaptor.forClass(EndpointPersonalCertificateAuthorizationFilter.class); ArgumentCaptor<EndpointAdminOnlyAuthorizationFilter> endpointAdminOnlyAuthorizationFilterArgumentCaptor = ArgumentCaptor.forClass(EndpointAdminOnlyAuthorizationFilter.class); verify(context) .register(endpointAdminOnlyAuthorizationFilterArgumentCaptor.capture(), eq(Priorities.AUTHORIZATION + 10)); verify(context) .register(endpointAuthorizationFilterArgumentCaptor.capture(), eq(Priorities.AUTHORIZATION + 20)); verify(context).register(endpointPersonalCertificateAuthorizationFilterArgumentCaptor.capture(), eq(Priorities.AUTHORIZATION + 30)); verifyNoMoreInteractions(context); Assert.assertEquals(MY_PERMISSION, endpointAuthorizationFilterArgumentCaptor.getValue().getPermission()); Assert.assertEquals(MY_PERMISSION, endpointPersonalCertificateAuthorizationFilterArgumentCaptor.getValue().getPermission()); }
@Test public void testFromToTransit() { when(this.directionsApiCalls.fromTo("A", "B", TravelMode.TRANSIT)).thenReturn(this.data.transportRoutes); BestTransportResult result = this.logic.fromTo("A", "B", TravelMode.TRANSIT); verify(this.directionsApiCalls).fromTo("A", "B", TravelMode.TRANSIT); assertThat(result.getRoute(), equalTo(this.data.transportRoutes[6])); assertThat(result.getMode(), equalTo(TravelMode.TRANSIT)); }
@Test public void constructorWithNullPatterns() { AutoSerializer autoSerializer = new AutoSerializer(true, (String[]) null); assertThat(autoSerializer.getPatterns()).isNull(); }
@Test public void testClearIgnoringIndexes() { PriorityQueue<TestElement> queue = new DefaultPriorityQueue<TestElement>(TestElementComparator.INSTANCE, 0); assertEmptyQueue(queue); TestElement a = new TestElement(5); TestElement b = new TestElement(10); TestElement c = new TestElement(2); TestElement d = new TestElement(6); TestElement e = new TestElement(11); assertOffer(queue, a); assertOffer(queue, b); assertOffer(queue, c); assertOffer(queue, d); queue.clearIgnoringIndexes(); assertEmptyQueue(queue); try { queue.offer(a); fail(); } catch (IllegalArgumentException t) { } assertOffer(queue, e); assertSame(e, queue.peek()); }
@Test public void testGetErrorFrameContentPane() { if (GraphicsEnvironment.isHeadless()) { LOG.fine("cannot run - headless environment"); return; } JFrame frame = new JFrame(); assertNotNull(ui.getErrorFrame(frame.getContentPane())); }
@Test public void shouldTruncateLongName() { Step s = Mockito.mock(Step.class); Mockito.when(s.toString()).thenReturn("0123456789"); assertEquals("0123...", TraversalHelper.getShortName(s, 7)); }
@Test public void differentInstanceTasksMayExecuteConcurrently() { scheduler = new DockerTaskScheduler(3, false, Duration.ofSeconds(2)); InstanceTestTaskDelegator task1 = new InstanceTestTaskDelegator(instance1); InstanceTestTaskDelegator task2 = new InstanceTestTaskDelegator(instance2); InstanceTestTaskDelegator task3 = new InstanceTestTaskDelegator(instance3); instanceLock.lock(); scheduler.scheduleInstanceTask(task1.task); scheduler.scheduleInstanceTask(task2.task); scheduler.scheduleInstanceTask(task3.task); waitMillis(500); assertThat(task1.isRunning()).isTrue(); assertThat(task2.isRunning()).isTrue(); assertThat(task3.isRunning()).isTrue(); }
@Test public void testGetName() { assertEquals(null, source.getName()); source = new StubAbstractDataSource("name"); assertEquals("name", source.getName()); }
@Test public void testValidatorJsr303() { Validator validator = getValidator(); ValidatorJsr303<String> mandatoryStringValidator = new ValidatorJsr303<>(validator, TestBean.class, "mandatoryString"); ValidationFailure failure = mandatoryStringValidator.validate(null); assertNotNull(failure); assertEquals("has to be filled", failure.getMessage()); }
@Test public void testBoost() throws Exception { BuildFindModuleFunctionTable builder = new BuildFindModuleFunctionTable(); builder.addManifest(ResolvedManifests.boost().manifest); FunctionTableExpression table = builder.build(); String result = new CMakeGenerator(environment, table).create(); System.out.printf(result); }
@Test public void quantize3() { assertThat(LogValueScale.quantize(33.5), equalTo(50)); }
@Test public void rateFedFund2CutOffValuationEnd() { LocalDate[] valuationDate = {date(2015, 1, 15), date(2015, 1, 16)}; OvernightAveragedRateComputation ro = OvernightAveragedRateComputation.of(USD_FED_FUND, FIXING_START_DATE, FIXING_END_DATE, 2, REF_DATA); OvernightIndexRates mockRates = mock(OvernightIndexRates.class); when(mockRates.getIndex()).thenReturn(USD_FED_FUND); SimpleRatesProvider simpleProv = new SimpleRatesProvider(mockRates); LocalDateDoubleTimeSeriesBuilder tsb = LocalDateDoubleTimeSeries.builder(); int lastFixing = 6; for (int i = 0; i < lastFixing; i++) { tsb.put(FIXING_DATES[i], FIXING_RATES[i]); } when(mockRates.getFixings()).thenReturn(tsb.build()); for (int i = 0; i < lastFixing; i++) { when(mockRates.rate(USD_OBS[i])).thenReturn(FIXING_RATES[i]); } for (int i = lastFixing; i < USD_OBS.length; i++) { when(mockRates.rate(USD_OBS[i])).thenReturn(FORWARD_RATES[i]); } double afKnown = 0.0; double accruedKnown = 0.0; for (int i = 0; i < 4; i++) { LocalDate fixingknown = FIXING_DATES[i + 1]; LocalDate endDateKnown = USD_FED_FUND.calculateMaturityFromEffective(fixingknown, REF_DATA); double af = USD_FED_FUND.getDayCount().yearFraction(fixingknown, endDateKnown); afKnown += af; accruedKnown += FIXING_RATES[i + 1] * af; } LocalDate fixingCutOff = FIXING_DATES[5]; LocalDate endDateCutOff = USD_FED_FUND.calculateMaturityFromEffective(fixingCutOff, REF_DATA); double afCutOff = USD_FED_FUND.getDayCount().yearFraction(fixingCutOff, endDateCutOff); double rateExpected = (accruedKnown + FIXING_RATES[4] * afCutOff) / (afKnown + afCutOff); for (int loopvaldate = 0; loopvaldate < 2; loopvaldate++) { when(mockRates.getValuationDate()).thenReturn(valuationDate[loopvaldate]); double rateComputed = OBS_FN_APPROX_FWD.rate(ro, DUMMY_ACCRUAL_START_DATE, DUMMY_ACCRUAL_END_DATE, simpleProv); assertThat(rateComputed).isCloseTo(rateExpected, offset(TOLERANCE_RATE)); } }
@Test public void testIsStrictPasswordReturnsFalseShortLength() { assertFalse(StringValidations.isStrictPassword("r$8")); }
@Test public void will_fail_if_unable_to_create_the_directory_for_permission_or_other_reasons() throws IOException { assumeTrue("this test works only on POSIX compatible file systems", Files.getFileAttributeView(baseDir, PosixFileAttributeView.class) != null); Set<PosixFilePermission> noPermissions = new HashSet<>(); Files.setPosixFilePermissions(baseDir, noPermissions); assertThat("the file system did not let us change file permissions", Files.getPosixFilePermissions(baseDir), is(noPermissions)); thrown.expect(AccessDeniedException.class); UniqueDirectories.createUniqueDir(baseDir, 123); }
@Test public void illegalCharacter() throws Exception { String output = formatter.format(UNFORMATTED.replace("function", "function" + ILLEGAL_CHAR)); assertThat(output).as("Illegal ASCII charactes are not treated on best effort basis.").contains("function" + ILLEGAL_CHAR); }
@Test public void then_doNothing_withoutListenerResultAndCleaner() throws Exception { PromiseImpl<Object> promise = new PromiseImpl<>(null, null); promise.then(null); }
@Test(expected = InvalidDataException.class) public final void test_delete_with_out_kafka_and_with_null_req() { final List<Budget> expextedResult = getBudgets(); when(budgetRepository.delete(any(List.class), any(RequestInfo.class))).thenReturn(expextedResult); final List<Budget> actualResult = budgetService.delete(null, errors, requestInfo); assertEquals(expextedResult, actualResult); }
@Test public void testRollback() throws SQLException { connection.getSession(); assertTrue("Transaction should be active", connection.getTransaction().isActive()); connection.rollback(); assertFalse("Rollback should close transaction", connection.getTransaction().isActive()); connection.rollback(); }
@Test public void testGetTimeout() { NativeHTTPDataLoader dataLoader = new NativeHTTPDataLoader(); dataLoader.setTimeout(1); assertThrows(DSSException.class, () -> dataLoader.get(HTTP_URL_TO_LOAD)); }
@Test public void executeInternalReturnsContent() throws IOException { TestUrlSourceJob job = new TestUrlSourceJob(prepareHttpClientMock(true)); job.executeInternal(applicationContext, new JobKey(SOURCE_ID, WIDGET_ID), createConfigMap()); testExecuteInternalReturnsContent(); }
@Test public void testOnInstanceHardRebooting() { testOnInstanceSyncEvent(InstanceHardRebootingEvent.class, HARD_REBOOTING); }
@Test public void testJoin() { String result = StringUtilities.join(":", "alpha"); String expected = "alpha"; Assert.assertEquals(expected, result); result = StringUtilities.join(":", (Object)"alpha"); Assert.assertEquals(expected, result); Object[] arr = { "alpha" }; result = StringUtilities.join(":", arr); Assert.assertEquals(expected, result); result = StringUtilities.join(":", "alpha", "beta", null, "gamma"); expected = "alpha:beta::gamma"; Assert.assertEquals(expected, result); result = StringUtilities.join(":", (Object)"alpha", "beta", null, "gamma"); Assert.assertEquals(expected, result); arr = new Object[] { "alpha", "beta", null, "gamma" }; result = StringUtilities.join(":", arr); Assert.assertEquals(expected, result); Collection<Object> col = Arrays.asList(arr); result = StringUtilities.join(":", col); Assert.assertEquals(expected, result); }
@Test public void testAnd() { assertEquals("(true && false)", BooleanExp.TRUE.and(BooleanExp.FALSE).getCode()); }
@Test public void createComponentWithInheritedTag() { Component component = new TestComponentWithInheritedTag(); Assert.assertEquals(Tag.DIV, component.getElement().getTag()); }
@Test void retrieveResourceIdResolverBeanName_resourceIdResolverBeanNotYetRegistered_resourceIdResolverBeanIsRegisteredUnderInternalName() { DefaultListableBeanFactory registry = new DefaultListableBeanFactory(); GlobalBeanDefinitionUtils.retrieveResourceIdResolverBeanName(registry); assertThat(registry.getBeanDefinition( GlobalBeanDefinitionUtils.RESOURCE_ID_RESOLVER_BEAN_NAME)).isNotNull(); }
@SuppressWarnings("unchecked") @Test public void testParseThreat60() { JSONObject actual = parser.parse(THREAT_60.getBytes(StandardCharsets.UTF_8)).get(0); JSONObject expected = new JSONObject(); expected.put(BasicPaloAltoFirewallParser.Action, "reset-both"); expected.put(BasicPaloAltoFirewallParser.ActionFlags, "0x0"); expected.put(BasicPaloAltoFirewallParser.Application, "web-browsing"); expected.put(BasicPaloAltoFirewallParser.Category, "any"); expected.put(BasicPaloAltoFirewallParser.ConfigVersion, "1"); expected.put(BasicPaloAltoFirewallParser.Direction, "client-to-server"); expected.put(BasicPaloAltoFirewallParser.DestinationLocation, "US"); expected.put(BasicPaloAltoFirewallParser.Flags, "0x80004000"); expected.put(BasicPaloAltoFirewallParser.SourceZone, "internal"); expected.put(BasicPaloAltoFirewallParser.InboundInterface, "ethernet1/2"); expected.put(BasicPaloAltoFirewallParser.DestinationAddress, "216.0.10.198"); expected.put(BasicPaloAltoFirewallParser.DestinationPort, "80"); expected.put(BasicPaloAltoFirewallParser.SourceAddress, "10.0.0.115"); expected.put(BasicPaloAltoFirewallParser.SourcePort, "54180"); expected.put(BasicPaloAltoFirewallParser.LogAction, "LOG-Default"); expected.put(BasicPaloAltoFirewallParser.NATDestinationPort, "0"); expected.put(BasicPaloAltoFirewallParser.NATDestinationIP, "0.0.0.0"); expected.put(BasicPaloAltoFirewallParser.NATSourcePort, "0"); expected.put(BasicPaloAltoFirewallParser.NATSourceIP, "0.0.0.0"); expected.put("original_string", THREAT_60); expected.put(BasicPaloAltoFirewallParser.OutboundInterface, "ethernet1/1"); expected.put(BasicPaloAltoFirewallParser.PaloAltoDomain, "1"); expected.put(BasicPaloAltoFirewallParser.ParserVersion, 60); expected.put(BasicPaloAltoFirewallParser.PCAPID, "1200568889751109656"); expected.put(BasicPaloAltoFirewallParser.IPProtocol, "tcp"); expected.put(BasicPaloAltoFirewallParser.ReceiveTime, "2015/01/05 05:38:58"); expected.put(BasicPaloAltoFirewallParser.RepeatCount, "1"); expected.put(BasicPaloAltoFirewallParser.Rule, "EX-Allow"); expected.put(BasicPaloAltoFirewallParser.Seqno, "347368099"); expected.put(BasicPaloAltoFirewallParser.SerialNum, "0006C110285"); expected.put(BasicPaloAltoFirewallParser.SessionID, "12031"); expected.put(BasicPaloAltoFirewallParser.Severity, "high"); expected.put(BasicPaloAltoFirewallParser.SourceLocation, "10.0.0.0-10.255.255.255"); expected.put(BasicPaloAltoFirewallParser.SourceUser, "example\\user.name"); expected.put(BasicPaloAltoFirewallParser.StartTime, "2015/01/05 05:38:58"); expected.put(BasicPaloAltoFirewallParser.ThreatContentType, "vulnerability"); expected.put(BasicPaloAltoFirewallParser.ThreatID, "HTTP: IIS Denial Of Service Attempt(40019)"); expected.put(BasicPaloAltoFirewallParser.GenerateTime, "2015/01/05 05:38:58"); expected.put("timestamp", actual.get("timestamp")); expected.put(BasicPaloAltoFirewallParser.DestinationZone, "external"); expected.put(BasicPaloAltoFirewallParser.Type, "THREAT"); expected.put(BasicPaloAltoFirewallParser.URL, "ad.aspx?f=300x250&id=12;tile=1;ord=67AF705D60B1119C0F18BEA336F9"); expected.put(BasicPaloAltoFirewallParser.VirtualSystem, "vsys1"); assertEquals(expected, actual); }
@Test public void testFlat01Build() throws Exception { check(build("flat01"), "flat01.map"); }
@Test public void testRoundRobin() throws InterruptedException { final String topicA = "topicA"; final String topicB = "topicB"; List<PartitionInfo> allPartitions = asList(new PartitionInfo(topicA, 0, node0, nodes, nodes), new PartitionInfo(topicA, 1, node1, nodes, nodes), new PartitionInfo(topicA, 2, node2, nodes, nodes), new PartitionInfo(topicB, 0, node0, nodes, nodes) ); Cluster testCluster = new Cluster("clusterId", asList(node0, node1, node2), allPartitions, Collections.<String>emptySet(), Collections.<String>emptySet()); final Map<Integer, Integer> partitionCount = new HashMap<>(); for (int i = 0; i < 30; ++i) { int partition = partitioner.partition(topicA, null, null, null, null, testCluster); Integer count = partitionCount.get(partition); if (null == count) count = 0; partitionCount.put(partition, count + 1); if (i % 5 == 0) { partitioner.partition(topicB, null, null, null, null, testCluster); } } assertEquals(10, (int) partitionCount.get(0)); assertEquals(10, (int) partitionCount.get(1)); assertEquals(10, (int) partitionCount.get(2)); }
@Test public void tesGetLocationById() { when(sqLiteDatabase.rawQuery("SELECT * FROM location WHERE _id =?", new String[]{"3734"})).thenReturn(getCursor()); Location location = locationRepository.getLocationById("3734"); verify(sqLiteDatabase).rawQuery(stringArgumentCaptor.capture(), argsCaptor.capture()); assertEquals("SELECT * FROM location WHERE _id =?", stringArgumentCaptor.getValue()); assertEquals(1, argsCaptor.getValue().length); assertEquals("3734", argsCaptor.getValue()[0]); assertEquals(locationJson, stripTimezone(gson.toJson(location))); }
@Test public void evaluateSimpleSetPredicate(){ FieldName fruit = FieldName.create("fruit"); SimpleSetPredicate simpleSetPredicate = new SimpleSetPredicate(fruit, SimpleSetPredicate.BooleanOperator.IS_IN, new Array(Array.Type.STRING, "apple orange")); assertEquals(null, evaluate(simpleSetPredicate, fruit, null)); assertEquals(Boolean.TRUE, evaluate(simpleSetPredicate, fruit, "apple")); assertEquals(Boolean.FALSE, evaluate(simpleSetPredicate, fruit, "pineapple")); simpleSetPredicate.setBooleanOperator(SimpleSetPredicate.BooleanOperator.IS_NOT_IN); assertEquals(Boolean.FALSE, evaluate(simpleSetPredicate, fruit, "apple")); assertEquals(Boolean.TRUE, evaluate(simpleSetPredicate, fruit, "pineapple")); }
@Test(expectedExceptions = ClusterManagerInitilizationException.class) public void testGetPrestoClusterManagerInValidInstance() throws Exception { ClusterType type = ClusterType.PRESTO_CLUSTER_MANAGER; CacheConfig.setPrestoClusterManager(conf, TEST_DNE_CLUSTER_MANAGER); ClusterManager manager = bookKeeper.getClusterManagerInstance(type, conf); }
@Test public void createRepositoryGroupWithCfg() throws RepositoryException { RepositoryGroupConfiguration cfg = new RepositoryGroupConfiguration(); cfg.setId("group2"); cfg.setName("Group 2"); cfg.setCronExpression("0 0 03 ? * MON"); cfg.setMergedIndexTtl(504); cfg.setMergedIndexPath(".index-abc"); ArrayList<String> repos = new ArrayList<>(); repos.add("test01"); repos.add("test02"); cfg.setRepositories(repos); RepositoryGroup grp = provider.createRepositoryGroup(cfg); assertEquals("group2", grp.getId()); assertEquals("Group 2", grp.getName()); assertEquals("0 0 03 ? * MON", grp.getSchedulingDefinition()); IndexCreationFeature indexCreationFeature = grp.getFeature( IndexCreationFeature.class ).get(); try { assertEquals(new URI(".index-abc"), indexCreationFeature.getIndexPath()); } catch (URISyntaxException e) { e.printStackTrace(); } assertEquals(504, grp.getMergedIndexTTL()); assertEquals(0, grp.getRepositories().size()); }
@Test public void testExecuteFunctionArg1SuccessCase() throws Exception { Integer result = managedTransaction.executeFunction(this::callHelperWithReturn, testParam1); Assert.assertEquals(Integer.valueOf(1), result); verifyInteractionWithTransactionManagerSuccessCase(testParam1); }
@Test public void testConvertIllegalAccessException() throws Exception { doConvertResult = 2; exception.expect(JTransfoException.class); exception.expectMessage("NoAccess"); abstractConverter.convert(null, null); }
@Test public void testFromSystemProperties() throws IOException { System.getProperties().setProperty(XmlPropertyReader.CONFIG_PROPERTY, CONFIG_FILE1); assertNotNull(propertyReader.getConfigurationStream(null)); }
@Test public void testDecodingWeirdNames1() { String src = "path=; expires=Mon, 01-Jan-1990 00:00:00 GMT; path=/; domain=.www.google.com"; Cookie cookie = ClientCookieDecoder.STRICT.decode(src); assertEquals("path", cookie.name()); assertEquals("", cookie.value()); assertEquals("/", cookie.path()); }
@Test public void testGetNullTaskResult() throws Exception { when(future1.get()).thenReturn(null); exception.expectMessage(equalTo("Task result is null")); exception.expect(PromiseBrokenException.class); wrapper.get(); }
@RunWithCustomExecutor @Test public void should_get_empty_listing_when_listing_units_and_storage_returns_empty_response_ok() throws StorageServerClientException { when(storageClientFactory.getClient().getOfferLogs(STRATEGY_UNIT, DataCategory.UNIT, 100L, 2, Order.ASC)) .thenReturn(getListingOk(100L, -1L)); RestoreBackupService restoreBackupService = new RestoreBackupService(storageClientFactory); Iterator<OfferLog> res = restoreBackupService.getListing(STRATEGY_UNIT, DataCategory.UNIT, 100L, 2, Order.ASC, VitamConfiguration.getRestoreBulkSize()); assertThat(res).isNotNull().isEmpty(); }
@Test public void testParseDownloadableFont() throws IOException, XmlPullParserException { @SuppressLint("ResourceType") XmlResourceParser parser = mResources.getXml(R.font.samplexmldownloadedfont); FamilyResourceEntry result = FontResourcesParserCompat.parse(parser, mResources); assertNotNull(result); ProviderResourceEntry providerEntry = (ProviderResourceEntry) result; FontRequest request = providerEntry.getRequest(); assertEquals("androidx.core.provider.fonts.font", request.getProviderAuthority()); assertEquals("androidx.core.test", request.getProviderPackage()); assertEquals("singleFontFamily", request.getQuery()); }
@Test public void testExtractGroup1Match() { String matchingString = extractMatchingContent("Assay Bello", SAMPLE_COLUMN_HEADER_PATTERN); assertThat(matchingString, is(nullValue())); matchingString = extractMatchingContent("Assay Bello[assai]", SAMPLE_COLUMN_HEADER_PATTERN); assertThat(matchingString, is(nullValue())); matchingString = extractMatchingContent("Sample Characteristic[bello assai] ", SAMPLE_COLUMN_HEADER_PATTERN); assertThat(matchingString, is("bello assai")); matchingString = extractMatchingContent("Sample Characteristic[bello assai]", SAMPLE_COLUMN_HEADER_PATTERN); assertThat(matchingString, is("bello assai")); matchingString = extractMatchingContent("Sample Characteristic[bello assai]", SAMPLE_COLUMN_HEADER_PATTERN); assertThat(matchingString, is(nullValue())); }
@Test public void should_sort_ranges() throws Exception { Range first = range(from(2017, Calendar.AUGUST, 1), from(2017, Calendar.AUGUST, 3)); Range second = range(from(2017, Calendar.AUGUST, 1), from(2017, Calendar.AUGUST, 5)); Range third = range(from(2017, Calendar.AUGUST, 1), from(2017, Calendar.AUGUST, 7)); Range fourth = range(from(2017, Calendar.AUGUST, 10), from(2017, Calendar.AUGUST, 27)); List<Range> result = RangeSorter.sort(asList(second, first, third, fourth)); List<Range> expected = asList(first, second, third, fourth); assertEquals(expected, result); }
@Test public void tryToGetDeleteAttributeLiveCommandForCreateAttributeCommand() { final Command<?> commandMock = Mockito.mock(Command.class); assertThatExceptionOfType(ClassCastException.class) .isThrownBy(() -> DeleteAttributeLiveCommandImpl.of(commandMock)) .withMessageContaining(DeleteAttribute.class.getName()) .withNoCause(); }
@Test public void testNewObjectConfig() throws Exception { ClassWithMonitors obj = new ClassWithMonitors() { }; List<Monitor<?>> monitors = Monitors.newObjectMonitor(obj).getMonitors(); for (Monitor m : monitors) { assertEquals(m.getConfig().getTags().getValue("class"), "MonitorsTest", String.format("%s should have class MonitorsTest", m.getConfig().getName())); } assertEquals(monitors.size(), 8); }
@Test public void testCreateMirroringChild() { CommandProgressImpl cp = new CommandProgressImpl("first", "a"); cp.setTotalStepCount(2); ProgressStatusMirroringImpl ch1 = cp.createMirroringChild(1); assertNotNull(ch1); ProgressStatus ch2 = cp.createChild(1); assertNotNull(ch1); assertTrue(ch2 instanceof ProgressStatusImpl); }
@Test public void shouldFailIfNoReasonGiven() { CommonSender sender = plugin.getServer().getConsoleSender(); String[] args = new String[]{faker.internet().ipV6Address()}; assertFalse(cmd.onCommand(sender, new CommandParser(plugin, args, 1))); }
@Test public void testGetReplacements_1() throws Exception { LoggingKeyReplacement fixture = new LoggingKeyReplacement(); ScriptStep step = new ScriptStep(); String searchQuery = ""; String replaceString = ""; SearchMode searchMode = SearchMode.all; List<ReplaceEntity> result = fixture.getReplacements(step, searchQuery, replaceString, searchMode); assertNotNull(result); assertEquals(0, result.size()); }
@Test public void convert(@Mocked SwaggerInvocation swaggerInvocation, @Mocked InvocationException e) { Response response = converter.convert(swaggerInvocation, e); Assert.assertSame(e, response.getResult()); }
@Test public void then_doNothingOnActorThread_withoutListenerAndResult() throws Exception { Mockito.doThrow(new ResultListenerIsNotSpecifiedException()).when(mListener).onResult(Mockito.any()); PromiseImpl<Object> promise = new PromiseImpl<>(null, mCleaner); promise.then(mActorThread, mListener); Mockito.verify(mActorThread).bind(Mockito.same(ResultListener.class), mCaptor.capture()); Mockito.verify(mProxy).onResult(null); mCaptor.getValue().onResult(null); Mockito.verifyZeroInteractions(mCleaner); }
@Test public void createSpaceReference() { assertEquals(new SpaceReference("space", new WikiReference("wiki")), this.service.createSpaceReference("space", this.service.createWikiReference("wiki"))); SpaceReference spaceReference = new SpaceReference("C", new SpaceReference("B", new SpaceReference("A", new WikiReference("wiki")))); assertEquals(spaceReference, this.service.createSpaceReference(Arrays.asList("A", "B", "C"), this.service.createWikiReference("wiki"))); assertEquals(spaceReference, this.service.createSpaceReference(spaceReference.getName(), (SpaceReference) spaceReference.getParent())); }
@Test public void parseTask() throws IOException { InputStream in = MesosHTTPFetcherTest.class.getResourceAsStream("/master-tasks.json"); List<Map<String, Object>> result = MesosHTTPFetcher.parseTasks(in, "bcc4637f-34d7-4cab-8429-7146fabd7198-0001"); System.err.println(result); assertThat(result.size(), is(1)); assertThat(result.get(0).get("state"), is("TASK_FINISHED")); }
@Test(timeout = 10000) public void testGlobalUpdate() { SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo(); cli.globalUpdates("schedKey1=schedVal1,schedKey2=schedVal2", schedUpdateInfo); Map<String, String> globalInfo = schedUpdateInfo.getGlobalParams(); assertEquals(2, globalInfo.size()); assertEquals("schedVal1", globalInfo.get("schedKey1")); assertEquals("schedVal2", globalInfo.get("schedKey2")); }
@Test public void shouldCreateClassMapping2() { ClassMapping classMapping = classConverter.create(Actor.class); assertEquals("Actor", classMapping.getName()); assertEquals(Actor.class, classMapping.getClassInstance()); assertEquals(6, classMapping.getFields().size()); assertThat(classMapping.getFieldsName(), containsInAnyOrder("_id", "name", "age", "phones", "movieCharacter", "movieRating")); }
@Test public void aggregatedField_fieldAndClientExpression_clientQueryAggregatedField() { ClientQueryAggregatedField result = ClientQueryBuilder.aggregatedField(CLIENT_DATA_SOURCE_FIELD, CLIENT_EXPRESSION); assertEquals(CLIENT_NAME, result.getFieldReference()); assertEquals(CLIENT_EXPRESSION, result.getExpressionContainer().getObject()); }
@Test public void listFullList() { List<CveSearchData> result = cveSearchJsonParserList.apply(toBufferedReader(SEARCH_RESULT_FULL)); assert(result.size()==3); }
@Test public void testGetTabShownHandler() { final TabListItem tab = mock(TabListItem.class); final TabShownEvent event = mock(TabShownEvent.class); final TabPanelEntry tabPanelEntry = mock(TabPanelEntry.class); final TabPane tabPane = mock(TabPane.class); final PageViewImpl page = mock(PageViewImpl.class); final int pageIndex = 42; when(event.getTab()).thenReturn(tab); when(tabPanelEntry.getContentPane()).thenReturn(tabPane); when(tabPane.getWidget(0)).thenReturn(page); when(tab.getTabIndex()).thenReturn(pageIndex); doReturn(tabPanelEntry).when(view).findEntryForTabWidget(tab); view.enableSelectedPageEvent(selectedPageEvent); view.getTabShownHandler().onShown(event); verify(view).onResize(); verify(selectedPageEvent).fire(pageEvent.capture()); verify(page).onLostFocus(); assertEquals(pageIndex, pageEvent.getValue().getSelectedPage()); }
@Test public void testGenerateDeploymentWithOAuthWithMissingUri() { assertThrows(InvalidResourceException.class, () -> { KafkaBridge resource = new KafkaBridgeBuilder(this.resource) .editSpec() .withAuthentication( new KafkaClientAuthenticationOAuthBuilder() .withClientId("my-client-id") .withNewClientSecret() .withSecretName("my-secret-secret") .withKey("my-secret-key") .endClientSecret() .build()) .endSpec() .build(); KafkaBridgeCluster.fromCrd(resource, VERSIONS); }); }
@Test public void testListBuckets() throws B2Exception { final B2ListBucketsRequest request = B2ListBucketsRequest .builder(ACCOUNT_ID) .build(); webifier.listBuckets(ACCOUNT_AUTH, request); webApiClient.check("postJsonReturnJson.\n" + "url:\n" + " apiUrl1/b2api/v2/b2_list_buckets\n" + "headers:\n" + " Authorization: accountToken1\n" + " User-Agent: SecretAgentMan/3.19.28\n" + " X-Bz-Test-Mode: force_cap_exceeded\n" + "request:\n" + " {\n" + " \"accountId\": \"1\",\n" + " \"bucketId\": null,\n" + " \"bucketName\": null,\n" + " \"bucketTypes\": null\n" + " }\n" + "responseClass:\n" + " B2ListBucketsResponse\n" ); checkRequestCategory(OTHER, w -> w.listBuckets(ACCOUNT_AUTH, request)); }
@Test public void shouldHaveCachingStoreWhenEnabled() { final WindowStore<String, String> store = builder.withCachingEnabled().build(); final StateStore wrapped = ((WrappedStateStore) store).wrappedStore(); assertThat(store, instanceOf(MeteredWindowStore.class)); assertThat(wrapped, instanceOf(CachingWindowStore.class)); }
@Test public void getOxmFieldCode() { assertEquals("Wrong oxm-class", OxmMatchConstants.TUNNEL_ID, serializer.getOxmFieldCode()); }
@Test public void testListDataTypes() throws Exception { IRODSAccount irodsAccount = testingPropertiesHelper.buildIRODSAccountFromTestProperties(testingProperties); IRODSAccessObjectFactory accessObjectFactory = irodsFileSystem.getIRODSAccessObjectFactory(); IRODSFileFactory irodsFileFactory = accessObjectFactory.getIRODSFileFactory(irodsAccount); DataObjectAOImpl dataObjectAO = (DataObjectAOImpl) accessObjectFactory.getDataObjectAO(irodsAccount); List<String> dataTypes = dataObjectAO.listDataTypes(); Assert.assertNotNull("no data types returned", dataTypes); Assert.assertFalse("no data types returned", dataTypes.isEmpty()); }
@Test public void testNewInstance() { List<MockObject> keys = new ArrayList<>(); MockObject m1 = new MockObject(1); MockObject m2 = new MockObject(2); keys.add(m1); keys.add(m2); DoubleMapGenotype<MockObject> doubleMapGeno = new DoubleMapGenotype<>(keys, new MockBounds()); doubleMapGeno.init(new Random()); DoubleMapGenotype<MockObject> other = doubleMapGeno.newInstance(); assertNotEquals(doubleMapGeno, other); assertTrue(other.isEmpty()); }
@Test public void test1DigExpiresAtNotificationRow() { Expiration result = oracle.guess("1d"); assertEquals(Expiration.EXPRESSION, result); }
@Test public void testNoMatch() throws Exception { when(byteCodeElement.isVisibleTo(typeDescription)).thenReturn(false); assertThat(new VisibilityMatcher<ByteCodeElement>(typeDescription).matches(byteCodeElement), is(false)); verify(byteCodeElement).isVisibleTo(typeDescription); verifyNoMoreInteractions(byteCodeElement); verifyZeroInteractions(typeDescription); }
@Test public void testEquals() { assertFalse(getTestObject().equals(null)); assertFalse(getTestObject().equals("DummyString")); assertTrue(getTestObject().equals(getTestObject())); SchemaImplementationQuery sameObject = getTestObject(); assertTrue(sameObject.equals(sameObject)); }
@Test public void testDateRange() { RangePredicate<?> p = IndexQuery.range( propId, DateValue.date( 2014, 7, 7 ), true, DateValue.date( 2017,3, 7 ), false ); assertFalse( test( p, DateValue.date( 2014, 6, 8 ) ) ); assertTrue( test( p, DateValue.date( 2014, 7, 7 ) ) ); assertTrue( test( p, DateValue.date( 2016, 6, 8 ) ) ); assertFalse( test( p, DateValue.date( 2017, 3, 7 ) ) ); assertFalse( test( p, DateValue.date( 2017, 3, 8 ) ) ); assertFalse( test( p, LocalDateTimeValue.localDateTime( 2016, 3, 8, 0, 0, 0, 0 ) ) ); }
@Test public void compare() throws Exception { PsModel a = new TestModel("a"); PsModel b = new TestModel("b"); assertThat(myComparator.compare(a, b)).isLessThan(0); assertThat(myComparator.compare(b, a)).isGreaterThan(0); }
@Test public void transferCriticalData(){ when(currencyExchangeRepository.findOne(any(String.class))).thenReturn(new CurrencyExchange(ID_VALUE)); validateResult(converter.convert(buildYahooQuoteInstance())); verify(currencyExchangeRepository, times(1)).findOne(any(String.class)); }
@Test public void testIfNoRemoteConnections() { this.customizer.customize(); assertThat( this.fraction.subresources().servers()).isEmpty(); }
@Test public void testNothingInEtcd() throws Exception { etcdUpdater.init(); assertThat(flagInt.get(), is(flagInt.defaultValue())); assertThat(flagString.get(), is("cmdline_overwrite")); assertThat(flagMap.get(), is(flagMap.defaultValue())); }
@Test public void testGetSize() { for (int i = 0; i < 1000; i++) { ps.putInt(10000 * i, i); } assertEquals(1000, ps.getSize()); }
@Test public void should_throw_an_illegal_state_exception_as_the_functionsToExclude_parameter_is_not_valid() { try { ExperimentalNotLessFunctionCheck check = new ExperimentalNotLessFunctionCheck(); check.setFunctionsToExclude("("); CssCheckVerifier.issuesOnLessFile(check, CheckTestUtils.getLessTestFile("experimentalFunctionUsage.less")).noMore(); } catch (IllegalStateException e) { assertThat(e.getMessage()).isEqualTo("Check less:experimental-not-less-function-usage (Experimental functions should not be used): " + "functionsToExclude parameter \"(\" is not a valid regular expression."); } }
@Test public void testDS3() { Attribute attr = ds3.getAttribute(0); assertEquals(1.2, attr.statistics(StatsNum.RANGE), DELTA); assertEquals(2.0, attr.statistics(StatsNum.Q1), DELTA); assertEquals(2.4, attr.statistics(StatsNum.MEDIAN), DELTA); assertEquals(2.9, attr.statistics(StatsNum.Q3), DELTA); assertEquals(0.18367346938775508, attr.statistics(StatsNum.QCD), DELTA); }
@Test public void newValues_modify_delete() { subject = new PreparedUpdate( update, RpslObject.parse("" + "inetnum: 10.0.0.0\n" + "mnt-by: DEV-MNT-1\n"), RpslObject.parse("" + "inetnum: 10.0.0.0\n" + "mnt-by: DEV-MNT-1\n"), Action.DELETE); final Set<CIString> newValues = subject.getNewValues(AttributeType.MNT_BY); assertThat(newValues, hasSize(0)); }
@Test public void testOpenOutputStream() throws IOException { File targetFile = temporaryFolder.newFile("targetFile.txt"); FileOutputStream outputStream = FileUtils.openOutputStream(targetFile, true); Assert.assertNotNull(outputStream); outputStream.close(); }
@Test public void test_1s() { assertTrue(Yatzy.ones(1,2,3,4,5) == 1); assertEquals(2, Yatzy.ones(1,2,1,4,5)); assertEquals(0, Yatzy.ones(6,2,2,4,5)); assertEquals(4, Yatzy.ones(1,2,1,1,1)); }
@Test public void testSetReportProcessor() throws Exception { Assert.assertNull( pageableHTMLOutput.getReportProcessor() ); PageableReportProcessor mockProcessor = mock( PageableReportProcessor.class ); pageableHTMLOutput.setReportProcessor( mockProcessor ); Assert.assertEquals( mockProcessor, pageableHTMLOutput.getReportProcessor() ); }
@Test public void clear() { MockElement element = new MockElement("theme1", "theme2"); ThemeListImpl themeList = new ThemeListImpl(element); themeList.clear(); assertTrue("ThemeList should be empty after it's cleared", themeList.isEmpty()); assertNull( "If corresponding ThemeList is cleared, no themes should be preset in the corresponding element", element.getAttribute(ThemeListImpl.THEME_ATTRIBUTE_NAME)); }
@Test void fixMessageInconsistenciesShouldUpdateContextWhenOrphanImapUidMessage() { Context context = new Context(); imapUidDAO.insert(MESSAGE_1).block(); testee.fixMessageInconsistencies(context, RunningOptions.DEFAULT).block(); assertThat(context.snapshot()) .isEqualTo(Context.Snapshot.builder() .processedImapUidEntries(1) .addedMessageIdEntries(1) .addFixedInconsistencies(MESSAGE_1.getComposedMessageId()) .build()); }
@Test public void testPrintWithPrefix_shouldPrintStringWithPrefix() throws Exception { String s = OutputStreamFormater.formatValues(9, "id", "status"); assertThat(s, equalTo(" \u001B[1mid \u001B[m status")); }
@Test public void testCreateResult() { PartitioningWithPositiveAndNegativeEdges<String> clusterer = new PartitioningWithPositiveAndNegativeEdges<>(0.0); clusterer.setLog(true); clusterer.addEdge(new Triple<String, String, Double>("1", "2", 0.67)); clusterer.addEdge(new Triple<String, String, Double>("1", "3", 0.5)); clusterer.addEdge(new Triple<String, String, Double>("1", "3", -0.5)); clusterer.addEdge(new Triple<String, String, Double>("1", "4", -0.7)); clusterer.addEdge(new Triple<String, String, Double>("2", "3", 0.33)); clusterer.addEdge(new Triple<String, String, Double>("2", "3", -0.33)); clusterer.addEdge(new Triple<String, String, Double>("2", "5", 0.67)); clusterer.addEdge(new Triple<String, String, Double>("3", "4", 0.7)); clusterer.addEdge(new Triple<String, String, Double>("3", "5", 0.8)); clusterer.addEdge(new Triple<String, String, Double>("4", "5", 0.6)); clusterer.addEdge(new Triple<String, String, Double>("2", "1", 0.67)); clusterer.addEdge(new Triple<String, String, Double>("3", "1", 0.5)); clusterer.addEdge(new Triple<String, String, Double>("3", "1", -0.5)); clusterer.addEdge(new Triple<String, String, Double>("4", "1", -0.7)); clusterer.addEdge(new Triple<String, String, Double>("3", "2", 0.33)); clusterer.addEdge(new Triple<String, String, Double>("3", "2", -0.33)); clusterer.addEdge(new Triple<String, String, Double>("5", "2", 0.67)); clusterer.addEdge(new Triple<String, String, Double>("4", "3", 0.7)); clusterer.addEdge(new Triple<String, String, Double>("5", "3", 0.8)); clusterer.addEdge(new Triple<String, String, Double>("5", "4", 0.6)); Map<Collection<String>, String> clustering = clusterer.createResult(); for(Collection<String> cluster : clustering.keySet()) { logger.info(StringUtils.join(cluster, ",")); } assertTrue(Q.toSet(Q.toSet("1", "2"), Q.toSet("3", "4", "5")).equals(clustering.keySet())); }
@Test(expected=IllegalArgumentException.class) public void testInvalidR01() { Color.fromRGB(-1, 0x00, 0x00); }
@Test public void testContainerRetries() throws Exception { DefaultProviderService providerService = new DefaultProviderService(); AbstractLauncher mockLauncher = mock(AbstractLauncher.class); ContainerLaunchService.ComponentLaunchContext componentLaunchContext = mock(ContainerLaunchService.ComponentLaunchContext.class); ComponentInstance componentInstance = mock(ComponentInstance.class); Component component = mock(Component.class); when(componentInstance.getComponent()).thenReturn(component); when(component.getRestartPolicyHandler()).thenReturn(NeverRestartPolicy .getInstance()); providerService.buildContainerRetry(mockLauncher, getConfig(), componentLaunchContext, componentInstance); verifyZeroInteractions(mockLauncher); when(component.getRestartPolicyHandler()).thenReturn(OnFailureRestartPolicy .getInstance()); when(componentLaunchContext.getConfiguration()).thenReturn(new Configuration()); providerService.buildContainerRetry(mockLauncher, getConfig(), componentLaunchContext, componentInstance); verify(mockLauncher).setRetryContext(DEFAULT_CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL); reset(mockLauncher); when(component.getRestartPolicyHandler()).thenReturn(AlwaysRestartPolicy .getInstance()); providerService.buildContainerRetry(mockLauncher, getConfig(), componentLaunchContext, componentInstance); verify(mockLauncher).setRetryContext(DEFAULT_CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL); }
@Test public void testTokenizeSingleQuoted() { final List<String> arguments = JarHandlerUtils.tokenizeArguments("--foo 'bar baz '"); assertThat(arguments.get(0), equalTo("--foo")); assertThat(arguments.get(1), equalTo("bar baz ")); }
@Test public void shouldNotOverlapIfOtherWindowIsBeforeThisWindow() { assertFalse(window.overlap(new SessionWindow(0, 25))); assertFalse(window.overlap(new SessionWindow(0, start - 1))); assertFalse(window.overlap(new SessionWindow(start - 1, start - 1))); }
@Test public void testQuantityDecodeLeadingZero() { assertThat(Numeric.decodeQuantity("0x0400"), equalTo(BigInteger.valueOf(1024L))); assertThat(Numeric.decodeQuantity("0x001"), equalTo(BigInteger.valueOf(1L))); }
@Test public void testOwner() throws TaskPermissionsException { when(permission.isOwnerPermission()).thenReturn(Boolean.TRUE); victim.ensureOwnerPermissions(); }
@Test public void testUnpackTwoTagReverted() { instance.unpack("03007ValueAb02008ValueXyZ"); assertAll( () -> assertEquals(2, instance.size()), () -> assertEquals("02", instance.get("02").getTagId()), () -> assertEquals("ValueXyZ", instance.get("02").getValue()), () -> assertEquals("03", instance.get("03").getTagId()), () -> assertEquals("ValueAb", instance.get("03").getValue()) ); }
@Test public void testEquals() { HaGroupPool obj = _builder.build(); new EqualsTester() .addEqualityGroup(obj, obj, _builder.build()) .addEqualityGroup(_builder.setName("n2").build()) .addEqualityGroup(_builder.setWeight(null).build()) .addEqualityGroup(new Object()) .testEquals(); }
@Test public void testDoctypeInternalWithText() throws BadLocationException { String content = "<!DOCTYPE note\r\n" + "[\r\n" + " <!ELEMENT note (to,from,heading,body)>\r\n" + "\r\n" + "\r\n" + " garbageazg df\r\n" + " gdf\r\n" + "garbageazgdfg\r\n" + " df\r\n" + " gd\r\n" + "\r\n" + "\r\n" + " \r\n" + " <!ELEMENT note (to,from,heading,body)>\r\n" + " \r\n" + "]>"; String expected = "<!DOCTYPE note [\r\n" + " <!ELEMENT note (to,from,heading,body)>\r\n" + " garbageazg df\r\n" + " gdf\r\n" + "garbageazgdfg\r\n" + " df\r\n" + " gd\r\n" + " <!ELEMENT note (to,from,heading,body)>\r\n" + "]>"; format(content, expected); }
@Test void testReadUntilNullThrowsIfNoNullIsFound() { ByteBuffer bb = ByteBuffer.allocate(3); byte[] b = new byte[] { 'H', 'D', 'F' }; bb.put(b); bb.rewind(); assertThrows(IllegalArgumentException.class, () -> Utils.readUntilNull(bb)); }
@SuppressWarnings("unchecked") @Test public void testHandleContainerStatusInvalidCompletions() throws Exception { rm = new MockRM(new YarnConfiguration()); rm.start(); EventHandler handler = spy(rm.getRMContext().getDispatcher().getEventHandler()); RMApp app = rm.submitApp(1024, true); NMContainerStatus report = NMContainerStatus.newInstance( ContainerId.newContainerId( ApplicationAttemptId.newInstance(app.getApplicationId(), 2), 1), ContainerState.COMPLETE, Resource.newInstance(1024, 1), "Dummy Completed", 0, Priority.newInstance(10), 1234); rm.getResourceTrackerService().handleNMContainerStatus(report, null); verify(handler, never()).handle((Event) any()); RMAppAttemptImpl currentAttempt = (RMAppAttemptImpl) app.getCurrentAppAttempt(); currentAttempt.setMasterContainer(null); report = NMContainerStatus.newInstance( ContainerId.newContainerId(currentAttempt.getAppAttemptId(), 0), ContainerState.COMPLETE, Resource.newInstance(1024, 1), "Dummy Completed", 0, Priority.newInstance(10), 1234); rm.getResourceTrackerService().handleNMContainerStatus(report, null); verify(handler, never()).handle((Event)any()); app = rm.submitApp(1024); report = NMContainerStatus.newInstance( ContainerId.newContainerId( ApplicationAttemptId.newInstance(app.getApplicationId(), 2), 1), ContainerState.COMPLETE, Resource.newInstance(1024, 1), "Dummy Completed", 0, Priority.newInstance(10), 1234); try { rm.getResourceTrackerService().handleNMContainerStatus(report, null); } catch (Exception e) { } verify(handler, never()).handle((Event)any()); currentAttempt = (RMAppAttemptImpl) app.getCurrentAppAttempt(); currentAttempt.setMasterContainer(null); report = NMContainerStatus.newInstance( ContainerId.newContainerId(currentAttempt.getAppAttemptId(), 0), ContainerState.COMPLETE, Resource.newInstance(1024, 1), "Dummy Completed", 0, Priority.newInstance(10), 1234); try { rm.getResourceTrackerService().handleNMContainerStatus(report, null); } catch (Exception e) { } verify(handler, never()).handle((Event)any()); }
@Test public void normalizeFormNameTest() { assertThat(normalizeFormName(null, false), is(nullValue())); assertThat(normalizeFormName("Lorem", false), is("Lorem")); assertThat(normalizeFormName("Lorem ipsum", false), is("Lorem ipsum")); assertThat(normalizeFormName("Lorem\nipsum", false), is("Lorem ipsum")); assertThat(normalizeFormName("Lorem\n\nipsum", false), is("Lorem ipsum")); assertThat(normalizeFormName("\nLorem\nipsum\n", false), is(" Lorem ipsum ")); assertThat(normalizeFormName(null, true), is(nullValue())); assertThat(normalizeFormName("Lorem", true), is(nullValue())); assertThat(normalizeFormName("Lorem ipsum", true), is(nullValue())); assertThat(normalizeFormName("Lorem\nipsum", true), is("Lorem ipsum")); assertThat(normalizeFormName("Lorem\n\nipsum", true), is("Lorem ipsum")); assertThat(normalizeFormName("\nLorem\nipsum\n", true), is(" Lorem ipsum ")); }
@Test public void testGoodLocalPreference() throws Exception { PathAttributeConfiguration pac = parser.parseConfiguration(config.configurationAt("PathAttributes(0)")); Assert.assertEquals(1, pac.getAttributes().size()); Iterator<PathAttribute> it = pac.getAttributes().iterator(); PathAttribute pa = it.next(); Assert.assertEquals(LocalPrefPathAttribute.class, pa.getClass()); Assert.assertEquals(100, ((LocalPrefPathAttribute)pa).getLocalPreference()); }
@Test public void getRegionFactory() throws Exception { config.setType(RegionType.REPLICATE); config.setDiskStoreName("diskstore"); config.setKeyConstraint("java.lang.String"); config.setValueConstraint("java.lang.Boolean"); realizer.create(config, cache); verify(regionFactory).setKeyConstraint(String.class); verify(regionFactory).setValueConstraint(Boolean.class); verify(regionFactory).setDiskStoreName("diskstore"); verify(regionFactory).setDataPolicy(DataPolicy.REPLICATE); }
@Test public void testPopulateEmail() { when(addressDataMock.getEmail()).thenReturn(EMAIL_ADDRESS); testObj.populate(addressDataMock, addressModelMock); verify(addressModelMock).setEmail(EMAIL_ADDRESS); }
@Test public void Test3() { int[] nums = {1, 2, 3, 4, 5, 6}; ListNode head = ListNode.constructLinkedList(nums); ListNode actual = solution.sortList(head); int[] exps = {1, 2, 3, 4, 5, 6}; ListNode expected = ListNode.constructLinkedList(exps); assertTrue(ListNode.isSameList(actual, expected)); }
@Test public void testSerialize() throws IOException { ObjectOutput objectOutput = fstSerialization.serialize(null, mock(OutputStream.class)); assertThat(objectOutput, Matchers.<ObjectOutput>instanceOf(FstObjectOutput.class)); }
@Test public void getType() { assertEquals(PublicContentSectionType.SUPPORTING_INFORMATION, populator.getType()); }
@Test public void beginTest() throws Exception { String xid = core.begin(applicationId, txServiceGroup, txName, timeout); globalSession = SessionHolder.findGlobalSession(xid); Assertions.assertNotNull(globalSession); }
@Test public void onPinchTest() { cameraKitView.setGestureListener(mockGestureListener); cameraKitView.onPinch(TEST_DS, TEST_DSX, TEST_DSY); }
@Test public void test00() throws Exception { pipeResource("00"); Solution.main(null); assertEquals(getResult("YES"), this.output.toString()); }
@Test public void getParentNode_parentNodeIsNull() { ShadowRoot root = createParentNode(); Assert.assertNull(root.getParentNode()); }
@Test public void testGetOneLatestIndex() throws IOException { String[] existingIndices = new String[] { "bro_index_2017.10.03.19", "bro_index_2017.10.03.20", "bro_index_2017.10.03.21", "snort_index_2017.10.03.19", "snort_index_2017.10.03.20", "snort_index_2017.10.03.21" }; ElasticsearchColumnMetadataDao dao = setup(existingIndices); List<String> args = Collections.singletonList("bro"); String[] actual = dao.getLatestIndices(args); String [] expected = new String[] { "bro_index_2017.10.03.21" }; assertArrayEquals(expected, actual); }
@Test public void should_not_be_activated_when_terminal_is_dumb() { env.set("TERM", "dumb"); assertThat(ColorActivation.isActivated()).isFalse(); }
@Test public void testToString() throws Exception { final String[] wizardNames = {"Gandalf", "Dumbledore", "Oz", "Merlin"}; for (String name : wizardNames) { assertEquals(name, new Wizard(name).toString()); } }
@Test public void getSocketInentAddress_returns_unresolved_SocketAddress() { HostAndPort locator1 = new HostAndPort("fakelocalhost", 8090); InetSocketAddress actual = locator1.getSocketInetAddress(); assertThat(actual.isUnresolved()) .as("Hostname resolved unexpectedly. Check for DNS hijacking in addition to code errors.") .isTrue(); }
@Test public void testMultipleConsumersMixedTopics() { Map<String, Integer> partitionsPerTopic = setupPartitionsPerTopicWithTwoTopics(3, 2); Map<String, Subscription> consumers = new HashMap<>(); consumers.put(consumer1, new Subscription(topics(topic1))); consumers.put(consumer2, new Subscription(topics(topic1, topic2))); consumers.put(consumer3, new Subscription(topics(topic1))); Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, consumers); assertAssignment(partitions(tp(topic1, 0)), assignment.get(consumer1)); assertAssignment(partitions(tp(topic1, 1), tp(topic2, 0), tp(topic2, 1)), assignment.get(consumer2)); assertAssignment(partitions(tp(topic1, 2)), assignment.get(consumer3)); }
@Test public void get_table_column_statistics() throws TException { ColumnStatistics columnStatistics = new ColumnStatistics(); ColumnStatistics outboundColumnStatistics = new ColumnStatistics(); when(primaryClient.get_table_column_statistics(DB_P, "table", "columnName")).thenReturn(columnStatistics); when(primaryMapping.transformOutboundColumnStatistics(columnStatistics)).thenReturn(outboundColumnStatistics); ColumnStatistics result = handler.get_table_column_statistics(DB_P, "table", "columnName"); assertThat(result, is(outboundColumnStatistics)); }
@Test public void shouldReturnTrueIfSetIsNull() { assertThat(out.isLookupNeeded(null), is(true)); }
@Test public void testInvalidAcls() { AclParser p = new AclParser(); try { p.parseAcls("test", "guest"); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } p = new AclParser(); try { p.parseAcls("test", "guest;;"); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } p = new AclParser(); try { p.parseAcls("test", ";;"); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } p = new AclParser(); try { p.parseAcls("test", ";"); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } p = new AclParser(); try { p.parseAcls("test", "guest;"); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } p = new AclParser(); try { p.parseAcls("test", ";admins"); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } p = new AclParser(); try { p.parseAcls("test", ""); fail("Invalid acl should have thrown InvalidACLException."); } catch (InvalidACLException sle) { assertEquals("Invalid ACLs specified for requested resource: test", sle.getMessage()); } }
@Test public void testRefresh() throws Exception { ProfilesConfigFile profilesConfigFileBeforeRefresh = new ProfilesConfigFile(getLocationForTestFile("BasicProfile.tst")); File profilesFile = File.createTempFile("UpdatableProfile", ".tst"); ProfilesConfigFileWriter.dumpToFile(profilesFile, true, profilesConfigFileBeforeRefresh.getAllProfiles().values().toArray(new Profile[1])); ProfileCredentialsProvider profileCredentialsProvider = new ProfileCredentialsProvider(profilesFile.getPath(), null); Thread.sleep(1000); ProfilesConfigFile profilesConfigFileAfterRefresh = new ProfilesConfigFile(getLocationForTestFile("BasicProfile2.tst")); ProfilesConfigFileWriter.dumpToFile(profilesFile, true, profilesConfigFileAfterRefresh.getAllProfiles().values().toArray(new Profile[1])); profileCredentialsProvider.setRefreshIntervalNanos(1l); AWSCredentials credentialsAfterRefresh = profileCredentialsProvider.getCredentials(); Assert.assertEquals("credentialsAfterRefresh AWSAccessKeyId", "accessKey2", credentialsAfterRefresh.getAWSAccessKeyId()); Assert.assertEquals("credentialsAfterRefresh AWSSecretKey", "secretAccessKey2", credentialsAfterRefresh.getAWSSecretKey()); }
@Test public void whenInstanceProfileCredentialsInMetadataServiceReturnMapCredentials() throws Exception { server.enqueue(new MockResponse().setBody("route53-readonly")); server.enqueue(new MockResponse().setBody(securityCredentials)); Map<String, String> sessionCredentials = new LinkedHashMap<String, String>(); sessionCredentials.put("accessKey", "AAAAA"); sessionCredentials.put("secretKey", "SSSSSSS"); sessionCredentials.put("sessionToken", "TTTTTTT"); assertThat(new InstanceProfileCredentialsProvider( new ReadFirstInstanceProfileCredentialsOrNull(server .getUrl( InstanceMetadataHook.DEFAULT_URI .getPath()) .toURI())).get( new Route53Provider())) .isEqualTo(MapCredentials.from(sessionCredentials)); assertThat(server.takeRequest()).hasPath("/latest/meta-data/iam/security-credentials/"); assertThat(server.takeRequest()) .hasPath("/latest/meta-data/iam/security-credentials/route53-readonly"); }
@Test public void shouldAddNewWidget() throws Exception { WidgetRequest widgetRequest = getWidgetRequest1(); when(groupManager.getGroup(widgetRequest.getGroup())).thenReturn(mock(Group.class)); WidgetDto widgetDto = widgetService.addWidget(widgetRequest); ArgumentCaptor<WidgetType> argumentCaptor = ArgumentCaptor.forClass(WidgetType.class); verify(widgetManager).addWidgetType(argumentCaptor.capture()); WidgetType argument = argumentCaptor.getValue(); assertThat(argument.getCode()).isEqualTo(widgetRequest.getCode()); assertThat(argument.getConfigUi()).isEqualTo(objectMapper.writeValueAsString(widgetRequest.getConfigUi())); assertThat(argument.getBundleId()).isEqualTo(widgetRequest.getBundleId()); assertThat(widgetDto.getCode()).isEqualTo(widgetRequest.getCode()); assertThat(widgetDto.getConfigUi()).isEqualTo(widgetRequest.getConfigUi()); assertThat(widgetDto.getBundleId()).isEqualTo(widgetRequest.getBundleId()); }
@Test public void reserveConnection_oneConnectionLeft_returnsConnection() throws SQLException { try { connectionPool.reserveConnection(); } catch (SQLException e) { e.printStackTrace(); fail("Exception before all connections used! " + e.getMessage()); } Connection conn = connectionPool.reserveConnection(); assertNotNull(conn); }
@Test public void testObjectsNotEqual() throws InterruptedException { Calendar instance = Calendar.getInstance(); Calendar copy = Calendar.getInstance(); copy.set(Calendar.YEAR, 1980); Assert.assertTrue(!CompareUtil.compareObjectsAndNull(instance, copy)); }
@Test public void testGetSplitsNoArgument() throws IOException { logger.info("testGetSplitsNoArgument called..."); setSplitsCacheDir(); setupConfiguration(); try { MetadataTableSplits uut = new MetadataTableSplits(createMockJobConf()); Assert.assertNotNull("MetadataTableSplits constructor failed to construct an instance.", uut); Map<String,List<Text>> resultsSet = uut.getSplits(); Assert.assertNotNull("MetadataTableSplits#getSplits() failed created a map of tables and their splits", resultsSet); Assert.assertFalse("MetadataTableSplits#getSplits() incorrectly populated map of tables and their splits", resultsSet.isEmpty()); Assert.assertEquals("MetadataTableSplits#getSplits() incorrectly populated map of tables and their splits", 3, resultsSet.size()); List<Text> listings = resultsSet.get("shard"); Assert.assertNotNull("MetadataTableSplits#getSplits() failed to a list of splits", listings); Assert.assertFalse("MetadataTableSplits#getSplits() incorrectly populated the list of splits", listings.isEmpty()); Assert.assertEquals("MetadataTableSplits#getSplits() incorrectly populated the list of splits", 5, listings.size()); listings = resultsSet.get("shard1"); Assert.assertNotNull("MetadataTableSplits#getSplits() failed to a list of splits", listings); Assert.assertFalse("MetadataTableSplits#getSplits() incorrectly populated the list of splits", listings.isEmpty()); Assert.assertEquals("MetadataTableSplits#getSplits() incorrectly populated the list of splits", 1, listings.size()); } finally { logger.info("testGetSplitsNoArgument completed."); } }
@Test public void testEvaluateWhenConditionIsNotShouldReturnFalse() { List<Condition> conditionList = new ArrayList<>(); conditionList.add(simpleCondition); conditionList.add(simpleCondition); compositeCondition = new CompositeCondition(ConditionType.NOT, conditionList); given(conditionChecker.checkCondition(request, parameterMap)).willReturn(true); boolean actual = underTest.evaluate(compositeCondition, request); assertEquals(actual, false); }
@Test public void testGetOutputFeedNames() throws Exception { Assert.assertEquals(context.getOutputFeedNames(), OUTPUT_FEED_NAMES); }
@Test public void testParseNotMatchingStartingUrl() { UrlTemplate urlParametersTemplate = new UrlTemplate("/abc/{param1}/def/{param2}{?/param3}"); assertThat(getParameterNames(urlParametersTemplate)).containsExactly("param1", "param2", "param3"); assertThat(getParameterOptionals(urlParametersTemplate)).containsExactly(false, false, true); ParsedUrlTemplate parsed = urlParametersTemplate.parse("/abc/v1/def/v2/v3/ghi"); assertThat(parsed.matches()).isFalse(); assertThat(parsed.parameters()).isEmpty(); }
@Test public void testLogErrorAndThrow() { Exception e = new Exception("err"); AtomicBoolean b = new AtomicBoolean(); CompletionException completionException = DeferredUtils.logErrorAndThrow(e, t -> { b.set(true); return "-"; }, getClass()); assertNotNull(completionException); assertNotSame(e, completionException); assertTrue(b.get()); }
@Test public void testScanJar() { try { List<Class<?>> classes = new ArrayList<>(); ClassUtils.getClassesWithAnnotation( "org.junit.runner.notification", RunListener.ThreadSafe.class, classes::add ); assertThat(classes.size(), greaterThan(0)); } catch (ClassLoadingException e) { e.printStackTrace(); } }
@Test public void testListAllWithoutFilter() throws IOException { List<FileStatus> statuses = FileSystemUtil.listAll(fs, new Path(base, "a"), false); assertEquals("Directory and file count should match", 4, statuses.size()); }
@Test public void constrain_to_falsy() { Optional<ProgramState> constrainedStates = relationalValue.constrainDependencies(state, Constraint.FALSY); assertThat(constrainedStates.isPresent()).isTrue(); assertThat(constrainedStates.get().relations()).containsOnly(new Relation(Kind.GREATER_THAN_OR_EQUAL_TO, sv1, sv2)); }
@Test public void testConditionalEntropy() throws Exception { Configuration configuration = new Configuration(); FileSystem fileSystem = FileSystem.get(configuration); Path input = getTestTempFilePath("input"); Path output = getTestTempFilePath("output"); String[] keys = { "Math", "History", "CS", "Math", "Math", "CS", "History", "Math" }; String[] values = { "Yes", "No", "Yes", "No", "No", "Yes", "No", "Yes" }; SequenceFile.Writer writer = new SequenceFile.Writer(fileSystem, configuration, input, Text.class, Text.class); try { for (int i = 0; i < keys.length; i++) { writer.append(new Text(keys[i]), new Text(values[i])); } } finally { Closeables.closeQuietly(writer); } Tool job = new ConditionalEntropy(); String[] args = { "-i", input.toString(), "-o", output.toString() }; ToolRunner.run(job, args); Iterator<DoubleWritable> iteratorNodes = new SequenceFileDirValueIterator<DoubleWritable>(output, PathType.LIST, PathFilters.logsCRCFilter(), null, false, new Configuration()); while (iteratorNodes.hasNext()) { assertEquals(0.5, iteratorNodes.next().get(), EPSILON); } }
@Test public void testParsing() { FakeContext context = new FakeContext().setBody( "<Data>" + "<name>wisdom</name>" + "<age>2</age>" + "<friends>" + "<friend>clement</friend>" + "<friend>jonathan</friend>" + "</friends>" + "</Data>"); Data data = parser.invoke(context, Data.class); assertThat(data.getName()).isEqualTo("wisdom"); assertThat(data.getFriends()).containsExactly("clement", "jonathan"); assertThat(data.getAge()).isEqualTo(2); }
@Test public void testImportContentIgnoresInvalidReferences() throws Exception { Mockito.doThrow( PortalException.class ).when( _dlAppLocalService ).getFileEntry( _FILE_ENTRY_ID_1 ); String content = "<img export-import-path=\"PATH_" + _FILE_ENTRY_ID_1 + "\" />"; Assert.assertEquals( content, _amImageHTMLExportImportContentProcessor. replaceImportContentReferences( _portletDataContext, _stagedModel, content)); }
@Test public void testToByteArray_OP_PUSHDATA4() { byte[] bytes = new byte[0x0102]; RANDOM.nextBytes(bytes); byte[] expected = Arrays.concatenate(new byte[] { OP_PUSHDATA4, 0x02, 0x01, 0x00, 0x00 }, bytes); byte[] actual = new ScriptChunk(OP_PUSHDATA4, bytes).toByteArray(); assertArrayEquals(expected, actual); }
@Test void runShouldAbortAfterRenewDeadlineExpired() throws Exception { final Long renewDeadlineMillis = 1000L; final ExecutorService executor = Executors.newSingleThreadExecutor(); final CountDownLatch signal = new CountDownLatch(1); final LeaderElectionConfig lec = mockLeaderElectionConfiguration(); when(lec.getRenewDeadline()).thenReturn(Duration.ofMillis(renewDeadlineMillis)); final Lock mockedLock = lec.getLock(); doNothing().doAnswer(invocation -> { Thread.sleep(renewDeadlineMillis*2); return null; }).when(mockedLock).update(any(), any()); executor.submit(() -> { new LeaderElector<>(mock(DefaultKubernetesClient.class), lec).run(); signal.countDown(); }); signal.await(10, TimeUnit.SECONDS); assertEquals(0, signal.getCount()); verify(mockedLock, atLeast(2)).get(any()); verify(mockedLock, times(1)).create(any(), any()); verify(mockedLock, atLeast(2)).update(any(), any()); verify(lec.getLeaderCallbacks(), atLeast(1)).onNewLeader(eq("1337")); verify(lec.getLeaderCallbacks(), times(1)).onStartLeading(); verify(lec.getLeaderCallbacks(), times(1)).onStopLeading(); executor.shutdownNow(); }
@Test( expected = NullPointerException.class ) public void testRemoveElementException() { CrosstabOtherGroup crosstab = new CrosstabOtherGroup(); crosstab.removeElement( null ); }
@Test public void visitOnlyNode_hasDescendants_nodeAndDescendatnsAreVisited() { TestNodeVisitor visitor = new TestNodeVisitor(true); Map<Node<?>, ElementType> map = new HashMap<>(); ShadowRoot subject = createHierarchy(map); ShadowRootStateProvider.get().visit(subject.getNode(), visitor); Assert.assertTrue(map.size() > 1); Assert.assertEquals( "The collected descendants doesn't match expected descendatns", map, visitor.getVisited()); }
@Test void shouldLoadIssueTest() throws EntityNotFoundException { Attachment attachment = new Attachment(); attachment.setPath(TEST_PATH); attachment.setOwner(USER_NAME); IssueComment comment = IssueComment .builder() .author(USER_NAME) .text(TEST_DESCRIPTION) .build(); EntityVO entity = new EntityVO(1L, AclClass.TOOL); Issue expectedIssue = Issue .builder() .id(1L) .name(TEST_NAME) .text(TEST_DESCRIPTION) .status(IssueStatus.OPEN) .labels(Collections.singletonList(TEST_LABEL)) .attachments(Collections.singletonList(attachment)) .comments(Collections.singletonList(comment)) .entity(entity) .author(TEST_NAME) .build(); IssueLoader issueLoader = new IssueLoader(apiClient); when(apiClient.loadIssue(anyLong())).thenReturn(expectedIssue); Optional<EntityContainer<Issue>> container = issueLoader.loadEntity(1L); EntityContainer<Issue> issueEntityContainer = container.orElseThrow(AssertionError::new); Issue actualIssue = issueEntityContainer.getEntity(); assertNotNull(actualIssue); verifyIssue(expectedIssue, actualIssue); verifyPipelineUser(issueEntityContainer.getOwner()); verifyPermissions(PERMISSIONS_CONTAINER_WITH_OWNER, issueEntityContainer.getPermissions()); verifyMetadata(EXPECTED_METADATA, new ArrayList<>(issueEntityContainer.getMetadata().values())); }
@Test public void testHandlingApplicationFinishedEvent() throws IOException { DeletionService delService = new DeletionService(null); NonAggregatingLogHandler aggregatingLogHandler = new NonAggregatingLogHandler(new InlineDispatcher(), delService, dirsHandler, new NMNullStateStoreService()); dirsHandler.init(conf); dirsHandler.start(); delService.init(conf); delService.start(); aggregatingLogHandler.init(conf); aggregatingLogHandler.start(); aggregatingLogHandler.handle(new LogHandlerAppFinishedEvent(appId)); aggregatingLogHandler.stop(); aggregatingLogHandler.handle(new LogHandlerAppFinishedEvent(appId)); aggregatingLogHandler.close(); }
@Test public void getRemainingDays_past() { String someDate = "20.03.04"; int days = DateUtil.getRemainingDays(someDate, 3); System.out.println("getRemainingDays: " + days); assertTrue(days < 0); }
@Test public void display() { when(this.xWiki.getCurrentContentSyntaxId(any())).thenReturn("xwiki/2.0"); this.document.setSyntax(Syntax.XWIKI_2_0); assertEquals("string", this.document.display("string", "view", this.oldcore.getXWikiContext())); assertEquals( "{{html clean=\"false\" wiki=\"false\"}}<input size='30' id='Space.Page_0_string' value='string' name='Space.Page_0_string' type='text'/>{{/html}}", this.document.display("string", "edit", this.oldcore.getXWikiContext())); assertEquals("{{html clean=\"false\" wiki=\"false\"}}<p>area</p>{{/html}}", this.document.display("area", "view", this.oldcore.getXWikiContext())); }
@Test public void encoderDelegatesGoAwayToLifeCycleManager() { ChannelPromise promise = newPromise(); encoder.writeGoAway(ctx, STREAM_ID, Http2Error.INTERNAL_ERROR.code(), null, promise); verify(lifecycleManager).goAway(eq(ctx), eq(STREAM_ID), eq(Http2Error.INTERNAL_ERROR.code()), eq((ByteBuf) null), eq(promise)); verifyNoMoreInteractions(writer); }
@Test public void testGetRelativeFile() { assertEquals(RELATIVE_INSIDE, Files2.getRelativeFile(PATHS, RELATIVE_INSIDE)); assertSame(RELATIVE_INSIDE, Files2.getRelativeFile(PATHS, RELATIVE_INSIDE)); assertFalse(Files2.getRelativeFile(PATHS, RELATIVE_INSIDE).isAbsolute()); assertEquals(RELATIVE_INSIDE, Files2.getRelativeFile(PATHS, ABSOLUTE_INSIDE)); assertNotSame(RELATIVE_INSIDE, Files2.getRelativeFile(PATHS, ABSOLUTE_INSIDE)); assertFalse(Files2.getRelativeFile(PATHS, ABSOLUTE_INSIDE).isAbsolute()); assertEquals(RELATIVE_OUTSIDE, Files2.getRelativeFile(PATHS, RELATIVE_OUTSIDE)); assertSame(RELATIVE_OUTSIDE, Files2.getRelativeFile(PATHS, RELATIVE_OUTSIDE)); assertFalse(Files2.getRelativeFile(PATHS, RELATIVE_OUTSIDE).isAbsolute()); assertNotEquals(RELATIVE_OUTSIDE, Files2.getRelativeFile(PATHS, ABSOLUTE_OUTSIDE)); assertNotSame(RELATIVE_OUTSIDE, Files2.getRelativeFile(PATHS, ABSOLUTE_OUTSIDE)); assertNull(Files2.getRelativeFile(PATHS, ABSOLUTE_OUTSIDE)); }
@Test public void generateFromFile() throws Exception { String filename = getClass().getResource("/sales.yml").getFile(); File file = new File(filename); when(parser.parseFile(file)).thenReturn(definitions); when(generator.generate(definition1)).thenReturn(sourceFile1); when(generator.generate(definition2)).thenReturn(sourceFile2); Set<JavaSourceFile> results = instance.generateFromFile(file); assertThat(results).containsExactlyInAnyOrder(sourceFile1, sourceFile2); }
@Test public void testGetPath() { CugPolicy empty = createEmptyCugPolicy(); assertEquals(path, empty.getPath()); }
@Test public void testSymbolExp() throws APDUTemplateException { CardCallTemplateType templateType = new CardCallTemplateType(); templateType.setHeaderTemplate("00a4020c"); templateType.setDataTemplate("{val1}"); CardCommandTemplate t = new CardCommandTemplate(templateType); assertEquals(t.evaluate(CTX).toHexString(), "00A4020C0200FF"); templateType.setDataTemplate("ab{val1}"); t = new CardCommandTemplate(templateType); assertEquals(t.evaluate(CTX).toHexString(), "00A4020C03AB00FF"); templateType.setDataTemplate("{val1}ab"); t = new CardCommandTemplate(templateType); assertEquals(t.evaluate(CTX).toHexString(), "00A4020C0300FFAB"); templateType.setDataTemplate("ba{val1}ab"); t = new CardCommandTemplate(templateType); assertEquals(t.evaluate(CTX).toHexString(), "00A4020C04BA00FFAB"); templateType.setDataTemplate("ba{val1}ab{val2}cd"); t = new CardCommandTemplate(templateType); assertEquals(t.evaluate(CTX).toHexString(), "00A4020C07BA00FFAB1234CD"); templateType.setDataTemplate("ba{val1}{val2}cd"); t = new CardCommandTemplate(templateType); assertEquals(t.evaluate(CTX).toHexString(), "00A4020C06BA00FF1234CD"); }
@Test public void testANDOnNonPKColumn() throws Exception { executeCmd("delete from rental"); executeCmd("insert into rental (rental_id, amount, customer_id) values (1, 3.99, 5)"); executeCmd("insert into rental (rental_id, amount, customer_id) values (2, 5.99, 2)"); executeCmd("insert into rental (rental_id, amount, customer_id) values (3, 11.99, 1)"); executeCmd("insert into rental (rental_id, amount, customer_id) values (4, 12.99, 1)"); AccumuloQueryExecution exec = (AccumuloQueryExecution)executeCmd("select rental_id, amount, " + "customer_id from rental where amount > 5.99 and amount < 12.99"); assertEquals(Arrays.asList(3, new BigDecimal("11.99"), 1), exec.next()); assertNull(exec.next()); }
@Test public void shouldReturnInvite() throws Exception { InviteImpl toBeReturned = new InviteImpl( "user@test.com", OrganizationDomain.DOMAIN_ID, "test123", singletonList("read")); doReturn(toBeReturned).when(inviteDao).getInvite(anyString(), anyString(), anyString()); Invite fetchedInvite = inviteManager.getInvite(OrganizationDomain.DOMAIN_ID, "test123", "user@test.com"); assertEquals(fetchedInvite, toBeReturned); verify(inviteDao).getInvite(OrganizationDomain.DOMAIN_ID, "test123", "user@test.com"); }
@Test public void testComputeSafetyZoneWithAlternativeConfigurationParameterEllipseBehind() { JUnit4Mockery context = new JUnit4Mockery(); Configuration configurationMock = context.mock(Configuration.class); context.checking(new Expectations() {{ oneOf(configurationMock).getDouble(with(CONFKEY_SAFETYZONES_SAFETY_ELLIPSE_LENGTH)); will(returnValue(2.0)); oneOf(configurationMock).getDouble(with(CONFKEY_SAFETYZONES_SAFETY_ELLIPSE_BREADTH)); will(returnValue(3.0)); oneOf(configurationMock).getDouble(with(CONFKEY_SAFETYZONES_SAFETY_ELLIPSE_BEHIND)); will(returnValue(0.75)); }}); SafetyZoneService sut = new SafetyZoneService(configurationMock); Ellipse safetyEllipse = sut.safetyZone(position, position, 90.0f, 0.0f, 100.0f, 15.0f, 65.0f, 5.5f); assertEquals(-15.0, safetyEllipse.getX(), 1e-6); assertEquals(-2.0, safetyEllipse.getY(), 1e-6); assertEquals(22.5, safetyEllipse.getBeta(), 1e-6); assertEquals(125.0, safetyEllipse.getAlpha(), 1e-6); assertEquals(0.0, safetyEllipse.getThetaDeg(), 1e-6); }
@Test public void processContextAnyEntityWithStopWord() { RecognizedIntent recognizedIntent = createRecognizedIntent("an entity", EntityType.ANY); processor = new RemoveEnglishStopWordsPostProcessor(); RecognizedIntent processedIntent = processor.process(recognizedIntent, new XatkitSession("sessionID")); assertThatIntentContainsValue(processedIntent, "entity"); }
@Test public void initialValue1() throws Exception { LocalDataSource dataSource1 = new LocalDataSource(); ReadRecipeBuilder builder = new ReadRecipeBuilder(); ValueCache<Object> valueCache = new ValueCacheImpl<>(Object.class); builder.addChannel("iv1", valueCache); ReadRecipe recipe = builder.build(new QueueCollector<Exception>(10), new ConnectionCollector()); dataSource1.connectRead(recipe); Thread.sleep(100); Object value = valueCache.readValue(); dataSource1.disconnectRead(recipe); assertThat(value, nullValue()); }
@Test public void testIncrementRevision() throws Exception { final String clientId = "client-id"; final String componentId = "component-id"; final Revision revision = new Revision(0l, clientId, componentId); final Revision updatedRevision = revision.incrementRevision(clientId); assertEquals(1, updatedRevision.getVersion().longValue()); assertEquals(clientId, updatedRevision.getClientId()); assertEquals(componentId, updatedRevision.getComponentId()); }
@Test public void detect_shouldNotDetectACycle4() { List<Component<?>> components = Arrays.asList( Component.builder(TestInterface1.class) .add(Dependency.required(TestInterface3.class)) .add(Dependency.required(TestInterface4.class)) .factory(nullFactory()) .build(), Component.builder(TestInterface2.class) .add(Dependency.required(TestInterface5.class)) .add(Dependency.required(TestInterface6.class)) .factory(nullFactory()) .build(), Component.builder(TestInterface3.class).factory(nullFactory()).build(), Component.builder(TestInterface4.class).factory(nullFactory()).build(), Component.builder(TestInterface5.class).factory(nullFactory()).build(), Component.builder(TestInterface6.class).factory(nullFactory()).build(), Component.builder(TestInterface7.class).factory(nullFactory()).build()); twice(() -> detect(components)); }
@Test public void testGetProductsByVersions() { Owner owner1 = this.createOwner(); Owner owner2 = this.createOwner(); Owner owner3 = this.createOwner(); Product product1 = this.createProduct("p1", "p1", owner1); Product product2 = this.createProduct("p1", "p1", owner2); Product product3 = this.createProduct("p1", "p1", owner3); Product product4 = this.createProduct("p2", "p2", owner2); List<Product> productList1 = this.ownerProductCurator.getProductsByVersions(owner1, Collections.<String, Integer>singletonMap(product1.getId(), product1.getEntityVersion())).list(); List<Product> productList2 = this.ownerProductCurator.getProductsByVersions(owner2, Collections.<String, Integer>singletonMap(product2.getId(), product2.getEntityVersion())).list(); assertEquals(2, productList1.size()); assertEquals(2, productList2.size()); List<String> uuidList1 = new LinkedList<>(); for (Product product : productList1) { uuidList1.add(product.getUuid()); } List<String> uuidList2 = new LinkedList<>(); for (Product product : productList2) { uuidList2.add(product.getUuid()); } assertEquals(Arrays.asList(product2.getUuid(), product3.getUuid()), uuidList1); assertEquals(Arrays.asList(product1.getUuid(), product3.getUuid()), uuidList2); }
@Test public void shouldFailForDuplicateFeatureName() { EnumBasedFeatureProvider provider = new EnumBasedFeatureProvider(); provider.addFeatureEnum(ValidFeatureEnum.class); assertThrows(IllegalStateException.class, () -> provider.addFeatureEnum(DuplicateNameFeatureEnum.class)); }
@Test public void testDoService() throws Exception { GenerateUniqueMetadataValueService service = new GenerateUniqueMetadataValueService("key"); AdaptrisMessage msg = AdaptrisMessageFactory.getDefaultInstance().newMessage(); execute(service, msg); assertTrue(msg.containsKey("key")); assertNotNull(msg.getMetadataValue("key")); }
@Test public void viewStatus() throws Exception { long userId = 1L; long modifiedId = 2L; RoleProfileStatusResource roleProfileStatusResource = newRoleProfileStatusResource() .withUserId(userId) .withProfileRole(ASSESSOR) .withRoleProfileState(RoleProfileState.ACTIVE) .withModifiedBy(modifiedId) .build(); UserResource userResource = newUserResource().withId(modifiedId).build(); when(roleProfileStatusRestService.findByUserIdAndProfileRole(userId, ASSESSOR)).thenReturn(restSuccess(roleProfileStatusResource)); when(userRestService.retrieveUserById(modifiedId)).thenReturn(restSuccess(userResource)); when(assessorRestService.hasApplicationsAssigned(userId)).thenReturn(restSuccess(TRUE)); mockMvc.perform(get("/admin/user/{userId}/role-profile/status",userId)) .andExpect(status().isOk()) .andExpect(view().name("roleprofile/change-status")); }
@Test public void testLowerBoundPlus1() { BigDecimal testInput = BigDecimal.valueOf(0.02); int expectedValue = 1; assertEquals(expectedValue, VelocityBuilder.velocity(testInput)); }
@Test public void shouldThrowExceptionForUnknownImplementation() { assertThatExceptionOfType(UnknownPerformanceTimingImplementationException.class) .isThrownBy(() -> factory.createFor(Arrays.asList("some", "value"))) .withMessageContaining("The object was of type: class java.util.Arrays$ArrayList" + " with value: [some, value]"); }
@Test public void testDumpString46() throws Throwable { byte[] b = new byte[5]; b[0] = (byte) 4; b[1] = (byte) 1; b[3] = (byte) -23; b[4] = (byte) 23; String result = ISOUtil.dumpString(b); assertEquals("{EOT}{SOH}{NULL}\uFFE9[17]", result, "result"); }
@Test public void testInitialize() { ConfigurationFactory mockConfigurationFactory = mock(ConfigurationFactory.class); Configuration configuration = new Configuration(); RequestContext context = new RequestContext(); when(mockConfigurationFactory. initConfiguration(context.getConfig(), context.getServerName(), context.getUser(), context.getAdditionalConfigProps())) .thenReturn(configuration); BasePlugin basePlugin = new BasePlugin(mockConfigurationFactory); basePlugin.initialize(context); assertTrue(basePlugin.isInitialized()); assertEquals(configuration, basePlugin.configuration); assertEquals(context, basePlugin.context); }
@Test public void attachDocuments() { JavaPairRDD<String, String> matchedCitations = sparkContext.parallelizePairs(ImmutableList.of( new Tuple2<>(citation1.id(), document1.id()), new Tuple2<>(citation1.id(), document2.id()), new Tuple2<>(citation4.id(), document2.id()), new Tuple2<>(citation4.id(), document5.id()))); JavaPairRDD<String, MatchableEntity> documents = sparkContext.parallelizePairs(generateIdWithEntityTuples( Lists.newArrayList(document1, document2, document3, document4, document5))); JavaPairRDD<String, MatchableEntity> actualCitIdDocPairs = documentAttacher.attachDocuments(matchedCitations, documents); List<Tuple2<String, MatchableEntity>> expectedCitIdDocPairs = ImmutableList.of( new Tuple2<>(citation1.id(), document1), new Tuple2<>(citation1.id(), document2), new Tuple2<>(citation4.id(), document2), new Tuple2<>(citation4.id(), document5)); assertDocAttachedMatchedCitations(actualCitIdDocPairs.collect(), expectedCitIdDocPairs); }
@Test public void handlesBrokenFormattingGracefully() throws Exception { final String[] texts = { Joiner.on(MarkdownTxtmarkTest.EOL).join("**", ""), "__", "", "**hi there! {{{", Joiner.on(MarkdownTxtmarkTest.EOL).join( " ", " ", " ", " ", "" ), }; for (final String text : texts) { MatcherAssert.assertThat( String.format("<z>%s</z>", new MarkdownTxtmark().html(text)), XhtmlMatchers.hasXPath("/z") ); } }
@Test public void testSetXpath() { XpathProduceDestination dest = new XpathProduceDestination(); try { dest.setXpath(null); fail(); } catch (IllegalArgumentException e) { ; } dest.setXpath(""); assertEquals("", dest.getXpath()); dest.setXpath(DEST_XPATH); assertEquals(DEST_XPATH, dest.getXpath()); }
@Test public void testParseErrorCode() throws Exception { Document xmlDoc = new DocumentImpl(); Element root = xmlDoc.createElement("ErrorResponse"); Element error = xmlDoc.createElement("Error"); Element code = xmlDoc.createElement("Code"); code.appendChild(xmlDoc.createTextNode("TestCode")); error.appendChild(code); root.appendChild(error); xmlDoc.appendChild(root); StandardErrorUnmarshaller seu = new StandardErrorUnmarshaller(); assertEquals("TestCode", seu.parseErrorCode(xmlDoc)); }
@Test public void testVersionIsInRange() throws Exception { FirmwareUpdate update = getFirmwareUpdate(updates, "2.0.0.024", "2.0.0.999", "hubBL_2.1.0.006","general", "qa", "beta"); Assert.assertEquals("Should get a version match with general population.", FirmwareUpdate.MatchType.VERSION_AND_POPULATION, update.matches(Version.fromRepresentation("2.0.0.037"), Population.NAME_GENERAL)); Assert.assertEquals("Should get a version match with no population.", FirmwareUpdate.MatchType.VERSION, update.matches(Version.fromRepresentation("2.0.0.047"))); Assert.assertEquals("Should get a version match with null population.", FirmwareUpdate.MatchType.VERSION, update.matches(Version.fromRepresentation("2.0.0.137"), null)); Assert.assertEquals("Should get a version match with empty population.", FirmwareUpdate.MatchType.VERSION, update.matches(Version.fromRepresentation("2.0.0.998"), "")); Assert.assertEquals("Should get a version match with qa population.", FirmwareUpdate.MatchType.VERSION_AND_POPULATION, update.matches(Version.fromRepresentation("2.0.0.998"), Population.NAME_QA)); Assert.assertEquals("Should get a version match with beta population.", FirmwareUpdate.MatchType.VERSION_AND_POPULATION, update.matches(Version.fromRepresentation("2.0.0.998"), Population.NAME_BETA)); }
@Test public void givenInternalServerErrorWhenDefinitionsWorkflowThenReturnVitamError() { when(mock.get()).thenReturn(Response.status(Status.INTERNAL_SERVER_ERROR).build()); ThrowingCallable throwingCallable = () -> client.getWorkflowDefinitions(); assertThatThrownBy(throwingCallable) .isInstanceOf(VitamClientInternalException.class); }
@Test public void matches() throws Exception { ExplicitConnectionAtom matcher = new ExplicitConnectionAtom(2, mock(IChemObjectBuilder.class)); IAtom atom = mock(IAtom.class); when(atom.getProperty(SMARTSAtomInvariants.KEY)).thenReturn( new SMARTSAtomInvariants(mock(IAtomContainer.class), 0, 0, Collections.<Integer> emptySet(), 0, 0, 2, 0)); assertTrue(matcher.matches(atom)); }
@Test public void testPermittedTopology_point_linestring() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_POINT; DimensionInfo targetDimensionInfo = DimensionInfo.XY_LINESTRING; RccTangentialProperPartFF instance = new RccTangentialProperPartFF(); boolean expResult = false; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }
@Test @DisplayName("dmaAllocate(long, boolean, boolean)") @SuppressWarnings({"CodeBlock2Expr", "ResultOfMethodCallIgnored"}) void dmaAllocate() { assumeTrue(mmanager != null); for (val huge : Arrays.asList(false, true)) { for (val lock : Arrays.asList(false, true)) { assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> { mmanager.dmaAllocate(createSize(0xFFFF), huge, lock); }); } } }
@Test public void ShouldRenderBeatLoopsToCorrectLength() throws IOException { String targetPath = appConfigs.getApplicationRoot(); String fileName = "beatLoopRenderTest.wav"; File targetFile = new File(targetPath + fileName); if(targetFile != null && targetFile.exists()){ deleteFolderAndContents(targetFile); } ObjectMapper mapper = new ObjectMapper(); BeatLoopRenderTransport beatLoopRenderTransport = mapper.readValue(new File(appConfigs.getMockDataDir() + "render\\beatLoopsRenderMock.json"), BeatLoopRenderTransport.class); beatLoopRenderer.renderRhythm("FIX THIS!!!!", targetPath, fileName, beatLoopRenderTransport); File outPutFile = new File(targetPath + fileName); int bpm = 80; int barCount = 32; float audioLengthInSeconds = audioUtils.getAudioLength(targetPath + fileName); float targetTrackLengthInSeconds = LoopUtils.getSecondsInBar(bpm) * barCount; if(outPutFile != null && outPutFile.exists()){ deleteFolderAndContents(targetFile); } Assert.assertEquals(targetTrackLengthInSeconds, audioLengthInSeconds, 0.02f); }
@Test public void usefulMessageWhenSourceUploadNotAllowed() throws IOException { conf = defaultUpload().hasImportTemplatePermission(false).build(); mockRequiredServices(); response = sourceUpload.tryUploadSourceFile(conf.id, conf.uploadForm); assertResponseHasStatus(FORBIDDEN); assertResponseHasErrorMessage("You do not have permission to upload source documents to " + "project-version \"myproject:myversion\"."); }
@Test public void noManagedRequired() throws Exception { PolicyUtil.require(exchange, TransactionPolicy.NO_MANAGED_TRANSACTION); exchange.setPhase(ExchangePhase.IN); tm.begin(); Transaction tx1 = tm.getTransaction(); handler.handleMessage(exchange); Transaction tx2 = tm.getTransaction(); Assert.assertNotNull(tx1); Assert.assertNull(tx2); Assert.assertEquals(Status.STATUS_ACTIVE, tx1.getStatus()); Assert.assertTrue(PolicyUtil.isProvided(exchange, TransactionPolicy.NO_MANAGED_TRANSACTION)); exchange.setPhase(ExchangePhase.OUT); handler.handleMessage(exchange); Transaction tx3 = tm.getTransaction(); Assert.assertEquals(tx1, tx3); Assert.assertEquals(Status.STATUS_ACTIVE, tx3.getStatus()); }
@Test public void testGetLabelGroupsFilteringEqual() { RestListRequest request = new RestListRequest(); Filter filter = new Filter("value", "some_value", FilterOperator.EQUAL.getValue()); when(i18nManager.getLabelGroups()).thenReturn(singletonMap("EN", create(singletonMap("EN", "some_value")))); request.setFilters(new Filter [] { filter }); PagedMetadata<LabelDto> labelGroups = labelService.getLabelGroups(request); assertThat(labelGroups.getBody()).hasSize(1); assertThat(labelGroups.getBody().get(0).getKey()).isEqualTo("EN"); assertThat(labelGroups.getBody().get(0).getTitles().get("EN")).isEqualTo("some_value"); verify(i18nManager, times(1)).getLabelGroups(); reset(i18nManager); when(i18nManager.getLabelGroups()).thenReturn(singletonMap("EN", create(singletonMap("EN", "some_value")))); filter = new Filter("value", "some_", FilterOperator.EQUAL.getValue()); request.setFilters(new Filter [] { filter }); labelGroups = labelService.getLabelGroups(request); assertThat(labelGroups.getBody()).hasSize(0); }
@Test public void testRetrieveTasksForJob() { JobStore store = getJobStore(); Job<BatchJobExt> job = createBatchJobObject(); store.init().await(); store.storeJob(job).await(); Pair<List<Job<?>>, Integer> jobsAndErrors = store.retrieveJobs().toBlocking().first(); assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); Task task = createTaskObject(job); store.storeTask(task).await(); Pair<List<Task>, Integer> tasks = store.retrieveTasksForJob(job.getId()).toBlocking().first(); assertThat(tasks.getLeft().get(0)).isEqualTo(task); Task archivedTask = store.retrieveArchivedTasksForJob(job.getId()).toBlocking().firstOrDefault(null); assertThat(archivedTask).isNull(); }
@Test public void testEquals() { DayOfWeek left = new DayOfWeek(mockSlot, java.time.DayOfWeek.MONDAY); DayOfWeek right = new DayOfWeek(mockSlot, java.time.DayOfWeek.MONDAY); assertEquals(left, right); assertEquals(left.getValue(), right.getValue()); assertEquals(left.getSlot(), right.getSlot()); assertEquals(left.hashCode(), right.hashCode()); assertEquals(left.toString(), right.toString()); }
@Test public void deleteVdu() throws VduException { CloudInfo cloudInfo = new CloudInfo("cloudSiteId", "cloudOwner", "tenantId", "tenantName"); VduInstance vduInstance = multicloudUtils.deleteVdu(cloudInfo, "instanceId", 3); assertNotNull(vduInstance); assertTrue(VduStateType.DELETED == vduInstance.getStatus().getState()); }
@Test public void testToString() { assertThat(simplifyGeometryFunction.toString(), notNullValue()); }
@Test public void testPercentEncode() { assertEquals("", percentEncode("")); assertEquals("a--/--b--%2B--%3A--%7C--+--", percentEncode("a--/--b--+--:--|-- --")); }
@Test public void testStatsTrendActionWithNesting() throws FoxtrotException { StatsTrendRequest request = new StatsTrendRequest(); request.setTable(TestUtils.TEST_TABLE_NAME); request.setTimestamp("_timestamp"); request.setField("battery"); request.setNesting(Lists.newArrayList("os")); BetweenFilter betweenFilter = new BetweenFilter(); betweenFilter.setFrom(1L); betweenFilter.setTo(System.currentTimeMillis()); betweenFilter.setTemporal(true); betweenFilter.setField("_timestamp"); request.setFilters(Collections.<Filter>singletonList(betweenFilter)); StatsTrendResponse statsTrendResponse = StatsTrendResponse.class.cast(getQueryExecutor().execute(request)); assertNotNull(statsTrendResponse); assertNull(statsTrendResponse.getResult()); assertNotNull(statsTrendResponse.getBuckets()); assertEquals(3, statsTrendResponse.getBuckets() .size()); }
@Test void getVersion( ) { ArchivaItemSelector selector = ArchivaItemSelector.builder( ).withVersion( "1.15.20.3" ).build(); assertEquals( "1.15.20.3", selector.getVersion( ) ); assertFalse( selector.hasProjectId( ) ); assertTrue( selector.hasVersion( ) ); assertFalse( selector.hasArtifactId( ) ); assertFalse( selector.hasArtifactVersion( ) ); assertFalse( selector.hasType( ) ); assertFalse( selector.hasClassifier( ) ); assertFalse( selector.hasAttributes( ) ); assertEquals( "", selector.getNamespace( ) ); assertEquals( "", selector.getArtifactId( ) ); assertEquals( "", selector.getArtifactVersion( ) ); assertEquals( "", selector.getType( ) ); assertEquals( "", selector.getClassifier( ) ); assertNotNull( selector.getAttributes( ) ); }
@Test public void format_second_zero() throws TemplateModelException { LinkExpirationFormatterMethod tested = new LinkExpirationFormatterMethod(messages, locale); Assert.assertEquals("0 seconds", tested.exec(toList(0))); }
@Test public void testCreate() throws TechnicalException { Certificate certificate = new Certificate(); certificate.setName("testName"); TestObserver<Certificate> testObserver = certificateRepository.create(certificate).test(); testObserver.awaitTerminalEvent(); testObserver.assertComplete(); testObserver.assertNoErrors(); testObserver.assertValue(domainCreated -> domainCreated.getName().equals(certificate.getName())); }
@Test public void testViewUnboundedAsMultimapDirect() { testViewUnbounded(pipeline, View.asMultimap()); }
@Test public void matches() throws Exception { MatchPatterns from = MatchPatterns.from( "ABC**", "CDE**" ); assertTrue( from.matches( "ABCDE", true ) ); assertTrue( from.matches( "CDEF", true ) ); assertFalse( from.matches( "XYZ", true ) ); }
@Test public void testBug2356() throws Exception { ServiceImp failingService = new ThrowExceptionService(new ConfiguredException("Fail")); AdaptrisMessage msg = AdaptrisMessageFactory.getDefaultInstance().newMessage(XML_PAYLOAD); ExceptionReportService service = new ExceptionReportService( new ExceptionAsXml().withExceptionGenerator(new SimpleExceptionReport()).withDocumentMerge(new InsertNode(XPATH_ROOT))); MockMessageProducer mockProducer = new MockMessageProducer(); StandardProcessingExceptionHandler speh = new StandardProcessingExceptionHandler(new ServiceList(new Service[] { service, new StandaloneProducer(mockProducer) })); MockChannel channel = new MockChannel(); MockMessageConsumer consumer = new MockMessageConsumer(); StandardWorkflow wf = new StandardWorkflow(); wf.getServiceCollection().add(failingService); wf.setConsumer(consumer); channel.setMessageErrorHandler(speh); channel.getWorkflowList().add(wf); try { channel.prepare(); channel.requestStart(); consumer.submitMessage(msg); assertEquals(1, mockProducer.getMessages().size()); AdaptrisMessage failedMessage = mockProducer.getMessages().get(0); assertNotSame(XML_PAYLOAD, failedMessage.getContent()); XmlUtils xml = XmlHelper.createXmlUtils(failedMessage); assertEquals(RAW_DATA, xml.getSingleTextItem(XPATH_ORIGINAL_NODE)); assertNotNull(xml.getSingleNode(XPATH_ROOT + "/Exception")); String xmlElement = xml.getSingleTextItem(XPATH_ROOT + "/Exception"); assertTrue(xmlElement.contains("com.adaptris.core.services.exception.ThrowExceptionService.doService")); } finally { channel.requestClose(); } }
@Test public void removeUser_userNotInRoom(){ KixmppJid roomJid = new KixmppJid("testnode", "testdomain"); MucRoom mucRoom = new MucRoom((MucService)Mockito.when(Mockito.mock(MucService.class).getServer()).thenReturn(Mockito.mock(KixmppServer.class)).getMock(), roomJid, new MucRoomSettings(false, false, null)); Assert.assertFalse(mucRoom.removeUser(new KixmppJid("test.user","testdomain"))); }
@Test public void shouldPauseGameWhenPauseGameAction() { when(timerService.isPaused()).thenReturn(GAME_PAUSED); String jsp = controller.pauseGame(model); assertEquals("admin", jsp); verify(model).addAttribute("paused", GAME_PAUSED); verify(timerService).pause(); }
@Test public void testGetAuthTokenLifetimeDefault() { ConnectionParams connectionParams = buildRequiredParameters(); assertThat(connectionParams.getAuthTokenLifetimeMillis()) .isEqualTo(Duration.ofHours(1).toMillis()); }
@Test public void test_undeclared_superclass() { SymbolTableImpl symbolTable = symbolTableFor("<?php namespace N { class B extends A {} } "); Symbol classA = symbolTable.getSymbol("n\\a"); Symbol classB = symbolTable.getSymbol("n\\b"); assertThat(classA).isInstanceOf(UndeclaredSymbol.class); assertThat(classB).isInstanceOf(TypeSymbol.class); assertThat(((TypeSymbol) classB).superClass()).isEqualTo(classA); }
@Test public void requireThatVipStatusIsDefaultDownWithLocalDispatchAndClusterSize2() { try (State test = new State("cluster.1", 1, HostName.getLocalhost(), "otherhost")) { assertTrue(test.searchCluster.localCorpusDispatchTarget().isPresent()); assertFalse(test.vipStatus.isInRotation()); test.waitOneFullPingRound(); assertTrue(test.vipStatus.isInRotation()); test.numDocsPerNode.get(0).set(-1); test.waitOneFullPingRound(); assertFalse(test.vipStatus.isInRotation()); } }
@Test public void testGetDockerContainerId() throws Exception { ProjectInfo projectInfo = GradleTooling.loadProjectInfo(_wsPath); Assert.assertEquals("custom-workspace-liferay1", projectInfo.getDockerContainerId()); }
@Test public void testIsPrecisionApplicable() { assertFalse(SqlUtil.isPrecisionApplicable("boolean")); assertTrue(SqlUtil.isPrecisionApplicable("varchar")); }
@Test public void testMerge() throws Exception { Query q1 = Query.builder() .setObj("obj:key=val") .addAttr("foo") .addAttr("bar") .addKey("key1") .addKey("key2") .setResultAlias("alias") .build(); Query q2 = Query.builder() .setObj("obj:key=val") .addAttr("foo") .addAttr("bar") .addKey("key1") .addKey("key2") .setResultAlias("alias") .build(); Query q3 = Query.builder() .setObj("obj3:key=val") .addAttr("foo") .addAttr("bar") .addKey("key1") .addKey("key2") .setResultAlias("alias") .build(); Server s1 = Server.builder() .setAlias("alias") .setHost("host") .setPort("8004") .setPool(createPool()) .setCronExpression("cron") .setNumQueryThreads(123) .setPassword("pass") .setUsername("user") .addQuery(q1) .addQuery(q2) .build(); Server s2 = Server.builder() .setAlias("alias") .setHost("host") .setPort("8004") .setPool(createPool()) .setCronExpression("cron") .setNumQueryThreads(123) .setPassword("pass") .setUsername("user") .addQuery(q1) .addQuery(q2) .build(); Server s3 = Server.builder() .setAlias("alias") .setHost("host3") .setPort("8004") .setPool(createPool()) .setCronExpression("cron") .setNumQueryThreads(123) .setPassword("pass") .setUsername("user") .addQuery(q1) .addQuery(q2) .addQuery(q3) .build(); List<Server> existing = new ArrayList<Server>(); existing.add(s1); List<Server> adding = new ArrayList<Server>(); adding.add(s2); existing = configurationParser.mergeServerLists(existing, adding); assertThat(existing).hasSize(1); assertThat(existing.get(0).getQueries()).hasSize(1); adding.add(s3); existing = configurationParser.mergeServerLists(existing, adding); assertThat(existing).hasSize(2); assertThat(existing.get(0).getQueries()).hasSize(1); assertThat(existing.get(1).getQueries()).hasSize(2); }
@Test public void testFormatSingleEntry() { String str1 = "12345"; assertEquals(str1, d_format.format(Collections.singletonList(new PubMedId(str1)))); String str2 = "123456"; assertEquals(str2, d_format.format(Collections.singletonList(new PubMedId(str2)))); }
@Test public void testSortingOneDependency(){ Set<String> dep1 = new HashSet<String>(Arrays.asList("e")); JobDefinition a = new JobDefinition(1, 1, "a", 0, dep1, null); JobDefinition b = new JobDefinition(1, 1, "b", 0, null, null); JobDefinition c = new JobDefinition(1, 1, "c", 0, null, null); JobDefinition d = new JobDefinition(1, 1, "d", 0, null, null); JobDefinition e = new JobDefinition(1, 1, "e", 0, null, null); List<JobDefinition> jobs = Arrays.asList(a,b,c,d,e); jobs = SeedingSchedule.getSortedToSatisfyDependencies(jobs); Assert.assertEquals("b",jobs.get(0).cut); Assert.assertEquals("c",jobs.get(1).cut); Assert.assertEquals("d",jobs.get(2).cut); Assert.assertEquals("e",jobs.get(3).cut); Assert.assertEquals("a",jobs.get(4).cut); }
@Test public void testHasNhinTargetHomeCommunityId() { StandardOutboundDocSubmission entityOrch = new StandardOutboundDocSubmission(); assertFalse(entityOrch.hasNhinTargetHomeCommunityId(null)); RespondingGatewayProvideAndRegisterDocumentSetSecuredRequestType request = new RespondingGatewayProvideAndRegisterDocumentSetSecuredRequestType(); assertFalse(entityOrch.hasNhinTargetHomeCommunityId(request)); NhinTargetCommunitiesType targetCommunities = new NhinTargetCommunitiesType(); request.setNhinTargetCommunities(targetCommunities); assertFalse(entityOrch.hasNhinTargetHomeCommunityId(request)); request.getNhinTargetCommunities().getNhinTargetCommunity().add(null); request.setNhinTargetCommunities(targetCommunities); assertFalse(entityOrch.hasNhinTargetHomeCommunityId(request)); targetCommunities = createNhinTargetCommunitiesType(receiverHcid); request.setNhinTargetCommunities(targetCommunities); assertTrue(entityOrch.hasNhinTargetHomeCommunityId(request)); request.getNhinTargetCommunities().getNhinTargetCommunity().get(0).getHomeCommunity().setHomeCommunityId(null); assertFalse(entityOrch.hasNhinTargetHomeCommunityId(request)); request.getNhinTargetCommunities().getNhinTargetCommunity().get(0).setHomeCommunity(null); assertFalse(entityOrch.hasNhinTargetHomeCommunityId(request)); }
@Test public void shouldNotValidateTasksAfterChannelUpdateIfDataSourceDoesNotExistForGivenProvider() { TaskConfig config = new TaskConfig().add(new DataSource("TestProvider", 1234L, 1L, "Test", "id", "specifiedName", asList(new Lookup("id", "trigger.value")), true)); Task task = new Task("name", trigger, asList(action), config, true, false); TaskDataProvider dataProvider = new TaskDataProvider("abc", null); dataProvider.setId(5678L); when(tasksDataService.retrieveAll()).thenReturn(asList(task)); when(providerService.getProvider(dataProvider.getName())).thenReturn(dataProvider); taskService.validateTasksAfterTaskDataProviderUpdate(getProviderUpdateEvent("abc")); verify(tasksDataService, never()).create(any(Task.class)); verify(tasksDataService, never()).update(any(Task.class)); }
@Test public void testResourceableDeleted() { RepositoryEntry repositoryEntry = mock(RepositoryEntry.class); List catalogEntryReferencingList = new ArrayList(); catalogEntryReferencingList.add(commonTestCatalogEntryMock); CatalogEntry catalogEntry2 = createCatalogEntryMockOfTypeLeaf(catalogEntryKey2); catalogEntryReferencingList.add(catalogEntry2); when(catalogDaoMock.getCatalogEntriesReferencing(repositoryEntry)).thenReturn(catalogEntryReferencingList); CatalogService spyedCatalogService = spy(catalogService); spyedCatalogService.resourceableDeleted(repositoryEntry); verify(spyedCatalogService).deleteCatalogEntry(commonTestCatalogEntryMock); verify(spyedCatalogService).deleteCatalogEntry(catalogEntry2); }
@Test public void testSimpleId() throws Exception { assertArrayEquals(new Node[0], parse("")); assertArrayEquals(new Node[] { new Node("test") }, parse("test")); assertArrayEquals(new Node[] { new Node("form"), new Node("table") }, parse("form:table")); }
@Test public void testGetDefault() throws Exception { EasyMock.expect(securityService.getOrganization()).andReturn(specificOrg).anyTimes(); EasyMock.expect(specificOrg.getId()).andReturn("org1").anyTimes(); listName = "TEST.LIST.NAME"; File fileWithDefault = getResourceFile("/ListProvidersScannerTest-AllProperties.properties"); listProvidersScanner.install(fileWithDefault); EasyMock.replay(securityService, specificOrg); assertEquals("TEST.VALUE.1", listProvidersService.getDefault(listName)); }
@Test public void testSafeDescription() { productModel = context.request().adaptTo(ProductImpl.class); String sampleString = "<strong>abc</strong>"; SimpleProduct product = mock(SimpleProduct.class, RETURNS_DEEP_STUBS); ComplexTextValue value = mock(ComplexTextValue.class, RETURNS_DEEP_STUBS); when(value.getHtml()).thenReturn(sampleString); when(product.getDescription()).thenReturn(value); Whitebox.setInternalState(productModel.getProductRetriever(), "product", product); Assert.assertEquals(sampleString, productModel.getDescription()); }
@Test public void localVarRefersAnotherLVarWithPrefix() { Map<String, String> localVars = new HashMap<>(3); localVars.put("lv1", "localVar1"); localVars.put("lv2", "$OO_LOCAL{lv1}"); CmsCI ci = new CmsCI(); ci.setCiId(90); ci.setCiName("localVarRefersAnotherLVar"); Map<String, CmsCIAttribute> attributes = new LinkedHashMap<>(2); CmsCIAttribute attr4 = new CmsCIAttribute(); attr4.setDjValue("Prefix $OO_LOCAL{lv2}"); attributes.put("localVarRefersAnotherLVar", attr4); ci.setAttributes(attributes); Map<String, CmsCIAttribute> attributesBefore = ci.getAttributes(); for (Map.Entry<String, CmsCIAttribute> e : attributesBefore.entrySet()) { System.out.println("*- b4 |" + e.getKey() + "->" + e.getValue().getDjValue()); } CmsUtil util = getCmsUtil(); dumpMaps(null, null, localVars); dumpCmsCIAttributes(ci); util.processAllVars(ci, null, null, localVars); dumpCmsCIAttributes(ci); for (Map.Entry<String, CmsCIAttribute> a : ci.getAttributes().entrySet()) { String djKey = a.getKey(); String djAfter = a.getValue().getDjValue(); System.out.println("*after k>" + djKey + " v->" + djAfter); if (djKey.equals("localVarRefersAnotherLVar")) { assertEquals(djAfter, "Prefix localVar1"); } } }
@Test void testGetFileById() throws IOException { when(dbService.getMetadataById(anyString())).thenReturn(buildFakeMetadata(true, false)); when(storageService.getFileByLocationId("test")).thenReturn(new ByteArrayInputStream("1337".getBytes())); InputStreamResource outcome = objectUnderTest.getFileById("test"); verify(dbService, times(1)).getMetadataById(anyString()); verify(storageService, times(1)).getFileByLocationId(anyString()); assertThat(IOUtils.toString(outcome.getInputStream(), StandardCharsets.UTF_8)).isEqualTo("1337"); }
@Test (expected = IllegalStateException.class) public void mapOverflow() { fillServerMap(); serverMap.register("overflowKey"); }
@Test public void handleUpdate_passes_when_models_equal() throws Exception { observer.handleUpdate("key", JSON_STRING_1, JSON_STRING_1); then(agent).shouldHaveZeroInteractions(); then(emitter).shouldHaveZeroInteractions(); }
@Test public void testDecryptNull() { assertThat(algorithmEncryptor.decrypt(null), is(nullValue())); }
@Test void shouldNotOpenANewBrowser_ifSettingIsDisabled() { Configuration.reopenBrowserOnFail = false; try { container.getAndCheckWebDriver(); fail("expected IllegalStateException"); } catch (IllegalStateException expected) { assertThat(expected) .hasMessageContaining("reopenBrowserOnFail=false"); } }
@Test public void getCounterCheckAccessException() throws Exception { when(server.execMapCmdList(eq(CmdSpec.COUNTER.toString()), eq(new String[] { mockCounterName }), any(null))) .thenThrow(AccessException.AccessExceptionForTests.class); try { counterDelegator.getCounter(mockCounterName); } catch (AccessException e) { return; } fail("Did not return AccessException"); }
@Test public void testTextBindMappingChanged() { final boolean[] invoked = new boolean[1]; CallableWithArgs<Void> callable = args -> { invoked[0] = true; return null; }; assertNull(adapter.getTextBindMappingChanged()); adapter.textBindMappingChanged(null, null); assertFalse(invoked[0]); adapter.setTextBindMappingChanged(callable); adapter.textBindMappingChanged(null, null); assertTrue(invoked[0]); }
@Test public void testThatNumberOfVariablesIrPreserved() throws Exception { final LinearProgram<Integer> program = createProgram(); final LinearProgram<Integer> converted = converter.convert(program); assertThat(converted, is(notNullValue())); assertThat(converted, hasVariables(program.variables())); }
@Test public void getWorkspacePathTest() { final String path = getWorkspacePath(getOrganizationName.getOrganizationName()); assertEquals(EXPECTED_WORKSPACE_PATH, path); }
@Test public void removeTrackedQuery() { TrackedQueryManager manager = newManager(); manager.setQueryActive(SAMPLE_FOO_QUERY); assertNotNull(manager.findTrackedQuery(SAMPLE_FOO_QUERY)); manager.removeTrackedQuery(SAMPLE_FOO_QUERY); assertNull(manager.findTrackedQuery(SAMPLE_FOO_QUERY)); manager.verifyCache(); }
@Test public void testUpdateActivity(){ promotionActivity.setEffectDays(5); try { boolean result = activityRepository.updateActivity(promotionActivity); Assert.assertTrue(result); } catch (Exception e) { log.error("校验更新记录失败",e); } }
@Test public void shouldDetectDuplicateValuesViaAsBuilder() { final Builder builder = SOME_SCHEMA.asBuilder(); assertThrows( KsqlException.class, () -> builder.valueColumn(F0, STRING) ); }
@Test public void testScopeFinderByName() throws Exception { String applicationName2 = "com.liferay.test2"; ScopeFinder application1ScopeFinder = () -> scopesSet1; ScopeFinder application2ScopeFinder = () -> scopedSet2; Builder builder = new Builder(); ScopeLocatorImpl scopeLocatorImpl = builder.withScopeFinders( registrator -> { registrator.register( _COMPANY_ID, _APPLICATION_NAME, application1ScopeFinder); registrator.register( _COMPANY_ID, applicationName2, application2ScopeFinder); } ).build(); Collection<String> application1ScopeAliases = scopeLocatorImpl.getScopeAliases(_COMPANY_ID, _APPLICATION_NAME); Collection<String> application2ScopesAliasesDefault = scopeLocatorImpl.getScopeAliases(_COMPANY_ID, applicationName2); for (String scope : scopesSet1) { Assert.assertThat(application1ScopeAliases, hasItem(scope)); } for (String scope : scopedSet2) { Assert.assertThat(application2ScopesAliasesDefault, hasItem(scope)); } Assert.assertNotEquals( application1ScopeAliases, application2ScopesAliasesDefault); }
@Test(groups = { "small", "back-end" }) public void testFactoryWithMultiProbe() { RingFactory<String> factory = new DegraderRingFactory<>(configBuilder("multiProbe", null)); Ring<String> ring = factory.createRing(buildPointsMap(10)); assertTrue(ring instanceof MPConsistentHashRing); }
@Test public void ignoresTransientFields() throws Exception { BeanWithTransientField bean = new BeanWithTransientField(); JsonValue jsonValue = JsonGenerator.createJsonObject(bean); assertEquals("visible", jsonValue.getElement("field").getStringValue()); assertNull(jsonValue.getElement("transientField")); }
@Test public void testDiscardUnknownFrame() throws Exception { short type = 5; byte flags = (byte) 0xFF; int length = 8; ByteBuf buf = ReferenceCountUtil.releaseLater(Unpooled.buffer(SPDY_HEADER_SIZE + length)); encodeControlFrameHeader(buf, type, flags, length); buf.writeLong(RANDOM.nextLong()); replay(delegate); decoder.decode(buf); verify(delegate); assertFalse(buf.isReadable()); }
@Test public void testGetAsyncWithArgs() { int times = 0; roTable.getAsync(1, 1); verify(readFn, times(++times)).getAsync(any(), any()); rwTable.getAsync(1, 1); verify(readFn, times(++times)).getAsync(any(), any()); }
@Test public final void testCreatePacketPayloadNotIncludingFrameType() { byte[] payload = new byte[25 + data.length]; payload[0] = (byte)frameID; payload[1] = (byte)options; payload[2] = (byte)method.getValue(); System.arraycopy(destAddress.getAddress(), 0, payload, 3, destAddress.getAddress().length); payload[20] = (byte)(uriData.length()); System.arraycopy(uriData.getBytes(), 0, payload, 20, uriData.getBytes().length); System.arraycopy(data, 0, payload, 20 + uriData.getBytes().length, data.length); exception.expect(IllegalArgumentException.class); exception.expectMessage(is(equalTo("Payload is not a CoAP Tx Request packet."))); CoAPTxRequestPacket.createPacket(payload); }
@Test public void parseValidIdToken() { OktaIdToken token = OktaIdToken.parseIdToken(JsonStrings.VALID_ID_TOKEN); assertNotNull(token.mClaims); assertNotNull(token.mSignature); assertNotNull(token.mHeader); assertEquals("RS256", token.mHeader.alg); }
@Test public void testFloorInPlace() { double[] da = {0, -7, 2, 1.1123, -10, -22, 56}; DoubleArrays.floorInPlace(da, -7); Assert.assertTrue(inDelta(da, new double[]{0, -7, 2, 1.1123, -7, -7, 56})); }
@Test public void testCanBeSubsumed() throws Exception { CheckpointProperties forced = new CheckpointProperties(true, CheckpointType.SAVEPOINT, false, false, false, false, false); PendingCheckpoint pending = createPendingCheckpoint(forced); assertFalse(pending.canBeSubsumed()); try { pending.abort(CheckpointFailureReason.CHECKPOINT_SUBSUMED); fail("Did not throw expected Exception"); } catch (IllegalStateException ignored) { } CheckpointProperties subsumed = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false); pending = createPendingCheckpoint(subsumed); assertTrue(pending.canBeSubsumed()); }
@Test public void test_modifying_name_via_put_request() throws Exception { NameEntry nameEntry = mock(NameEntry.class); when(entryService.loadName("test")).thenReturn(nameEntry); String requestJson = new ObjectMapper().writeValueAsString(testNameEntry); mockMvc.perform(put("/v1/names/test") .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE) .content(requestJson)) .andExpect(status().isCreated()); verify(entryService).updateName(isA(NameEntry.class), isA(NameEntry.class)); }
@Test(expected = InvalidAssignmentException.class) public void workInvalidAclsTest() { model.add(resc, RDF.type, Cdr.Work); model.add(resc, CdrAcl.canAccess, STAFF_PRINC); model.add(resc, CdrAcl.unitOwner, OWNER_PRINC); try { validator.validate(resc); } catch (InvalidAssignmentException e) { assertTrue(e.getMessage().contains("invalid acl properties")); assertTrue(e.getMessage().contains(CdrAcl.canAccess.getLocalName())); assertTrue(e.getMessage().contains(CdrAcl.unitOwner.getLocalName())); throw e; } }
@Test public void testCreateStreamNoRootStorageContainerStore() throws Exception { rangeStore.getRegistry().stopStorageContainer(scId).join(); String colName = "test-create-namespace-no-root-storage-container-store"; String streamName = colName; verifyNotFoundException(fromListenableFuture( rootRangeService.createStream(createCreateStreamRequest(colName, streamName, DEFAULT_STREAM_CONF))), Status.NOT_FOUND); }
@Test public void testYesterdayZero2() { Assert.assertEquals(new Date(1562601600000L), TaskHelper.yesterdayZero(new Date(1562769422000L))); }
@Test (expectedExceptions = NullPointerException.class) public void shouldNotAllNullContentsFromUTF8() throws UnsupportedEncodingException { utils.fromUTF8(null); }
@Test public void testTableParsingError() { thrown.expect(IllegalArgumentException.class); BigQueryHelpers.parseTableSpec("0123456:foo.bar"); }
@Test public void replaceExactKeyYieldsSameMap() { ImmutableSortedMap<String, Integer> map = new ArraySortedMap<>(StringComparator); String key = "1"; Integer value = 1; map = map.insert(key, value); Assert.assertSame(map, map.insert(key, value)); }
@Test public void testListAllWithMultipleQueryParams() throws IOException { Flavor flavor1 = new Flavor(); flavor1.setId("flavor1"); flavor1.setKind("vm"); Flavor flavor2 = new Flavor(); flavor2.setId("flavor2"); flavor2.setKind("disk"); Flavor flavor3 = new Flavor(); flavor3.setId("flavor3"); flavor3.setKind("vm"); Map<String, String> params = new HashMap<String, String>(); params.put("kind", "vm"); params.put("name", "flavor3"); ResourceList<Flavor> flavorResourceList = new ResourceList<>(Arrays.asList(flavor3)); ObjectMapper mapper = new ObjectMapper(); String serializedResponse = mapper.writeValueAsString(flavorResourceList); setupMocks(serializedResponse, HttpStatus.SC_OK); FlavorApi flavorApi = new FlavorRestApi(restClient); ResourceList<Flavor> response = flavorApi.listAll(params); assertEquals(response.getItems().size(), flavorResourceList.getItems().size()); assertTrue(response.getItems().containsAll(flavorResourceList.getItems())); }
@Test public void testReadAllSystemSettingsEmpty() { PowerMockito.when(cassandraOperation.getAllRecords(Mockito.anyString(), Mockito.anyString())) .thenReturn(getSystemSettingSuccessResponse(true)); List<SystemSetting> result = systemSettingDaoImpl.readAll(); Assert.assertTrue(null != result); }
@Test public void bigArray() throws Exception { Point[] points = {new Point(40, -23), new Point(9, 138), new Point(429, 115), new Point(50, -17), new Point(-3, 80), new Point(-10, 33), new Point(5, -21), new Point(-3, 80), new Point(-6, -65), new Point(-18, 26), new Point(-6, -65), new Point(5, 72), new Point(0, 77), new Point(-9, 86), new Point(10, -2), new Point(-8, 85), new Point(21, 130), new Point(18, -6), new Point(-18, 26), new Point(-1, -15), new Point(10, -2), new Point(8, 69), new Point(-4, 63), new Point(0, 3), new Point(-4, 40), new Point(-7, 84), new Point(-8, 7), new Point(30, 154), new Point(16, -5), new Point(6, 90), new Point(18, -6), new Point(5, 77), new Point(-4, 77), new Point(7, -13), new Point(-1, -45), new Point(16, -5), new Point(-9, 86), new Point(-16, 11), new Point(-7, 84), new Point(1, 76), new Point(3, 77), new Point(10, 67), new Point(1, -37), new Point(-10, -81), new Point(4, -11), new Point(-20, 13), new Point(-10, 77), new Point(6, -17), new Point(-27, 2), new Point(-10, -81), new Point(10, -1), new Point(-9, 1), new Point(-8, 43), new Point(2, 2), new Point(2, -21), new Point(3, 82), new Point(8, -1), new Point(10, -1), new Point(-9, 1), new Point(-12, 42), new Point(16, -5), new Point(-5, -61), new Point(20, -7), new Point(9, -35), new Point(10, 6), new Point(12, 106), new Point(5, -21), new Point(-5, 82), new Point(6, 71), new Point(-15, 34), new Point(-10, 87), new Point(-14, -12), new Point(12, 106), new Point(-5, 82), new Point(-46, -45), new Point(-4, 63), new Point(16, -5), new Point(4, 1), new Point(-3, -53), new Point(0, -17), new Point(9, 98), new Point(-18, 26), new Point(-9, 86), new Point(2, 77), new Point(-2, -49), new Point(1, 76), new Point(-3, -38), new Point(-8, 7), new Point(-17, -37), new Point(5, 72), new Point(10, -37), new Point(-4, -57), new Point(-3, -53), new Point(3, 74), new Point(-3, -11), new Point(-8, 7), new Point(1, 88), new Point(-12, 42), new Point(1, -37), new Point(2, 77), new Point(-6, 77), new Point(5, 72), new Point(-4, -57), new Point(-18, -33), new Point(-12, 42), new Point(-9, 86), new Point(2, 77), new Point(-8, 77), new Point(-3, 77), new Point(9, -42), new Point(16, 41), new Point(-29, -37), new Point(0, -41), new Point(-21, 18), new Point(-27, -34), new Point(0, 77), new Point(3, 74), new Point(-7, -69), new Point(-21, 18), new Point(27, 146), new Point(-20, 13), new Point(21, 130), new Point(-6, -65), new Point(14, -4), new Point(0, 3), new Point(9, -5), new Point(6, -29), new Point(-2, 73), new Point(-1, -15), new Point(1, 76), new Point(-4, 77), new Point(6, -29)}; Solution solution = new Solution(); int maxPoints = solution.maxPoints(points); assertThat(maxPoints, is(25)); }
@Test public void failsToCreateWithInvalidReservedStaticIpSizeException() throws Throwable { VirtualNetworkCreateSpec spec = new VirtualNetworkCreateSpec(); spec.setName("virtualNetworkName"); spec.setRoutingType(RoutingType.ROUTED); spec.setSize(VirtualNetworkCreateSpec.DEFAULT_MIN_NETWORK_SIZE); spec.setReservedStaticIpSize(4); try { frontendClient.create("parentId", "parentKind", spec); fail("Should have failed with InvalidReservedStaticIpSizeException"); } catch (Exception ex) { assertThat(ex, instanceOf(InvalidReservedStaticIpSizeException.class)); assertThat(ex.getMessage().equals("Static IP size (4) exceeds total IP size (8) minus reserved IP size (5)"), is(true)); } }
@Test public void oAuthAuthorizerWithAccessTokenSecret() { String accessToken = "TestAccessToken"; String accessTokenSecret = "TestAccessTokenSecret"; String consumerKey = "TestConsumerKey"; String consumerSecret = "TestConsumerSecret"; Header[] header = null; HttpRequestBase requestBase = new HttpGet(); try { requestBase.setURI(new URI(URL_STRING)); OAuthAuthorizer oauthAuthorizer = new OAuthAuthorizer(consumerKey, consumerSecret, accessToken, accessTokenSecret); oauthAuthorizer.authorize(requestBase); header = requestBase.getAllHeaders(); Assert.assertEquals( accessToken, extractHeaderParams(header, requestBase, "OAuth oauth_token"), "The authorization header is not proper,oauth_token not present"); Assert.assertEquals( consumerKey, extractHeaderParams(header, requestBase, " oauth_consumer_key"), "The authorization header is not proper,oauth_consumer_key not present"); } catch (Exception e) { log.debug(e.getMessage()); } }
@Test public void testForEach() { IntList list = new IntList(); IntList other = new IntList(); list.forEach(other::add); assertThat(other.toArray()).isEmpty(); list.add(10); list.add(5); list.forEach(other::add); assertThat(list.toArray()).containsExactly(10, 5); }
@Test void orSearch() { final var searchQuery = parse("ryan or ryan"); assertThat(searchQuery.getExpression()) .asInstanceOf(type(BooleanGroup.class)) .satisfies(group -> { assertThat(group.getOperator()).isEqualTo(BooleanGroup.BooleanOperator.OR); assertThat(group.getExpressions()) .hasSize(2) .allSatisfy(expression -> assertThat(expression) .asInstanceOf(type(SearchQuery.class)) .extracting(SearchQuery::getTerm) .isEqualTo("ryan") ); }); }
@Test public void decodeThrowsExceptionForIntOverflow() throws IOException { byte[] encoded = encodeLong(1L << 32); thrown.expect(IOException.class); decodeInt(encoded); }
@Test public void testFindZBounds() { XYShapeRenderer r = new XYShapeRenderer(); assertNull(r.findZBounds(null)); DefaultXYZDataset dataset = new DefaultXYZDataset(); Range range; double data1[][] = { {1,1,1}, {1,1,1}, {1,2,3} }; dataset.addSeries("series1", data1); range = r.findZBounds(dataset); assertNotNull(range); assertEquals(1d, range.getLowerBound(), EPSILON); assertEquals(3d, range.getUpperBound(), EPSILON); double data2[][] = { {1,1,1}, {1,1,1}, {-1,-2,-3} }; dataset.removeSeries("series1"); dataset.addSeries("series2", data2); range = r.findZBounds(dataset); assertNotNull(range); assertEquals(-3d, range.getLowerBound(), EPSILON); assertEquals(-1d, range.getUpperBound(), EPSILON); double data3[][] = { {1,1,1}, {1,1,1}, {-1.2,2.9,3.8} }; dataset.removeSeries("series2"); dataset.addSeries("series3", data3); range = r.findZBounds(dataset); assertNotNull(range); assertEquals(-1.2d, range.getLowerBound(), EPSILON); assertEquals(3.8d, range.getUpperBound(), EPSILON); }
@Test public void testMessageFactoryContent() { MultiPayloadAdaptrisMessage message = (MultiPayloadAdaptrisMessage) messageFactory.newMessage(CONTENT); assertEquals(MultiPayloadAdaptrisMessage.DEFAULT_PAYLOAD_ID, message.getCurrentPayloadId()); assertEquals(1, message.getPayloadCount()); assertEquals(CONTENT, message.getContent()); assertEquals(0, message.getMetadata().size()); }
@Test void testColumnOrThrow() { assertThrows(IllegalStateException.class, () -> instance.columnOrThrow()); }
@Test public void no_content_no_option() { CoapMessage message = NO_CONTENT_NO_OPTION; ByteBuffer encoded = encoder.encode(message, null); Assert.assertEquals(NO_CONTENT_NO_OPTION_HEX, ByteBufferDumper.toHex(encoded)); }
@Test public void testRefund(){ UnionPayTrade unionPayTrade = new UnionPayTrade(); Map<String, String> paramMap = new HashMap<>(); paramMap.put("orderId",System.currentTimeMillis()+""); paramMap.put("origQryId","201610312015598471058"); paramMap.put("txnAmt","112555"); paramMap.put("txnSubType", "00"); unionPayTrade.refund(paramMap); }
@SuppressWarnings("deprecation") @Test public void testOverwriteValueWithNull() { assertNull(record().setString("a", "A").value("a", null).getString("a")); }
@Test public void testTableMetadataOthers() { List<ColumnMetadata> columnMetadata = getTableMetadata(EdgeType.OSPF).getColumnMetadata(); assertThat( columnMetadata.stream() .map(ColumnMetadata::getName) .collect(ImmutableList.toImmutableList()), contains(COL_INTERFACE, COL_REMOTE_INTERFACE)); assertThat( columnMetadata.stream() .map(ColumnMetadata::getSchema) .collect(ImmutableList.toImmutableList()), contains(Schema.INTERFACE, Schema.INTERFACE)); }
@Test(expected = UnsupportedOperationException.class) public void testSelectCase2() { cb.selectCase(); }
@Test void verifyCorrectNumberOfReports() { final int size = 5; Map<ComponentVariable, List<SetMonitoringDatum>> map = new HashMap<>(); ComponentVariable cv = getComponentVariable("component", "variable"); List<SetMonitoringDatum> list = new ArrayList<>(); for (int i = 0; i < size; i++) { list.add(generateDatum(i, SetMonitoringDatum.Type.LOWER_THRESHOLD, cv.getComponent(), cv.getVariable())); } map.put(cv, list); when(stationComponentsHolder.getAllMonitoredComponents()).thenReturn(map); GetMonitoringReportRequest request = new GetMonitoringReportRequest().withRequestId(1); handler.handle("1", request); verify(stationMessageSender).sendCallResult(anyString(), responseCaptor.capture()); GetMonitoringReportResponse response = responseCaptor.getValue(); assertThat(response.getStatus()).isEqualTo(GetMonitoringReportResponse.Status.ACCEPTED); verify(stationMessageSender).sendNotifyMonitoringReport(eq(1), resultsCaptor.capture()); Map<ComponentVariable, List<SetMonitoringDatum>> result = resultsCaptor.getValue(); assertThat(result.get(cv)).hasSize(size); }
@Test public void testReverseZoneNames() throws Exception { Configuration conf = new Configuration(); conf.set(KEY_DNS_ZONE_SUBNET, "172.26.32.0"); conf.set(KEY_DNS_ZONE_MASK, "255.255.224.0"); Name name = getRegistryDNS().getReverseZoneName(conf); assertEquals("wrong name", "26.172.in-addr.arpa.", name.toString()); }
@Test public void shouldClearLinesRemovedCounterWhenLevelChanged() { levels.linesRemoved(20); assertEquals(1, levels.getCurrentLevelNumber()); assertLinesRemovedWithoutOverflown(0); levels.linesRemoved(10); assertLinesRemovedWithoutOverflown(10); }
@Test public void getAtomColorTest() { Color testColor = Color.RED; IAtomContainer singleAtom = makeSingleAtom("O"); model.set(AtomColor.class, testColor); model.set(ColorByType.class, false); generator.getAtomColor(singleAtom.getAtom(0), model); List<IRenderingElement> elements = getAllSimpleElements(generator, singleAtom); Assert.assertEquals(1, elements.size()); AtomSymbolElement element = ((AtomSymbolElement) unbox(elements.get(0))); Assert.assertEquals(testColor, element.color); }
@Test public void testClosedInterval() { SubRange range = new SubRange(0, 100); for (int i = 0; i <= 100; i++) { assertThat(range.includes(i), equalTo(true)); } }
@Test public void enableCreateCollectionContainer_CreateList() { enableCreateCollectionContainer(true, true); }
@Test public void shouldReturnEmptyMapOnRetrievalOfInternalAddressesIfNoPortExposed() throws Exception { assertTrue(strategy.getInternalAddressesAndPorts(containerInfo, HOST).isEmpty()); }
@Test public void testCanReadProperties() { AbstractTreePermission atp = createAbstractTreePermission(tree, TreeType.DEFAULT, pp); assertFalse(atp.canReadProperties()); }
@Test public void testGetOptionalBooleanParameter_ValueTrue() throws JournalException { parameters.put(PARAMETER_NAME, VALUE_TRUE); boolean result = ParameterHelper.getOptionalBooleanParameter(parameters, PARAMETER_NAME, false); assertEquals(true, result); }
@Test public void testCreate() { metadata.commit(() -> { DataSet dset = null; for (int srcIdx = 0; srcIdx < 2; srcIdx++) { for (int dsIdx = 1; dsIdx <= COUNT + 1; dsIdx++) { dset = createDataSet(this.dSrcIds.get(srcIdx), srcIdx * 10 + dsIdx); } this.dSetIds.add(dset.getId()); } }, MetadataAccess.SERVICE); metadata.read(() -> { Optional<DataSet> dset0 = this.dataSetProvider.find(this.dSetIds.get(0)); assertThat(dset0).isNotNull().isPresent(); assertThat(dset0.get()).extracting("title", "description").contains(dataSetTuple(COUNT + 1).toArray()); assertThat(dset0.get().getDataSource()).isNotNull().extracting("id").contains(this.dSrcIds.get(0)); Optional<DataSet> dset1 = this.dataSetProvider.find(this.dSetIds.get(1)); assertThat(dset1).isNotNull().isPresent(); assertThat(dset1.get()).extracting("title", "description").contains(dataSetTuple(10 + COUNT + 1).toArray()); assertThat(dset1.get().getDataSource()).isNotNull().extracting("id").contains(this.dSrcIds.get(1)); }, MetadataAccess.SERVICE); }
@Test public void testHour() { assertNull(getLib().hour(makeDateAndTime(null))); assertEquals(makeNumber("12"), getLib().hour(makeTime("12:15:00.000+01:00"))); assertEquals(makeNumber("12"), getLib().hour(makeDateAndTime("2015-12-24T12:15:00.000+01:00"))); assertNull(getLib().hour(makeDateAndTime("xxx"))); }
@Test public void testDataWithMapMessageAnnotationAndContentTypeJmsMapMessage() throws Exception { Map<String, Object> originalMap = Collections.singletonMap("testKey", "testValue"); byte[] data = new MapToJmsMapMessage().toMimeContent(originalMap); String expectedMimeType = "jms/map-message"; final Data value = new Data(new Binary(data)); Properties properties = new Properties(); properties.setContentType(Symbol.valueOf(expectedMimeType)); Message_1_0 sourceMessage = createTestMessage(properties, MAP_MESSAGE_MESSAGE_ANNOTATION, value.createEncodingRetainingSection()); final AMQMessage convertedMessage = _converter.convert(sourceMessage, mock(NamedAddressSpace.class)); assertEquals("Unexpected mime type", expectedMimeType, convertedMessage.getMessageHeader().getMimeType()); final QpidByteBuffer content = convertedMessage.getContent(0, (int) convertedMessage.getSize()); assertArrayEquals("Unexpected content", data, getBytes(content)); }
@Test public void testRegexFileNameFiltering() throws IOException { append("a.log"); append("a.log.1"); append("b.log"); append("c.log.yyyy.MM-01"); append("c.log.yyyy.MM-02"); TaildirMatcher tm1 = new TaildirMatcher("ab", tmpDir.getAbsolutePath() + File.separator + "[ab].log", isCachingNeeded); TaildirMatcher tm2 = new TaildirMatcher("c", tmpDir.getAbsolutePath() + File.separator + "c.log.*", isCachingNeeded); List<String> files1 = filesToNames(tm1.getMatchingFiles()); List<String> files2 = filesToNames(tm2.getMatchingFiles()); assertEquals(2, files1.size()); assertEquals(2, files2.size()); assertTrue("Regex pattern for ab should have matched a.log file", files1.contains("a.log")); assertFalse("Regex pattern for ab should NOT have matched a.log.1 file", files1.contains("a.log.1")); assertTrue("Regex pattern for ab should have matched b.log file", files1.contains("b.log")); assertTrue("Regex pattern for c should have matched c.log.yyyy-MM-01 file", files2.contains("c.log.yyyy.MM-01")); assertTrue("Regex pattern for c should have matched c.log.yyyy-MM-02 file", files2.contains("c.log.yyyy.MM-02")); }
@Test public void viewInvite() throws Exception { long applicationId = 1L; ZonedDateTime dateAssigned = ZonedDateTime.now(); setupViewInvite(applicationId, dateAssigned); MvcResult result = mockMvc.perform(get("/assessment/interview/competition/{competitionId}/applications/invite/{applicationId}/view", competition.getId(), applicationId)) .andExpect(status().isOk()) .andExpect(model().attributeExists("model")) .andExpect(view().name("assessors/interview/application-view-invite")) .andReturn(); InterviewAssignmentApplicationsSentInviteViewModel model = (InterviewAssignmentApplicationsSentInviteViewModel) result.getModelAndView().getModel().get("model"); assertEquals("Content", model.getAdditionalText()); assertEquals("Subject", model.getSubject()); assertEquals("Template", model.getContent()); assertEquals("Organisation", model.getLeadOrganisation()); assertEquals("Filename", model.getFeedbackFilename()); assertEquals(dateAssigned, model.getDateAssigned()); assertTrue(model.hasAttachment()); }
@Test public void testGetPattern() { assertThat(DateFormats.getPattern(GERMAN), is(DateFormats.PATTERN_DE)); assertThat(DateFormats.getPattern(GERMANY), is(DateFormats.PATTERN_DE)); assertThat(DateFormats.getPattern(AUSTRIA), is(DateFormats.PATTERN_DE)); assertThat(DateFormats.getPattern(ENGLISH), is(not(nullValue()))); assertThat(DateFormats.getPattern(ENGLISH), is(not(DateFormats.PATTERN_DE))); assertThat(DateFormats.getPattern(ENGLISH), is(not(DateFormats.PATTERN_ISO))); assertThat(DateFormats.getPattern(ENGLISH), is("M/d/yy")); assertThat(DateFormats.getPattern(US), is(not(nullValue()))); assertThat(DateFormats.getPattern(US), is(not(DateFormats.PATTERN_DE))); assertThat(DateFormats.getPattern(US), is(not(DateFormats.PATTERN_ISO))); assertThat(DateFormats.getPattern(US), is("M/d/yy")); assertThat(DateFormats.getPattern(UK), is(oneOf("dd/MM/yy", "dd/MM/y"))); }
@Test public void checkForInequalityOfSameObject() { EqualObject object = new EqualObject(); assertThat(comparator.checkForInequality(object, object), is(false)); }
@Test public void testLinkId() throws Exception { linkInformation.setLinkId("1.1.1.1"); assertThat(linkInformation.linkId(), is("1.1.1.1")); }
@Test public void testGetLocalAddress() { Assert.assertNotNull(NetworkUtil.getLocalAddress().getHostAddress()); }
@Test public void shouldGetPreferErrorOverCode() { values.put(ERROR_KEY, "a_valid_error"); values.put(CODE_KEY, "a_valid_code"); AuthenticationException ex = new AuthenticationException(values); assertThat(ex.getCode(), is(equalTo("a_valid_error"))); }
@Test public void testStringFormat() { AlgorithmLevelImpl level = mock(AlgorithmLevelImpl.class); when(level.get(anyString())).thenCallRealMethod(); try { level.get("qwe"); fail("expected exception"); } catch (IllegalStateException e) { assertEquals("You should override one of 'get' methods", e.getMessage()); } }
@Test public void parseRegion_invalidLength_IllegalArgumentException() throws Exception { final String str = "-1,-1,-1"; exception.expect(IllegalArgumentException.class); InputParser.parseRegion(str); }
@Test public void testCreatePiWithParallelism() { ProcessingItem pi = factory.createPi(processor,parallelism); assertNotNull("ProcessingItem created is null.",pi); assertEquals("ProcessingItem created is not a SimpleProcessingItem.",SimpleProcessingItem.class,pi.getClass()); assertEquals("Parallelism of PI is not ",parallelism,pi.getParallelism(),0); }
@Test public void testRecordReader() throws IOException { InputStream in = getClass().getResourceAsStream("stif.m_0014__.210186.sun"); StifRecordReader reader = new StifRecordReader(in); StifRecord record = reader.read(); assertNotNull(record); assertTrue(record instanceof TimetableRecord); TimetableRecord timetable = (TimetableRecord) record; assertSame(ServiceCode.SUNDAY, timetable.getServiceCode()); assertEquals("0014", timetable.getRouteIdentifier()); for (int i = 0; i < 86; ++i) { record = reader.read(); GeographyRecord stop = (GeographyRecord) record; assertNotNull(stop.getBoxID()); assertTrue(stop.getLongitude() > -74.9); assertTrue(stop.getLongitude() < -73.0); } record = reader.read(); TripRecord trip = (TripRecord) record; assertEquals("11559238", trip.getBlockNumber()); assertEquals("M14AD", trip.getRunRoute()); assertEquals("E", trip.getDirection()); StifRecord lastRecord = record; while (record != null) { lastRecord = record; record = reader.read(); } assertTrue(lastRecord instanceof SignCodeRecord); }
@Test public void migrate_multiDeviceContactUpdateJob() throws Exception { JobData testData = new JobData("MultiDeviceContactUpdateJob", "MultiDeviceContactUpdateJob", new Data.Builder().putBoolean("force_sync", false).putString("address", "+16101234567").build()); mockRecipientResolve("+16101234567", 1); RecipientIdJobMigration subject = new RecipientIdJobMigration(mock(Application.class)); JobData converted = subject.migrate(testData); assertEquals("MultiDeviceContactUpdateJob", converted.getFactoryKey()); assertEquals("MultiDeviceContactUpdateJob", converted.getQueueKey()); assertFalse(converted.getData().getBoolean("force_sync")); assertFalse(converted.getData().hasString("address")); assertEquals("1", converted.getData().getString("recipient")); new MultiDeviceContactUpdateJob.Factory().create(mock(Job.Parameters.class), converted.getData()); }
@Test public void testMalformedAddress() { String configAddress = "pipomolo"; configuration.setSimpleValue(ConfigKeys.ADDRESS, configAddress); try { portNetServiceDiscoveryComponent.discoverResource(configuration, resourceDiscoveryContext); fail("Component configuration should be invalid"); } catch (InvalidPluginConfigurationException e) { assertEquals(e.getCause().getClass(), UnknownHostException.class); } }
@Test( expected = UnsupportedOperationException.class ) public void testFlushPluginMap() { new JDomBuild( null ).flushPluginMap(); }
@Test public void testDecodeStringWithNonAsciiCharacters() { String bencodedInfo = "d1:v15:μTorrent 3.4.72:ypi62954ee"; Bencoding cut = new Bencoding(); BencodedMap map = (BencodedMap) cut.decode(new InStream(bencodedInfo.getBytes(UTF8))); assertEquals("μTorrent 3.4.7", map.get("v").get().asString(), "Incorrect version string has been read"); }
@Test public void convertNullToString() { String lang = LocaleConverter.convertToString(null); assertThat(lang, nullValue()); }
@Test public void testEndOnline() throws Exception { System.out.println("endOnline"); LoadosophiaAPIClientEmul instance = new LoadosophiaAPIClientEmul(this); instance.addEmul(new JSONObject()); instance.endOnline(""); }
@Test public void testIsNotTab() { final KeyDownEvent keyDownEvent = mock(KeyDownEvent.class); when(keyDownEvent.getNativeKeyCode()).thenReturn(KeyCodes.KEY_A); final boolean actual = view.isTab(keyDownEvent); assertFalse(actual); }
@Test public void testRpd1s3LinkEventHandlers() throws Exception { setValidatorDocument("<a href='' onclick=''></a>"); this.validator.validateRpd1s3(); assertFalse(isValid(this.validator), getErrors(this.validator)); setValidatorDocument("<a href='#' onclick=''></a>"); this.validator.validateRpd1s3(); assertFalse(isValid(this.validator), getErrors(this.validator)); setValidatorDocument("<a href='test' onclick=''></a>"); this.validator.validateRpd1s3(); assertTrue(isValid(this.validator), getErrors(this.validator)); }
@Test public void line() { new GraphFactory().connect("a", "b").connect("b", "c").isDag(); }
@Test public void requestDoOnCompleteDoesNotActivatesWhenErrors() { RuntimeException cause = new RuntimeException("help!!"); Requests.doOnComplete(request, () -> completed.set(Optional.empty())) .consume(); publisher.next(new Buffer("content", UTF_8)); assertThat(completed.get(), is(nullValue())); publisher.error(cause); assertThat(completed.get(), is(nullValue())); }
@Test public void oneLineTest() throws IOException { processLines("*"); assertThat("Result should contain one matcher", reader.getResult().size(), equalTo(1)); }
@Test public void testCompare2() { ByteBuf expected = wrappedBuffer(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}); ByteBuf actual = wrappedBuffer(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}); assertTrue(ByteBufUtil.compare(expected, actual) > 0); expected.release(); actual.release(); expected = wrappedBuffer(new byte[]{(byte) 0xFF}); actual = wrappedBuffer(new byte[]{(byte) 0x00}); assertTrue(ByteBufUtil.compare(expected, actual) > 0); expected.release(); actual.release(); }
@Test void getName() { assertEquals(NAME, loggerEvent.getName()); }
@Test public void testGetUnitTopics() { byte[] topicList = routeInfoManager.getUnitTopics(); assertThat(topicList).isNotNull(); }
@Test public void getUserInfoForTest() { strategies.getUserInfoFor(anyString(), anyString()); verify(preferenceScopeResolutionStrategy).getInfo(); }
@Test public void testHashCode() { DialBackground b1 = new DialBackground(Color.RED); DialBackground b2 = new DialBackground(Color.RED); assertEquals(b1, b2); int h1 = b1.hashCode(); int h2 = b2.hashCode(); assertEquals(h1, h2); }
@Test public void addIfAbsent() { List<Integer> list = new ArrayList<>(); list.addAll(Arrays.asList(1, 4, 6, 12, 30)); assertEquals(0, ListUtil.addIfAbsent(list, new NaturalOrderComparator<Integer>(), -2)); assertEquals(-1, ListUtil.addIfAbsent(list, new NaturalOrderComparator<Integer>(), 4)); assertEquals(5, ListUtil.addIfAbsent(list, new NaturalOrderComparator<Integer>(), 16)); Iterator<Integer> iterator = list.iterator(); assertEquals(Integer.valueOf(-2), iterator.next()); assertEquals(Integer.valueOf(1), iterator.next()); assertEquals(Integer.valueOf(4), iterator.next()); assertEquals(Integer.valueOf(6), iterator.next()); assertEquals(Integer.valueOf(12), iterator.next()); assertEquals(Integer.valueOf(16), iterator.next()); assertEquals(Integer.valueOf(30), iterator.next()); assertFalse(iterator.hasNext()); }
@Test void throwsExceptionWhenEnergyIsNotProvided() { assertThatExceptionOfType(IllegalArgumentException.class) .isThrownBy(() -> VitalScoreDetails.from(without( () -> sc2ApiVitalScoreDetails().toBuilder(), ScoreOuterClass.VitalScoreDetails.Builder::clearEnergy).build())) .withMessage("energy is required"); }
@Test public void getAndSet() { for (int i = 0; i < bit8Array.length(); i++) { assertEquals(bit8RawArray[i], bit8Array.getAndSet(i, bit8RawArray2[i])); } for (int i = 0; i < bit24Array.length(); i++) { assertEquals(bit24RawArray[i], bit24Array.getAndSet(i, bit24RawArray2[i])); } for (int i = 0; i < bit31Array.length(); i++) { assertEquals(bit31RawArray[i], bit31Array.getAndSet(i, bit31RawArray2[i])); } }
@Test public void shouldReturnMetricsVersionFrom100To23() { assertThat( new StreamsMetricsImpl(metrics, THREAD_ID, StreamsConfig.METRICS_0100_TO_24).version(), equalTo(Version.FROM_0100_TO_24) ); }
@Test public void testWrapJSONArray() throws JSONException, JsonException { JSONArray jsonArray = new JSONArray(primitiveList); jsonArray.put(new JSONObject(primitiveMap)); jsonArray.put(new JSONArray(primitiveList)); JsonValue jsonValue = JsonValue.wrap(jsonArray); assertTrue(jsonValue.getValue() instanceof JsonList); JsonList jsonList = jsonValue.getList(); for (int i = 0; i < jsonList.size(); i++) { JsonValue value = JsonValue.wrap(jsonArray.get(i)); assertEquals(value, jsonList.get(i)); } assertEquals(jsonArray.length(), jsonList.size()); }
@Test public void testNorthing() { ProjectedMeters projectedMeters = new ProjectedMeters(1.0, 0.0); assertEquals("northing should be 1", 1, projectedMeters.getNorthing(), 0); }
@Test public void testThatInvalidSchemePetstoreSwaggerIsInvalid() throws IOException { final String specification = resource("/openapi/v2/invalid/invalid-scheme.petstore.json"); final OpenApiModelInfo info = OpenApiModelParser.parse(specification, APIValidationContext.CONSUMED_API); assertThat(info.getErrors()).hasSize(1); assertThat(info.getWarnings()).hasSize(1); assertThat(info.getErrors().get(0).message()).startsWith("instance value (\"httpz\") not found in enum"); assertThat(info.getErrors().get(0).property()).contains("/schemes/0"); assertThat(info.getErrors().get(0).error()).contains("validation"); assertThat(info.getWarnings().get(0).message()).startsWith("Unable to determine the scheme"); assertThat(info.getWarnings().get(0).property()).contains("/schemes"); assertThat(info.getWarnings().get(0).error()).contains("missing-schemes"); }
@Test public void deleteWithRetries() { final ProcessGroupDTO group = new ProcessGroupDTO(); group.setId("d526adec-1f33-463b-8570-e9cf3e6c8703"); group.setParentGroupId("93b1abbb-f805-4f52-8a9e-ffdab224dc44"); final AbstractNiFiProcessGroupsRestClient client = Mockito.mock(AbstractNiFiProcessGroupsRestClient.class, Mockito.CALLS_REAL_METHODS); Mockito.when(client.doDelete(group)).thenThrow(new ClientErrorException(409)).thenReturn(Optional.empty()); Assert.assertEquals(Optional.empty(), client.deleteWithRetries(group, 1, 0, TimeUnit.NANOSECONDS)); }
@Test public void parseTest() throws SentenceException, AisMessageException, SixbitException { AisMessage27 aisMessage27 = (AisMessage27) getMessage(); assertEquals(-154.201666, aisMessage27.getPos().getLongitudeDouble(), 1e-6); assertEquals(87.065, aisMessage27.getPos().getLatitudeDouble(), 1e-6); assertEquals(0, aisMessage27.getSog()); assertEquals(0, aisMessage27.getCog()); assertEquals(0, aisMessage27.getPosAcc()); assertEquals(236091959, aisMessage27.getUserId()); assertEquals(3, aisMessage27.getNavStatus()); assertEquals(0, aisMessage27.getGnssPosStatus()); assertEquals(0, aisMessage27.getSpare()); }
@Test public void transformInboundPartitionsStatsRequest() throws Exception { PartitionsStatsRequest partitionStatsRequest = new PartitionsStatsRequest(); partitionStatsRequest.setDbName(DB_NAME); PartitionsStatsRequest result = databaseMapping.transformInboundPartitionsStatsRequest(partitionStatsRequest); assertThat(result, is(sameInstance(partitionStatsRequest))); assertThat(result.getDbName(), is(IN_DB_NAME)); }
@Test public void testWithBothDelimiters() { Map<String, String> hashMap = new HashMap<String, String>(); hashMap.put("key1", "value1"); NaturalKeyDescriptor naturalKeyDescriptor = new NaturalKeyDescriptor(); naturalKeyDescriptor.setNaturalKeys(hashMap); naturalKeyDescriptor.setEntityType("entity|~"); naturalKeyDescriptor.setTenantId("Type"); String deterministicId = deterministicUUIDGeneratorStrategy.generateId(naturalKeyDescriptor); NaturalKeyDescriptor naturalKeyDescriptor2 = new NaturalKeyDescriptor(); naturalKeyDescriptor2.setNaturalKeys(hashMap); naturalKeyDescriptor2.setEntityType("entity"); naturalKeyDescriptor2.setTenantId("|~Type"); String deterministicId2 = deterministicUUIDGeneratorStrategy.generateId(naturalKeyDescriptor2); Assert.assertFalse("Ids should not be the same: ", deterministicId.equals(deterministicId2)); }
@Test public void shouldCanWriteTypeWithJaxbElementAnnotation() { assertTrue(converter.canRead(MyXmlModel.class)); }
@Test public void testCommitWindow() throws Exception { Configuration conf = new Configuration(); conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir); AsyncDispatcher dispatcher = new AsyncDispatcher(); dispatcher.init(conf); dispatcher.start(); TestingJobEventHandler jeh = new TestingJobEventHandler(); dispatcher.register(JobEventType.class, jeh); SystemClock clock = new SystemClock(); AppContext appContext = mock(AppContext.class); ApplicationAttemptId attemptid = ConverterUtils.toApplicationAttemptId("appattempt_1234567890000_0001_0"); when(appContext.getApplicationID()).thenReturn(attemptid.getApplicationId()); when(appContext.getApplicationAttemptId()).thenReturn(attemptid); when(appContext.getEventHandler()).thenReturn( dispatcher.getEventHandler()); when(appContext.getClock()).thenReturn(clock); OutputCommitter committer = mock(OutputCommitter.class); TestingRMHeartbeatHandler rmhh = new TestingRMHeartbeatHandler(); CommitterEventHandler ceh = new CommitterEventHandler(appContext, committer, rmhh); ceh.init(conf); ceh.start(); ceh.handle(new CommitterJobCommitEvent(null, null)); long timeToWaitMs = 5000; while (rmhh.getNumCallbacks() != 1 && timeToWaitMs > 0) { Thread.sleep(10); timeToWaitMs -= 10; } Assert.assertEquals("committer did not register a heartbeat callback", 1, rmhh.getNumCallbacks()); verify(committer, never()).commitJob(any(JobContext.class)); Assert.assertEquals("committer should not have committed", 0, jeh.numCommitCompletedEvents); rmhh.setLastHeartbeatTime(clock.getTime()); timeToWaitMs = 5000; while (jeh.numCommitCompletedEvents != 1 && timeToWaitMs > 0) { Thread.sleep(10); timeToWaitMs -= 10; } Assert.assertEquals("committer did not complete commit after RM hearbeat", 1, jeh.numCommitCompletedEvents); verify(committer, times(1)).commitJob(any(JobContext.class)); cleanup(); ceh.handle(new CommitterJobCommitEvent(null, null)); timeToWaitMs = 5000; while (jeh.numCommitCompletedEvents != 2 && timeToWaitMs > 0) { Thread.sleep(10); timeToWaitMs -= 10; } Assert.assertEquals("committer did not commit", 2, jeh.numCommitCompletedEvents); verify(committer, times(2)).commitJob(any(JobContext.class)); ceh.stop(); dispatcher.stop(); }
@Test public void find_single_success_two_row() { int appReleaseId = 1; AppReleaseRelation appReleaseRelation = new AppReleaseRelation(); appReleaseRelation.setAppReleaseId(appReleaseId); appReleaseRelation.setDependAppReleaseId(2); appReleaseRelationDao.save(appReleaseRelation); appReleaseRelation = new AppReleaseRelation(); appReleaseRelation.setAppReleaseId(appReleaseId); appReleaseRelation.setDependAppReleaseId(3); appReleaseRelationDao.save(appReleaseRelation); Optional<Integer> dependAppReleaseIdOption = appReleaseRelationService.findSingle(appReleaseId); assertThat(dependAppReleaseIdOption).isEmpty(); }
@Test public void testGetInputTypes() { final Class[] inputTypes = plugIn.getInputTypes(); assertEquals(2, inputTypes.length); assertEquals(String.class, inputTypes[0]); assertEquals(File.class, inputTypes[1]); }
@Test public void testEquals() { DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset(); d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "ROW1", "COLUMN1"); DefaultBoxAndWhiskerCategoryDataset d2 = new DefaultBoxAndWhiskerCategoryDataset(); d2.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "ROW1", "COLUMN1"); assertEquals(d1, d2); assertEquals(d2, d1); }
@Test public void testAssignNamespaceRoleToConsumer() { Long consumerId = 1L; String token = "token"; doReturn(consumerId).when(consumerService).getConsumerIdByToken(token); String testNamespace = "namespace"; String modifyRoleName = RoleUtils.buildModifyNamespaceRoleName(testAppId, testNamespace); String releaseRoleName = RoleUtils.buildReleaseNamespaceRoleName(testAppId, testNamespace); String envModifyRoleName = RoleUtils.buildModifyNamespaceRoleName(testAppId, testNamespace, Env.DEV.toString()); String envReleaseRoleName = RoleUtils.buildReleaseNamespaceRoleName(testAppId, testNamespace, Env.DEV.toString()); long modifyRoleId = 1; long releaseRoleId = 2; long envModifyRoleId = 3; long envReleaseRoleId = 4; Role modifyRole = createRole(modifyRoleId, modifyRoleName); Role releaseRole = createRole(releaseRoleId, releaseRoleName); Role envModifyRole = createRole(envModifyRoleId, modifyRoleName); Role envReleaseRole = createRole(envReleaseRoleId, releaseRoleName); when(rolePermissionService.findRoleByRoleName(modifyRoleName)).thenReturn(modifyRole); when(rolePermissionService.findRoleByRoleName(releaseRoleName)).thenReturn(releaseRole); when(rolePermissionService.findRoleByRoleName(envModifyRoleName)).thenReturn(envModifyRole); when(rolePermissionService.findRoleByRoleName(envReleaseRoleName)).thenReturn(envReleaseRole); when(consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, modifyRoleId)).thenReturn(null); UserInfo owner = createUser(testOwner); when(userInfoHolder.getUser()).thenReturn(owner); ConsumerRole namespaceModifyConsumerRole = createConsumerRole(consumerId, modifyRoleId); ConsumerRole namespaceEnvModifyConsumerRole = createConsumerRole(consumerId, envModifyRoleId); ConsumerRole namespaceReleaseConsumerRole = createConsumerRole(consumerId, releaseRoleId); ConsumerRole namespaceEnvReleaseConsumerRole = createConsumerRole(consumerId, envReleaseRoleId); doReturn(namespaceModifyConsumerRole).when(consumerService).createConsumerRole(consumerId, modifyRoleId, testOwner); doReturn(namespaceEnvModifyConsumerRole).when(consumerService).createConsumerRole(consumerId, envModifyRoleId, testOwner); doReturn(namespaceReleaseConsumerRole).when(consumerService).createConsumerRole(consumerId, releaseRoleId, testOwner); doReturn(namespaceEnvReleaseConsumerRole).when(consumerService).createConsumerRole(consumerId, envReleaseRoleId, testOwner); consumerService.assignNamespaceRoleToConsumer(token, testAppId, testNamespace); consumerService.assignNamespaceRoleToConsumer(token, testAppId, testNamespace, Env.DEV.toString()); verify(consumerRoleRepository).save(namespaceModifyConsumerRole); verify(consumerRoleRepository).save(namespaceEnvModifyConsumerRole); verify(consumerRoleRepository).save(namespaceReleaseConsumerRole); verify(consumerRoleRepository).save(namespaceEnvReleaseConsumerRole); }
@Test public void shouldConstructProcessorsWhenViewIsNull() throws OperationException, IOException { final Scan scan = mock(Scan.class); given(scan.getAttribute(HBaseStoreConstants.VIEW)).willReturn(null); final List<GafferScannerProcessor> processors = QueryScanner.createProcessors(scan, SCHEMA, serialisation); assertEquals(2, processors.size()); int i = 0; assertTrue(processors.get(i) instanceof StoreAggregationProcessor); assertEquals(SCHEMA, ((StoreAggregationProcessor) processors.get(i)).getSchema()); i++; assertTrue(processors.get(i) instanceof ValidationProcessor); assertEquals(SCHEMA, ((ValidationProcessor) processors.get(i)).getSchema()); }
@Test public void isAllowed_hasOnlyWan_WanAllowedByUserAndConfig_policyIsTrue() { setupConnectivity(true, false, true); ConnectivityPolicy target = new ConnectivityPolicy(mockContext, true); assertThat(target.isAllowed(), is(true)); }
@Test public void setRowIndexNegativeThrowsException() throws Exception { SelectResultSet resultSet = resultSet( generator.generate(Arrays.asList("a", "b"), Arrays.asList( Arrays.asList(false, true), Arrays.asList(true, false), Arrays.asList(true, false)))); thrown.expect(IllegalArgumentException.class); thrown.expectMessage(containsString("Cannot set row index to a number less than 0")); resultSet.setRowIndex(-5); }
@Test public void testAddAdeFires() { TreeModelListener listener = createMock(TreeModelListener.class); listener.treeNodesInserted((TreeModelEvent)notNull()); replay(listener); d_treeModel.addTreeModelListener(listener); d_domain.getAdverseEvents().add(new AdverseEvent()); verify(listener); }
@Test public void localDatePeriodToMonthOnlyTest() { Temporal expectedFirst = LocalDate.of(1999, 4, 1); Temporal expectedSecond = LocalDate.of(1999, 4, 11); Integer startDayOfYear = 91; Integer endDayOfYear = 101; String eventDate = "1999-04-01/11"; String year = null; String month = null; String day = null; ParsedTemporal result = TemporalParser.parse(year, month, day, eventDate); assertEquals(expectedFirst, result.getFromDate()); assertEquals(expectedSecond, result.getToDate()); assertEquals(Year.from(expectedFirst), result.getYear()); assertEquals(Month.from(expectedFirst), result.getMonth()); assertEquals(MonthDay.from(expectedFirst).getDayOfMonth(), result.getDay().intValue()); assertTrue(result.getIssues().isEmpty()); assertEquals(startDayOfYear, result.getStartDayOfYear().get()); assertEquals(endDayOfYear, result.getEndDayOfYear().get()); }
@Test public void booloaderChain() throws JSONException { final String hardware = "0.2"; final String model = "6"; final String build = "bootloader"; List<Image> expected = Arrays.asList( new Image(hardware, model, build, "0.2.2", "bl.zip", "0.2.1", "3.5.0"), new Image(hardware, model, build, "0.3.1", "sd_bl.zip", "0.2.2", "3.5.0"), new Image(hardware, model, build, "0.3.2", "bl.zip", "0.3.1", "3.5.0"), new Image(hardware, model, build, "0.3.3", "bl.zip", "0.3.2", "3.5.0") ); assertEquals(expected, info.findBootloaderImages(hardware, model, "0.2.1", "0.3.3")); }
@Test public void returns_result_of_context_resolve() { Object contextResult = new Object(); when(mockSpecimenContext.resolve(any(Object.class))).thenReturn(contextResult); Object result = this.relay.create(SpecimenType.of(TypeWithFactoryMethod.class), mockSpecimenContext); assertSame(contextResult, result); }
@Test(expected = ProcessingException.class) public void testJsNoContainer() throws Exception { List<String> fields = ImmutableList.of("*"); GadgetsHandlerApi.JsRequest request = createJsRequest(null, null, fields, ImmutableList.of("rpc"), null); gadgetHandler.getJs(request); }
@Test public void shouldReturnString10WhenStringValueIs10() { String value = IntegerUtil.tryParse("10", "0"); assertEquals(value, "10"); }
@Test public void testExtractValueFromQueryStringAndKeyObjectID() throws IllegallyFormattedQueryStringException { String queryString = "ObjectID=" + validObjectID + "&SessionID=" + validSessionID; String key = "ObjectID"; String value = StringAndTextUtil.extractValueFromQueryStringAndKey(key, queryString); assertEquals("Unexpected return value.", validObjectID, value); }
@Test (expected = SDKResourceNotFoundException.class) public void testSendRequestNotFoundResponse() { Mockito.when(responseStatus.getStatusCode()).thenReturn(404); restClient.sendRequest(SESSION_ID, new Request(HttpMethod.GET, "")); fail("Exception should have been raised"); }
@Test public void testValidationRule() throws Exception { DDMForm ddmForm = new DDMForm(); ddmForm.addDDMFormField( createDDMFormField("field0", "numeric", FieldConstants.DOUBLE)); ddmForm.addDDMFormRule( new DDMFormRule( Arrays.asList( "setInvalid(" + "\"field0\", \"The value should be greater than " + "10.\")"), "getValue(\"field0\") <= 10")); DDMFormValues ddmFormValues = DDMFormValuesTestUtil.createDDMFormValues( ddmForm); ddmFormValues.addDDMFormFieldValue( DDMFormValuesTestUtil.createDDMFormFieldValue( "field0_instanceId", "field0", new UnlocalizedValue("5"))); DDMFormEvaluatorEvaluateResponse ddmFormEvaluatorEvaluateResponse = doEvaluate(ddmForm, ddmFormValues); Map<DDMFormEvaluatorFieldContextKey, Map<String, Object>> ddmFormFieldsPropertyChanges = ddmFormEvaluatorEvaluateResponse. getDDMFormFieldsPropertyChanges(); Assert.assertEquals( ddmFormFieldsPropertyChanges.toString(), 1, ddmFormFieldsPropertyChanges.size()); Map<String, Object> ddmFormFieldPropertyChanges = ddmFormFieldsPropertyChanges.get( new DDMFormEvaluatorFieldContextKey( "field0", "field0_instanceId")); Assert.assertEquals( "The value should be greater than 10.", ddmFormFieldPropertyChanges.get("errorMessage")); Assert.assertFalse((boolean)ddmFormFieldPropertyChanges.get("valid")); }
@Test public void testCreateNestedRule() { tableAdmin.addFamilyWithNestedRule(); VersionRule versionRule = GCRULES.maxVersions(10); DurationRule maxAgeRule = GCRULES.maxAge(30, TimeUnit.DAYS); VersionRule versionRule2 = GCRULES.maxVersions(2); IntersectionRule intersectionRule = GCRULES.intersection().rule(maxAgeRule).rule(versionRule2); UnionRule nestedCondition = GCRULES.union().rule(intersectionRule).rule(versionRule); boolean nestedRule = ruleCheck(nestedCondition); assertTrue(nestedRule); }
@Test void scheduleTriggerTask() { ZonedDateTime now = ZonedDateTime.now(); scheduler.clock = Clock.fixed(now.toInstant(), ZoneId.systemDefault()); var task = new TriggerTask("trigger-job", null, previous -> previous.plusHours(1), ZoneId.systemDefault()); scheduler.schedule(task, now); ArgumentCaptor<Runnable> scheduledTask = ArgumentCaptor.forClass(Runnable.class); verify(schedulerExecutor).schedule(scheduledTask.capture(), eq(0L), eq(TimeUnit.NANOSECONDS)); scheduledTask.getValue().run(); verify(schedulerExecutor).schedule(scheduledTask.capture(), eq(Duration.ofHours(1).toNanos()), eq(TimeUnit.NANOSECONDS)); verify(jobExecutor).submit((Callable<?>) any(Callable.class)); }
@Ignore("Remove to run test") @Test public void testRootNodeHasParent() { ArrayList<Record> records = new ArrayList<>(); records.add(new Record(0, 1)); records.add(new Record(1, 0)); BuildTree test = new BuildTree(); InvalidRecordsException expected = assertThrows( InvalidRecordsException.class, () -> test.buildTree(records)); assertThat(expected).hasMessage("Invalid Records"); }
@Test void inner_classes() throws Exception { MethodMatchers anyArg = MethodMatcherFactory.methodMatchers("org.sonar.test.Outer$Inner#foo"); MethodVisitor visitor = new MethodVisitor(); visitor.add(anyArg); scanWithVisitor(visitor, TestUtils.inputFile("src/test/files/matcher/InnerClass.java")); assertThat(visitor.count(anyArg)).isEqualTo(1); }
@Test public void enforcedBooleanConditionTrueTest() { boolean flag = InputsUtil.getEnforcedBooleanCondition("null, empty, many empty chars, tRuE but not false", true); assertTrue(flag); }
@Test public void givenBdocFileExtensionWillReturnFileTypeBDOC() throws Exception { assertThat(ValidationRequestUtils.parseFileExtension("bdoc")).isEqualTo(FileType.BDOC); }
@Test public void setNormalRoleName() { ECSMetadataServiceCredentialsFetcher fetcher = new ECSMetadataServiceCredentialsFetcher(); Assert.assertNotNull(fetcher); fetcher.setRoleName("role"); }
@Test public void should_not_allow_to_create_a_widget_with_an_empty_name() throws Exception { Widget customLabel = aWidget().name("").custom().build(); when(widgetRepository.create(customLabel)).thenThrow(new IllegalArgumentException()); mockMvc .perform(post("/rest/widgets") .contentType(MediaType.APPLICATION_JSON_VALUE) .content(convertObjectToJsonBytes(customLabel))) .andExpect(status().isBadRequest()); }
@Test void testWhenPersistingAValidDocument() { final DocumentArchivingContext documentArchivingContext = createDocumentArchivingContext(); final DocumentCreationContext documentCreationContext = DocumentCreationContext.builder() .build(); when(documentCreationContextFactory.newContext(documentArchivingContext)) .thenReturn(Mono.just(documentCreationContext)); final DocumentEntity documentEntity = DocumentEntity.builder() .build(); when(documentEntityFactory.newDocumentEntity(documentCreationContext)) .thenReturn(Mono.just(documentEntity)); final Mono<DocumentEntity> result = underTest.archiveDocument(documentArchivingContext); StepVerifier.create(result) .consumeNextWith(documentEntity1 -> assertThat(documentEntity1, is(documentEntity))) .verifyComplete(); verify(vaultDocumentStorage).persistDocument(eq(documentEntity), documentContent.capture()); assertThat(documentContent.getValue(), is(CONTENT)); verify(documentCreationContextFactory).newContext(documentArchivingContext); verify(documentEntityFactory).newDocumentEntity(documentCreationContext); }
@Test public void testSuperInvocation() throws Exception { DynamicType.Loaded<SuperMethodInvocation> loaded = new ByteBuddy() .subclass(SuperMethodInvocation.class) .method(takesArguments(0).and(named(FOO))) .intercept(MethodCall.invokeSuper()) .make() .load(SuperMethodInvocation.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER); assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0)); assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1)); assertThat(loaded.getLoaded().getDeclaredMethod(FOO), not(nullValue(Method.class))); assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1)); assertThat(loaded.getLoaded().getDeclaredFields().length, is(0)); SuperMethodInvocation instance = loaded.getLoaded().getDeclaredConstructor().newInstance(); assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SuperMethodInvocation.class))); assertThat(instance, instanceOf(SuperMethodInvocation.class)); assertThat(instance.foo(), is(FOO)); }
@Test public void buildPort_PortIsValid_ValidResult() throws Exception { final String port = "1"; final boolean mandatory = true; final Short expectedResult = Short.parseShort(port); Short result = InputBuilderUtils.buildPort(port, mandatory); assertEquals(expectedResult, result); }
@Test(expected = RestClientException.class) public void discoverWhenProviderDoesNotSupportDiscoveryThenThrowRestClientException() throws Exception { this.server.enqueue(new MockResponse().setResponseCode(404)); ProviderDiscoveryClient client = new ProviderDiscoveryClient(this.server.url("").toString()); client.discover(); }
@Test public void stripConnectionHeadersAndNominees() { final HttpHeaders inHeaders = new DefaultHttpHeaders(); inHeaders.add(CONNECTION, "foo"); inHeaders.add("foo", "bar"); final Http2Headers out = new DefaultHttp2Headers(); HttpConversionUtil.toHttp2Headers(inHeaders, out); assertTrue(out.isEmpty()); }
@Test public void testCoresMessage() { ComplianceReason reason = buildReason("CORES", buildGeneralAttributes("8", "4")); generator.setMessage(consumer, reason, new Date()); assertEquals( "Only supports 4 of 8 cores.", reason.getMessage()); }
@Test public void testLexWithBaseAndComment() { List<Token> tokens = QueryPrologLexer.lex("BASE <foobar> # COMMENT \nSELECT * WHERE {?s ?p ?o} "); assertNotNull(tokens); Token t = tokens.get(tokens.size() - 1); assertTrue(t.getType().equals(TokenType.REST_OF_QUERY)); assertEquals("SELECT * WHERE {?s ?p ?o} ", t.s); }
@Test public void testConfirmPasswordReset_NotSuccessful() { TestObserver obs = TestObserver.create(); mockNotSuccessfulResultForTask(mockVoidTask, new IllegalStateException()); when(mockFirebaseAuth.confirmPasswordReset("code", "password")).thenReturn(mockVoidTask); RxFirebaseAuth.confirmPasswordReset(mockFirebaseAuth, "code", "password").subscribe(obs); verify(mockFirebaseAuth).confirmPasswordReset("code", "password"); callOnComplete(mockVoidTask); obs.dispose(); callOnComplete(mockVoidTask); obs.assertError(IllegalStateException.class); obs.assertNoValues(); }
@Test public void checkInMethodWithTypeCastOnEqualRequiredTypeWithExisting() throws Exception { IField field = new Field(new FieldName("a")); IObject env = mock(IObject.class); when(env.getValue(new FieldName("a"))).thenReturn("1"); String result = field.in(env, String.class); assertEquals(result, "1"); }
@Test public void shouldReturnNullIfThereAreNoDataSourcesWithData() throws Exception { givenCacheDataSourceReturnsNull(); givenReadableDataSourceReturnsNull(); RosieRepository<?, ?> repository = givenAReadableAndCacheRepository(); Collection<?> values = repository.getAll(); assertNull(values); }
@Test public void noAttachedMetaValueDoesNotCreateOrUpdateMetaValue() { ApplicationFinanceRow convertedApplicationFinanceRow = newApplicationFinanceRow() .withTarget(applicationFinance).build(); ApplicationFinanceRow currentApplicationFinanceRow = newApplicationFinanceRow() .withTarget(applicationFinance).build(); when(applicationFinanceRowRepositoryMock.findById(costId)).thenReturn(Optional.of(currentApplicationFinanceRow)); when(organisationFinanceDefaultHandlerMock.toApplicationDomain(any())).thenReturn(convertedApplicationFinanceRow); when(organisationFinanceDefaultHandlerMock.updateCost(any())).thenReturn(currentApplicationFinanceRow); when(financeRowMetaValueRepositoryMock.financeRowIdAndFinanceRowMetaFieldId(any(), any())).thenReturn(null); when(financeRowMetaFieldRepositoryMock.findById(financeRowMetaField.getId())).thenReturn(Optional.of(financeRowMetaField)); ServiceResult<FinanceRowItem> result = service.update(costId, newFinanceRowItem); assertTrue(result.isSuccess()); verify(financeRowMetaValueRepositoryMock, times(0)).save(any(FinanceRowMetaValue.class)); }
@Test public void getInvite() throws Exception { String hash = "hash"; MonitoringOfficerInviteResource invite = newMonitoringOfficerInviteResource() .withHash(hash) .build(); when(monitoringOfficerInviteServiceMock.getInviteByHash(hash)).thenReturn(serviceSuccess(invite)); mockMvc.perform(get("/monitoring-officer-registration/get-monitoring-officer-invite/{hash}", hash)) .andExpect(status().isOk()); verify(monitoringOfficerInviteServiceMock, only()).getInviteByHash(hash); }
@Test public void removeUserFromSuperadminTest() { com.intuit.wasabi.authenticationobjects.UserInfo uInfo = com.intuit.wasabi.authenticationobjects.UserInfo.newInstance( com.intuit.wasabi.authenticationobjects.UserInfo.Username. valueOf("test1")).build(); repository.removeUserFromSuperAdminRole(uInfo); verify(appRoleAccessor).deleteAppRoleBy( CassandraAuthorizationRepository.ALL_APPLICATIONS, "test1"); verify(userRoleAccessor).deleteUserRoleBy("test1", CassandraAuthorizationRepository.ALL_APPLICATIONS); }
@Test public void shouldReturnNullIfKeyDoesntExist() { assertNull(theStore.get("whatever")); }
@Test public void testLemmatizeInsensitive() throws Exception { Lemmatizer dict = createDictionary(false); String[] toks = {"casa", "casa", "Casa"}; String[] tags = {"V", "NOUN", "PROP"}; String[] lemmas = dict.lemmatize(toks, tags); Assert.assertEquals("casar", lemmas[0]); Assert.assertEquals("casa", lemmas[1]); Assert.assertNull(lemmas[2]); }
@Test void endStar() { final LocationMatcher m = new LocationMatcher(Location.of("pa*")); assertTrue(m.matchesPackage("pa")); assertFalse(m.matchesPackage("xxxpa")); assertTrue(m.matchesPackage("paxxx")); }
@Test public void ontologyTermsGivesFactorGrouping2() { when(organismPartGroupingService.getAnatomicalSystemsGrouping(ontologyTermsAcrossExperiments)) .thenReturn(ImmutableMap.of(ColumnGroup.create("", ""), ImmutableSet.of(OntologyTerm.create("")))); when(organismPartGroupingService.getOrgansGrouping(ontologyTermsAcrossExperiments)) .thenReturn(ImmutableMap.of(ColumnGroup.create("", ""), ImmutableSet.of(OntologyTerm.create("")))); assertThat( subject.groupOrganismPartOntologyTerms(ontologyTermsAcrossExperiments).size(), is(2)); }
@Test public void handlesEmptyKgResultsTest() throws IOException, GeneralSecurityException { String jsonStr = gson.toJson(Map.of("text", "asdfjkl13579")); StringReader requestReadable = new StringReader(jsonStr); when(request.getReader()).thenReturn(new BufferedReader(requestReadable)); when(request.getMethod()).thenReturn("POST"); SlackSlashCommand functionInstance = new SlackSlashCommand(alwaysValidVerifier); functionInstance.service(request, response); writerOut.flush(); assertThat(responseOut.toString()).contains("No results match your query..."); }
@Test public void parentLogger() { Logger logger = LogManager.getParentLogger("test.example.MyClass"); assertThat(logger.getName()).isEqualTo("test.example"); Category parent = logger.getParent(); assertThat(parent).isNotNull(); assertThat(parent.getName()).isEqualTo("test"); }
@Test public void fromList() throws Exception { List<Object> values = new ArrayList<>(); values.add(0, "value0"); values.add(1, "value1"); Body body = Body.from(values); checkBody(body, TreeUtil.toJsonNode(values)); }
@Test public void shouldCreateEditionFromProperties() { final ClientSideStateProperties properties = new ClientSideStateProperties(); properties.setAuthenticationAlgorithm("HmacSHA1"); properties.setAuthenticationKey("oID3dF6UovTkzMyr3a9dr0kgTnE="); properties.setEncryptionAlgorithm("AES/CBC/PKCS5Padding"); properties.setEncryptionKey("T2NasjRXURA3dSL8dUQubQ=="); properties.setTid(1L); final StaticEdition edition = new StaticEdition(properties); assertThat(edition.authenticationAlgorithm).isEqualTo("HmacSHA1"); assertThat(edition.encryptionAlgorithm).isEqualTo("AES/CBC/PKCS5Padding"); assertThat(edition.tid).isEqualTo(new byte[] {1}); final KeySource keySource = edition.keySource(); assertThat(keySource.authenticationKey()) .isEqualTo(new SecretKeySpec( new byte[] {(byte) 0xa0, (byte) 0x80, (byte) 0xf7, 0x74, 0x5e, (byte) 0x94, (byte) 0xa2, (byte) 0xf4, (byte) 0xe4, (byte) 0xcc, (byte) 0xcc, (byte) 0xab, (byte) 0xdd, (byte) 0xaf, 0x5d, (byte) 0xaf, 0x49, 0x20, 0x4e, 0x71}, "HmacSHA1")); assertThat(keySource.encryptionKey()).isEqualTo(new SecretKeySpec( new byte[] {0x4f, 0x63, 0x5a, (byte) 0xb2, 0x34, 0x57, 0x51, 0x10, 0x37, 0x75, 0x22, (byte) 0xfc, 0x75, 0x44, 0x2e, 0x6d}, "AES")); KeySourceAssert.assertThat(keySource).canBeUsedForCryptography(); }
@Test public void shouldReturnCorrectCapacityReasonCode() { Service service = Service.Builder.newInstance("1").addSizeDimension(0, 5).setLocation(Location.newInstance(5, 7)).build(); VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(VehicleRoutingProblem.FleetSize.FINITE).addVehicle(vehicle).addJob(service) .build(); VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp); UnassignedJobReasonTracker reasonTracker = new UnassignedJobReasonTracker(); vra.addListener(reasonTracker); VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions()); Assert.assertEquals(1, solution.getUnassignedJobs().size()); Assert.assertEquals(3, reasonTracker.getMostLikelyReasonCode(solution.getUnassignedJobs().iterator().next().getId())); }
@Test public void shouldReturnCompressionWithVersionsSpecifiedCaseInsensitive() { Config config = Config.defaults( CausalClusteringSettings.compression_implementations, COMPRESSION_SNAPPY.implementation().toLowerCase() ); List<ModifierSupportedProtocols> supportedModifierProtocols = new SupportedProtocolCreator( config, log ).createSupportedModifierProtocols(); List<String> versions = supportedModifierProtocols.get( 0 ).versions(); assertThat( versions, contains( COMPRESSION_SNAPPY.implementation() ) ); }
@Test public void shouldNotBeCompatible() { assertFalse(referenceReader.test(new TypeReference<ArrayList<BigDecimal>>(){})); assertFalse(referenceReader.test(new TypeReference<String>(){})); assertFalse(referenceReader.test(new TypeReference<Set<String>>(){})); assertFalse(referenceReader.test(new TypeReference<List<List<String>>>(){})); assertFalse(referenceReader.test(new TypeReference<Queue<String>>(){})); assertFalse(referenceReader.test(new TypeReference<Map<Integer, List<String>>>(){})); }
@Test public void compareDifferent() { DebugChemObject co1 = new DebugChemObject(); DebugChemObject co2 = new DebugChemObject(); co1.setID(new String("a1")); co2.setID(new String("a2")); Assert.assertFalse(co1.compare(co2)); }
@Test public void testGetStreamJobFactoryClass() { String jobFactoryClass = "my.job.Factory.class"; JobConfig jobConfig = new JobConfig(new MapConfig(ImmutableMap.of(JobConfig.STREAM_JOB_FACTORY_CLASS, jobFactoryClass))); assertEquals(Optional.of(jobFactoryClass), jobConfig.getStreamJobFactoryClass()); jobConfig = new JobConfig(new MapConfig()); assertEquals(Optional.empty(), jobConfig.getStreamJobFactoryClass()); }
@Test public void verify_requiresDns1123Names_returnFalse_for_names_not_in_list() { assertThat(LegalNames.isDns1123Required("DatasetName"), is(false)); assertThat(LegalNames.isDns1123Required("DiskName"), is(false)); assertThat(LegalNames.isDns1123Required("InitiatorName"), is(false)); assertThat(LegalNames.isDns1123Required("NominatedNodeName"), is(false)); assertThat(LegalNames.isDns1123Required("PdName"), is(false)); assertThat(LegalNames.isDns1123Required("ShareName"), is(false)); assertThat(LegalNames.isDns1123Required("StoragePolicyName"), is(false)); }
@Test public void testIsIncluded() throws Exception { final List<URL> pomList = new LinkedList<>(); pomList.add(getClass().getResource("beam_pom.xml")); pomList.add(getCurrentCeresPom()); final File exclusionList = new File(ExclusionListBuilder.EXCLUSION_LIST_FILENAME); ExclusionListBuilder.generateExclusionList(exclusionList, pomList); try (CsvReader csvReader = new CsvReader(new FileReader(exclusionList), CSV_SEPARATOR_ARRAY)) { final String[] excludedModules = csvReader.readRecord(); assertEquals(false, ModuleUtils.isExcluded(modules.get(0), excludedModules)); assertEquals(true, ModuleUtils.isExcluded(modules.get(1), excludedModules)); assertEquals(true, ModuleUtils.isExcluded(modules.get(2), excludedModules)); } }
@Test void generatedDateShouldNotBeNull() { assertThat(randomizer.getRandomValue()).isNotNull(); }
@Test public void testSplit() { final String[] e1 = { "Foo f", "Bar f" }; final String[] i1 = { "Foo f", "Bar f" }; this.assertSplit(e1, i1); final String[] e2 = { "Foo f", "Bar f" }; final String[] i2 = { "Foo f, Bar f" }; this.assertSplit(e2, i2); final String[] e3 = { "Foo<String, String> f", "Bar<Integer, Integer> b" }; final String[] i3 = { "Foo<String, String> f, Bar<Integer, Integer> b" }; this.assertSplit(e3, i3); final String[] e4 = { "Foo<String,String> f", "Bar<Integer,Integer> b" }; final String[] i4 = { "Foo<String,String> f,Bar<Integer,Integer> b" }; this.assertSplit(e4, i4); }
@Test public void testParseKeyIllegalArgumentException3() { thrown.expect(IllegalArgumentException.class); GroupKey.parseKey("f+o+o+bar"); }
@Test public void testGetWikiReference() throws Exception { assertThat(factory.newUserReference(userRef).getWikiReference(), equalTo(xwiki)); assertThat(factory.newUserReference(anotherWikiUserRef).getWikiReference(), equalTo(wiki)); assertThat(factory.newEntityReference(mainEntity).getWikiReference(), equalTo(xwiki)); assertThat(factory.newEntityReference(subEntity).getWikiReference(), equalTo(wiki)); assertThat(factory.newEntityReference(xwiki).getWikiReference(), equalTo(xwiki)); assertThat(factory.newEntityReference(wiki).getWikiReference(), equalTo(wiki)); }
@Test public void shouldFindUnclosedQuote_escapedThree() { final String line = "some line 'this is in a quote\\\'"; assertThat(UnclosedQuoteChecker.isUnclosedQuote(line), is(true)); }
@Test(expected = ThingIdInvalidException.class) public void tryToCreateInstanceWithNullThingIdString() { AclModified.of((String) null, TestConstants.Thing.ACL, TestConstants.Thing.REVISION_NUMBER, TestConstants.EMPTY_DITTO_HEADERS); }
@Test public void testCompactEncodeEvenTerminated() { byte[] test = new byte[]{0, 15, 1, 12, 11, 8, T}; byte[] expectedData = new byte[]{0x20, 0x0f, 0x1c, (byte) 0xb8}; assertArrayEquals("even terminated compact encode fail", expectedData, CompactEncoder.packNibbles(test)); }
@Test public void complement() { final Random random = new Random(Randoms.seed()); final byte[] data = new byte[20]; random.nextBytes(data); final byte[] cdata = Bits.complement(data.clone()); Assert.assertFalse(Arrays.equals(data, cdata)); Assert.assertTrue(Arrays.equals(data, Bits.complement(cdata))); }
@Test public void shouldRequestCorrectSchemaOnGetValueSchema() throws Exception { supplier.getValueSchema(TOPIC_NAME, Optional.empty()); verify(srClient).getLatestSchemaMetadata(TOPIC_NAME + "-value"); }
@Test public void optionWithMoreThanOneHyphen() { String cmd = "start locator --name=loc1 --http-service-port=8080"; String formattedCmd = this.formatter.formatCommand(cmd); String expected = "start locator --name=loc1 --http-service-port=8080"; assertThat(formattedCmd).as(cmd).isEqualTo(expected); }
@Test public void testGetBottomId() { assertEquals(BOTTOM_ID, (long) edge.getBottomId()); }
@Test public void testTuples() { PType<TupleN> ptype = Orcs.tuples(Writables.ints(), Writables.strings(), Orcs.reflects(Person.class), Writables.tableOf(Writables.strings(), Orcs.reflects(Person.class))); TupleN t = new TupleN(1, "John Smith", new Person("Alice", 23, Arrays.asList("666-677-9999")), new Pair<String, Person>("Bob", new Person("Bob", 26, Arrays.asList("999-888-1132", "000-222-9934")))); String typeStr = "struct<a:int,b:string,c:" + Person.TYPE_STR + ",d:struct<d1:string,d2:" + Person.TYPE_STR + ">>"; TypeInfo typeInfo = TypeInfoUtils.getTypeInfoFromTypeString(typeStr); String tableTypeStr = "struct<a:string,b:" + Person.TYPE_STR + ">"; TypeInfo tableTypeInfo = TypeInfoUtils.getTypeInfoFromTypeString(tableTypeStr); OrcStruct s = OrcUtils.createOrcStruct(typeInfo, new IntWritable(1), new Text("John Smith"), OrcUtils.createOrcStruct(Person.TYPE_INFO, new Text("Alice"), new IntWritable(23), Arrays.asList(new Text("666-677-9999")) ), OrcUtils.createOrcStruct(tableTypeInfo, new Text("Bob"), OrcUtils.createOrcStruct(Person.TYPE_INFO, new Text("Bob"), new IntWritable(26), Arrays.asList(new Text("999-888-1132"), new Text("000-222-9934")) ) ) ); OrcWritable w = new OrcWritable(); w.set(s); testInputOutputFn(ptype, t, w); }
@Test public void shouldParseWindowExpressionWithRetention() { final KsqlWindowExpression parsed = ExpressionParser.parseWindowExpression( "TUMBLING (SIZE 1 DAYS, RETENTION 2 DAYS, GRACE PERIOD 2 DAYS)" ); assertThat( parsed, equalTo(new TumblingWindowExpression( parsed.getLocation(), new WindowTimeClause(1, TimeUnit.DAYS), Optional.of(new WindowTimeClause(2, TimeUnit.DAYS)), Optional.of(new WindowTimeClause(2, TimeUnit.DAYS))) ) ); }
@Test public void querySeq2() throws IOException { result = query.executeQuery("2"); Iterator<GeneticVariant> it = result.iterator(); int i = 0; while (it.hasNext()) { i++; GeneticVariant variant = it.next(); assertNotNull(variant); assertEquals(variant.getSequenceName(), "2"); } assertEquals(i, 1); }
@Test public void testMetadata() { EasyMockSupport support = new EasyMockSupport(); OrderManagerRegistry orderRegistry = support.createMock(OrderManagerRegistry.class); @SuppressWarnings("unchecked") MapContext<? extends Viewer> mapManager = support.createMock(MapContext.class); PlatformMetadata metadata = new PlatformMetadata(); support.replayAll(); BuilderFactory factory = new BuilderFactory(orderRegistry, mapManager); List<GeometryBuilder> builders = factory.createBuilders(metadata); assertEquals(2, builders.size()); assertTrue(builders.get(0) instanceof FootprintGeometryBuilder); assertTrue(builders.get(1) instanceof PlatformGeometryBuilder); support.verifyAll(); }
@Test(expected = IllegalStateException.class) public void createPackageNoPackagingOptionsProvided() throws IOException { builder.createPackage(fakeTargetFolder.getRoot().toPath(), destinationFile.toPath()); }
@Test public void testGetStream() throws UnsupportedEncodingException, ConnectionException { String content = "frobozz"; InputStream istream = new ByteArrayInputStream(content.getBytes("UTF-8")); String intuit_tid = "abcd-123-xyz"; Response response = new Response(istream, 200, intuit_tid); assertEquals(istream, response.getStream()); assertEquals(content, response.getContent()); assertEquals(intuit_tid, response.getIntuit_tid()); }
@Test public void method_parameter_toString() { TypeDescriptor type = DEFAULT.get(MyClass.class); MethodDescriptor method = type.getMethods().get(new MethodSignature("method", MyClass.class)); List<ParameterDescriptor> parameters = method.getParameters(); assertThat(parameters.get(0).toString()).isEqualTo("org.javersion.reflect.ParameterDescriptorTest$MyClass.method(*org.javersion.reflect.ParameterDescriptorTest$MyClass myClass*)"); }
@Test public void should_add_elements_when_appShellWithConfigurator() throws Exception { AppShellRegistry registry = new AppShellRegistry(); registry.setShell(MyAppShellWithConfigurator.class); mocks.setAppShellRegistry(registry); indexHtmlRequestHandler.synchronizedHandleRequest(session, createVaadinRequest("/"), response); String indexHtml = responseOutput .toString(StandardCharsets.UTF_8.name()); Document document = Jsoup.parse(indexHtml); Elements elements = document.head().getElementsByTag("meta"); assertEquals(4, elements.size()); assertEquals("UTF-8", elements.get(0).attr("charset")); assertEquals("viewport", elements.get(1).attr("name")); assertEquals("my-viewport", elements.get(1).attr("content")); assertEquals("foo", elements.get(2).attr("name")); assertEquals("bar", elements.get(2).attr("content")); assertEquals("lorem", elements.get(3).attr("name")); assertEquals("ipsum", elements.get(3).attr("content")); assertEquals("my-title", document.head().getElementsByTag("title") .get(0).childNode(0).toString()); Elements headInlineAndStyleElements = document.head() .getElementsByTag("style"); assertEquals(3, headInlineAndStyleElements.size()); assertEquals("text/css", headInlineAndStyleElements.get(2).attr("type")); assertEquals("body,#outlet{width:my-width;height:my-height;}", headInlineAndStyleElements.get(2).childNode(0).toString()); Elements bodyInlineElements = document.body() .getElementsByTag("script"); assertEquals(3, bodyInlineElements.size()); }
@Test public void testEmptyQuery() { Query query = search().build().query(schema().build(), null); assertTrue("Pure negation is wrong", query instanceof MatchAllDocsQuery); }
@Test public void shouldAddDependencyArtifactsTest() throws Exception { MavenProjectLoader.IS_FORCE_OFFLINE = true; ByteArrayInputStream targetPom = new ByteArrayInputStream(PROJ.getBytes(StandardCharsets.UTF_8)); MavenProject mavenProj = MavenProjectLoader.parseMavenPom(targetPom, true); assertEquals(1, mavenProj.getArtifacts().size()); org.apache.maven.artifact.Artifact dependencyArtifact = mavenProj.getArtifacts().iterator().next(); assertEquals(ARTIFACT_ID, dependencyArtifact.getArtifactId()); assertEquals(GROUP_ID, dependencyArtifact.getGroupId()); assertEquals(VERSION, dependencyArtifact.getVersion()); }
@Test public void removeClassifierEmptyAcl() { OpenflowClassifierProcessor classifierManager = new OpenflowClassifierProcessor(readWriteTransaction, classifierInterface, new BareClassifier()); when(accessListEntries.getAce()).thenReturn(new ArrayList<>()); List<FlowDetails> theFlows = classifierManager.processClassifier(sffClassifier, acl, false); Assert.assertTrue(theFlows.isEmpty()); }
@Test public void testGetParametersWithDefaultEntityAndDisabledSecurity() throws Exception { unit.setSecurity(false); MarkScaleExchange entity = new MarkScaleExchange(); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("status", RowStatus.ACTIVE); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void isTimeReached_shouldReturnTrueIfBeyondEarliestTime() { assertThat(slotProcessor.isTimeReached(genesisTime, genesisTime.minus(ONE))).isTrue(); }
@Test public void testEmbeddedMessage() throws Exception { final ExecutionReport report = new ExecutionReport(new OrderID("ORDER"), new ExecID("EXEC"), new ExecType(ExecType.FILL), new OrdStatus(OrdStatus.FILLED), new Side(Side.BUY), new LeavesQty(100), new CumQty(100), new AvgPx(50)); final NewOrderSingle order = createNewOrderSingle(); String text = order.toString(); report.set(new EncodedTextLen(text.length())); report.set(new EncodedText(text)); final Message msg = new Message(report.toString(), DataDictionaryTest.getDictionary()); assertEquals("embedded order", text, msg.getString(EncodedText.FIELD)); }
@Test public void exitOnLowerJavaVersion() throws Exception { System.setProperty("java.version", "1.7"); exit.expectSystemExitWithStatus(-1); requireMinimumJavaVersion(); }
@Test public void testContainsContentType() throws Exception { Assert.assertTrue(ContentTypeUtils.containsContentType( ContentTypeUtils.HTML_CONTENT_TYPE, ContentTypeUtils.HTML_ALLOWED_CONTENT_TYPES)); Assert.assertTrue(ContentTypeUtils.containsContentType( ContentTypeUtils.ANY_CONTENT_TYPE, ContentTypeUtils.HTML_ALLOWED_CONTENT_TYPES)); Assert.assertTrue(ContentTypeUtils.containsContentType( ContentTypeUtils.TEXT_ANY_CONTENT_TYPE, ContentTypeUtils.HTML_ALLOWED_CONTENT_TYPES)); Assert.assertTrue(ContentTypeUtils.containsContentType( ContentTypeUtils.XHTML_CONTENT_TYPE, ContentTypeUtils.XHTML_ALLOWED_CONTENT_TYPES)); Assert.assertTrue(ContentTypeUtils.containsContentType( ContentTypeUtils.APPLICATION_XML_CONTENT_TYPE, ContentTypeUtils.XHTML_ALLOWED_CONTENT_TYPES)); Assert.assertTrue(ContentTypeUtils.containsContentType( ContentTypeUtils.TEXT_XML_CONTENT_TYPE, ContentTypeUtils.XHTML_ALLOWED_CONTENT_TYPES)); }
@Test public void testPermute() throws Exception { Collection<String> permute = RegexPermuter.permute("(a|b)(d|e)"); collector.checkThat(permute, CoreMatchers.hasItems("ad","ae","bd","be")); permute = RegexPermuter.permute("(a|b)?(d|e)"); collector.checkThat(permute, CoreMatchers.hasItems("ad","ae","bd","be","d","e")); collector.checkThat(permute.size(), is(6)); permute = RegexPermuter.permute("(a|b)?(d|ds|e)"); collector.checkThat(permute, CoreMatchers.hasItems("ad","ae","bd","be","d","e")); collector.checkThat(permute.size(), is(9)); permute = RegexPermuter.permute("(how|what) (is|are) (you|strange)"); collector.checkThat(permute, CoreMatchers.hasItems("what is strange","how are you","how is strange")); collector.checkThat(permute.size(), is(8)); }
@Test public void testSplit() { Configuration config = Configuration.from(jsonStr); HbaseSQLReaderConfig readerConfig = HbaseSQLHelper.parseConfig(config); List<Configuration> splits = HbaseSQLHelper.split(readerConfig); System.out.println("split size = " + splits.size()); }
@Test public void testSha3() { byte[] input = new byte[] { Numeric.asByte(0x6, 0x8), Numeric.asByte(0x6, 0x5), Numeric.asByte(0x6, 0xc), Numeric.asByte(0x6, 0xc), Numeric.asByte(0x6, 0xf), Numeric.asByte(0x2, 0x0), Numeric.asByte(0x7, 0x7), Numeric.asByte(0x6, 0xf), Numeric.asByte(0x7, 0x2), Numeric.asByte(0x6, 0xc), Numeric.asByte(0x6, 0x4) }; byte[] expected = new byte[]{ Numeric.asByte(0x4, 0x7), Numeric.asByte(0x1, 0x7), Numeric.asByte(0x3, 0x2), Numeric.asByte(0x8, 0x5), Numeric.asByte(0xa, 0x8), Numeric.asByte(0xd, 0x7), Numeric.asByte(0x3, 0x4), Numeric.asByte(0x1, 0xe), Numeric.asByte(0x5, 0xe), Numeric.asByte(0x9, 0x7), Numeric.asByte(0x2, 0xf), Numeric.asByte(0xc, 0x6), Numeric.asByte(0x7, 0x7), Numeric.asByte(0x2, 0x8), Numeric.asByte(0x6, 0x3), Numeric.asByte(0x8, 0x4), Numeric.asByte(0xf, 0x8), Numeric.asByte(0x0, 0x2), Numeric.asByte(0xf, 0x8), Numeric.asByte(0xe, 0xf), Numeric.asByte(0x4, 0x2), Numeric.asByte(0xa, 0x5), Numeric.asByte(0xe, 0xc), Numeric.asByte(0x5, 0xf), Numeric.asByte(0x0, 0x3), Numeric.asByte(0xb, 0xb), Numeric.asByte(0xf, 0xa), Numeric.asByte(0x2, 0x5), Numeric.asByte(0x4, 0xc), Numeric.asByte(0xb, 0x0), Numeric.asByte(0x1, 0xf), Numeric.asByte(0xa, 0xd) }; byte[] result = Hash.sha3(input); assertThat(result, is(expected)); }
@Test public void trimming() throws Exception { String domString = createDomString(); Xpp3Dom dom = Xpp3DomBuilder.build( new StringReader( domString ), true ); assertEquals( "element1value", dom.getChild( "element1" ).getValue() ); assertEquals( " preserve space ", dom.getChild( "element6" ).getValue() ); dom = Xpp3DomBuilder.build( new StringReader( domString ), false ); assertEquals( " element1value\n ", dom.getChild( "element1" ).getValue() ); assertEquals( " preserve space ", dom.getChild( "element6" ).getValue() ); }
@Test public void testSetHeartbeatMode() { delegate.setHeartbeatMode(HeartbeatMode.PEER_NOT_ALLOWED_TO_SEND); assertTrue(delegate.getHeartbeatMode() == HeartbeatMode.PEER_NOT_ALLOWED_TO_SEND); }
@Test public void testPickIPv6Bracket() throws Exception { final String address = "[2001:0db8:0000:0000:0000:ff00:0042:8329]"; EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes(); EasyMock.expect(instance.getAddress()).andReturn(address).anyTimes(); EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes(); EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes(); EasyMock.replay(instance, serviceProvider); Server server = serverDiscoverySelector.pick(); Assert.assertEquals(PORT, server.getPort()); Assert.assertEquals(address, server.getAddress()); Assert.assertTrue(server.getHost().contains(Integer.toString(PORT))); Assert.assertTrue(server.getHost().contains(address)); Assert.assertEquals("http", server.getScheme()); EasyMock.verify(instance, serviceProvider); final URI uri = new URI( server.getScheme(), null, server.getAddress(), server.getPort(), "/druid/indexer/v1/action", null, null ); Assert.assertEquals(PORT, uri.getPort()); Assert.assertEquals(address, uri.getHost()); Assert.assertEquals("http", uri.getScheme()); }
@Test public void testNoConnectionFoundWhenDeletingSingleConnection() throws MgcpException { final StringBuilder builder = new StringBuilder(); builder.append("DLCX 147483653 mobicents/bridge/1@127.0.0.1:2427 MGCP 1.0").append(System.lineSeparator()); builder.append("C:1").append(System.lineSeparator()); builder.append("I:1").append(System.lineSeparator()); final int transactionId = 147483653; final MgcpMessageParser parser = new MgcpMessageParser(); final MgcpRequest request = parser.parseRequest(builder.toString()); final MgcpEndpointManager endpointManager = mock(MgcpEndpointManager.class); final MgcpEndpoint bridgeEndpoint = mock(MgcpEndpoint.class); final DeleteConnectionCommand dlcx = new DeleteConnectionCommand(transactionId, request.getParameters(), endpointManager); when(endpointManager.getEndpoint("mobicents/bridge/1@127.0.0.1:2427")).thenReturn(bridgeEndpoint); when(bridgeEndpoint.deleteConnection(1, 1)).thenThrow(new MgcpConnectionNotFoundException("")); MgcpCommandResult result = dlcx.call(); verify(bridgeEndpoint, times(1)).deleteConnection(1, 1); assertNotNull(result); assertEquals(MgcpResponseCode.INCORRECT_CONNECTION_ID.code(), result.getCode()); Parameters<MgcpParameterType> parameters = result.getParameters(); assertEquals(0, parameters.size()); }
@Test public void testUpdateRow() { FaceValue face = new FaceValue(Elements.BLUE); assertEquals( "BBB" + "BBB" + "BBB", face.toString()); face.updateRow(0, new Line("YGO")); assertEquals( "YBB" + "GBB" + "OBB", face.toString()); face.updateRow(1, new Line("GRY")); assertEquals( "YGB" + "GRB" + "OYB", face.toString()); face.updateRow(2, new Line("ORG")); assertEquals( "YGO" + "GRR" + "OYG", face.toString()); assertEquals("YGO", face.getRow(0).toString()); assertEquals("GRY", face.getRow(1).toString()); assertEquals("ORG", face.getRow(2).toString()); }
@Test(expected = IOException.class) public void doRequest_shouldThrowIOExceptionForInvalidResponse() throws Exception { when(objectMapperMock.readValue(signedRequestResponseMock.getResponseBody(), Object.class)).thenThrow(new IOException()); testObj.doRequest(urlConnectorMock, HttpMethod.HTTP_GET, null, TEST_HEADERS, Object.class); }
@Test public void testGetValueSatisfying() { BDDInteger dstIp = new BDDPacket().getDstIp(); BDD bdd = dstIp.geq(1).and(dstIp.leq(0)); assertThat(dstIp.getValueSatisfying(bdd), equalTo(Optional.empty())); bdd = dstIp.geq(1).and(dstIp.leq(1)); assertThat(dstIp.getValueSatisfying(bdd), equalTo(Optional.of((long) 1))); }
@Test public void convertAPIToAPI() { com.silanis.esl.api.model.Sender sender = createTypicalAPISender(); AccountMemberConverter converter = new AccountMemberConverter( sender ); com.silanis.esl.api.model.Sender result = converter.toAPISender(); assertThat( "Converter returned a null api object for a non null api object", result, is( notNullValue() ) ); assertThat( "Converter didn't return the same non-null api object it was given", result, is( equalTo( sender ) ) ); }
@Test public void coverage() { CdsIndexTrade test1 = sut(); coverImmutableBean(test1); CdsIndex product = CdsIndex.of(BUY, INDEX_ID, LEGAL_ENTITIES, USD, 1.e9, START_DATE, END_DATE, P6M, SAT_SUN, 0.067); CdsIndexTrade test2 = CdsIndexTrade.builder() .product(product) .info(TradeInfo.empty()) .build(); coverBeanEquals(test1, test2); }
@Test(expected = IllegalArgumentException.class) public void throwsExceptionWhenDoubleQuotedStringsAreMisQuoted() { this.parser.parse("a \"b c d e"); }
@Test public void testStreamCreationUpSetupWhenEnabled() { System.setProperty("samza.container.name", "samza-container-1"); MapConfig mapConfig = new MapConfig(ImmutableMap.of( "task.log4j.create.stream.enabled", "true", "job.name", "log4jTest", "job.id", "1", "systems.mock.samza.factory", MockSystemFactory.class.getCanonicalName(), "task.log4j.system", "mock")); MockSystemProducerAppender systemProducerAppender = new MockSystemProducerAppender(mapConfig); PatternLayout layout = new PatternLayout(); layout.setConversionPattern("%m"); systemProducerAppender.setLayout(layout); systemProducerAppender.activateOptions(); log.addAppender(systemProducerAppender); Assert.assertEquals("__samza_log4jTest_1_logs", MockSystemAdmin.createdStreamName); }
@Test public void testFromAndPredicate() { Expression originalPredicate = and( and(greaterThan(C_BIGINT, bigintLiteral(1L)), unprocessableExpression1(C_BIGINT)), and(lessThan(C_BIGINT, bigintLiteral(5L)), unprocessableExpression2(C_BIGINT))); ExtractionResult result = fromPredicate(originalPredicate); assertEquals(result.getRemainingExpression(), and(unprocessableExpression1(C_BIGINT), unprocessableExpression2(C_BIGINT))); assertEquals(result.getTupleDomain(), withColumnDomains(ImmutableMap.of(C_BIGINT, Domain.create(ValueSet.ofRanges(Range.range(BIGINT, 1L, false, 5L, false)), false)))); assertUnsupportedPredicate(not(and( and(greaterThan(C_BIGINT, bigintLiteral(1L)), unprocessableExpression1(C_BIGINT)), and(lessThan(C_BIGINT, bigintLiteral(5L)), unprocessableExpression2(C_BIGINT))))); originalPredicate = not(and( not(and(greaterThan(C_BIGINT, bigintLiteral(1L)), unprocessableExpression1(C_BIGINT))), not(and(lessThan(C_BIGINT, bigintLiteral(5L)), unprocessableExpression2(C_BIGINT))))); result = fromPredicate(originalPredicate); assertEquals(result.getRemainingExpression(), originalPredicate); assertEquals(result.getTupleDomain(), withColumnDomains(ImmutableMap.of(C_BIGINT, Domain.notNull(BIGINT)))); }
@Test public void testGetTemplate() throws Exception { assertEquals( template, containerHostEntity.getTemplate() ); }
@Test(expected = MappingException.class) public void testValidateMappingRequest_NullSrcObj() { MappingValidator.validateMappingRequest(null); }
@Test public void createKinoNullTmdb() { LocalKino kinoToCreate = mock(LocalKino.class); KinoDtoToDbBuilder builder = mock(KinoDtoToDbBuilder.class); doReturn(kinoToCreate).when(builder).build(kinoDto); KinoDto createdKino = mock(KinoDto.class); doReturn(createdKino).when(kinoDtoBuilder).build(kinoToCreate); assertEquals( createdKino, new KinoService(localKinoRepository, tmdbKinoRepository, kinoDtoBuilder, builder).createOrUpdate(kinoDto) ); verify(localKinoRepository).createOrUpdate(kinoToCreate); }
@Test public void testScaled() { ReferencedEnvelope envelope = new ReferencedEnvelope(-180, 180, -90, 90, DefaultGeographicCRS.WGS84); int width = 16; int height = 8; int pixelsPerCell = 1; String strategy = "Basic"; Float scaleMin = 0f; GridCoverage2D coverage = process.execute( features, pixelsPerCell, strategy, null, null, scaleMin, null, false, envelope, width, height, null); checkInternal(coverage, fineDelta); checkEdge(coverage, envelope, fineDelta); }
@Test public void getMail() throws Exception { final HttpResponse response = apiClient.getMail(mailId); RestApiTestUtils.validateStatusCode(response, 200); }
@Test public void testWireFormatAndFormatArePresent() { parameters.putSingle("X-GP-FORMAT", "TEXT"); parameters.putSingle("X-GP-OPTIONS-FORMAT", "foobar"); RequestContext context = parser.parseRequest(mockRequestHeaders, RequestType.FRAGMENTER); assertEquals(OutputFormat.TEXT, context.getOutputFormat()); assertEquals("foobar", context.getFormat()); }
@Test public void getPaths() { final DefaultDataSetTemplate connectorTemplate = new DefaultDataSetTemplate(); connectorTemplate.setOptions(Collections.singletonMap("path", "connector1.txt")); connectorTemplate.setPaths(Collections.singletonList("connector2.txt")); final Connector connector = new Connector(); connector.setTemplate(connectorTemplate); final DefaultDataSetTemplate dataSourceTemplate = new DefaultDataSetTemplate(); dataSourceTemplate.setOptions(Collections.singletonMap("path", "datasource1.txt")); dataSourceTemplate.setPaths(Collections.singletonList("datasource2.txt")); final DataSource dataSource = new DataSource(); dataSource.setConnector(connector); dataSource.setTemplate(dataSourceTemplate); Assert.assertEquals(Arrays.asList("datasource1.txt", "datasource2.txt"), DataSourceUtil.getPaths(dataSource).orElse(null)); dataSourceTemplate.setOptions(null); Assert.assertEquals(Arrays.asList("connector1.txt", "datasource2.txt"), DataSourceUtil.getPaths(dataSource).orElse(null)); dataSourceTemplate.setPaths(null); Assert.assertEquals(Arrays.asList("connector1.txt", "connector2.txt"), DataSourceUtil.getPaths(dataSource).orElse(null)); connectorTemplate.setOptions(null); connectorTemplate.setPaths(null); Assert.assertEquals(Optional.empty(), DataSourceUtil.getPaths(dataSource)); }
@Test public void shouldReturnHyperColorIfRedStringIsGiven() { int expected = context.getColor(R.color.glucosio_reading_hyper); int actual = glucoseRanges.stringToColor("red"); assertEquals(expected, actual); }
@Test public void testNull() { String result = converter.convert(null); Assert.assertNull("School category should be null", result); }
@Test public void valueIsReturnedForFoundKeyAndFile() { assertThat( PropertyUtil.getPropertyOrDefault(getClass(), "test.properties", "testKey", "NotFound")) .isEqualTo("testValue"); }
@Test public void shouldAddExceptionViaOpenApiClasspath() { List<Expectation> actualExpectations = httpState.add(openAPIExpectation("org/mockserver/mock/openapi_petstore_example.json")); shouldBuildPetStoreExpectations("org/mockserver/mock/openapi_petstore_example.json", actualExpectations); }
@Test public void toArray() throws Exception { CookieCollection cookies = new CookieCollection(cookie); Cookie[] array = cookies.toArray(); Assert.assertEquals(cookies.size(), array.length); Assert.assertEquals(cookie, array[0]); }
@Test public void testEmptyTextWithAddAndMulti() { mLayout = StaticLayoutHelper.makeStaticLayout("", 1.5f, 2.0f); assertEquals(LayoutMeasureUtil.getHeight(mLayout), 10); }
@Test public void testTruncString3() { Map<String, Object> value = new HashMap<>(); value.put("k", "1234567890"); int maxStringLength = 2; int maxArrayLength = 4; int maxDepth = 2; Object result = ObjectTruncater.truncate(value, maxStringLength, maxArrayLength, maxDepth); assertEquals(Collections.<String, Object>singletonMap("k", "1...[skipped 8 chars]...0"), result); }
@Test public void emptyTrendIsIndicatedWhenOriginalTrendIsEmpty() { when(original.indicate(any())).thenReturn(Optional.empty()); assertThat(cut.indicate(SOME_PRICE)).isEmpty(); }
@Test public void testDescribeGlobal() throws IOException { DescribeGlobalResult actual = conn.describeGlobal(); assertEquals(readResource("/apiResponses/describeGlobal.xml"), TestFixtureUtils.dumpFixture(actual)); }
@Test public void shouldFailWhenNonceClaimIsMissingAndRequired() throws Exception { expectedException.expect(TokenValidationException.class); expectedException.expectMessage("Nonce (nonce) claim must be a string present in the ID token"); Map<String, Object> jwtBody = createJWTBody("nonce"); String token = createTestJWT("none", jwtBody); JWT jwt = new JWT(token); options.setNonce(EXPECTED_NONCE); idTokenVerifier.verify(jwt, options); }
@Test public void testPermittedTopology_linestring_polygon() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_LINESTRING; DimensionInfo targetDimensionInfo = DimensionInfo.XY_POLYGON; SfIntersectsFF instance = new SfIntersectsFF(); boolean expResult = true; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }
@Test public void checkVerifyNotEqualsReturnsValidCode() { assertThat(com.verifyNotEquals(condition, condition), is(equalTo("verifyNotEquals(" + condition + ", " + condition + ")"))); }
@Test public void testConstructor() { EqualsFilter filter = new EqualsFilter("a", "b"); NotFilter notFilter = new NotFilter(filter); assertThat(notFilter.encode()).isEqualTo("(!(a=b))"); }
@Test public void onNonExistingAnnotationShouldReturnEmptyResult() { Optional<JsonIgnore> result = ClassUtils.getAnnotation(ResourceClass.class, JsonIgnore.class); assertThat(result.isPresent()).isFalse(); }
@Test public void throws_404_when_host_unknown() { try { HostResource hostResource = new HostResource(hostNotFoundOrchestrator, uriInfo); hostResource.suspend("hostname"); fail(); } catch (WebApplicationException w) { assertEquals(404, w.getResponse().getStatus()); } }
@Test public void testIterator() { final LazyList<String> list = new LazyList<>(new MockQuery<>("foo")); final Iterator<String> iter = list.iterator(); assertTrue(iter.hasNext()); assertEquals("foo", iter.next()); assertFalse(iter.hasNext()); }
@Test public void getCompleteRequestTime() throws Exception { timeProvider.setNow(1000); timeStampRecorder.recordCreatedRequest(); timeProvider.setNow(2000); timeStampRecorder.responseBodyCompleted(); assertEquals(1000, timeStampRecorder.getCompleteRequestTime()); }
@Test public void testOnPropertyModified() throws Exception { final InvokeHTTP processor = new InvokeHTTP(); final Field regexAttributesToSendField = InvokeHTTP.class.getDeclaredField("regexAttributesToSend"); regexAttributesToSendField.setAccessible(true); assertNull(regexAttributesToSendField.get(processor)); processor.onPropertyModified(InvokeHTTP.PROP_ATTRIBUTES_TO_SEND, null, "uuid"); assertNotNull(regexAttributesToSendField.get(processor)); processor.onPropertyModified(InvokeHTTP.PROP_ATTRIBUTES_TO_SEND, "uuid", null); assertNull(regexAttributesToSendField.get(processor)); processor.onPropertyModified(InvokeHTTP.PROP_ATTRIBUTES_TO_SEND, null, "uuid"); assertNotNull(regexAttributesToSendField.get(processor)); processor.onPropertyModified(InvokeHTTP.PROP_ATTRIBUTES_TO_SEND, "uuid", ""); assertNull(regexAttributesToSendField.get(processor)); }
@Test public void testStringObject() { assertFalse(GovCloudFlagUtil.extractGovCloudFlag("false")); assertFalse(GovCloudFlagUtil.extractGovCloudFlag("anythingelse")); assertTrue(GovCloudFlagUtil.extractGovCloudFlag("true")); }
@Test public void testCreationOfPeriodicTaskWithFixedRate() throws ExecutionException, InterruptedException { Semaphore semaphore = new Semaphore(0); ManagedScheduledFutureTask<?> future = executor.scheduleAtFixedRate(new MyRunnable(4, semaphore), 10, 10, TimeUnit.MILLISECONDS); assertThat(future).isNotNull(); semaphore.acquire(); future.cancel(false); assertThat(counter.get()).isGreaterThanOrEqualTo(4); assertThat(future.getDelay(TimeUnit.MILLISECONDS)).isLessThanOrEqualTo(10); assertThat(future.isPeriodic()).isTrue(); assertThat(executor.getCompletedTaskCount()).isBetween(2l, 5l); }
@Test public void areMulePluginVersionNotCompatibleWithAllNotCompatibleTest() { dependencies.add(createDependency(0, "0.8.0", "mule-plugin")); dependencies.add(createDependency(1, "1.0.1", "mule-plugin")); dependencies.add(createDependency(2, "2.0.1", "mule-plugin")); assertThat("Mule plugins should be considered version compatible", validator.areMulePluginVersionCompatible(dependencies), is(false)); }
@Test public void testConvertAttachmentKeyIntoContentTypeAndFilename() throws Exception { final CacheManager cacheManager = mockery.mock(CacheManager.class); final Cache cache = mockery.mock(Cache.class); mockery.checking(new Expectations() {{ allowing(cacheManager).getCache("contentService-templateSupport"); will(returnValue(cache)); allowing(cache).get("<% \n %>${name} is awesome!"); will(returnValue(null)); allowing(cache).put(with(equal("<% \n %>${name} is awesome!")), with(any(Object.class))); }}); final TemplateProcessor templates = new MailComposerTemplateSupportGroovyImpl(new GroovyGStringTemplateSupportImpl(cacheManager)); final MailComposerImpl composer = new MailComposerImpl(null, templates); Pair<String, String> ctaf; ctaf = composer.convertAttachmentKeyIntoContentTypeAndFilename(null); assertNull(ctaf); ctaf = composer.convertAttachmentKeyIntoContentTypeAndFilename("random"); assertNull(ctaf); ctaf = composer.convertAttachmentKeyIntoContentTypeAndFilename("not attach"); assertNull(ctaf); ctaf = composer.convertAttachmentKeyIntoContentTypeAndFilename("attachment:"); assertNull(ctaf); ctaf = composer.convertAttachmentKeyIntoContentTypeAndFilename("attachment:image/jpeg"); assertNull(ctaf); ctaf = composer.convertAttachmentKeyIntoContentTypeAndFilename("attachment:application/pdf;myfile.pdf"); assertNotNull(ctaf); assertEquals("application/pdf", ctaf.getFirst()); assertEquals("myfile.pdf", ctaf.getSecond()); mockery.assertIsSatisfied(); }
@Test public void testCompile_ErrorForWrongChar() throws Exception { try { JBBPCompiler.compile("align;9").getCompiledData(); fail("Must throw parser exception"); } catch (JBBPTokenizerException ex) { assertEquals(6, ex.getPosition()); assertTrue(ex.getMessage().contains("[9]")); } }
@Test public void testShortNamesAllowed() throws UIMAException { Collection<Object> shortNamed = new TaxonomyFactory( new String[] {Entity.class.getSimpleName(), Event.class.getSimpleName()}) .create(); Object next = shortNamed.iterator().next(); assertTrue(next instanceof Map<?, ?>); Map<String, Collection<Object>> map = (Map<String, Collection<Object>>) next; assertTrue("There is a value in taxonomy for Entity", map.get("Entity").size() > 1); }
@Test public void getInstancesShouldBeAbleToHandleEndpointsSingleAddressAndMultiplePorts() { mockServer.expect().get().withPath("/api/v1/namespaces/test/endpoints/endpoint") .andReturn(200, new EndpointsBuilder().withNewMetadata() .withName("endpoint").endMetadata().addNewSubset().addNewAddress() .withIp("ip1").withNewTargetRef().withUid("uid").endTargetRef() .endAddress().addNewPort("mgmt", 9000, "TCP") .addNewPort("http", 80, "TCP").endSubset().build()) .once(); mockServer.expect().get().withPath("/api/v1/namespaces/test/services/endpoint") .andReturn(200, new ServiceBuilder().withNewMetadata() .withName("endpoint").withLabels(new HashMap<String, String>() { { put("l", "v"); } }).endMetadata().build()) .always(); final KubernetesDiscoveryProperties properties = new KubernetesDiscoveryProperties(); properties.setPrimaryPortName("http"); final DiscoveryClient discoveryClient = new KubernetesDiscoveryClient(mockClient, properties, KubernetesClient::services, new DefaultIsServicePortSecureResolver(properties)); final List<ServiceInstance> instances = discoveryClient.getInstances("endpoint"); assertThat(instances).hasSize(1) .filteredOn(s -> s.getHost().equals("ip1") && !s.isSecure()).hasSize(1) .filteredOn(s -> s.getInstanceId().equals("uid")).hasSize(1) .filteredOn(s -> 80 == s.getPort()).hasSize(1); }
@Test public void deleteShouldReturnTrueWhenClientSuccessfullyCallsDelete() throws Exception { DeleteBuilder builder = mock(DeleteBuilder.class); when(curatorFramework.delete()).thenReturn(builder); assertTrue(sensorParserConfigService.delete("bro")); verify(curatorFramework).delete(); }
@Test public void getTopNonCompliantExecsTest() throws Exception { when(patchingService.getNonCompliantExecsForAG(anyString())).thenReturn(CommonTestUtil.getListMapObject()); assertThat(patchingController.getTopNonCompliantExecs("ag"), is(notNullValue())); assertThat(patchingController.getTopNonCompliantExecs(""), is(notNullValue())); when(patchingService.getNonCompliantExecsForAG(anyString())).thenThrow(new ServiceException()); when(complianceService.formatException(anyObject())).thenReturn(ResponseUtils.buildFailureResponse(new ServiceException())); ResponseEntity<Object> responseObj = patchingController.getTopNonCompliantExecs("ag"); assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED); }
@Test public void testSystemPropertiesHasPriorityOverClasspath() throws IOException { System.getProperties().setProperty(XmlPropertyReader.CONFIG_PROPERTY, CONFIG_FILE1); BufferedReader reader = new BufferedReader(new InputStreamReader(propertyReader.getConfigurationStream(null))); StringBuilder buf = new StringBuilder(); String line; while( (line = reader.readLine()) != null ) { buf.append(line).append("\n"); } reader.close(); assertThat(buf.toString(), containsString("<feature name=\"test\"")); }
@Test public void testUseBestWrapper() { assertNull("null should pass through", SessionLogoutGuardFactory.useBestWrapper(null)); JackrabbitSession mockJackSession = mock(JackrabbitSession.class); Session jackWrapper = SessionLogoutGuardFactory.useBestWrapper(mockJackSession); assertNotNull("wrap jackSession should not be null", jackWrapper); assertTrue("jackWrapper instance of JackrabbitSessionIWrap: " + jackWrapper.getClass().getName(), jackWrapper instanceof JackrabbitSessionIWrap); assertNotNull("jackWrapper.unwrapSession() instanceof JackrabbitSession", ((JackrabbitSessionIWrap) jackWrapper).unwrapSession()); jackWrapper.logout(); verify(mockJackSession, times(0)).logout(); assertSame("jackWrapper should not get rewrapped", jackWrapper, SessionLogoutGuardFactory.useBestWrapper(jackWrapper)); Session mockJcrSession = mock(Session.class); Session jcrWrapper = SessionLogoutGuardFactory.useBestWrapper(mockJcrSession); assertNotNull("wrap jcrSession should not be null", jcrWrapper); assertTrue("jcrWrapper instance of SessionIWrap: " + jcrWrapper.getClass().getName(), jcrWrapper instanceof SessionIWrap); assertNotNull("jcrWrapper.unwrapSession() instanceof Session", ((SessionIWrap) jcrWrapper).unwrapSession()); jcrWrapper.logout(); verify(mockJcrSession, times(0)).logout(); assertSame("jcrWrapper should not get rewrapped", jcrWrapper, SessionLogoutGuardFactory.useBestWrapper(jcrWrapper)); }
@Test public void map() { List<Map<String, Object>> results = asList( getRow(1), getRow(2) ); StatementResult statementResult = new GremlinServerStatementResult(serverInfo, statement, results.iterator(), converter); assertThat(statementResult.list(r -> r.get(KEY2).asString())) .containsExactly("value1", "value2"); }
@Test public void create_DisallowEntryValueOverMaxLength() { char[] chars = new char[Entry.MAX_VALUE_LENGTH + 1]; Arrays.fill(chars, 'v'); String value = new String(chars); thrown.expect(IllegalArgumentException.class); Entry.create("key", value, Entry.METADATA_UNLIMITED_PROPAGATION); }
@Test(expected = IllegalStateException.class) public void testCreateNode_NullEdges() throws Exception { new DefaultByteArrayNodeFactory().createNode("FOO", 1, null, false); }
@Test public void testIsIdenticalTo_withAssertionErrorForWhitespaces_throwsReadableMessage() { expect(AssertionError.class); expectMessage("Expected child nodelist length '1' but was '3'"); expectMessage("<a>" + getLineSeparator() + " <b/>" + getLineSeparator() + "</a>"); expectMessage("<a><b/></a>"); assertThat("<a>\n <b/>\n</a>", isIdenticalTo("<a><b/></a>")); }
@Test void orElseGet() { final ToBoolean<String> toBoolean = instance.orElseGet(string -> true); assertNotNull(toBoolean); assertTrue(toBoolean.applyAsBoolean("three")); assertTrue(toBoolean.applyAsBoolean(null)); }
@Test public void testOnMayCloseFailed() { when(groupEditorWorkflow.isDirty()).thenReturn(true); assertFalse(tested.onMayClose()); }
@Test public void testToStringReturnsSuccessfullyWithAllConfigSpecified() { GRPCServerConfigImpl config = new GRPCServerConfigImplBuilder().port(9090) .publishedRPCHost("localhost") .publishedRPCPort(9090) .authorizationEnabled(true) .userPasswordFile("/passwd") .tlsEnabled(true) .tlsCertFile("/cert.pem") .tlsKeyFile("./key.pem") .tokenSigningKey("secret") .accessTokenTTLInSeconds(200) .tlsTrustStore("/cert.pem") .replyWithStackTraceOnError(true) .requestTracingEnabled(true) .build(); assertNotNull(config.toString()); }
@Test public void testLeadingWhitespace() { assertThat(NameUtils.normaliseName(" hello")).isEqualTo("hello"); }
@Test public void testSequenceMalformed() { Verbose.info("*********************************** EXPECTED VERBOSE ***********************************"); final String message = NoSuchMethodException.class.getName() + ": No compatible constructor found for " + SequenceMalformedMock.class.getName() + " with: " + Arrays.asList(ContextWrapper.class); assertThrows(() -> Loader.start(CONFIG, SequenceMalformedMock.class).await(), message); Verbose.info("****************************************************************************************"); }
@Test public void shouldHandlePageOfResults() throws Exception { QueryRequest request = makePagedQueryRequest(1, 0); QueryResponsePresentation.perform(mockHandler, request, makeResourceResponses("abc,def,ghj")); assertThat(extractId(captor.getAllValues(), 0)).isEqualTo("abc"); }
@Test(groups = "1s", timeOut=60000) public void testBadDomainFilteringOK() throws ContradictionException { Task task = new Task(end, duration, start); System.out.println(task); task.ensureBoundConsistency(); checkVariable(duration, 0, 0); checkVariable(start, 5, 5); checkVariable(end, 5, 5); }
@Test public void testQuerySumOf() throws Exception{ MonetaryAmount amt = alg.querySumOf(Monetary.getCurrency("CHF"), FastMoney.of(10, "CHF"), Money.of(0, "CHF"), FastMoney.of(1, "USD"), Money.of(200.45, "CHF"), FastMoney.of(210, "USD")); assertTrue(Money.of(210.45, "CHF").isEqualTo(amt)); }
@Test public void testAnnotateCorePartitionSetSizeForHashNumberedShardSpec() { final Set<DataSegment> segments = ImmutableSet.of( newSegment(new BuildingHashBasedNumberedShardSpec(0, 0, 3, null, new ObjectMapper())), newSegment(new BuildingHashBasedNumberedShardSpec(1, 1, 3, null, new ObjectMapper())), newSegment(new BuildingHashBasedNumberedShardSpec(2, 2, 3, null, new ObjectMapper())) ); final Set<DataSegment> annotated = SegmentPublisherHelper.annotateShardSpec(segments); for (DataSegment segment : annotated) { Assert.assertSame(HashBasedNumberedShardSpec.class, segment.getShardSpec().getClass()); final HashBasedNumberedShardSpec shardSpec = (HashBasedNumberedShardSpec) segment.getShardSpec(); Assert.assertEquals(3, shardSpec.getNumCorePartitions()); } }
@Test public void testGetTotalFails_1() throws Exception { JobNodeBean fixture = new ProjectNodeBean(new Project()); String result = fixture.getTotalFails(); assertNotNull(result); }
@Test public void shouldCallValidateOnEachLineItem() throws Exception { final RnrLineItem rnrLineItem1 = mock(RnrLineItem.class); final RnrLineItem rnrLineItem2 = mock(RnrLineItem.class); when(rnrLineItem1.calculateCost()).thenReturn(new Money("10")); when(rnrLineItem2.calculateCost()).thenReturn(new Money("10")); rnr.setFullSupplyLineItems(asList(rnrLineItem1)); rnr.setNonFullSupplyLineItems(asList(rnrLineItem2)); List<RnrColumn> programRnrColumns = new ArrayList<>(); ProgramRnrTemplate template = new ProgramRnrTemplate(programRnrColumns); calculationService.perform(rnr, template); verify(rnrLineItem1).validateMandatoryFields(template); verify(rnrLineItem1).validateCalculatedFields(template); verify(rnrLineItem2).validateNonFullSupply(); }
@Test public void getThemesPath_shouldReturnCorrectValue() throws Exception { assertThat(style.getThemesPath()).isEqualTo("themes/"); }
@Test public void testGetActiveData() throws ActiveNotFoundException, KeeperException, InterruptedException, IOException { byte[] data = new byte[8]; Mockito.when( mockZK.getData(Mockito.eq(ZK_LOCK_NAME), Mockito.eq(false), any())).thenReturn(data); Assert.assertEquals(data, elector.getActiveData()); Mockito.verify(mockZK, Mockito.times(1)).getData( Mockito.eq(ZK_LOCK_NAME), Mockito.eq(false), any()); Mockito.when( mockZK.getData(Mockito.eq(ZK_LOCK_NAME), Mockito.eq(false), any())).thenThrow( new KeeperException.NoNodeException()); try { elector.getActiveData(); Assert.fail("ActiveNotFoundException expected"); } catch(ActiveNotFoundException e) { Mockito.verify(mockZK, Mockito.times(2)).getData( Mockito.eq(ZK_LOCK_NAME), Mockito.eq(false), any()); } try { Mockito.when( mockZK.getData(Mockito.eq(ZK_LOCK_NAME), Mockito.eq(false), any())).thenThrow( new KeeperException.AuthFailedException()); elector.getActiveData(); Assert.fail("KeeperException.AuthFailedException expected"); } catch(KeeperException.AuthFailedException ke) { Mockito.verify(mockZK, Mockito.times(3)).getData( Mockito.eq(ZK_LOCK_NAME), Mockito.eq(false), any()); } }
@Test public void notNullSafeEqualsNullIsFalse() throws IOException { when(corc.getWritable(COL0)).thenReturn(null); SearchArgument searchArgument = builder.startNot().nullSafeEquals(COL0,PredicateLeaf.Type.LONG, ZERO).end().build(); assertThat(new SearchArgumentFilter(searchArgument, structTypeInfo).accept(corc), is(false)); }
@Test public void shouldFindUnclosedQuote_escapedEscape() { final String line = "some line 'this is in a quote\\\\'"; assertThat(UnclosedQuoteChecker.isUnclosedQuote(line), is(false)); }
@Test(expected = APIException.class) public void validate_shouldRejectAVisitIfItHasMoreThanMaxOccursOfAnAttribute() { Visit visit = makeVisit(); visit.addAttribute(makeAttribute("one")); visit.addAttribute(makeAttribute("two")); visit.addAttribute(makeAttribute("three")); visit.addAttribute(makeAttribute("four")); ValidateUtil.validate(visit); }
@Test public void createUnmarshaller() { assertNotNull(JAXBSupport.createUnmarshaller()); }
@Test void testBinomialCoefficientFail1() { Assertions.assertThrows(CombinatoricsException.class, () -> BinomialCoefficientDouble.value(4, 5) ); }
@Test public void shouldNotCreateProcessorForUnprocessableRequest() throws Exception { when(mockRequest.getMethod()).thenReturn("GET"); MetadataHandler handlerToTest = new MetadataHandler(httpClientMock); MessageProcessorBase returnValue = handlerToTest.createRequestProcessor("something", mockRequest, mockResponse, null); assertNull("Was expecting a null return value", returnValue); }
@Test public void validateClassNameWithFailures() { when( view.getSelectedClassName() ).thenReturn( "" ); addGlobalPopup.onClassNameSelectChanged(); verify( view, times( 1 ) ).showClassNameValidationError(); }
@Test public void min2() { Optional<String> x = Iter.min(data("2"), String::compareTo); assertTrue(x.isPresent()); assertEquals("2", x.get()); }
@Test public void testConvert() { Date d = d("27-04-2012"); Date d2 = dlong("27-04-2012 16:45:55"); Object[][] testCases = { {d("27-04-2012"), d}, {dlong("27-04-2012 16:45:55"), d2}, {new Timestamp(d.getTime()), d}, {new java.sql.Date(d.getTime()), d}, {new GregorianCalendar(2012, 4-1, 27), d}, {"2012/04/27", d}, {"27.04.2012", d}, {" ", null}, {null, null} }; for (Object[] testCase : testCases) { Object obj = testCase[0]; Date expectedValue = (Date) testCase[1]; assertEquals(expectedValue, type.convert(obj).getDate()); } }
@Test public void testGetRValue() { FieldAndRValue instance = new FieldAndRValue(); RValueExpression expResult = null; RValueExpression result = instance.getRValue(); assertEquals(expResult, result); expResult = new RValueExpression(new Value("X")); instance = new FieldAndRValue(null, expResult); result = instance.getRValue(); assertEquals(expResult, result); }
@Test public void testGetApi() throws Exception { assertIsApi("ec2"); }
@Test public void testLoadProperties() { assertEquals("value", PropertyLoader.loadProperties("com.ibm.research.ai.ki.util.1").get("name")); assertEquals("value", PropertyLoader.loadProperties("/com/ibm/research/ai/ki/util/1").get("name")); }
@Test public void testSynsetRemoveAllEditable() throws JWNLException { Synset s = new Synset(dictionary, POS.NOUN); IndexWord iw = new IndexWord(dictionary, "test", POS.NOUN, s); iw.getSenses().add(new Synset(dictionary, POS.NOUN)); Assert.assertTrue(iw.getSenses().removeAll(Arrays.asList(s))); Assert.assertFalse(iw.getSenses().contains(s)); Assert.assertNull(dictionary.getIndexWord(POS.NOUN, "test")); }
@Test public void testGetParametersWithEmptyFieldsAndWithoutDefaults() throws Exception { unit.setActive(false); unit.setSecurity(false); DepartmentSpecialty entity = new DepartmentSpecialty(); Map<String, Object> expected = new HashMap<String, Object>(); Map<String, Object> actual = unit.getParameters(entity); verify(departmentDao, times(0)).getEntityById(anyLong()); verify(specialtyDao, times(0)).getEntityById(anyLong()); assertEquals(expected, actual); }
@Test public void getAllAlarms() throws Exception { Collection<Alarm> allAlarms = alarmService.getAllAlarms(); assertEquals(allAlarms.size(), 1); }
@Test public void equals_shouldCompareDrugOrderExactly() { Assert.assertTrue(regimen1.equals(regimen2)); Assert.assertTrue(regimen2.equals(regimen1)); Assert.assertFalse(regimen1.equals(regimen3)); Assert.assertFalse(regimen3.equals(regimen1)); Assert.assertFalse(regimen1.equals(regimen4)); Assert.assertFalse(regimen4.equals(regimen1)); Assert.assertFalse(regimen1.equals(null)); }
@Test public void no_write_if_channel_closed() { when(channelMock.isOpen()).thenReturn(false); when(exceptionEventMock.getCause()).thenReturn(new TimeoutException()); subject.exceptionCaught(null, exceptionEventMock); verify(channelMock, times(0)).write(QueryMessages.timeout()); }
@Test public void testReadTrace() throws InterruptedException { File traceDir = new File(FastRemoteReaderTest.class.getClassLoader().getResource("remote").getPath()); FastLogger.getInstance().clear(); FastRemoteReader reader = new FastRemoteReader(FastLogger.getInstance(),traceDir); reader.read(); MyMap<Long, IdTreeNode> oldLogs = FastLogger.getInstance().exportLogs(); BiMap<String, Integer> oldDico = FastLogger.getInstance().getDictionary(); FastFollower follower = new FastFollower(); MyMap<Long, Boolean> threadOfftrack = new MyMap<>(); for(Long t: oldLogs.keyList()) { threadOfftrack.put(t,false); } follower.load(oldLogs, threadOfftrack, oldDico); for(MyEntry<Long,IdTreeNode> e: oldLogs.entryList()) { IdTreeNode node = e.getValue().children.get(0); visit(follower, node, e.getKey()); assertFalse(follower.threadOfftrack.get(e.getKey())); } }
@Test(dataProvider = "dataHasFieldTesting") public void testHasFieldWorksAsExpected(final String testCaseDescription, final String fieldName, final boolean expectedResult) { final ImmutableToFooSubClass immutableToFooSubClass = new ImmutableToFooSubClass(null, null, null, null, null, null, 0, false, null); boolean actual = underTest.hasField(immutableToFooSubClass, fieldName); assertThat(actual).isEqualTo(expectedResult); }
@Test public void test() throws IOException { JSONObject input = getJson(MAP_CONVERTER_INPUTS, fileName); JSONObject output = getJson(MAP_CONVERTER_OUTPUTS, fileName); Map<String, Object> result = ModelConverterUtils.convert(input); Assert.assertEquals(output, JSONObject.fromObject(result)); }
@Test public void testGetFullObjectForTypeDataObject() throws Exception { String testFileName = "testGetFullObjectForTypeDataObject.txt"; String absPath = scratchFileUtils.createAndReturnAbsoluteScratchPath(IRODS_TEST_SUBDIR_PATH); String fileNameOrig = FileGenerator.generateFileOfFixedLengthGivenName(absPath, testFileName, 2); String targetIrodsCollection = testingPropertiesHelper .buildIRODSCollectionAbsolutePathFromTestProperties(testingProperties, IRODS_TEST_SUBDIR_PATH); IRODSAccount irodsAccount = testingPropertiesHelper.buildIRODSAccountFromTestProperties(testingProperties); DataObjectAOImpl dataObjectAO = (DataObjectAOImpl) irodsFileSystem.getIRODSAccessObjectFactory() .getDataObjectAO(irodsAccount); IRODSFile irodsFile = irodsFileSystem.getIRODSFileFactory(irodsAccount) .instanceIRODSFile(targetIrodsCollection); dataObjectAO.putLocalDataObjectToIRODS(new File(fileNameOrig), irodsFile, true); CollectionAndDataObjectListAndSearchAO listAndSearchAO = irodsFileSystem.getIRODSAccessObjectFactory() .getCollectionAndDataObjectListAndSearchAO(irodsAccount); Object actual = listAndSearchAO.getFullObjectForType(targetIrodsCollection + "/" + testFileName); Assert.assertNotNull("object was null", actual); boolean isDataObject = actual instanceof DataObject; Assert.assertTrue("was not a data object", isDataObject); }
@Test public void testExecutionFailureWithFallbackImplementedButDisabled() { TestHystrixCommand<Boolean> commandEnabled = new KnownFailureTestCommandWithFallback(new TestCircuitBreaker(), true); try { assertEquals(false, commandEnabled.execute()); } catch (Exception e) { e.printStackTrace(); fail("We should have received a response from the fallback."); } TestHystrixCommand<Boolean> commandDisabled = new KnownFailureTestCommandWithFallback(new TestCircuitBreaker(), false); try { assertEquals(false, commandDisabled.execute()); fail("expect exception thrown"); } catch (Exception e) { } assertEquals("we failed with a simulated issue", commandDisabled.getFailedExecutionException().getMessage()); assertTrue(commandDisabled.isFailedExecution()); assertCommandExecutionEvents(commandEnabled, HystrixEventType.FAILURE, HystrixEventType.FALLBACK_SUCCESS); assertCommandExecutionEvents(commandDisabled, HystrixEventType.FAILURE); assertNotNull(commandDisabled.getExecutionException()); assertEquals(0, commandDisabled.getBuilder().metrics.getCurrentConcurrentExecutionCount()); assertSaneHystrixRequestLog(2); }
@Test void testTopic() throws JMSException { final EventService svc = new JmsEventService(serializer, mockSession, queueName, false); svc.emit(mockEvent); verify(mockTopicProducer).send(eq(mockMessage)); verify(mockProducer, never()).send(eq(mockMessage)); }
@Test(expected = IllegalStateException.class) public void testGroupingContextWithBadDelimiterConfig() throws Exception { JsonObjectFlattener flattener = new JsonObjectFlattenerImpl.Builder().pathDelimiter(".").occurrenceInGroupDelimiter(".") .flattenMode(FlattenMode.GROUPED).build(); JsonParser parser = new JsonParser(); JsonElement jsonElement = parser.parse(json); JsonObject job = jsonElement.getAsJsonObject(); try { flattener.flatten(job); } catch (IllegalStateException ill) { Assert.assertEquals("path delimiter and occurrence delimiter cannot be the same", ill.getMessage()); throw ill; } }
@Test public void readAINT16() throws IOException { byte[] given = ArrayUtils.join( new UINT32(3).bytes(), INT16.MAX_VALUE.bytes(), INT16.MAX_VALUE.bytes(), INT16.MAX_VALUE.bytes() ); List<INT16> expected = new ArrayList<>(); expected.add(INT16.MAX_VALUE); expected.add(INT16.MAX_VALUE); expected.add(INT16.MAX_VALUE); InputStream givenInputStream = new ByteArrayInputStream(given); PtpInputStream pis = new PtpInputStream(givenInputStream); List<INT16> actual = pis.readAINT16(); assertThat(actual, is(expected)); }
@Test public void filterWithNamedParameterAndLikeAtEnd() { Query query = mock(Query.class); when(query.getLanguage()).thenReturn(Query.HQL); when(query.getStatement()).thenReturn("select a from b where ref like :reference"); Map<String, Object> parameters = new LinkedHashMap<>(); parameters.put("reference", new DefaultQueryParameter(query).literal("wiki:space1.space\\.2.space!3.WebHome")); when(query.getNamedParameters()).thenReturn(parameters); Query filteredQuery = this.filter.filterQuery(query); assertEquals("SELECT a FROM b WHERE ref LIKE :reference ESCAPE '!'", filteredQuery.getStatement()); assertEquals("wiki:space1.space\\.2.space!!3.WebHome", filteredQuery.getNamedParameters().get("reference")); }
@Test public void testSetScopeNote() { String scn = "new scope note"; mf.setScopeNote(scn); assertThat("testSetScopeNote 0", mf.getScopeNote(), equalTo(scn)); }
@Test public void testEbcdicToAsciiThrowsNullPointerException() throws Throwable { assertThrows(NullPointerException.class, () -> { ISOUtil.ebcdicToAscii(null); }); }
@Test public void testSaveMOWhenMOExistsForAProject() { Long projectid = 1L; LegacyMonitoringOfficer monitoringOfficerInDB = LegacyMonitoringOfficerBuilder.newLegacyMonitoringOfficer() .withFirstName("def") .withLastName("klm") .withEmail("def.klm@gmail.com") .withPhoneNumber("079237439") .build(); Project projectInDB = newProject().withId(1L).build(); when(projectRepositoryMock.findById(projectid)).thenReturn(Optional.of(projectInDB)); when(monitoringOfficerRepositoryMock.findOneByProjectId(monitoringOfficerResource.getProject())).thenReturn(monitoringOfficerInDB); when(projectDetailsWorkflowHandlerMock.isSubmitted(projectInDB)).thenReturn(true); ServiceResult<SaveMonitoringOfficerResult> result = service.saveMonitoringOfficer(projectid, monitoringOfficerResource); Assert.assertEquals("First name of MO in DB should be updated with the value from MO Resource", monitoringOfficerInDB.getFirstName(), monitoringOfficerResource.getFirstName()); Assert.assertEquals("Last name of MO in DB should be updated with the value from MO Resource", monitoringOfficerInDB.getLastName(), monitoringOfficerResource.getLastName()); Assert.assertEquals("Email of MO in DB should be updated with the value from MO Resource", monitoringOfficerInDB.getEmail(), monitoringOfficerResource.getEmail()); Assert.assertEquals("Phone number of MO in DB should be updated with the value from MO Resource", monitoringOfficerInDB.getPhoneNumber(), monitoringOfficerResource.getPhoneNumber()); Optional<SaveMonitoringOfficerResult> successResult = result.getOptionalSuccessObject(); assertTrue(successResult.isPresent()); assertTrue(successResult.get().isMonitoringOfficerSaved()); assertTrue(result.isSuccess()); }
@Test public void shouldAddPendingOption() { HelmList command = Helm.list(); HelmList copy = command.pending(); assertThat(copy, is(not(sameInstance(command)))); assertCommand(copy, "list", "--pending"); }
@Test public void testAddColumn() { EventList<TableColumn> columns = new BasicEventList<>(); columns.add(createColumn("name")); columns.add(createColumn("age")); DefaultTableColumnModel defaultModel = watcher.createDefaultModel(columns); EventTableColumnModel eventModel1 = watcher.createEventModel(columns); EventTableColumnModel eventModel2 = watcher.createEventModel(GlazedLists.eventList(columns)); assertModelEquals(eventModel1, defaultModel); assertModelEquals(eventModel2, defaultModel); assertModelEquals(eventModel1, eventModel2); defaultModel.getSelectionModel().addSelectionInterval(0, 0); eventModel1.getSelectionModel().addSelectionInterval(0, 0); eventModel2.getSelectionModel().addSelectionInterval(0, 0); final TableColumn newColumn = createColumn("new"); assertEquals(0, newColumn.getPropertyChangeListeners().length); columns.add(newColumn); defaultModel.addColumn(newColumn); eventModel2.addColumn(newColumn); assertEquals(3, newColumn.getPropertyChangeListeners().length); assertModelEquals(eventModel1, defaultModel); assertModelEquals(eventModel2, defaultModel); assertModelEquals(eventModel1, eventModel2); watcher.assertFiredEventsAgreeAndClear(); }
@Test public void testTimeoutParameter() { assertEquals(1500, HttpTestHandler.getRequestTimeout( HttpRequest.createTestRequest("foo", com.yahoo.jdisc.http.HttpRequest.Method.GET, null, Collections.singletonMap("timeout", "1.5")), Duration.ofSeconds(5)).toMillis()); }
@Test public void loadValidConfig() throws Exception { createDefaultConfig(); Configuration config = configDelegate.loadResourceConfiguration(); assertEquals(config.getSimpleValue("minHeapSize"), "512M", "Failed to load property [minHeapSize]"); assertEquals(config.getSimpleValue("maxHeapSize"), "512M", "Failed to load property [maxHepSize]"); assertEquals(config.getSimpleValue("heapNewSize"), "128M", "Failed to load property [heapNewSize]"); assertEquals(config.getSimpleValue("threadStackSize"), "180", "Failed to load property [threadStackSize]"); assertEquals(config.getSimple("heapDumpOnOOMError").getBooleanValue(), (Boolean) true, "Failed to load property [heapDumpOnOOMError]"); assertEquals(new File(config.getSimpleValue("heapDumpDir")), binDir(), "Failed to load property [heapDumpDir]"); }
@Test public void testHashCode() throws Exception { Location lax = Location.fromRadians(0.592539, -2.066470); Location jfk = Location.fromRadians(0.709185, -1.287762); int laxHash = lax.hashCode(); int jfkHash = jfk.hashCode(); assertNotEquals("jfk hash vs lax hash", jfkHash, laxHash); }
@SuppressWarnings("unchecked") @Test public void loopIterativeTest() throws IOException { IterativeDnsClient client = new IterativeDnsClient(new LruCache(0)); applyZones(client, rootZone( record("a", ns("a.ns")), record("b", ns("b.ns")), record("a.ns", a("1.1.1.1")), record("b.ns", a("1.1.1.2")) ), zone("a", "a.ns", "1.1.1.1", record("test.a", ns("a.test.b")) ), zone("b", "b.ns", "1.1.1.2", record("test.b", ns("b.test.a")) ) ); assertThrows(IterativeClientException.LoopDetected.class, () -> client.query("www.test.a", TYPE.A) ); }
@Test public void testJoinTransformWithEmptyMetricsLists() { Transform joinTransform = new JoinTransform(); List<Metric> metrics_1 = new ArrayList<Metric>(); List<Metric> metrics_2 = new ArrayList<Metric>(); List<Metric> result = joinTransform.transform(null, metrics_1, metrics_2); assertEquals(result.size(), 0); }
@Test public void testGet() { Map<String, String> expectedInfo = Collections.EMPTY_MAP; assertEquals(expectedInfo, rolloutSourceInfo.get()); }
@Test public void testOneHost() throws Exception { final DNSUtil.WeightedHostAddress host = new DNSUtil.WeightedHostAddress("host", 5222, false, 1, 1); final List<DNSUtil.WeightedHostAddress> result = DNSUtil.prioritize(new DNSUtil.WeightedHostAddress[]{host}); Assert.assertEquals( 1, result.size() ); Assert.assertEquals(host, result.get(0)); }
@Test public void testSetAdHocOrderingSequential() { tested.setAdHocOrdering(new AdHocOrdering("Sequential")); assertEquals(org.eclipse.bpmn2.AdHocOrdering.SEQUENTIAL, ((AdHocSubProcess) tested.getFlowElement()).getOrdering()); }
@Test public void rleWithMixedValues() throws Exception { Number[] values = {7.0, 2.0, 2.0, 4.0, 4.0, 6.0, 6.0, 7.0}; List<Number> weightList = Arrays.asList(values); double[] actuals = Weights.buildRleWeights(weightList, 1); System.out.println("actuals = " + Arrays.toString(actuals)); assertArrayEquals(new double[]{ 7.0, Double.POSITIVE_INFINITY, 2.0, 2.0, Double.POSITIVE_INFINITY, 2.0, 4.0, Double.POSITIVE_INFINITY, 2.0, 6.0, 7.0}, actuals, 0.01); }
@Test public void testReadNonExistentFile() throws Exception { thrown.expect(FileNotFoundException.class); localFileSystem .open( LocalResourceId.fromPath( temporaryFolder.getRoot().toPath().resolve("non-existent-file.txt"), false )) .close(); }
@Test public void testBuildWithDisabledSecurityConstraint() throws Exception { unit.setSecurity(false); SpecOfferWave context = new SpecOfferWave(); String expectedQuery = "SELECT e FROM SpecOfferWave e WHERE e.status=:status "; MultiplePagedSearch<SpecOfferWave> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); String actualQuery = unit.build(pagedSearch); assertEquals(expectedQuery, actualQuery); }
@Test void test_equals() { final Class<? extends SECheck> seCheckClass1 = new SECheck() { }.getClass(); final Class<? extends SECheck> seCheckClass2 = (new SECheck() { }).getClass(); MethodBehavior mb = mockMethodBehavior(); String mockedExceptionType1 = "SomeException"; ExceptionalCheckBasedYield yield = new ExceptionalCheckBasedYield(SV_CAUSING_EXCEPTION, mockedExceptionType1, seCheckClass1, null, mb); ExceptionalYield otherYield = new ExceptionalCheckBasedYield(SV_CAUSING_EXCEPTION, mockedExceptionType1, seCheckClass1, null, mb); assertThat(yield) .isNotEqualTo(null) .isNotEqualTo(new Object()) .isEqualTo(yield) .isEqualTo(otherYield); otherYield = new ExceptionalYield(null, mb); otherYield.setExceptionType(mockedExceptionType1); assertThat(yield).isNotEqualTo(otherYield); otherYield = new ExceptionalCheckBasedYield(new SymbolicValue(), mockedExceptionType1, seCheckClass2, null, mb); assertThat(yield).isNotEqualTo(otherYield); otherYield = new ExceptionalCheckBasedYield(SV_CAUSING_EXCEPTION, mockedExceptionType1, seCheckClass2, null, mb); assertThat(yield).isNotEqualTo(otherYield); otherYield = new ExceptionalCheckBasedYield(SV_CAUSING_EXCEPTION, "SomeOtherException", seCheckClass1, null, mb); assertThat(yield).isNotEqualTo(otherYield); }
@Test public void testWriteNull() throws IOException { w.writeNull(); checkContents("00"); }
@Test(expected = IllegalArgumentException.class) public void convertRawBytesToString_throws_IllegalArgumentException_if_contentCharset_is_null() { HttpUtils.convertRawBytesToString(null, new byte[0]); fail("Expected IllegalArgumentException but no exception was thrown"); }
@Test public void deleteTest() { Date date = new Date(); AssignmentConfig retrievedAssignmentConfig = _dao.getAssignmentConfig("lastUpdatedTest"); assertNull(retrievedAssignmentConfig); AssignmentConfig assignmentConfig = new AssignmentConfig("lastUpdatedTest", getDateAsString(date)); _dao.save(assignmentConfig); retrievedAssignmentConfig = _dao.getAssignmentConfig("lastUpdatedTest"); assertNotNull(retrievedAssignmentConfig); _dao.delete(retrievedAssignmentConfig); retrievedAssignmentConfig = _dao.getAssignmentConfig("lastUpdatedTest"); assertNull(retrievedAssignmentConfig); }
@Test public void convertToDatabaseColumnShouldConvertToJson() throws Exception { given(objectMapper.writeValueAsString(ENTITY_REPRESENTATION)).willReturn(JSON_REPRESENTATION); String convertedValue = converter.convertToDatabaseColumn(ENTITY_REPRESENTATION); assertThat(convertedValue).isEqualTo(JSON_REPRESENTATION); }
@Test void test_psuAuthenticated_failure_noAuthenticationMethodId_pis() { Xs2aUpdatePisCommonPaymentPsuDataRequest updateRequest = buildPisUpdateRequest(); ValidationResult validationResult = checkValidator.validate(updateRequest, PSUAUTHENTICATED_STATUS, PIS_AUTHORISATION); assertTrue(validationResult.isNotValid()); assertEquals(PIS_400_ERROR, validationResult.getMessageError().getErrorType()); assertEquals(SERVICE_INVALID, validationResult.getMessageError().getTppMessage().getMessageErrorCode()); }
@Test public void testJoinNull() { String separator = ", "; List<Item> items = null; String result = CollectionUtils.join(items, "id", separator); assertTrue(result.isEmpty()); }
@Test public void shouldRethrowNonRetriableException() throws Exception { Exception exception = new TransactionFailedNonRetriableException("msg"); when(delegate.execute(transaction)).thenThrow(exception); assertThatThrownBy(() -> wrappingTask.execute(transaction)).isEqualTo(exception); }
@Test public void greet() { webTestClient .get() .uri("/public/greet") .exchange() .expectStatus().isOk() .expectBody().json("{\"greet\":\"Hi everybody\"}"); }
@Test public void testSparkRunnerCommandFull() { String expected = "sudo -u user spark2-submit --conf spark.metrics.conf=metrics.properties --conf \"spark.driver.extraClassPath=logstash-gelf.jar\" " + "--driver-java-options \"-Dlog4j.configuration=file:log4j.properties\" --queue pipelines --conf spark.default.parallelism=1 " + "--conf spark.executor.memoryOverhead=1 --conf spark.dynamicAllocation.enabled=false " + "--class org.gbif.Test --master yarn --deploy-mode cluster " + "--executor-memory 1G --executor-cores 1 --num-executors 1 --driver-memory 4G java.jar --datasetId=de7ffb5e-c07b-42dc-8a88-f67a4465fe3d " + "--attempt=1 --runner=SparkRunner --metaFileName=interpreted-to-hdfs.yml --inputPath=tmp --targetPath=target --hdfsSiteConfig=hdfs.xml " + "--coreSiteConfig=core.xml --numberOfShards=10 --properties=/path/ws.config"; HdfsViewConfiguration config = new HdfsViewConfiguration(); config.distributedJarPath = "java.jar"; config.distributedMainClass = "org.gbif.Test"; config.sparkExecutorMemoryGbMax = 10; config.sparkExecutorMemoryGbMin = 1; config.sparkExecutorCores = 1; config.sparkExecutorNumbersMin = 1; config.sparkExecutorNumbersMax = 2; config.sparkMemoryOverhead = 1; config.sparkDriverMemory = "4G"; config.metricsPropertiesPath = "metrics.properties"; config.extraClassPath = "logstash-gelf.jar"; config.driverJavaOptions = "-Dlog4j.configuration=file:log4j.properties"; config.deployMode = "cluster"; config.processRunner = StepRunner.DISTRIBUTED.name(); config.yarnQueue = "pipelines"; config.pipelinesConfig = "/path/ws.config"; config.repositoryTargetPath = "target"; config.yarnQueue = "pipelines"; config.otherUser = "user"; config.stepConfig.coreSiteConfig = "core.xml"; config.stepConfig.hdfsSiteConfig = "hdfs.xml"; config.stepConfig.repositoryPath = "tmp"; UUID datasetId = UUID.fromString("de7ffb5e-c07b-42dc-8a88-f67a4465fe3d"); int attempt = 1; Set<String> steps = Collections.singleton(RecordType.ALL.name()); ValidationResult vr = new ValidationResult(); PipelinesInterpretedMessage message = new PipelinesInterpretedMessage(datasetId, attempt, steps, 100L, false, null, EndpointType.DWC_ARCHIVE, vr); ProcessBuilder builder = ProcessRunnerBuilder.builder() .config(config) .message(message) .sparkParallelism(1) .sparkExecutorMemory("1G") .sparkExecutorNumbers(1) .numberOfShards(10) .build() .get(); String result = builder.command().get(2); assertEquals(expected, result); }
@Test public void formatedDateShouldContainAllParts() { String key = TimeStampKeyGenerator.format( TimeStampKeyGenerator.DEFAULT_WITH_MILLISECONDS, sampleDate()); assertEquals("1979-03-06--060703-168", key); }
@Test (expected = IllegalArgumentException.class) public void shouldThrowIfValueIsNull() { withOrigin("*").preflightResponseHeader("HeaderName", new Object[]{null}).build(); }
@Test public void consume() throws IOException { setHttpResponseEntity("text/plain;charset="); mockStatic(IOUtils.class); when(IOUtils.toString(inputStreamMock, Consts.ISO_8859_1.name())).thenReturn("doc"); httpResponseConsumer .setHttpResponse(httpResponseMock) .setDestinationFile(null) .setResponseCharacterSet(null) .consume(result); assertEquals("doc", result.get(RETURN_RESULT)); }
@Test public final void testGetAPIDataUnknownDiscoveryStatus() { int frameType = APIFrameType.TRANSMIT_STATUS.getValue(); int frameID = 0xE7; XBee16BitAddress address = new XBee16BitAddress("B45C"); int retryCount = 3; int deliveryStatus = XBeeTransmitStatus.NO_ACK.getId(); int discoveryStatus = 255; byte[] payload = new byte[7]; payload[0] = (byte)frameType; payload[1] = (byte)frameID; System.arraycopy(address.getValue(), 0, payload, 2, address.getValue().length); payload[4] = (byte)retryCount; payload[5] = (byte)deliveryStatus; payload[6] = (byte)discoveryStatus; TransmitStatusPacket packet = TransmitStatusPacket.createPacket(payload); byte[] expectedData = new byte[payload.length - 1]; System.arraycopy(payload, 1, expectedData, 0, expectedData.length); byte[] apiData = packet.getAPIData(); assertThat("API data is not the expected", apiData, is(equalTo(expectedData))); }
@Test public void DueDateDiffText_ShouldShowMinutesOnly_IfIncreasedByFewMinutes() { _controller.changeDueDateBy(PLUS, TimeUnit.MINUTES, 10); verify(_talkToTCSMock, atLeastOnce()).updateDueDateDisplay(anyString(), dueDateDiffTextCaptor.capture()); assertThat(dueDateDiffTextCaptor.getValue()).isEqualTo("(~10 Mts)"); }
@Test public void getWhitelistedReturnsForcedVariation() { logbackVerifier.expectMessage(Level.INFO, "User \"" + whitelistedUserId + "\" is forced in variation \"" + whitelistedVariation.getKey() + "\"."); assertEquals(whitelistedVariation, decisionService.getWhitelistedVariation(whitelistedExperiment, whitelistedUserId)); }
@Test public void classes_know_which_constructor_throws_clauses_contain_their_type() { JavaClasses classes = new ClassFileImporter().importClasses(ClassWithThrowingConstructor.class, FirstCheckedException.class); Set<ThrowsDeclaration<JavaConstructor>> throwsDeclarations = classes.get(FirstCheckedException.class).getConstructorsWithThrowsDeclarationTypeOfSelf(); assertThat(getOnlyElement(throwsDeclarations).getDeclaringClass()).matches(ClassWithThrowingConstructor.class); assertThat(classes.get(FirstCheckedException.class).getMethodThrowsDeclarationsWithTypeOfSelf()).isEmpty(); }
@Test public void testAreaAddress() throws Exception { defaultIsisInterface.setAreaAddress(areaAddr); resultStr = defaultIsisInterface.areaAddress(); assertThat(resultStr, is(areaAddr)); }
@Test public void testGetRole_sourceNotFound() throws Exception { when(securitySystem.getAuthorizationManager("bad")).thenThrow(NoSuchAuthorizationManagerException.class); try { underTest.getRole("bad", "roleId"); fail("exception should have been thrown for missing source"); } catch (WebApplicationMessageException e) { assertThat(e.getResponse().getStatus(), is(400)); assertThat(e.getResponse().getMediaType(), is(MediaType.APPLICATION_JSON_TYPE)); assertThat(e.getResponse().getEntity().toString(), is("\"Source 'bad' not found.\"")); } }
@Test public void testParse() throws ParseException, IOException, ProcessingException { for (String inputString : inputStrings) { JSONObject parsed = parser.parse(inputString.getBytes(StandardCharsets.UTF_8)).get(0); assertNotNull(parsed); JSONParser parser = new JSONParser(); Map<?, ?> json = (Map<?, ?>) parser.parse(parsed.toJSONString()); assertTrue(validateJsonData(getSchemaJsonString(), json.toString())); } }
@Test public void testSeparateVariablesWith2Dollar() { assertEquals("\"\"+s_v($a)+\"==\"+s_v($b)+\"\"", "\"" + SahiScript.separateVariables("$a==$b") + "\""); assertEquals("\"_setValue(\"+s_v($a)+\", \"+s_v($b)+\")\"", "\"" + SahiScript.separateVariables("_setValue($a, $b)") + "\""); }
@Test void retrieve_default_value_on_identifier() throws Exception { ExpressionTree tree = firstExpression( "void foo(String prop){ foo(myValue); } " + "java.util.Properties props = new java.util.Properties();" + "String myValue = props.getProperty(\"myKey\", \"defaultValue\");"); ExpressionTree defaultValue = JavaPropertiesHelper.retrievedPropertyDefaultValue(((MethodInvocationTree) tree).arguments().get(0)); assertThat(defaultValue).isNotNull(); assertThat(defaultValue.is(Tree.Kind.STRING_LITERAL)).isTrue(); }
@Test public void testConfigure() throws Exception { File confDir = tempFolder.newFolder(); initConfDir(confDir); HadoopConfOverlay overlay = new HadoopConfOverlay(confDir); ContainerSpecification spec = new ContainerSpecification(); overlay.configure(spec); assertEquals(TARGET_CONF_DIR.getPath(), spec.getEnvironmentVariables().get("HADOOP_CONF_DIR")); assertEquals(TARGET_CONF_DIR.getPath(), spec.getDynamicConfiguration().getString(ConfigConstants.PATH_HADOOP_CONFIG, null)); checkArtifact(spec, new Path(TARGET_CONF_DIR, "core-site.xml")); checkArtifact(spec, new Path(TARGET_CONF_DIR, "hdfs-site.xml")); }
@Test(expected = NotfoundException.class) public void testListNotFoundFolder() throws Exception { final Host host = new Host(new AzureProtocol(), "kahy9boj3eib.blob.core.windows.net", new Credentials( System.getProperties().getProperty("azure.account"), System.getProperties().getProperty("azure.key") )); final AzureSession session = new AzureSession(host); new LoginConnectionService(new DisabledLoginCallback(), new DisabledHostKeyCallback(), new DisabledPasswordStore(), new DisabledProgressListener()).connect(session, PathCache.empty(), new DisabledCancelCallback()); final Path container = new Path("cyberduck", EnumSet.of(Path.Type.volume)); new AzureObjectListService(session, null).list(new Path(container, "notfound", EnumSet.of(Path.Type.directory)), new DisabledListProgressListener()); }
@Test public void testMaxLowPercentRoundsUp() { QueryLaningStrategy strategyRoundLow = new HiLoQueryLaningStrategy(1); Object2IntMap<String> laneConfigRoundLow = strategyRoundLow.getLaneLimits(25); Assert.assertEquals(1, laneConfigRoundLow.size()); Assert.assertTrue(laneConfigRoundLow.containsKey(HiLoQueryLaningStrategy.LOW)); Assert.assertEquals(1, laneConfigRoundLow.getInt(HiLoQueryLaningStrategy.LOW)); QueryLaningStrategy strategy = new HiLoQueryLaningStrategy(96); Object2IntMap<String> laneConfig = strategy.getLaneLimits(25); Assert.assertEquals(1, laneConfig.size()); Assert.assertTrue(laneConfig.containsKey(HiLoQueryLaningStrategy.LOW)); Assert.assertEquals(24, laneConfig.getInt(HiLoQueryLaningStrategy.LOW)); QueryLaningStrategy strategyRounded = new HiLoQueryLaningStrategy(97); Object2IntMap<String> laneConfigRounded = strategyRounded.getLaneLimits(25); Assert.assertEquals(1, laneConfigRounded.size()); Assert.assertTrue(laneConfigRounded.containsKey(HiLoQueryLaningStrategy.LOW)); Assert.assertEquals(25, laneConfigRounded.getInt(HiLoQueryLaningStrategy.LOW)); }
@Test public void getValuesFromArgsSingleArgument() throws Exception { List<String> values = workflowHelper.getValuesFromArgs("foo", new String[] { "foo:bar", "goo:baz "}); assertNotNull(values); assertEquals(1, values.size()); assertEquals("bar", values.get(0)); }
@Test public void shouldNotValidateInvalidOperationChain() { Operation operation = Mockito.mock(Operation.class); given(operation.validate()).willReturn(new ValidationResult("SparkContext is required")); OperationChain opChain = new OperationChain(operation); validateOperationChain(opChain, false); verify(operation).validate(); }
@Test public void testFindByIdentifierFoundEmpty() throws DatabaseException { Optional<Document> response = repository.findByIdentifier("FakeIdentifier"); assertThat(response).isEmpty(); }
@Test public void testPropertyIndex2() throws NoSuchIndexException { for (int i = 0; i < 10000; i++) { ps.put(3 * i); } assertEquals(10000, ps.getSize()); assertEquals(0, ps.getFirstPropertyIndex()); assertEquals(3 * 9999, ps.getLastPropertyIndex()); assertEquals(3, ps.getNextPropertyIndex(0)); assertEquals(0, ps.getPreviousPropertyIndex(3)); assertEquals(3, ps.getNextPropertyIndex(1)); assertEquals(0, ps.getPreviousPropertyIndex(2)); LongIterator it = ps.getPropertyIterator(); int count = 0; while (it.hasNext()) { it.next(); count++; } assertEquals(10000, count); }
@Test public void validate_shouldFailValidationIfFrequencyIsNullForSimpleDosingInstructionsDosingType() { DrugOrder order = new DrugOrder(); order.setDosingType(SimpleDosingInstructions.class); order.setFrequency(null); Errors errors = new BindException(order, "order"); new DrugOrderValidator().validate(order, errors); Assert.assertTrue(errors.hasFieldErrors("frequency")); }
@Test public void testCreateArrayInNestedStructureCmd() throws Exception { long startOffset = UNDEFINED_AREA; Structure struct1 = new StructureDataType("IntStruct", 0); struct1.add(new ByteDataType()); struct1.add(new WordDataType()); struct1.add(new DWordDataType()); struct1.add(new QWordDataType()); Command cmd = new CreateDataCmd(addr(startOffset + 1), struct1); cmd.applyTo(program); Data dataAt = program.getListing().getDataAt(addr(startOffset + 1)); struct1 = (Structure) dataAt.getDataType(); int structLen = struct1.getLength() + 10; cmd = new CreateStructureCmd(addr(startOffset), structLen); cmd.applyTo(program); DataType dt = new Pointer16DataType(new ByteDataType()); cmd = new CreateArrayInStructureCmd(addr(startOffset), 3, dt, new int[] { 1, 1 }); cmd.applyTo(program); Data d = program.getListing().getDataAt(addr(startOffset)); assertNotNull(d); assertTrue(d.isDefined()); assertTrue(d.getDataType() instanceof Structure); assertEquals(structLen, d.getLength()); Structure struct = (Structure) d.getDataType(); struct.setName("TestStructA"); assertEquals(structLen, struct.getLength()); assertEquals(11, struct.getNumComponents()); DataTypeComponent comp = struct.getComponent(0); assertEquals(1, comp.getLength()); assertEquals(DataType.DEFAULT, comp.getDataType()); comp = struct.getComponent(1); assertEquals(struct1.getLength(), comp.getLength()); assertTrue(comp.getDataType() instanceof Structure); Structure s = (Structure) comp.getDataType(); assertEquals(3, s.getNumComponents()); assertEquals(s, struct1); comp = struct1.getComponent(0); assertEquals(1, comp.getLength()); assertTrue(comp.getDataType() instanceof ByteDataType); comp = struct1.getComponent(1); assertEquals(6, comp.getLength()); assertTrue(comp.getDataType() instanceof Array); Array a = (Array) comp.getDataType(); assertEquals(2, a.getElementLength()); assertEquals(3, a.getNumElements()); assertTrue(a.getDataType().isEquivalent(dt)); comp = struct1.getComponent(2); assertEquals(8, comp.getLength()); assertTrue(comp.getDataType() instanceof QWordDataType); for (int i = 2; i < 11; i++) { comp = struct.getComponent(i); assertEquals(1, comp.getLength()); assertEquals(DataType.DEFAULT, comp.getDataType()); } DataType structA = program.getDataTypeManager().getDataType(CategoryPath.ROOT, "TestStructA"); assertEquals(struct, structA); }
@Test public void testSubstringEndIndexLesserThanLength() throws Exception { Encoder encoder = new Encoder(); String result = encoder.substring("ERT", 1, 2); Assertions.assertThat(result).isEqualTo("R"); }
@Test public void unknowListenerDeregistrationShouldBeSilentlyIgnored() { MBeanServer server = ManagementFactory.getPlatformMBeanServer(); JmxUtil.removeMBeanRegistrationListener(server,this); }
@Test public void shouldCreateChildFileNode() throws Exception { ItemReference fileItem = mock(ItemReference.class); when(fileItem.getType()).thenReturn("file"); folderNode.createChildNode(fileItem); verify(treeStructure).newFileNode(eq(folderNode), eq(fileItem)); }
@Test(expected = IllegalArgumentException.class) public void testNotEmptyFail2() { ParamChecker.notEmpty("", "s"); }
@Test public void testReadRowRanges() { Reads.readRowRanges(projectId, instanceId, TABLE_ID); String output = bout.toString(); assertThat(output) .contains( String.format( "Reading data for phone#4c410523#20190501\n" + "Column Family stats_summary\n" + "\tconnected_cell: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tconnected_wifi: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tos_build: PQ2A.190405.003 @%1$s\n\n" + "Reading data for phone#4c410523#20190502\n" + "Column Family stats_summary\n" + "\tconnected_cell: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tconnected_wifi: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tos_build: PQ2A.190405.004 @%1$s\n\n" + "Reading data for phone#4c410523#20190505\n" + "Column Family stats_summary\n" + "\tconnected_cell: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 @%1$s\n" + "\tconnected_wifi: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tos_build: PQ2A.190406.000 @%1$s\n\n" + "Reading data for phone#5c10102#20190501\n" + "Column Family stats_summary\n" + "\tconnected_cell: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tconnected_wifi: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tos_build: PQ2A.190401.002 @%1$s\n\n" + "Reading data for phone#5c10102#20190502\n" + "Column Family stats_summary\n" + "\tconnected_cell: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001 @%1$s\n" + "\tconnected_wifi: \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 @%1$s\n" + "\tos_build: PQ2A.190406.000 @%1$s", TIMESTAMP)); }
@Test public void testLoadApplication_descriptorErrorsAreResolved() throws Exception { File sourceDirectory = TestUtils.findTestFile( "/applications/mongo" ); File targetDirectory = this.folder.newFolder(); Utils.copyDirectory( sourceDirectory, targetDirectory ); File f = new File( targetDirectory, Constants.PROJECT_DIR_DESC + "/" + Constants.PROJECT_FILE_DESCRIPTOR ); Assert.assertTrue( f.exists()); String fContent = Utils.readFileContent( f ); fContent = fContent.replaceAll( "(?i)application-version\\s*=.*", "application-version = @inval!d" ); Utils.writeStringInto( fContent, f ); ApplicationLoadResult result = RuntimeModelIo.loadApplication( targetDirectory ); Assert.assertNotNull( result ); Assert.assertNotNull( result.applicationTemplate ); Assert.assertEquals( 3, result.loadErrors.size()); Iterator<RoboconfError> it = result.loadErrors.iterator(); Assert.assertEquals( ErrorCode.RM_INVALID_APPLICATION_VERSION, it.next().getErrorCode()); Assert.assertEquals( ErrorCode.PROJ_NO_RESOURCE_DIRECTORY, it.next().getErrorCode()); Assert.assertEquals( ErrorCode.PROJ_NO_RESOURCE_DIRECTORY, it.next().getErrorCode()); Assert.assertFalse( it.hasNext()); List<RoboconfError> errors = RoboconfErrorHelpers.resolveErrorsWithLocation( result ); Assert.assertEquals( 3, errors.size()); Assert.assertEquals( ErrorCode.RM_INVALID_APPLICATION_VERSION, errors.get( 0 ).getErrorCode()); Assert.assertEquals( ParsingError.class, errors.get( 0 ).getClass()); Assert.assertEquals( f, ((ParsingError) errors.get( 0 )).getFile()); Assert.assertEquals( 3, ((ParsingError) errors.get( 0 )).getLine()); Assert.assertEquals( ErrorCode.PROJ_NO_RESOURCE_DIRECTORY, errors.get( 1 ).getErrorCode()); Assert.assertEquals( ErrorCode.PROJ_NO_RESOURCE_DIRECTORY, errors.get( 2 ).getErrorCode()); }
@Test public void serialize() throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream(); BinaryWriter writer = new BinaryWriter(outStream); new ScriptHash("23ba2703c53263e8d6e522dc32203339dcd8eee9").serialize(writer); byte[] actual = outStream.toByteArray(); byte[] expected = ArrayUtils.reverseArray(Numeric.hexStringToByteArray( "23ba2703c53263e8d6e522dc32203339dcd8eee9")); assertArrayEquals(expected, actual); }
@Test public void testSerializeRpc_in() throws Exception { Optional<RpcDefinition> loadRpc = ConverterUtils.loadRpc(schemaContext, SIMPLE_IO_RPC_QNAME); Writer serializeRpc = bindingSerializer.serializeRpc(loadRpc.get().getInput(), testedSimpleRpcInputNormalizedNodes); Assert.assertFalse(Strings.isNullOrEmpty(serializeRpc.toString())); LOG.info(serializeRpc.toString()); }
@Test public void testCombineMINUS() { IntArrCombiner combiner = new IntArrCombiner(Operation.MINUS); int length = 128; IntArray a1 = new IntArray(createArr(length, (int) 1), 0, length); IntArray a2 = new IntArray(createArr(length, (int) 2), 0, length); combiner.combine(a1, a2); for (int i = 0; i < length; i++) { Assert.assertEquals((byte)-1, a1.get()[i], 0.00001); } }
@Test public void testButton() { assertThat(HtmlBuilders.button().build().toHtml(), is("<button></button>")); assertThat(HtmlBuilders.button("clear").build().toHtml(), is("<button type=\"clear\"></button>")); }
@Test public void shouldNotDoAnythingDuringFPFollowupWhenNoECIsFound() throws Exception { when(allEligibleCouples.findByCaseId("entity id 1")).thenReturn(null); FormSubmission submission = FormSubmissionBuilder.create().build(); ecService.followupOnFPMethod(submission); verify(allEligibleCouples).findByCaseId("entity id 1"); verifyZeroInteractions(reportingService); verifyZeroInteractions(schedulingService); }
@Test @Category(NeedsRunner.class) public void testExceptAllCollectionList() { PCollection<String> third = p.apply("third", Create.of(Arrays.asList("a", "b", "b", "g", "f"))); PCollection<Row> thirdRows = p.apply("thirdRows", Create.of(toRows("a", "b", "b", "g"))); PAssert.that( PCollectionList.of(first).and(second).and(third).apply("stringsCols", Sets.exceptAll())) .containsInAnyOrder("g", "h", "h"); PCollection<Row> results = PCollectionList.of(firstRows) .and(secondRows) .and(thirdRows) .apply("rowCols", Sets.exceptAll()); PAssert.that(results).containsInAnyOrder(toRows("g", "h", "h")); assertEquals(schema, results.getSchema()); p.run(); }
@Test public void testValue() { assertThat(new TaskRelated(123, ContentValues::new), hasValue(new ContentValuesWithLong(TaskContract.Instances.TASK_ID, 123))); }
@Test @FixFor( "MODE-2247" ) public void shouldBeAbleToExecuteIntersectOperationWithSimpleCriteria() throws Exception { String sql1 = "SELECT car1.[jcr:path] FROM [car:Car] AS car1"; String sql2 = "SELECT car2.[jcr:path] FROM [car:Car] AS car2 WHERE car2.[car:mpgCity] = 12"; String queryString = sql1 + " INTERSECT " + sql2; List<String> expectedPaths = new ArrayList<>(Arrays.asList("/Cars/Sports/Aston Martin DB9", "/Cars/Utility/Land Rover LR3")); Query query = session.getWorkspace().getQueryManager().createQuery(queryString, Query.JCR_SQL2); NodeIterator nodes = query.execute().getNodes(); assertEquals(2, nodes.getSize()); while (nodes.hasNext()) { String path = nodes.nextNode().getPath(); assertTrue(path + " not found", expectedPaths.remove(path)); } }
@Test public void testResponseMessageAppliesTo() { String streetName = "FOO"; assertThat(search.responseMessageAppliesTo(streetName)) .isEqualTo(search.getResponse().messageAppliesTo(streetName)); assertFalse(search.responseMessageAppliesTo(streetName)); search.getResponse().getResponseStatus().getGeosupportReturnCode().setMessage(streetName); assertThat(search.responseMessageAppliesTo(streetName)) .isEqualTo(search.getResponse().messageAppliesTo(streetName)); assertTrue(search.responseMessageAppliesTo(streetName)); }
@Test public void insignificantSpacesStringAnyStartingOneSpace() throws InvalidCharacterException { char[] empty = new char[]{ ' ', 'a' }; assertEquals( " a", PrepareString.insignificantSpacesStringAny( empty ) ); }
@Test public void testActiveSearchFiltersProcessInstanceId() { final PlaceRequest place = mock(PlaceRequest.class); final String processInstanceId = "1"; when(place.getParameter(SEARCH_PARAMETER_PROCESS_DEFINITION_ID, null)).thenReturn(null); when(place.getParameter(SEARCH_PARAMETER_PROCESS_INSTANCE_ID, null)).thenReturn(processInstanceId); presenter.onStartup(place); presenter.setupActiveSearchFilters(); ArgumentCaptor<ActiveFilterItem> captor = ArgumentCaptor.forClass(ActiveFilterItem.class); verify(viewMock).addActiveFilter(captor.capture()); assertEquals(1, captor.getAllValues().size()); assertEquals(Constants.INSTANCE.Id(), captor.getValue().getKey()); assertEquals(Constants.INSTANCE.Id() + ": " + processInstanceId, captor.getValue().getLabelValue()); assertEquals(1, (captor.getValue().getValue())); }
@Test public void testGetExpires() { assertEquals(expirationTime, handle.getCacheExpirationTime()); }
@Test public void testRetrieveContentTypeWithYAML() throws ResourceConfigException { File file = mock(File.class); when(file.getName()).thenReturn("bla.yml"); BaseResourceConfigFactory testFactory = spy(BaseResourceConfigFactory.class); assertEquals(ContentType.YAML, testFactory.retrieveContentType(file)); }
@Test @SuppressWarnings("unchecked") public void prepare() throws Exception { ClusterModuleConsulConfig consulConfig = new ClusterModuleConsulConfig(); consulConfig.setHostPort("10.0.0.1:1000,10.0.0.2:1001"); Whitebox.setInternalState(provider, "config", consulConfig); Consul consulClient = mock(Consul.class); Consul.Builder builder = mock(Consul.Builder.class); when(builder.build()).thenReturn(consulClient); PowerMockito.mockStatic(Consul.class); when(Consul.builder()).thenReturn(builder); when(builder.withConnectTimeoutMillis(anyLong())).thenReturn(builder); when(builder.withMultipleHostAndPort(anyCollection(), anyLong())).thenReturn(builder); provider.prepare(); ArgumentCaptor<Collection> addressCaptor = ArgumentCaptor.forClass(Collection.class); ArgumentCaptor<Long> timeCaptor = ArgumentCaptor.forClass(long.class); verify(builder).withMultipleHostAndPort(addressCaptor.capture(), timeCaptor.capture()); List<HostAndPort> address = (List<HostAndPort>) addressCaptor.getValue(); assertEquals(2, address.size()); assertEquals(Lists.newArrayList(HostAndPort.fromParts("10.0.0.1", 1000), HostAndPort.fromParts("10.0.0.2", 1001)), address); }
@Test public void testExistingFileAsOutput() throws Exception { Path file = Files.createTempFile(null, null); try (Reporter reporter = new Reporter()) { reporter.initialize(ctxWithOutput(file.toString())); } finally { assertReporterWroteToPath(file); Files.delete(file); } }
@Test public void when_initializing_with_null__npe_should_be_thrown() { assertThatThrownBy(() -> FetchAtomsRequestAction.newRequest(null)).isInstanceOf(NullPointerException.class); }
@Test public void givenFileNameWithExtension_whenExtractFileNameFromFilePath_thenReturnsTheSameString() { String extractedFileName = extractFileNameFromFilePath(TEST_FILE_NAME_WITH_CONTAINER_EXTENSION); assertThat(extractedFileName, is(equalTo(TEST_FILE_NAME_WITH_CONTAINER_EXTENSION))); }
@Test public void testMSTORE_3() { VM vm = getSubject(); program = getProgram("611234600052615566602052618888600052"); String expected = "0000000000000000000000000000000000000000000000000000000000008888" + "0000000000000000000000000000000000000000000000000000000000005566"; vm.step(program); vm.step(program); vm.step(program); vm.step(program); vm.step(program); vm.step(program); vm.step(program); vm.step(program); vm.step(program); assertEquals(expected, Hex.toHexString(program.getMemory())); }
@Test(expected = NullPointerException.class) public void shouldFailToConvertNullNumbersArrayIntoExpressions() throws Exception { literals((Number[]) null); }
@Test(priority = 98) public void processLocalVarDuo() { Map<String, String> localVars = new HashMap<>(3); localVars.put("mylocal", "123456"); CmsCI ci = new CmsCI(); ci.setCiId(98); ci.setCiName("processLocalVarDuo"); Map<String, CmsCIAttribute> attributes = new LinkedHashMap<>(2); int i = 0; CmsCIAttribute attrL = new CmsCIAttribute(); attrL.setDjValue("/preamble/$OO_LOCAL{mylocal}/middle/$OO_LOCAL{mylocal}"); String nameOfAttribute = "my-only-attr"; attributes.put(nameOfAttribute, attrL); ci.setAttributes(attributes); Map<String, CmsCIAttribute> attributesBefore = ci.getAttributes(); for (Entry<String, CmsCIAttribute> e : attributesBefore.entrySet()) { System.out.println("*- b4 |" + e.getKey() + "->" + e.getValue().getDjValue()); } CmsUtil util = getCmsUtil(); dumpMaps(null, null, localVars); dumpCmsCIAttributes(ci); util.processAllVars(ci, null, null, localVars); dumpCmsCIAttributes(ci); for (Entry<String, CmsCIAttribute> a : ci.getAttributes().entrySet()) { String djKey = a.getKey(); String djAfter = a.getValue().getDjValue(); System.out.println("*after k>" + djKey + " v->" + djAfter); if (djKey.equals(nameOfAttribute)) { assertEquals(djAfter, "/preamble/123456/middle/123456"); } } }
@Test( expected = PeerException.class ) public void testStartContainer() throws Exception { localPeer.startContainer( containerHost.getContainerId() ); verify( resourceHost ).startContainerHost( containerHost ); RuntimeException cause = mock( RuntimeException.class ); doThrow( cause ).when( resourceHost ).startContainerHost( containerHost ); localPeer.startContainer( containerHost.getContainerId() ); }
@Test public void channelRead_does_not_remove_IdleChannelTimeoutHandler_if_it_is_not_in_the_pipeline() throws Exception { doReturn(null).when(pipelineMock).get(IDLE_CHANNEL_TIMEOUT_HANDLER_NAME); handler.channelRead(ctxMock, msgMockFirstChunkOnly); verify(pipelineMock).get(IDLE_CHANNEL_TIMEOUT_HANDLER_NAME); verify(pipelineMock, never()).remove(idleChannelTimeoutHandlerMock); }
@Test(expected = IllegalArgumentException.class) public void testFailingZero() { RomanNumbersUtils.toRoman(0); }
@Test public void testCancelledJobs() { long cancelledJobs = 10; when(statistics.getNumberOfCancelledJobs()).thenReturn(cancelledJobs); Result result = healthCheck.execute(); String msg = "Found 10 cancelled jobs."; assertTrue("Message should say it found cancelled jobs", result.toString().contains(msg)); }
@Test public void testCreateListParameter() { ListParameter entry = mock( ListParameter.class ); ParameterContext parameterContext = mock( ParameterContext.class ); ParameterUpdateContext updateContext = mock( ParameterUpdateContext.class ); ResourceBundleFactory resourceBundleFactory = mock( ResourceBundleFactory.class ); Locale locale = new Locale( "test_test" ); doReturn( resourceBundleFactory ).when( parameterContext ).getResourceBundleFactory(); doReturn( locale ).when( resourceBundleFactory ).getLocale(); doReturn( TimeZone.getDefault() ).when( resourceBundleFactory ).getTimeZone(); ParameterComponent comp = factory.create( entry, parameterContext, updateContext ); doReturn( null ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); assertThat( comp, is( instanceOf( TextFieldParameterComponent.class ) ) ); doReturn( "textbox" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( TextFieldParameterComponent.class ) ) ); doReturn( "dropdown" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( DropDownParameterComponent.class ) ) ); doReturn( "list" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( ListParameterComponent.class ) ) ); doReturn( "checkbox" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( CheckBoxParameterComponent.class ) ) ); doReturn( "radio" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( RadioButtonParameterComponent.class ) ) ); doReturn( "togglebutton" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( ButtonParameterComponent.class ) ) ); doReturn( "tt" ).when( entry ).getParameterAttribute( ParameterAttributeNames.Core.NAMESPACE, ParameterAttributeNames.Core.TYPE, parameterContext ); comp = factory.create( entry, parameterContext, updateContext ); assertThat( comp, is( instanceOf( TextFieldParameterComponent.class ) ) ); }
@Test(expected = ProtocolStateException.class) public void testOnJoinActionFromError() throws Exception { engine.onJoinAction(txn, getDefaultSession(ERROR)); }
@Test public void testStartNextHour() { Instant startTime = Instant.parse("2015-06-10T02:42:37.52Z"); Instant effectiveStart = Instant.parse("2015-06-10T03:00:00.00Z"); Schedule schedule = new Schedule.Builder() .jobName("scheduled-input-output") .jobClass(ScheduledInputOutputJob.class) .frequency("0 * * * *") .startAt(startTime) .withInput("source_users", ScheduledInputOutputApp.INPUT_URI_PATTERN, "0 * * * *") .withOutput("target_users", ScheduledInputOutputApp.OUTPUT_URI_PATTERN) .build(); assertEquals(effectiveStart, schedule.getStartTime()); }
@Test public void testFilterFunctionOfVBooleanStringEmpty() { assertEquals("Empty()", empty.filter(even, "Condition is not matched").toString()); assertEquals("Empty()", empty.filter(odd, "Condition is not matched").toString()); }
@Test public void testAllocationIncrementCustomResource() { try { initResourceTypes(); Configuration conf = new Configuration(); conf.set(YarnConfiguration.RESOURCE_TYPES + ".a-custom-resource" + FairSchedulerConfiguration.INCREMENT_ALLOCATION, "10"); FairSchedulerConfiguration fsc = new FairSchedulerConfiguration(conf); Resource increment = fsc.getIncrementAllocation(); DominantResourceCalculator calculator = new DominantResourceCalculator(); Resource min = Resources.createResource(0L, 0); Resource max = Resource.newInstance(Long.MAX_VALUE, Integer.MAX_VALUE, Collections.singletonMap(A_CUSTOM_RESOURCE, Long.MAX_VALUE / UnitsConversionUtil.convert("k", "", 1L))); assertEquals(customResourceInformation(10000L, ""), calculator.normalize(customResource(9999L, ""), min, max, increment) .getResourceInformation(A_CUSTOM_RESOURCE)); assertEquals(customResourceInformation(10000L, ""), calculator.normalize(customResource(10000L, ""), min, max, increment) .getResourceInformation(A_CUSTOM_RESOURCE)); assertEquals(customResourceInformation(20000L, ""), calculator.normalize(customResource(19999L, ""), min, max, increment) .getResourceInformation(A_CUSTOM_RESOURCE)); assertEquals(customResourceInformation(10L, "k"), calculator.normalize(customResource(9L, "k"), min, max, increment) .getResourceInformation(A_CUSTOM_RESOURCE)); assertEquals(customResourceInformation(10L, "k"), calculator.normalize(customResource(10L, "k"), min, max, increment) .getResourceInformation(A_CUSTOM_RESOURCE)); assertEquals(customResourceInformation(20L, "k"), calculator.normalize(customResource(11L, "k"), min, max, increment) .getResourceInformation(A_CUSTOM_RESOURCE)); } finally { ResourceUtils.resetResourceTypes(new Configuration()); } }
@Test public void getConfirmationsByUsernameWhenUsernameIsNullShouldThrowException() { thrown.expect(NullPointerException.class); thrown.expectMessage("username"); service.getConfirmationsByUsername(null); }
@Test public void testCharactersRemoved() { final boolean[] invoked = new boolean[1]; CallableWithArgs<Void> callable = args -> { invoked[0] = true; return null; }; assertNull(adapter.getCharactersRemoved()); adapter.charactersRemoved(null, 0, 0); assertFalse(invoked[0]); adapter.setCharactersRemoved(callable); adapter.charactersRemoved(null, 0, 0); assertTrue(invoked[0]); }
@Test public void test_findVariable__Returns_local_Variable_over_global_Variable() throws Exception { GlobalVariableScope parent = new GlobalVariableScope(); LocalVariableScope underTest = new LocalVariableScope(parent); MplVariable<?> variable = some($MplVariable()); String identifier = variable.getIdentifier(); parent.declareVariable(some($MplVariable().withIdentifier(identifier))); underTest.declareVariable(variable); MplVariable<?> actual = underTest.findVariable(identifier); assertThat(actual).isSameAs(variable); }
@Test(expected = ParameterException.class) public void caseSensitive() { validator.validate("region", "US-WEST-2"); }
@Test public void resolveByAlias() { String printerName = "two2"; Class<?> parameterType = String.class; Printer printer = printerResolver.resolve(printerName, parameterType); assertThat(printer.print("input"), is("2")); }
@Test public void testGetStorageAttributeValueByNameFromStorageEntity() { List<Attribute> attributes = new ArrayList<>(); attributes.add(new Attribute(ATTRIBUTE_NAME_1_MIXED_CASE, ATTRIBUTE_VALUE_1)); attributes.add(new Attribute(ATTRIBUTE_NAME_2_MIXED_CASE, BLANK_TEXT)); attributes.add(new Attribute(ATTRIBUTE_NAME_3_MIXED_CASE, null)); StorageEntity storageEntity = storageDaoTestHelper.createStorageEntity(STORAGE_NAME, StoragePlatformEntity.S3, attributes); Assert.assertEquals(ATTRIBUTE_VALUE_1, storageHelper.getStorageAttributeValueByName(ATTRIBUTE_NAME_1_MIXED_CASE, storageEntity, false)); Assert.assertEquals(BLANK_TEXT, storageHelper.getStorageAttributeValueByName(ATTRIBUTE_NAME_2_MIXED_CASE, storageEntity, false)); Assert.assertNull(storageHelper.getStorageAttributeValueByName(ATTRIBUTE_NAME_3_MIXED_CASE, storageEntity, false)); Assert.assertEquals(ATTRIBUTE_VALUE_1, storageHelper.getStorageAttributeValueByName(ATTRIBUTE_NAME_1_MIXED_CASE.toUpperCase(), storageEntity, false)); Assert.assertEquals(ATTRIBUTE_VALUE_1, storageHelper.getStorageAttributeValueByName(ATTRIBUTE_NAME_1_MIXED_CASE.toLowerCase(), storageEntity, false)); Assert.assertEquals(ATTRIBUTE_VALUE_1, storageHelper.getStorageAttributeValueByName(ATTRIBUTE_NAME_1_MIXED_CASE, storageEntity, true)); String attributeNoExist = "I_DO_NOT_EXIST"; for (String attributeName : Arrays.asList(attributeNoExist, ATTRIBUTE_NAME_2_MIXED_CASE, ATTRIBUTE_NAME_3_MIXED_CASE)) { try { storageHelper.getStorageAttributeValueByName(attributeName, storageEntity, true); } catch (IllegalStateException e) { if (attributeName.equals(attributeNoExist)) { Assert.assertEquals(String.format("Attribute \"%s\" for \"%s\" storage must be configured.", attributeName, STORAGE_NAME), e.getMessage()); } else { Assert.assertEquals(String.format("Attribute \"%s\" for \"%s\" storage must have a value that is not blank.", attributeName, STORAGE_NAME), e.getMessage()); } } } }
@Test public void branchChangedFiles_from_diverged() throws IOException, GitAPIException { createAndCommitFile("file-m1.xoo"); createAndCommitFile("file-m2.xoo"); createAndCommitFile("file-m3.xoo"); ObjectId forkPoint = git.getRepository().exactRef("HEAD").getObjectId(); appendToAndCommitFile("file-m3.xoo"); createAndCommitFile("file-m4.xoo"); git.branchCreate().setName("b1").setStartPoint(forkPoint.getName()).call(); git.checkout().setName("b1").call(); createAndCommitFile("file-b1.xoo"); appendToAndCommitFile("file-m1.xoo"); deleteAndCommitFile("file-m2.xoo"); assertThat(newScmProvider().branchChangedFiles("master", worktree)) .containsExactlyInAnyOrder( worktree.resolve("file-b1.xoo"), worktree.resolve("file-m1.xoo")); }
@Test public void testLastIndexOf() { list.add(asArray(0, 1, 2, 1, 0)); list.add((KType) null); assertEquals(5, list.lastIndexOf(null)); assertEquals2(4, list.lastIndexOf(k0)); assertEquals2(-1, list.lastIndexOf(k3)); assertEquals2(2, list.lastIndexOf(k2)); }
@Test public void testMissingPort() { configuration.remove(ConfigKeys.PORT); try { portNetServiceDiscoveryComponent.discoverResource(configuration, resourceDiscoveryContext); fail("Component configuration should be invalid"); } catch (InvalidPluginConfigurationException e) { assertEquals(e.getMessage(), "Port is not defined"); } }
@Test void createForEntityLoadingAllowsOverridingPULevelLanguageSetting() { descriptor.setLanguage(null); final AxiomDescriptor res = sut.createForEntityLoading(loadingParameters(OWLClassA.class, descriptor), metamodelMocks.forOwlClassA().entityType()); final Set<Assertion> assertions = res.getAssertions(); assertions.stream().filter(a -> a.getType() != Assertion.AssertionType.CLASS && a.getType() != Assertion.AssertionType.OBJECT_PROPERTY).forEach(a -> { assertFalse(a.hasLanguage()); assertNull(a.getLanguage()); }); }
@Test public void shouldBuildGroupedCorrectlyForGroupByKey() { builder.build(streamHolder, groupByKey); verify(groupedFactory).create("foo-groupby", keySerde, valueSerde); }
@Test public void testIsBootstrapClassLoader() throws Exception { assertThat(ElementMatchers.isBootstrapClassLoader().matches(null), is(true)); assertThat(ElementMatchers.isBootstrapClassLoader().matches(mock(ClassLoader.class)), is(false)); }
@Test(timeout = 1000) public void applyMixedCase() throws IOException { setup("name"); PathData item = new PathData("/directory/path/NaMe", mockFs.getConf()); assertEquals(Result.FAIL, name.apply(item, -1)); }
@Test (expected = IOException.class) public void testB_C1_PC_IB__C2_PC_OB__C1_AC__EE() throws IOException { String data = "0123456789"; BasicHttpEntity basic; PartiallyRepeatableHttpEntity replay; InputStream stream1, stream2; String text; basic = new BasicHttpEntity(); basic.setContent( new ByteArrayInputStream( data.getBytes( StandardCharsets.UTF_8 ) ) ); replay = new PartiallyRepeatableHttpEntity( basic, 5 ); stream1 = replay.getContent(); text = blockRead( stream1, StandardCharsets.UTF_8, 3, 2 ); assertThat( text, is( "012" ) ); stream2 = replay.getContent(); text = blockRead( stream2, StandardCharsets.UTF_8, 6, 4 ); assertThat( text, is( "012345" ) ); blockRead( stream1, StandardCharsets.UTF_8, 6, 4 ); }
@Test public void testParamForPoint() { double param = line1.paramForPoint(new DirectPosition(1, 0.5, 0))[0]; Assert.assertEquals(1.5, param, 0.01); param = curve.paramForPoint(new DirectPosition(1, 0.5, 0))[0]; Assert.assertEquals(1.5, param, 0.01); param = line2.paramForPoint(p5)[0]; Assert.assertEquals(1, param, 0.01); param = curve.paramForPoint(p5)[0]; Assert.assertEquals(4, param, 0.01); }
@Test public void testTableFullyQualifiedName() { String sql = "CREATE TABLE `db`.`tb01`\n" + "(`id` int(11) NOT NULL,\n" + "`a` bigint(20) NOT NULL,\n" + "PRIMARY KEY (a))\n" + "ENGINE=InnoDB DEFAULT CHARSET = utf8;"; TableDef tableDef = TableDefUtil.covertToTableDef(sql); assertThat(tableDef.getName(), is("tb01")); assertThat(tableDef.getFullyQualifiedName(), is("db.tb01")); sql = "CREATE TABLE test.tb02\n" + "(`id` int(11) NOT NULL,\n" + "`a` bigint(20) NOT NULL,\n" + "PRIMARY KEY (a))\n" + "ENGINE=InnoDB DEFAULT CHARSET = utf8;"; tableDef = TableDefUtil.covertToTableDef(sql); assertThat(tableDef.getName(), is("tb02")); assertThat(tableDef.getFullyQualifiedName(), is("test.tb02")); }
@Test public void testRetrieve_cmdSuffixAlreadyGivenOnWindows() throws CredentialHelperUnhandledServerUrlException, CredentialHelperNotFoundException, IOException { systemProperties.setProperty("os.name", "WINdows"); List<String> command = Arrays.asList(Paths.get("/foo/bar.CmD").toString(), "get"); Mockito.when(processBuilderFactory.apply(command)).thenReturn(processBuilder); DockerCredentialHelper credentialHelper = new DockerCredentialHelper( "serverUrl", Paths.get("/foo/bar.CmD"), systemProperties, processBuilderFactory); Credential credential = credentialHelper.retrieve(); Assert.assertEquals("myusername", credential.getUsername()); Assert.assertEquals("mysecret", credential.getPassword()); Mockito.verify(processBuilderFactory).apply(command); }
@Test( expected = CommandException.class ) public void testExecuteException() throws Exception { when( host.execute( any( RequestBuilder.class ) ) ).thenReturn( commandResult ); when( commandResult.hasSucceeded() ).thenReturn( false ); commandUtil.execute( requestBuilder, host ); }
@Test public void testHexToByte() { Assert.assertEquals("00", HexUtil.toHexFromByte((byte)0x00)); Assert.assertEquals("01", HexUtil.toHexFromByte((byte)0x01)); Assert.assertEquals("02", HexUtil.toHexFromByte((byte)0x02)); Assert.assertEquals("03", HexUtil.toHexFromByte((byte)0x03)); Assert.assertEquals("04", HexUtil.toHexFromByte((byte)0x04)); Assert.assertEquals("05", HexUtil.toHexFromByte((byte)0x05)); Assert.assertEquals("06", HexUtil.toHexFromByte((byte)0x06)); Assert.assertEquals("07", HexUtil.toHexFromByte((byte)0x07)); Assert.assertEquals("08", HexUtil.toHexFromByte((byte)0x08)); Assert.assertEquals("09", HexUtil.toHexFromByte((byte)0x09)); Assert.assertEquals("0a", HexUtil.toHexFromByte((byte)0x0a)); Assert.assertEquals("0b", HexUtil.toHexFromByte((byte)0x0b)); Assert.assertEquals("0c", HexUtil.toHexFromByte((byte)0x0c)); Assert.assertEquals("0d", HexUtil.toHexFromByte((byte)0x0d)); Assert.assertEquals("0e", HexUtil.toHexFromByte((byte)0x0e)); Assert.assertEquals("0f", HexUtil.toHexFromByte((byte)0x0f)); Assert.assertEquals("23", HexUtil.toHexFromByte((byte)0x23)); Assert.assertEquals("19", HexUtil.toHexFromByte((byte)0x19)); Assert.assertEquals("75", HexUtil.toHexFromByte((byte)0x75)); Assert.assertEquals("43", HexUtil.toHexFromByte((byte)0x43)); Assert.assertEquals("a9", HexUtil.toHexFromByte((byte)0xa9)); Assert.assertEquals("3b", HexUtil.toHexFromByte((byte)0x3b)); Assert.assertEquals("c3", HexUtil.toHexFromByte((byte)0xc3)); Assert.assertEquals("ff", HexUtil.toHexFromByte((byte)0xff)); }
@Test (expected=ApplicationException.class) public void testCheckNetworkInvalidId() throws Exception { System.out.println("checkNetworkInvalidId"); String namespace = "user1"; int organismId = 1; int id = 1; Map<Integer, Integer> userColumnMap = new HashMap<Integer, Integer>(); userColumnMap.put(-1, 0); userColumnMap.put(-2, 1); userColumnMap.put(-5, 2); UserDataPrecomputer instance = new UserDataPrecomputer(namespace, organismId, cacheBuilder.getCache(), NullProgressReporter.instance()); instance.checkNetwork(id); }
@Test public void testMD5() throws Exception { String s = crypto.hash("hello"); assertThat(s).isEqualTo("XUFAKrxLKna5cZ2REBfFkg=="); }
@Test public void testNoDateRange() { ServiceByDateFilter filter = new ServiceByDateFilter(DATE2); TrustedServiceWrapper service = new TrustedServiceWrapper(); assertFalse(filter.isAcceptable(service)); }
@Test public void testAllocateAdjacencyLabel() { assertThat(srTeHandler.allocateAdjacencyLabel(link1), is(true)); LabelResourceId labelId = pceStore.getAdjLabel(link1); assertThat(labelId, is(notNullValue())); assertThat(srTeHandler.allocateAdjacencyLabel(link2), is(true)); labelId = pceStore.getAdjLabel(link2); assertThat(labelId, is(notNullValue())); assertThat(srTeHandler.allocateAdjacencyLabel(link3), is(true)); labelId = pceStore.getAdjLabel(link3); assertThat(labelId, is(notNullValue())); assertThat(srTeHandler.allocateAdjacencyLabel(link4), is(true)); labelId = pceStore.getAdjLabel(link4); assertThat(labelId, is(notNullValue())); }
@Test public void failureCallbackWithTracing_separate_args_works_as_expected() { Pair<Deque<Span>, Map<String, String>> setupInfo = generateTracingInfo(); FailureCallback result = failureCallbackWithTracing( failureCallbackMock, setupInfo.getLeft(), setupInfo.getRight() ); verifyFailureCallbackWithTracing(result, failureCallbackMock, setupInfo.getLeft(), setupInfo.getRight()); }
@Test public void testMultipleKeys() throws Exception { byte[] keyValue = Random.randBytes(HMAC_KEY_SIZE); Key tink = TestUtil.createKey( TestUtil.createHmacKeyData(keyValue, 16), 42, KeyStatusType.ENABLED, OutputPrefixType.TINK); Key legacy = TestUtil.createKey( TestUtil.createHmacKeyData(keyValue, 16), 43, KeyStatusType.ENABLED, OutputPrefixType.LEGACY); Key raw = TestUtil.createKey( TestUtil.createHmacKeyData(keyValue, 16), 44, KeyStatusType.ENABLED, OutputPrefixType.RAW); Key crunchy = TestUtil.createKey( TestUtil.createHmacKeyData(keyValue, 16), 45, KeyStatusType.ENABLED, OutputPrefixType.CRUNCHY); Key[] keys = new Key[] {tink, legacy, raw, crunchy}; int j = keys.length; for (int i = 0; i < j; i++) { KeysetHandle keysetHandle = TestUtil.createKeysetHandle( TestUtil.createKeyset( keys[i], keys[(i + 1) % j], keys[(i + 2) % j], keys[(i + 3) % j])); Mac mac = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle, Mac.class)); byte[] plaintext = "plaintext".getBytes("UTF-8"); byte[] tag = mac.computeMac(plaintext); if (!keys[i].getOutputPrefixType().equals(OutputPrefixType.RAW)) { byte[] prefix = Arrays.copyOfRange(tag, 0, CryptoFormat.NON_RAW_PREFIX_SIZE); assertArrayEquals(prefix, CryptoFormat.getOutputPrefix(keys[i])); } try { mac.verifyMac(tag, plaintext); } catch (GeneralSecurityException e) { fail("Valid MAC, should not throw exception: " + i); } byte[] plaintextAndTag = Bytes.concat(plaintext, tag); for (int b = 0; b < plaintextAndTag.length; b++) { for (int bit = 0; bit < 8; bit++) { byte[] modified = Arrays.copyOf(plaintextAndTag, plaintextAndTag.length); modified[b] ^= (byte) (1 << bit); try { mac.verifyMac(Arrays.copyOfRange(modified, plaintext.length, modified.length), Arrays.copyOfRange(modified, 0, plaintext.length)); fail("Invalid tag or plaintext, should have thrown exception"); } catch (GeneralSecurityException expected) { } } } KeysetHandle keysetHandle2 = TestUtil.createKeysetHandle( TestUtil.createKeyset(raw, legacy, tink, crunchy)); Mac mac2 = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle2, Mac.class)); tag = mac2.computeMac(plaintext); try { mac.verifyMac(tag, plaintext); } catch (GeneralSecurityException e) { fail("Valid MAC, should not throw exception"); } byte[] keyValue2 = Random.randBytes(HMAC_KEY_SIZE); Key random = TestUtil.createKey( TestUtil.createHmacKeyData(keyValue2, 16), 44, KeyStatusType.ENABLED, OutputPrefixType.TINK); keysetHandle2 = TestUtil.createKeysetHandle( TestUtil.createKeyset(random)); mac2 = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle2, Mac.class)); tag = mac2.computeMac(plaintext); try { mac.verifyMac(tag, plaintext); fail("Invalid MAC MAC, should have thrown exception"); } catch (GeneralSecurityException expected) { } } }
@Test public void testKENMEI5476() { Widget widget = getWidgetInstance(new MockHttpServletRequest("GET", baseUri), null); Assert.assertNotNull(widget); widget = getWidgetInstance(new MockHttpServletRequest("GET", baseUri + ";jsessionid=DEB6E4480A2F66A8FAEAC72EA2BEB76F"), null); Assert.assertNotNull(widget); widget = getWidgetInstance(new MockHttpServletRequest("GET", baseUri + ";jsessionid=DEB6E4480A2F66A8FAEAC72EA2BEB76F.saas1"), null); Assert.assertNotNull(widget); }
@Test public void testRandomBackoff() throws Exception { Properties p = new Properties(); List<LoadBalancedAvroHandler> hosts = new ArrayList<LoadBalancedAvroHandler>(); List<Server> servers = new ArrayList<Server>(); StringBuilder hostList = new StringBuilder(""); for (int i = 0; i < 3; i++) { LoadBalancedAvroHandler s = new LoadBalancedAvroHandler(); hosts.add(s); Server srv = RpcTestUtils.startServer(s); servers.add(srv); String name = "h" + i; p.put("hosts." + name, "127.0.0.1:" + srv.getPort()); hostList.append(name).append(" "); } p.put("hosts", hostList.toString().trim()); p.put("client.type", "default_loadbalance"); p.put("host-selector", "random"); p.put("backoff", "true"); hosts.get(0).setFailed(); hosts.get(2).setFailed(); RpcClient c = RpcClientFactory.getInstance(p); Assert.assertTrue(c instanceof LoadBalancingRpcClient); for (int i = 0; i < 50; i++) { c.append(EventBuilder.withBody(("test" + String.valueOf(i)).getBytes())); } Assert.assertEquals(50, hosts.get(1).getAppendCount()); Assert.assertEquals(0, hosts.get(0).getAppendCount()); Assert.assertEquals(0, hosts.get(2).getAppendCount()); hosts.get(0).setOK(); hosts.get(1).setFailed(); try { c.append(EventBuilder.withBody("shouldfail".getBytes())); Assert.fail("Expected EventDeliveryException"); } catch (EventDeliveryException e) { } Thread.sleep(2500); for (int i = 0; i < 50; i++) { c.append(EventBuilder.withBody(("test" + String.valueOf(i)).getBytes())); } Assert.assertEquals(50, hosts.get(0).getAppendCount()); Assert.assertEquals(50, hosts.get(1).getAppendCount()); Assert.assertEquals(0, hosts.get(2).getAppendCount()); }
@Test public void testGetSampleGenotype() { SampleGenotype sampleGenotype = SampleGenotype.of(AlleleCall.REF, AlleleCall.ALT); Map<String, SampleGenotype> sampleGenotypes = ImmutableMap.of("Zaphod", sampleGenotype); instance = testVariantBuilder() .sampleGenotypes(sampleGenotypes) .build(); assertThat(instance.getSampleGenotype("Zaphod"), equalTo(sampleGenotype)); assertThat(instance.getSampleGenotype("Nemo"), equalTo(SampleGenotype.empty())); }
@Test public void fetchProfile() { UserOperations userOperations = Mockito.mock(UserOperations.class); Mockito.when(facebook.userOperations()).thenReturn(userOperations); Mockito.when(facebook.getBaseGraphApiUrl()).thenReturn(GRAPH_API_URL); Mockito.when(userOperations.getUserProfile()).thenReturn(new User("12345678", "Craig Walls", "Craig", "Walls", null, null)); UserProfile profile = apiAdapter.fetchUserProfile(facebook); assertEquals("12345678", profile.getId()); assertEquals("Craig Walls", profile.getName()); assertEquals("Craig", profile.getFirstName()); assertEquals("Walls", profile.getLastName()); assertNull(profile.getEmail()); assertNull(profile.getUsername()); }
@Test public void testJoinDateAndTime() { Date date = DateUtil.newDate(2008, Calendar.JULY, 3); Date time = DateUtil.newDate(1970, Calendar.JANUARY, 1, 22, 56, 32); Date expected = DateUtil.newDate(2008, Calendar.JULY, 3, 22, 56, 32); Date joined = DateUtil.joinDateAndTime(date, time); assertEquals(expected, joined); }
@Test public void testTotallyDifferent() { assertEquals(0.0, JaroWinkler.similarity("abc", "def")); }
@Test(expectedExceptions = IllegalArgumentException.class) public void shouldFailWithMalformedDeterministicKeyword() { AlarmSubExpression.of("count(log.error{}, deterministici) > 1.0"); }
@Test public void testOfInvalidTooHigh() { _thrown.expect(IllegalArgumentException.class); of(0xFFFFFFFFFFFFFL); }
@Test(expected = IllegalStateException.class) public void testPutFailure() { when(writeTx.commit()).thenReturn(FluentFutures.immediateFailedFluentFuture(ex)); ctx.put(id, data); }
@Test public void updateProfileSkills_invalid() throws Exception { ProfileSkillsEditResource profileSkillsEditResource = newProfileSkillsEditResource() .withSkillsAreas(RandomStringUtils.random(5001)) .build(); Long userId = 1L; when(profileServiceMock.updateProfileSkills(userId, profileSkillsEditResource)).thenReturn(serviceSuccess()); mockMvc.perform(put("/profile/id/{id}/update-profile-skills", userId) .contentType(APPLICATION_JSON) .content(objectMapper.writeValueAsString(profileSkillsEditResource))) .andExpect(status().isNotAcceptable()); verify(profileServiceMock, never()).updateProfileSkills(userId, profileSkillsEditResource); }
@Test public void scopeShouldBeReturned() { when(view.scope.getSelectedIndex()).thenReturn(1); when(view.scope.getValue(1)).thenReturn(SYSTEM.toString()); assertThat(view.getScope(), is(SYSTEM)); verify(view.scope).getSelectedIndex(); }
@Test public void testMapRowToProto() { ProtoDynamicMessageSchema schemaProvider = schemaFromDescriptor(MapPrimitive.getDescriptor()); SerializableFunction<Row, DynamicMessage> fromRow = schemaProvider.getFromRowFunction(); assertEquals(MAP_PRIMITIVE_PROTO.toString(), fromRow.apply(MAP_PRIMITIVE_ROW).toString()); }
@Test public void testShouldGenerateCallLogHeaders() throws Exception { Message message = new MimeMessage(); Map<String, String> map = new HashMap<String, String>(); Date sent = new Date(); PersonRecord person = new PersonRecord(0, null, null, null); map.put(CallLog.Calls._ID, "id"); map.put(CallLog.Calls.TYPE, "type"); map.put(CallLog.Calls.DURATION, "duration"); map.put(CallLog.Calls.DATE, "date"); generator.setHeaders(message, map, DataType.CALLLOG, "1234", person, sent, 0); assertThat(get(message, Headers.ID)).isEqualTo("id"); assertThat(get(message, Headers.TYPE)).isEqualTo("type"); assertThat(get(message, Headers.DURATION)).isEqualTo("duration"); assertThat(get(message, Headers.DATE)).isEqualTo("date"); }
@Test public void testGenerateListener() throws Exception { ClassicEngineBoot.getInstance().start(); xlsxOutput.generate( new MasterReport(), 1, new ByteArrayOutputStream(), 1 ); verify( listener, times( 1 ) ).reportProcessingStarted( any( ReportProgressEvent.class ) ); verify( listener, times( 1 ) ).reportProcessingFinished( any( ReportProgressEvent.class ) ); verify( listener, atLeastOnce() ).reportProcessingUpdate( any( ReportProgressEvent.class ) ); }
@Test(timeout = TIMEOUT) public void test06() throws Exception { int result = new Solution().solution(10, 10, 20); assertEquals(0, result); }
@Test void to_map_of_entry_to_row__throws_exception__more_values_then_keys() { DataTable table = parse("", "| code | 29.993333 | -90.258056 |", "| KSFO | 37.618889 | -122.375 |", "| KSEA | 47.448889 | -122.309444 |", "| KJFK | 40.639722 | -73.778889 |" ); registry.defineDataTableType(new DataTableType(AirPortCode.class, AIR_PORT_CODE_TABLE_ENTRY_TRANSFORMER)); registry.defineDataTableType(new DataTableType(Coordinate.class, COORDINATE_TABLE_ROW_TRANSFORMER)); CucumberDataTableException exception = assertThrows( CucumberDataTableException.class, () -> converter.toMap(table, AirPortCode.class, Coordinate.class) ); assertThat(exception.getMessage(), is(format("" + "Can't convert DataTable to Map<%s, %s>.\n" + "There are more values then keys. " + "Did you use a TableEntryTransformer for the key " + "while using a TableRow or TableCellTransformer for the value?", typeName(AirPortCode.class), typeName(Coordinate.class)))); }
@Test public void badTests() { for (String test : badTests) { assertFalse(test, PhoneNumberValidator.valid(test)); } }
@Test public void testTrim01() throws Exception { String input = " TERASOLUNA "; String result = StringUtil.trim(input); assertEquals("TERASOLUNA", result); }
@Test public void exists() throws Exception { assertEquals( "{\"exists\":{\"field\":\"foo\"}}", toJson( QueryBuilders.existsQuery( "foo" ) ) ); }
@Test public void testSetInstanceCapacityMap() { Map<String, Integer> capacityDataMap = ImmutableMap.of("item1", 1, "item2", 2, "item3", 3); Map<String, String> capacityDataMapString = ImmutableMap.of("item1", "1", "item2", "2", "item3", "3"); InstanceConfig testConfig = new InstanceConfig("testConfig"); testConfig.setInstanceCapacityMap(capacityDataMap); Assert.assertEquals(testConfig.getRecord().getMapField(InstanceConfig.InstanceConfigProperty. INSTANCE_CAPACITY_MAP.name()), capacityDataMapString); }
@Test public void testlistAllConfigPropertyAudits() throws Exception { List<ConfigPropertyAudit> configPropertyAuditList = new ArrayList<>(); ConfigPropertyAudit auditItem1 = new ConfigPropertyAudit(); auditItem1.setApplication("application"); auditItem1.setCfkey("logging.esHost"); auditItem1.setLabel("latest"); auditItem1.setOldvalue("old"); auditItem1.setNewvalue("new"); auditItem1.setModifiedDate("01/01/2013 01:01:01"); configPropertyAuditList.add(auditItem1); ConfigPropertyAudit auditItem2 = new ConfigPropertyAudit(); auditItem2.setApplication("application"); auditItem2.setCfkey("logging.esHost"); auditItem2.setLabel("latest"); auditItem2.setOldvalue("new"); auditItem2.setNewvalue("newest"); auditItem2.setModifiedDate("02/02/2013 01:01:01"); configPropertyAuditList.add(auditItem2); when(configPropertyAuditRepository.findAllByOrderByModifiedDateDescModifiedByAsc()) .thenReturn(configPropertyAuditList); assertTrue(configPropertyService.listAllConfigPropertyAudits("01/01/2012 01:01:01").getConfigPropertyAudit() .size() > 0); }
@Test public void testVector09() { final PointHasher pointHasher = EcCurve.secp256r1.getPointHasher(); EcPoint result = pointHasher.hashToCurve("これはテストです。 - 000"); System.out.println("Test Vector Point: " + result); EcPoint expected = new EcPoint("8160756293490157937104077009852267937992106172572270634375298423831985947063", "104553581667911433399913073322205673437677128806540598101562998497852216837154"); Assert.assertEquals(expected, result); }
@Test void writeMessageError_successful() throws IOException { MessageError messageError = new MessageError(ErrorType.AIS_400, TppMessageInformation.buildWithCustomError(MESSAGE_ERROR_CODE, MESSAGE_ERROR_STRING)); ErrorMapperContainer.ErrorBody errorBody = new ErrorMapperContainer.ErrorBody(messageError, HttpStatus.OK); when(errorMapperContainer.getErrorBody(messageError)).thenReturn(errorBody); when(response.getWriter()).thenReturn(PRINT_WRITER); tppErrorMessageWriter.writeError(response, messageError); ArgumentCaptor<Writer> writerArgumentCaptor = ArgumentCaptor.forClass(Writer.class); ArgumentCaptor<ErrorMapperContainer.ErrorBody> errorBodyArgumentCaptor = ArgumentCaptor.forClass(ErrorMapperContainer.ErrorBody.class); verify(errorMapperContainer).getErrorBody(messageError); verify(xs2aObjectMapper).writeValue(writerArgumentCaptor.capture(), errorBodyArgumentCaptor.capture()); assertEquals(PRINT_WRITER, writerArgumentCaptor.getValue()); assertEquals(errorBody.getBody(), errorBodyArgumentCaptor.getValue()); }
@Test public void testSeek_shx() throws Exception { AbstractShapeFileReader<Integer> reader = createShx(); reader.seek(0); assertEquals(Integer.valueOf(5), reader.read()); reader.seek(1); assertEquals(Integer.valueOf(8), reader.read()); reader.seek(2); assertEquals(Integer.valueOf(5), reader.read()); try { reader.seek(1000); fail("EOFException was expected"); } catch(EOFException exception) { } }
@Test public void startWithWorksWithStrings() { assertTrue(path("/one/two").startsWith("/one")); }
@Test public void testIsMatchWithRegExpShouldReturnFalseWhenDotIsMissing() { String fileName = "201307011321070025req.csv"; given(file.getName()).willReturn(fileName); boolean result = underTest.isMatchWithRegExp(file); assertFalse(result); }
@Test public void shouldUseTwoCyclesAsLastInstructionExecutionTime() { Instruction instruction = new LoadHLAddressIntoAAndDecrementHL(z80, mmu); instruction.execute(); assertEquals(2, z80.getLastInstructionExecutionTime()); }
@Test public void shouldReturnFalseIfIdentifierDoesNotMatch() { String identifier = "identifier"; ConsumedResourceRelationEntity relation = new ConsumedResourceRelationEntity(); relation.setIdentifier("anotherIdentifier"); assertThat(relationEditor.isMatchingRelationName(relation, identifier), is(false)); }
@Test public void shouldMosaicGlobalRestriction() throws Exception { MosaicId mosaicId = MapperUtils.toMosaicId("123"); MosaicGlobalRestrictionDTO dto = new MosaicGlobalRestrictionDTO(); MosaicGlobalRestrictionEntryWrapperDTO wrapperDTO = new MosaicGlobalRestrictionEntryWrapperDTO(); dto.setMosaicRestrictionEntry(wrapperDTO); MosaicGlobalRestrictionEntryDTO entryDTO = new MosaicGlobalRestrictionEntryDTO(); entryDTO.setKey(ConvertUtils.toString(BigInteger.valueOf(1111))); MosaicGlobalRestrictionEntryRestrictionDTO entryRestrictionDto = new MosaicGlobalRestrictionEntryRestrictionDTO(); entryRestrictionDto.setRestrictionType(MosaicRestrictionTypeEnum.NUMBER_5); entryRestrictionDto.setReferenceMosaicId("456"); entryRestrictionDto.setRestrictionValue(BigInteger.valueOf(3333)); entryDTO.setRestriction(entryRestrictionDto); List<MosaicGlobalRestrictionEntryDTO> restrictions = new ArrayList<>(); restrictions.add(entryDTO); wrapperDTO.setCompositeHash("compositeHash"); wrapperDTO.setMosaicId(mosaicId.getIdAsHex()); wrapperDTO.setRestrictions(restrictions); wrapperDTO.setEntryType(MosaicRestrictionEntryTypeEnum.NUMBER_1); mockRemoteCall(dto); MosaicGlobalRestriction mosaicGlobalRestriction = repository .getMosaicGlobalRestriction(mosaicId).toFuture() .get(); Assertions.assertEquals(wrapperDTO.getCompositeHash(), mosaicGlobalRestriction.getCompositeHash()); Assertions.assertEquals(MosaicRestrictionEntryType.GLOBAL, mosaicGlobalRestriction.getEntryType()); Assertions.assertEquals(mosaicId, mosaicGlobalRestriction.getMosaicId()); Assertions.assertEquals(1, mosaicGlobalRestriction.getRestrictions().size()); Assertions .assertEquals(BigInteger.valueOf(3333), mosaicGlobalRestriction.getRestrictions().get(BigInteger.valueOf(1111)) .getRestrictionValue()); Assertions .assertEquals("0000000000000456", mosaicGlobalRestriction.getRestrictions().get(BigInteger.valueOf(1111)) .getReferenceMosaicId() .getIdAsHex()); Assertions .assertEquals(MosaicRestrictionType.GT, mosaicGlobalRestriction.getRestrictions().get(BigInteger.valueOf((1111))) .getRestrictionType()); }
@Test public void testSegmentGranularity() throws IOException, SegmentLoadingException { final List<ParallelIndexIngestionSpec> ingestionSpecs = CompactionTask.createIngestionSchema( toolbox, LockGranularity.TIME_CHUNK, new SegmentProvider(DATA_SOURCE, new CompactionIntervalSpec(COMPACTION_INTERVAL, null)), new PartitionConfigurationManager(TUNING_CONFIG), null, null, new PeriodGranularity(Period.months(3), null, null), OBJECT_MAPPER, COORDINATOR_CLIENT, segmentLoaderFactory, RETRY_POLICY_FACTORY ); final List<DimensionsSpec> expectedDimensionsSpec = ImmutableList.of( new DimensionsSpec(getDimensionSchema(new DoubleDimensionSchema("string_to_double"))) ); ingestionSpecs.sort( (s1, s2) -> Comparators.intervalsByStartThenEnd().compare( s1.getDataSchema().getGranularitySpec().inputIntervals().get(0), s2.getDataSchema().getGranularitySpec().inputIntervals().get(0) ) ); Assert.assertEquals(1, ingestionSpecs.size()); assertIngestionSchema( ingestionSpecs, expectedDimensionsSpec, AGGREGATORS, Collections.singletonList(COMPACTION_INTERVAL), new PeriodGranularity(Period.months(3), null, null) ); }
@Test public void extractWrappedViewTypePart() throws Exception { assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(0), is(0)); assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(1 << ItemViewTypeComposer.MIN_WRAPPED_VIEW_TYPE), is(1)); assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(ItemViewTypeComposer.BIT_MASK_WRAPPED_VIEW_TYPE), is(-1)); assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(ItemViewTypeComposer.MIN_WRAPPED_VIEW_TYPE << ItemViewTypeComposer.BIT_OFFSET_WRAPPED_VIEW_TYPE), is(ItemViewTypeComposer.MIN_WRAPPED_VIEW_TYPE)); assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(ItemViewTypeComposer.MAX_WRAPPED_VIEW_TYPE << ItemViewTypeComposer.BIT_OFFSET_WRAPPED_VIEW_TYPE), is(ItemViewTypeComposer.MAX_WRAPPED_VIEW_TYPE)); assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(ItemViewTypeComposer.BIT_MASK_EXPANDABLE_FLAG), is(0)); assertThat(ItemViewTypeComposer.extractWrappedViewTypePart(ItemViewTypeComposer.BIT_MASK_SEGMENT), is(0)); }
@Test public void testWinkler16() { roughlyEquals(0.357, JaroWinkler.similarity("STANLEY", "MUNAWAR")); }
@Test void testGet_sameHashCodes() { assertThat(valueStoreDb.getEntryCount()).isEqualTo(0); String val1str = "AaAa"; String val2str = "BBBB"; String val3str = "AaBB"; String val4str = "BBAa"; assertThat(val1str.hashCode()).isEqualTo(val2str.hashCode()); assertThat(val1str.hashCode()).isEqualTo(val3str.hashCode()); assertThat(val1str.hashCode()).isEqualTo(val4str.hashCode()); final Map<String, ValueStoreKey> valueToKeyMap = new HashMap<>(); LmdbUtils.doWithWriteTxn(lmdbEnv, writeTxn -> { valueToKeyMap.put(val1str, getOrCreate(writeTxn, StringValue.of(val1str))); valueToKeyMap.put(val2str, getOrCreate(writeTxn, StringValue.of(val2str))); valueToKeyMap.put(val3str, getOrCreate(writeTxn, StringValue.of(val3str))); valueToKeyMap.put(val4str, getOrCreate(writeTxn, StringValue.of(val4str))); }); assertThat( valueToKeyMap.values().stream() .map(ValueStoreKey::getUniqueId) .collect(Collectors.toList())) .contains((short) 0, (short) 1, (short) 2, (short) 3); assertThat(valueStoreDb.getEntryCount()).isEqualTo(valueToKeyMap.size()); ValueStoreKeySerde keySerde = new ValueStoreKeySerde(); LmdbUtils.doWithReadTxn(lmdbEnv, txn -> { List<Integer> ids = new ArrayList<>(); valueToKeyMap.forEach((valueStr, valueStoreKey) -> { ByteBuffer valueBuffer = valueStoreDb.getAsBytes(txn, keySerde.serialize(valueStoreKey)).get(); RefDataValue val = refDataValueSerdeFactory.deserialize(valueBuffer, StringValue.TYPE_ID); assertThat(val).isInstanceOf(StringValue.class); assertThat(((StringValue) val).getValue()).isEqualTo(valueStr); }); }); }
@Test( expectedExceptions = NullPointerException.class, expectedExceptionsMessageRegExp = "Required non-null email" ) public void shouldThrowOnFetchingInviteByNullEmail() throws Exception { inviteManager.getInvite("test", "test123", null); }
@Test public void test90ithPercentile () { PercentileTracker pt = new PercentileTracker(5000); double value = pt.getPercentile(90, normalizedTestArray); Assert.assertEquals(9d, value, 0); }
@Test public void testConvertJmsStreamMessageBody() throws Exception { final List<Object> expected = Lists.newArrayList("apple", 43, 31.42D); final byte[] messageBytes = getJmsStreamMessageBytes(expected); final String mimeType = "jms/stream-message"; doTestStreamMessage(messageBytes, mimeType, expected, JmsMessageTypeAnnotation.STREAM_MESSAGE.getType()); }
@Test public void notEmptyPageSelection() throws Exception { populate(); when(builder.hasInput()).thenReturn(Boolean.TRUE); victim.table().getItems().get(0).pageSelection.set("1,3-10"); victim.apply(builder, onError); verify(onError, never()).accept(anyString()); ArgumentCaptor<PdfMergeInput> input = ArgumentCaptor.forClass(PdfMergeInput.class); verify(builder).addInput(input.capture()); assertEquals(2, input.getValue().getPageSelection().size()); }
@Test(expected = CayenneRuntimeException.class) public void testExpWithTheSameAliasToDiffSegments() { ExpressionFactory.exp("paintings#p1.gallery#p1.name = 'Test'"); }
@Test public void testCovariance() { double data[][] = new double[][]{ {90, 60, 90}, {90, 90, 30}, {60, 60, 60}, {60, 60, 90}, {30, 30, 30} }; Dataset<? extends Instance> dataset = new ArrayDataset(data); DsHotelling hot = (DsHotelling) stat; double cov = hot.covariance(dataset); System.out.println("cov = " + cov); }
@Test public void testCreateUUID() { assertEquals("0000180f-0000-1000-8000-00805f9b34fb", Neatle.createUUID(0x180f).toString()); assertEquals("00000000-0000-1000-8000-00805f9b34fb", Neatle.createUUID(0).toString()); assertEquals("0000ffff-0000-1000-8000-00805f9b34fb", Neatle.createUUID(-1).toString()); }
@Test public void testWrappingDisabledHeuristic() throws Exception { ReferencedEnvelope world = new ReferencedEnvelope(-180, 180, -40, 40, WGS84); ReferencedEnvelope mercatorEnvelope = world.transform(MERCATOR, true); mercatorEnvelope.translate(mercatorEnvelope.getWidth() / 2, 0); Geometry g = new WKTReader().read("LINESTRING(-40 20, 190 20)"); Map params = new HashMap(); params.put(WrappingProjectionHandler.DATELINE_WRAPPING_CHECK_ENABLED, false); MathTransform mt = CRS.findMathTransform(WGS84, MERCATOR, true); Geometry reprojected = JTS.transform(g, mt); ProjectionHandler handler = ProjectionHandlerFinder.getHandler(mercatorEnvelope, WGS84, true, params); Geometry processed = handler.postProcess(mt, reprojected); assertEquals(processed.getGeometryN(0), reprojected); params.put(WrappingProjectionHandler.DATELINE_WRAPPING_CHECK_ENABLED, true); handler = ProjectionHandlerFinder.getHandler(mercatorEnvelope, WGS84, true, params); processed = handler.postProcess(mt, reprojected); assertNotEquals(processed.getGeometryN(0), reprojected); }
@Test public void When_One_Interceptor_Annotated_Then_Get_Interceptor_Metadata() throws NoSuchMethodException { Method method = Providers.class.getDeclaredMethod("string"); InterceptorMetadata interceptorMetadata = getInterceptorMetadata.with(Providers.class, method, null); assertNotNull(interceptorMetadata); }
@Test public void testGetConversionQuery() throws Exception { List<String> classKeys = new ArrayList<String>(); classKeys.add("name"); InterMineBag bag = new InterMineBag("Fred", "Employee", "Test bag", new Date(), BagState.CURRENT, os, null, uosw, classKeys); PathQuery resQuery = TypeConverter.getConversionQuery(conversionTemplates, Employee.class, Address.class, bag); Assert.assertEquals(1, resQuery.getConstraints().size()); PathConstraintBag resCon = (PathConstraintBag) resQuery.getConstraints().keySet().iterator().next(); Assert.assertNotNull(resCon); Assert.assertEquals("Employee", resCon.getPath()); Assert.assertEquals(ConstraintOp.IN, resCon.getOp()); Assert.assertEquals(bag.getName(), resCon.getBag()); List<String> expectedView = new ArrayList<String>(Collections.singleton("Employee.address.id")); Assert.assertEquals(expectedView, resQuery.getView()); }
@Test public void should_mark_today() { when(day.isToday()).thenReturn(true); tested.onBindViewHolder(viewHolder, 10); verify(viewHolder).bind(eq(day), captor.capture()); DayState state = captor.getValue(); assertTrue(state.isToday()); }
@Test public void test() { logOutput.log("msg", Level.INFO); verify(stdOut).println("INFO: msg"); }
@Test public void testGetCaseDefinitions_emptyList() { when(clientMock.getCaseDefinitions(anyInt(), anyInt())).thenReturn(emptyList()); List<CaseDefinitionSummary> definitions = testedService.getCaseDefinitions(); assertNotNull(definitions); assertTrue(definitions.isEmpty()); }
@Test public void testUpdateBusinessObjectDataStatusIgnoreException() throws Exception { uploaderWebClient.getRegServerAccessParamsDto().setRegServerHost(MockHttpClientOperationsImpl.HOSTNAME_THROW_IO_EXCEPTION_DURING_UPDATE_BDATA_STATUS); BusinessObjectDataKey businessObjectDataKey = new BusinessObjectDataKey(); String businessObjectDataStatus = "testBusinessObjectDataStatus"; executeWithoutLogging(UploaderWebClient.class, () -> { uploaderWebClient.updateBusinessObjectDataStatusIgnoreException(businessObjectDataKey, businessObjectDataStatus); }); }
@Test public void testIndentedHeaderAndFooter() { Options options = new Options(); HelpFormatter formatter = new HelpFormatter(); String header = " Header1\n Header2"; String footer = " Footer1\n Footer2"; StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "foobar", header, options, 2, 2, footer, true); assertEquals( "usage: foobar" + EOL + " Header1" + EOL + " Header2" + EOL + "" + EOL + " Footer1" + EOL + " Footer2" + EOL , out.toString()); }
@Test public void assertGetEventTraceRdbConfiguration() throws NoSuchFieldException { Properties properties = new Properties(); properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_DRIVER.getKey(), "org.h2.Driver"); properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_URL.getKey(), "jdbc:h2:mem:job_event_trace"); properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_USERNAME.getKey(), "sa"); properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_PASSWORD.getKey(), "password"); ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", properties); Optional<JobEventRdbConfiguration> jobEventRdbConfiguration = bootstrapEnvironment.getJobEventRdbConfiguration(); if (jobEventRdbConfiguration.isPresent()) { Assert.assertThat(jobEventRdbConfiguration.get().getDataSource(), IsInstanceOf.instanceOf(BasicDataSource.class)); } }
@Test public void testWritingBytesWhenFinishedThrows() throws Exception { expectedException.expect(IOException.class); expectedException.expectMessage("Stream has been finished."); testValues(toBytes("a")).write("b".getBytes(Charsets.UTF_8)); }
@Test public void Test4() { ArrayList<Integer> a = new ArrayList<>(Arrays.asList(4, 5, 2, 10, 8)); ArrayList<Integer> actual = solution.nextGreater(a); ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(5, 10, 10, -1, -1)); assertEquals(expected, actual); }
@Test public void processStep_ShouldMoveSubdirFileToOutputDir_AndAddTimestampToFile_IfFileExists() throws Exception { Path temp = createFile(getPath("0", "subdir", "video.ext")); createFile(outputDir.resolve("video.ext")); transcodeFinishedEvent.setTemporaryPath(temp); CleanupContext result = subject.processStep(context); Path expected = getPath("output", "video.2017-01-31.08-20-00.ext"); Assertions.assertThat(result.getOutputPath()) .isEqualTo(expected) .exists(); }
@Test public void handlesRequestInternally() throws Exception { assertNull(impl.handleRequest(req, resp)); }
@Test public void find_project_dependence_no_dependence() { assertThat(projectDependenceService.findProjectDependences(1)).isEmpty(); }
@Test public void invokeArrayWithHeterogenousTypes() { FunctionTestUtil.assertResultError(maxFunction.invoke(new Object[]{1, "test", BigDecimal.valueOf(10.2)}), InvalidParametersEvent.class); }
@Test public void testNameCoverageSubdomainWithWildcardOfSameDomain() throws Exception { final String name = "xmpp.example.org"; final String pattern = "*.xmpp.example.org"; final boolean result = DNSUtil.isNameCoveredByPattern( name, pattern ); Assert.assertTrue( result ); }
@Test public void shouldDelegateToAllMCTSReportsToCloseMCTSReport() throws Exception { MCTSReport mctsReport = new MCTSReport().withCaseId("case id 1").withEntityId("entity id 1").withSendDate("2014-01-01").withEntityRegistrationDate("2014-01-01").withReportText("report text 1").withReportSent("false"); reportService.markReportAsSent(mctsReport); verify(allMCTSReports).markReportAsSent(mctsReport); }
@Test public void testDeployApplicationResourcesToGroupHosts() throws IOException { reset(Config.mockResourceService); Jvm mockJvm = mock(Jvm.class); when(mockJvm.getHostName()).thenReturn("mock-hostname"); Group mockGroup = mock(Group.class); when(mockGroup.getName()).thenReturn("mock-group-name"); when(mockGroup.getId()).thenReturn(new Identifier<Group>(999L)); Application mockApplicationForDeploy = mock(Application.class); when(mockApplicationForDeploy.getGroup()).thenReturn(mockGroup); when(mockApplicationForDeploy.getWarPath()).thenReturn("./src/test/resources/archive/test_archive.war"); when(mockApplicationForDeploy.getWarName()).thenReturn("mock-application-war-name"); when(mockApplicationForDeploy.getName()).thenReturn("mock-application-name"); when(mockApplicationForDeploy.isUnpackWar()).thenReturn(false); ResourceGroup mockResourceGroup = mock(ResourceGroup.class); Entity mockEntity = mock(Entity.class); when(mockEntity.getDeployToJvms()).thenReturn(false); ResourceTemplateMetaData mockResourceTemplateMetaData = mock(ResourceTemplateMetaData.class); when(mockResourceTemplateMetaData.getEntity()).thenReturn(mockEntity); when(Config.mockGroupPersistenceService.getGroupAppsResourceTemplateNames(anyString())).thenReturn(Collections.singletonList("mock-application-resource")); when(Config.mockGroupPersistenceService.getGroupAppResourceTemplateMetaData(anyString(), anyString(), anyString())).thenReturn("{\"fake\":\"meta-data\"}"); when(Config.mockResourceService.getTokenizedMetaData(anyString(), anyObject(), anyString())).thenReturn(mockResourceTemplateMetaData); when(Config.mockResourceService.generateAndDeployFile(any(ResourceIdentifier.class), anyString(), anyString(), anyString())).thenReturn(new CommandOutput(new ExecReturnCode(0), "Generate and deploy succeeded", "")); when(Config.jvmPersistenceService.getJvmsByGroupName(anyString())).thenReturn(Collections.singletonList(mockJvm)); applicationService.deployApplicationResourcesToGroupHosts("mock-group-name", mockApplicationForDeploy, mockResourceGroup); verify(Config.mockResourceService, times(1)).generateAndDeployFile(any(ResourceIdentifier.class), anyString(), anyString(), anyString()); }
@Test public void nullModelFields() { assertNull(ModelFieldUtil.getAvailableFieldCompletions(null, null)); }
@Test public void testGetId() throws Exception { assertEquals( HOST_ID, host.getId() ); }
@Test public void prefixWithTimestampMillis() { Span span = Span.builder().traceId(20L).id(20L).name("get") .timestamp(TODAY * 1000).build(); byte[] result = ElasticsearchSpanConsumer.prefixWithTimestampMillis(Codec.JSON.writeSpan(span), TODAY); String json = new String(result); assertThat(json) .startsWith("{\"timestamp_millis\":" + Long.toString(TODAY) + ",\"traceId\":"); assertThat(Codec.JSON.readSpan(json.getBytes())) .isEqualTo(span); }
@Test public void methodIsPostIfScrollIdIsLong() { String scrollId = Strings.padStart("scrollId", 2000, 'x'); JsonObject expectedResults = new JsonObject(); expectedResults.addProperty("scroll_id", scrollId); SearchScroll searchScroll = new SearchScroll.Builder(scrollId, "1m").build(); String uri = searchScroll.getURI(ElasticsearchVersion.UNKNOWN); assertEquals("POST", searchScroll.getRestMethodName()); assertEquals(expectedResults.toString(), searchScroll.getData(new Gson())); assertTrue(uri.length() < 2000); assertFalse(uri.contains(scrollId)); }
@Test public void noneOf() { assertThat(CollectionUtil.noneOf(Arrays.asList("group1", "group2"), Arrays.asList("group3", "group4"))).isTrue(); assertThat(CollectionUtil.noneOf(Arrays.asList("group1", "group2"), Arrays.asList("group1", "group2"))).isFalse(); assertThat(CollectionUtil.noneOf(Arrays.asList("group1", "group2"), Arrays.asList("group2", "group3"))).isFalse(); assertThat(CollectionUtil.noneOf(Arrays.asList("group1", "group2"), "group3")).isTrue(); assertThat(CollectionUtil.noneOf(Arrays.asList("group1", "group2"), "group2")).isFalse(); assertThat(CollectionUtil.noneOf("group1, group2", "group3, group4")).isTrue(); assertThat(CollectionUtil.noneOf("group1, group2", "group1, group2")).isFalse(); assertThat(CollectionUtil.noneOf("group1, group2", "group2, group3")).isFalse(); ObjectMapper mapper = new ObjectMapper(); assertThat(CollectionUtil.noneOf(mapper.valueToTree(Arrays.asList("group1", "group2")), mapper.valueToTree(Arrays.asList("group3", "group4")))) .isTrue(); assertThat(CollectionUtil.noneOf(mapper.valueToTree(Arrays.asList("group1", "group2")), mapper.valueToTree(Arrays.asList("group1", "group2")))) .isFalse(); assertThat(CollectionUtil.noneOf(mapper.valueToTree(Arrays.asList("group1", "group2")), mapper.valueToTree(Arrays.asList("group2", "group3")))) .isFalse(); }
@Test public void contextDestroyed() { Enumeration<Driver> drivers = DriverManager.getDrivers(); when(config.getBoolean(eq(ConfigProperties.ACTIVEMQ_ENABLED))).thenReturn(true); prepareForInitialization(); listener.contextInitialized(evt); listener.contextDestroyed(evt); verify(evt, atMost(5)).getServletContext(); verifyNoMoreInteractions(evt); verify(hqlistener).contextDestroyed(any(Injector.class)); verifyZeroInteractions(buspublisher); registerDrivers(drivers); }
@Test public void whenScaleNPS_itReturnsCorrectMin() throws Exception { Score score = new Score(8, "NPS", 0); Score score2 = new Score(8, "NPS", 1); Score score3 = new Score(8, "NPS", -1); assertThat(score.minimumScore()).isEqualTo(0); assertThat(score2.minimumScore()).isEqualTo(0); assertThat(score3.minimumScore()).isEqualTo(0); }
@Test public void testModelServicesNoneExportEJB() throws ModellerException { Manifest man = new Manifest(); setBasicHeaders(man); man.getMainAttributes().putValue("Export-EJB", "NONE,anEJB , another"); modeller.modelServices(new BundleManifest(man), bundleLocation); ejbLocator.assertSkeletonNotCalled(); }
@Test public void calculateWithTwoTrades() { MockBarSeries series = new MockBarSeries(numFunction, 100, 105, 110, 100, 95, 105); TradingRecord tradingRecord = new BaseTradingRecord(Order.buyAt(1, series), Order.sellAt(3, series), Order.buyAt(3, series), Order.sellAt(4, series)); assertNumEquals(2, getCriterion().calculate(series, tradingRecord)); }
@Test @SuppressWarnings( "unchecked" ) public void testApplicationDeleted_exceptionWhileListingJobs() throws Exception { RoboconfScheduler roboconfScheduler = Mockito.mock( RoboconfScheduler.class ); roboconfScheduler.scheduler = Mockito.mock( Scheduler.class ); Mockito .when( roboconfScheduler.scheduler.getTriggerKeys( Mockito.any( GroupMatcher.class ))) .thenThrow( new SchedulerException( "For test" )); ManagerListener listener = new ManagerListener( roboconfScheduler ); listener.application( new Application( "app", Mockito.mock( ApplicationTemplate.class )), EventType.DELETED ); Mockito .verify( roboconfScheduler.scheduler, Mockito.times( 1 )) .getTriggerKeys( Mockito.any( GroupMatcher.class )); }
@Test public void testGetBucketVersionsEmptyBuckets() { final String bucketVersions = mxBean.getBucketVersions(); Assert.assertEquals(Collections.emptyMap().toString(), bucketVersions); }
@Test public void shouldReturnFalseForNullString() { boolean result = StringUtils.containsAny(null, asList("some", "words", "to", "check")); assertThat(result, equalTo(false)); }
@Test void test1() { List<List<Integer>> ret = solution.palindromePairs(new String[]{"abcd","dcba","lls","s","sssll"}); assertEquals(4,ret.size()); ArrayList<ArrayList<Integer>> expected = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> list; list = new ArrayList<Integer>(); list.add(0); list.add(1); expected.add(list); list = new ArrayList<Integer>(); list.add(1); list.add(0); expected.add(list); list = new ArrayList<Integer>(); list.add(3); list.add(2); expected.add(list); list = new ArrayList<Integer>(); list.add(2); list.add(4); expected.add(list); Collections.sort(expected, comparator); Collections.sort(ret,comparator ); assertEquals(expected,ret); }
@Test(expected = IllegalArgumentException.class) public void testParseUnknown() { Ordering.parse("unknown"); }
@Test(expected = RabbitmqConfigurationException.class) public void rabbitConfigWithDeadLetterEnabledForQueueAndDefaultDeadLetterExchangeTest() { rabbitConfig = RabbitConfig.builder() .defaultExchange(createDefaultExchangeConfig()) .defaultQueue(QueueConfig.builder().deadLetterEnabled(false).build()) .deadLetterConfig(DeadLetterConfig.builder().deadLetterExchange(null).build()) .exchange(exchange, createExchangeConfig(exchange)) .queue(queue, QueueConfig.builder().name(exchange).deadLetterEnabled(true).build()) .binding(binding, createBinding(exchange, queue, routingKey)) .build(); rabbitConfig.validate(); }
@Test void getFloatByNameDelegatesCallToResultSet() throws OntoDriverException { sut.getFloat("test"); verify(resultSet).getFloat("test"); }
@Test public void stringToPrimitive() { Integer answer = converter.convert("42", Integer.class); assert answer == 42; }
@Test public void testAllImpossible() throws PlanningException { prepareBasicPlan(); ReservationDefinition rr = new ReservationDefinitionPBImpl(); rr.setArrival(100L); rr.setDeadline(120L); ReservationRequests reqs = new ReservationRequestsPBImpl(); reqs.setInterpreter(ReservationRequestInterpreter.R_ALL); ReservationRequest r = ReservationRequest.newInstance( Resource.newInstance(1024, 1), 55, 5, 10); ReservationRequest r2 = ReservationRequest.newInstance( Resource.newInstance(2048, 2), 55, 5, 20); List<ReservationRequest> list = new ArrayList<ReservationRequest>(); list.add(r); list.add(r2); reqs.setReservationResources(list); rr.setReservationRequests(reqs); ReservationId reservationID = ReservationSystemTestUtil .getNewReservationId(); boolean result = false; try { result = agent.createReservation(reservationID, "u1", plan, rr); fail(); } catch (PlanningException p) { } assertFalse("Agent-based allocation failed", result); assertTrue("Agent-based allocation failed", plan.getAllReservations() .size() == 2); System.out.println("--------AFTER ALL IMPOSSIBLE ALLOCATION (queue: " + reservationID + ")----------"); System.out.println(plan.toString()); System.out.println(plan.toCumulativeString()); }
@Test public void shouldConvertToList() { Value value = Value.of(Arrays.asList(10, 20, 30)); assertThat(value.get(new TypeReference<List<String>>() { }), containsInAnyOrder("10", "20", "30")); assertThat(value.get(new TypeReference<List<BigInteger>>() { }), containsInAnyOrder(BigInteger.TEN, BigInteger.valueOf(20L), BigInteger.valueOf(30L))); }
@Test public void testOrderedExecutionEqualPriorityMix() throws ExecutionException, InterruptedException { exec = new PrioritizedExecutorService(exec.threadPoolExecutor, true, 0, config); final int numTasks = 1_000; final List<ListenableFuture<?>> futures = Lists.newArrayListWithExpectedSize(numTasks); final AtomicInteger hasRun = new AtomicInteger(0); final Random random = new Random(789401); for (int i = 0; i < numTasks; ++i) { switch (random.nextInt(4)) { case 0: futures.add(exec.submit(getCheckingPrioritizedCallable(i, hasRun))); break; case 1: futures.add(exec.submit(getCheckingPrioritizedRunnable(i, hasRun))); break; case 2: futures.add(exec.submit(getCheckingCallable(i, hasRun))); break; case 3: futures.add(exec.submit(getCheckingRunnable(i, hasRun))); break; default: Assert.fail("Bad random result"); } } latch.countDown(); checkFutures(futures); }
@Test public void ReadDeleteOnlyモード時に$batchに対するPOSTメソッドが実行された場合はDcCoreExceptionが発生しないこと() throws Exception { PowerMockito.spy(ReadDeleteModeLockManager.class); PowerMockito.when(ReadDeleteModeLockManager.class, "isReadDeleteOnlyMode").thenReturn(true); try { List<PathSegment> pathSegment = getPathSegmentList(new String[] {"cell", "box", "col", "odata", "$batch" }); DcReadDeleteModeManager.checkReadDeleteOnlyMode(HttpMethod.POST, pathSegment); pathSegment = getPathSegmentList(new String[] {"cell", "box", "col", "col", "odata", "$batch" }); DcReadDeleteModeManager.checkReadDeleteOnlyMode(HttpMethod.POST, pathSegment); } catch (DcCoreException e) { fail(e.getMessage()); } }
@Test public void size() { assertThat(mTileList.size(), is(0)); assertThat(mTileList.addOrReplace(createTile(0, 1, 2, 3)), nullValue()); assertThat(mTileList.size(), is(1)); assertThat(mTileList.addOrReplace(createTile(0, 3, 4, 5)), notNullValue()); assertThat(mTileList.size(), is(1)); assertThat(mTileList.addOrReplace(createTile(3, 1, 2, 3)), nullValue()); assertThat(mTileList.size(), is(2)); mTileList.clear(); assertThat(mTileList.size(), is(0)); }
@Test public void assertUpdateDaemonStatus() { TaskContext taskContext = TaskContext.from(TaskNode.builder().build().getTaskNodeValue()); facadeService.updateDaemonStatus(taskContext, true); Mockito.verify(runningService).updateIdle(taskContext, true); }
@Test public void shouldUseExistingCreditCardForTokenInformationAndSaveItToPaymentTransactionAndOrderWhenEventIsMatch() throws WorldpayConfigurationException { when(tokenReplyMock.getTokenDetails().getTokenEvent()).thenReturn(MATCH); testObj.setPaymentInfoModel(paymentTransactionModelMock, orderModelMock, orderNotificationMessageMock); verifyCardNotCreated(); }
@Test public void exemptAndUpdateIssueDetailsTest() throws Exception { List<Map<String, Object>> issueDetails = new ArrayList<>(); Map<String, Object> issueDetailMap = new HashMap<>(); issueDetailMap.put("resourceType", "ec2"); issueDetailMap.put("status", "open"); issueDetailMap.put("severity", "high"); issueDetailMap.put(PAC_DS, AWS); issueDetailMap.put(PAC_DS, AWS); issueDetailMap.put(TYPE, "issue"); issueDetailMap.put(ES_DOC_ROUTING_KEY, "12345"); issueDetailMap.put(ES_DOC_PARENT_KEY, "ec2"); issueDetailMap.put(ES_DOC_ID_KEY, "678"); issueDetails.add(issueDetailMap); IssueResponse issueReason = new IssueResponse(); issueReason.setExceptionReason("exempted"); issueReason.setIssueId("1234"); RuleDetails ruleDetails = new RuleDetails(); ruleDetails.setRuleId("Kernel Compliance Rule"); ruleDetails.setReason("kernel Version Non-Compliant"); when( elasticSearchRepository.getSortedDataFromES(anyString(), anyString(), anyObject(), anyObject(), anyObject(), anyObject(), anyObject(), anyObject())).thenReturn(issueDetails); when(complianceRepositoryImpl.getOpenIssueDetails(ruleDetails.getRuleId())).thenReturn(issueDetails); complianceRepositoryImpl.exemptAndUpdateIssueDetails(issueReason); }
@Test public void testAdjustTlsContextAfterSerializedTls13ClientOutbound() { FinishedMessage message = new FinishedMessage(); context.setRecordLayer(RecordLayerFactory.getRecordLayer(RecordLayerType.RECORD, context)); context.setTalkingConnectionEndType(ConnectionEndType.CLIENT); context.setConnection(new OutboundConnection()); context.setSelectedProtocolVersion(ProtocolVersion.TLS13); context.setHandshakeSecret(new byte[] { 0, 1, 2, 3, 4 }); context.setSelectedCipherSuite(CipherSuite.TLS_AES_128_GCM_SHA256); message.setVerifyData(new byte[] { 0, 1, 2, 3, 4 }); context.setReadSequenceNumber(99); context.setWriteSequenceNumber(99); handler.adjustTlsContextAfterSerialize(message); assertEquals(Tls13KeySetType.APPLICATION_TRAFFIC_SECRETS, context.getActiveClientKeySetType()); assertEquals(Tls13KeySetType.NONE, context.getActiveServerKeySetType()); assertArrayEquals(null, context.getLastClientVerifyData()); assertArrayEquals(null, context.getLastServerVerifyData()); assertEquals(0, context.getWriteSequenceNumber()); assertEquals(99, context.getReadSequenceNumber()); }
@Test public void shouldCompressBlobContents() throws TokenStrategyFailedException, UnsupportedEncodingException { byte[] first = getBytes("{\"sessionID\":badger}"); assertThat(compression.perform(first).length).isLessThan(first.length); }
@Test public void testIsCurrent_Current() { PaginationInfo info = new PaginationInfo(page, pathTmpl, queryTmpl, 0); boolean result = info.isCurrent(5); assertTrue(result); }
@Test public void test_cancelPoint() { rec.setTotal(BigDecimal.valueOf(200L).setScale(DecimalUtils.SCALE_2)) .setAvailable(BigDecimal.valueOf(80L).setScale(DecimalUtils.SCALE_2)) .setCancelled(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2)) .setFrozen(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2)) .setTotalCost(BigDecimal.valueOf(100L).setScale(DecimalUtils.SCALE_2)) .setFrozenCost(BigDecimal.valueOf(5L).setScale(DecimalUtils.SCALE_2)); PointRecCalcResult result = calculator.cancelPoint(rec, BigDecimal.valueOf(20).setScale(DecimalUtils.SCALE_2)); log.info("result = {}", result); Assertions.assertEquals(rec.getId(), result.getRec4Update().getId()); Assertions.assertEquals(BigDecimal.valueOf(60L).setScale(DecimalUtils.SCALE_2), rec.getAvailable()); Assertions.assertEquals(BigDecimal.valueOf(60L).setScale(DecimalUtils.SCALE_2), result.getRec4Update().getAvailable()); Assertions.assertEquals(BigDecimal.valueOf(30L).setScale(DecimalUtils.SCALE_2), rec.getCancelled()); Assertions.assertEquals(BigDecimal.valueOf(30L).setScale(DecimalUtils.SCALE_2), result.getRec4Update().getCancelled()); Assertions.assertEquals(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2), rec.getUsedCost()); Assertions.assertEquals(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2), result.getRec4Update().getUsedCost()); Assertions.assertEquals(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2), result.getDeltaCost()); }
@Test public void testPutByte() { assertThat(Hasher.of(HASH_FUNCTION).putByte((byte) 0).putByte((byte) 1).hash()) .isEqualTo(HASH_FUNCTION.newHasher().putByte((byte) 0).putByte((byte) 1).hash()); }
@Test public void testTitle() { final String title = "title"; when( newTemplatePresenterView.getNewServerTemplateWizardTitle() ).thenReturn( title ); assertEquals( title, newServerTemplateWizard.getTitle() ); verify( newTemplatePresenterView ).getNewServerTemplateWizardTitle(); }
@Test public void ensureInitialized_initialized_returnsCorrectFrcInfo() { loadCacheWithConfig(mockFetchedCache, null); loadCacheWithConfig(mockDefaultsCache, null); loadCacheWithConfig(mockActivatedCache, null); loadInstanceIdAndToken(); Task<FirebaseRemoteConfigInfo> initStatus = frc.ensureInitialized(); assertWithMessage("FRC is not initialized even though everything is loaded!") .that(initStatus.isComplete()) .isTrue(); }
@Test public void testOverlaps_DoesNotNeedChopping() { KeyExtent keyExtent2 = createMock(KeyExtent.class); expect(keyExtent.overlaps(keyExtent2)).andReturn(false); expect(keyExtent.getTableId()).andReturn(TableId.of("table1")); replay(keyExtent); expect(keyExtent2.getTableId()).andReturn(TableId.of("table2")); replay(keyExtent2); mi = new MergeInfo(keyExtent, MergeInfo.Operation.MERGE); assertFalse(mi.overlaps(keyExtent2)); }
@Test public void shouldDefineArgumentMismatchMessage() { assertThat(command.getArgumentsMismatchMessage(), equalTo(MessageKey.USAGE_CHANGE_PASSWORD)); }
@Test public void testEquals() throws Exception { Assert.assertNotEquals( _testSerializableObjectWrapper, _TEST_SERIALIZABLE); Assert.assertNotEquals( _testSerializableObjectWrapper, new SerializableObjectWrapper(_ANOTHER_TEST_SERIALIZABLE)); Assert.assertEquals( _testSerializableObjectWrapper, _testSerializableObjectWrapper); Assert.assertEquals( _testSerializableObjectWrapper, new SerializableObjectWrapper(_TEST_SERIALIZABLE)); Assert.assertEquals( _testSerializableObjectWrapper, _cloneBySerialization(_testSerializableObjectWrapper)); Assert.assertEquals( _cloneBySerialization(_testSerializableObjectWrapper), _testSerializableObjectWrapper); Assert.assertEquals( _cloneBySerialization(_testSerializableObjectWrapper), _cloneBySerialization(_testSerializableObjectWrapper)); }
@Test public void doProcessSiteLocation_isSiteLocationLocal() { String jsonWithOnlyNeededValues = "{\"site_address\":\"\",\"sotncondition_clientsignal\":\"\"}"; String result = servicePluginFactory.doProcessSiteLocation(serviceDecomposition, jsonWithOnlyNeededValues); Assert.assertEquals(result, jsonWithOnlyNeededValues); }
@Test public void testSelectMenu() { final String menuId = RandomStringUtils.random(10); workbenchMenuBarView.selectMenuItem(menuId); verify(workbenchMenuCompactNavBarView).selectMenuItem(menuId); verify(workbenchMenuStandardNavBarView).selectMenuItem(menuId); }
@Test public void constructor_withInvalidAdConfigurationValues_shouldReturnSomethingSensible() throws Exception { String expectedParameters = "sdk_version : null\n" + "creative_id : null\n" + "platform_version : -1\n" + "device_model : null\n" + "ad_unit_id : null\n" + "device_locale : null\n" + "device_id : null\n" + "network_type : null\n" + "platform : null\n" + "timestamp : null" + "\n" + "ad_type : null\n" + "ad_size : {-1, -1}\n"; stub(adConfiguration.getSdkVersion()).toReturn(null); stub(adConfiguration.getDspCreativeId()).toReturn(null); stub(adConfiguration.getPlatformVersion()).toReturn(-1); stub(adConfiguration.getDeviceModel()).toReturn(null); stub(adConfiguration.getAdUnitId()).toReturn(null); stub(adConfiguration.getDeviceLocale()).toReturn(null); stub(adConfiguration.getHashedUdid()).toReturn(null); stub(adConfiguration.getNetworkType()).toReturn(null); stub(adConfiguration.getPlatform()).toReturn(null); stub(adConfiguration.getTimeStamp()).toReturn(-1l); stub(adConfiguration.getAdType()).toReturn(null); stub(adConfiguration.getWidth()).toReturn(-1); stub(adConfiguration.getHeight()).toReturn(-1); subject = new AdAlertReporter(context, view, adConfiguration); assertThat(subject.getParameters()).isEqualTo(expectedParameters); }
@Test public void testGetOrderById2() { Order order = new Order(); Mockito.when(orderOtherRepository.findById(Mockito.any(UUID.class))).thenReturn(order); Response result = orderOtherServiceImpl.getOrderById(UUID.randomUUID().toString(), headers); Assert.assertEquals(new Response<>(1, "Success", order), result); }
@Test public void testRunningOrPaused() { TargetInstance targetInstance = new TargetInstance(); targetInstance.setState(TargetInstance.STATE_RUNNING); assertTrue(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_PAUSED); assertTrue(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_SCHEDULED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_SCHEDULED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_QUEUED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_STOPPING); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_ABORTED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_HARVESTED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_REJECTED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_ENDORSED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_ARCHIVED); assertFalse(underTest.runningOrPaused(targetInstance)); targetInstance.setState(TargetInstance.STATE_ARCHIVING); assertFalse(underTest.runningOrPaused(targetInstance)); }
@Test public void coverage() { PointShifts test = PointShifts.builder(ShiftType.RELATIVE) .addShift(0, Tenor.TENOR_1W, 0.1) .addShift(0, Tenor.TENOR_1M, 0.2) .addShift(0, Tenor.TENOR_3M, 0.3) .build(); coverImmutableBean(test); PointShifts test2 = PointShifts.builder(ShiftType.ABSOLUTE) .addShift(0, Tenor.TENOR_1M, 0.2) .addShift(0, Tenor.TENOR_3M, 0.3) .build(); coverBeanEquals(test, test2); }
@Test public void testOneMacAddressMissing() throws Throwable { VmReleaseIpStepCmd command = getVmReleaseIpStepCmd(); step.createOrUpdateTransientResource(ResourceReserveStepCmd.VM_ID, "vm-id"); Operation operation = mock(Operation.class); VmService.State state = new VmService.State(); state.networkInfo = new HashMap<>(); VmService.NetworkInfo networkInfo = new VmService.NetworkInfo(); networkInfo.id = "network-id"; networkInfo.privateIpAddress = "ipAddress"; state.networkInfo.put("network-id", networkInfo); state.networkInfo.put("network-id2", new VmService.NetworkInfo()); doReturn(state).when(operation).getBody(any()); doReturn(operation).when(photonControllerXenonRestClient).get(anyString()); command.execute(); verify(photonControllerXenonRestClient).get(eq(VmServiceFactory.SELF_LINK + "/vm-id")); verify(photonControllerXenonRestClient, times(1)).patch(eq(DhcpSubnetService.FACTORY_LINK + "/network-id"), any(DhcpSubnetService.IpOperationPatch.class)); }
@Test public void testGetImpl() throws Throwable { SMAdaptor sMAdaptor = new SMAdaptor(); sMAdaptor.setImpl("testSMAdaptorClazz"); String result = sMAdaptor.getImpl(); assertEquals("testSMAdaptorClazz", result, "result"); }
@Test public void getAll() { this.instanceManager.registerSingle(PARENT, ACTUAL_1); this.instanceManager.registerSingle(PARENT, ACTUAL_2); this.instanceManager.registerMultiple(PARENT, SEL_1, ACTUAL_1); this.instanceManager.registerMultiple(PARENT, SEL_2, ACTUAL_2); final List<String> all = this.instanceManager.getAll(PARENT); assertThat(all).containsExactlyInAnyOrder( ACTUAL_1, ACTUAL_2, ACTUAL_2 ); }
@Test public void testRemove() throws Exception { TestModel tm = CompositeUtil.instance().getModel(TestModel.class); assertNotNull(tm); rc.put("1", tm); assertEquals(1, rc.size()); assertFalse(rc.isEmpty()); rc.remove("1"); assertEquals(0, rc.size()); assertTrue(rc.isEmpty()); }
@Test public void testParseInvalidQuotedString () { final String [] aInvalid = new String [] { "text/plain;param=\"", "text/plain;param= \"", "text/plain;param=\"abc", "text/plain;param=\"abc\\", "text/plain;param=\"abc\\\"", "text/plain;param0=xml;param=\"", "text/plain;param0=xml;param= \"", "text/plain;param0=xml;param=\"abc", "text/plain;param0=xml;param=\"abc\\", "text/plain;param0=xml;param=\"abc\\\"", "text/plain;param0=\"foo bar\";param=\"", "text/plain;param0=\"foo bar\";param= \"", "text/plain;param0=\"foo bar\";param=\"abc", "text/plain;param0=\"foo bar\";param=\"abc\\", "text/plain;param0=\"foo bar\";param=\"abc\\\"" }; for (final String sInvalid : aInvalid) { try { final MimeType aMT = MimeTypeParser.parseMimeType (sInvalid, EMimeQuoting.QUOTED_STRING); fail ("'" + sInvalid + "' should not be parsable with quoting " + EMimeQuoting.QUOTED_STRING + "! Got " + aMT); } catch (final MimeTypeParserException ex) {} } }
@Test public void onBindViewHolder_BinderExists_Should_InOrder_TakeItem_Bind() { InOrder inOrder = Mockito.inOrder(itemBinder, core); adapter.onBindViewHolder(emptyViewHolder, EXISTING_BINDER_ITEM_POSITION); inOrder.verify(itemBinder).take(same(itemWithBinder)); inOrder.verify(core).doBind(same(itemBinder), any(ViewFinder.class)); }
@Test public void testReverseJsonArray() throws Exception { assertThat(bolt.reverseJsonArray(""), is("")); assertThat(bolt.reverseJsonArray(null), is("")); assertThat(bolt.reverseJsonArray("[1.01,2.02]"), is("[2.02,1.01]")); }
@Test public void shouldJsonSerialiseAndDeserialise() throws IOException { final IsA isA = new IsA(String.class); final Not<Object> filter = new Not<>(isA); final String json = JsonSerialiser.serialise(filter); JsonSerialiser.assertEquals(String.format("{%n" + " \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Not\",%n" + " \"predicate\" : {%n" + " \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsA\",%n" + " \"type\" : \"java.lang.String\"%n" + " }%n" + "}"), json); final Not deserialisedFilter = JsonSerialiser.deserialise(json, Not.class); assertNotNull(deserialisedFilter); assertEquals(String.class.getName(), ((IsA) deserialisedFilter.getPredicate()).getType()); }
@Test public void testGetStorageUnitStatusEntity() { List<StorageUnitStatusEntity> storageUnitStatusEntity = Arrays.asList(storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(STORAGE_UNIT_STATUS), storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(STORAGE_UNIT_STATUS_2)); assertEquals(storageUnitStatusEntity.get(0), storageUnitStatusDaoHelper.getStorageUnitStatusEntity(STORAGE_UNIT_STATUS)); assertEquals(storageUnitStatusEntity.get(1), storageUnitStatusDaoHelper.getStorageUnitStatusEntity(STORAGE_UNIT_STATUS_2)); assertEquals(storageUnitStatusEntity.get(0), storageUnitStatusDaoHelper.getStorageUnitStatusEntity(STORAGE_UNIT_STATUS.toUpperCase())); assertEquals(storageUnitStatusEntity.get(0), storageUnitStatusDaoHelper.getStorageUnitStatusEntity(STORAGE_UNIT_STATUS.toLowerCase())); try { storageUnitStatusDaoHelper.getStorageUnitStatusEntity("I_DO_NOT_EXIST"); fail("Should throw an ObjectNotFoundException."); } catch (ObjectNotFoundException e) { assertEquals("Storage unit status \"I_DO_NOT_EXIST\" doesn't exist.", e.getMessage()); } }
@Test public void testTranslateEdgeValues() throws Exception { DataSet<Edge<LongValue, StringValue>> edgeSet = graph .translateEdgeValues(new LongValueToStringValue()) .getEdges(); for (Edge<LongValue, StringValue> edge : edgeSet.collect()) { assertEquals(LongValue.class, edge.f0.getClass()); assertEquals(LongValue.class, edge.f1.getClass()); assertEquals(StringValue.class, edge.f2.getClass()); } TestBaseUtils.compareResultAsText(edgeSet.collect(), expectedEdgeResult); }
@Test public void testLIKE() { DataFilterCriteriaEvaluator evaluator = evaluator(FIELD, Conditional.LIKE, "*b*"); Assert.assertTrue(evaluator.accepts(element(FIELD, "abc"))); Assert.assertFalse(evaluator.accepts(element(FIELD, "aec"))); }
@Test public void testAddJob_1() throws Exception { ScheduleManagerImpl fixture = new ScheduleManagerImpl(); AgentMngrAPIRequest request = new AgentMngrAPIRequest("", new com.intuit.tank.vm.agent.messages.AgentMngrAPIRequest.UserRequest[] {}); fixture.addJob(request); }
@Test public void negativeDeliveryAck() throws IOException, TimeoutException, InterruptedException { long deliveryTag = 1L; String exchange = "someExchange"; String routingKey = "someRoutingKey"; AMQP.BasicProperties properties = new AMQP.BasicProperties(); byte[] body = new byte[0]; Delivery delivery = new Delivery(new Envelope(deliveryTag, false, exchange, routingKey), properties, body); differPublisher.negativeDeliveryAck(delivery); Mockito.verify(channel).basicNack(eq(deliveryTag), eq(false), eq(false)); Mockito.verify(channel).basicPublish( eq(EDDI_EXCHANGE), eq(MESSAGE_CREATED_EDDI_FAILED_ROUTING_KEY), eq(null), eq(body)); Mockito.verify(channel).waitForConfirmsOrDie(eq(TIMEOUT_CONFIRMS_IN_MILLIS)); }
@Test public void getCollectionDisplayDepthForSearch_shouldReturnCorrectValue() throws Exception { Assert.assertEquals(5, DataManager.getInstance().getConfiguration().getCollectionDisplayDepthForSearch(SolrConstants.DC)); }
@Test(expectedExceptions = UmaException.class) public void shouldThrowInvalidResourceSetIdExceptionWhenResourceSetIdIsNotAString() throws Exception { JsonRepresentation entity = mock(JsonRepresentation.class); JSONObject requestBody = mock(JSONObject.class); given(entity.getJsonObject()).willReturn(requestBody); given(requestBody.toString()).willReturn("{\"resource_set_id\":[]}"); try { endpoint.registerPermissionRequest(entity); } catch (UmaException e) { assertThat(e.getStatusCode()).isEqualTo(400); assertThat(e.getError()).isEqualTo("invalid_resource_set_id"); assertThat(e.getMessage()).contains("Required attribute", "'resource_set_id'", "must be a String"); throw e; } }
@Test public void checkCreationByMap() throws Exception { IFieldName fieldName = mock(IFieldName.class); Object obj = mock(Object.class); Map<IFieldName, Object> map = new HashMap<IFieldName, Object>(){{put(fieldName, obj);}}; IObject result = new DSObject(map); assertNotNull(obj); assertEquals(obj, result.getValue(fieldName)); }
@Test public void getRoomMembersIdsTest() throws Exception { final MembersIdsResponse membersIdsResponse = new MembersIdsResponse(emptyList(), "TOKEN"); whenCall(retrofitMock.getMembersIds(any(), any(), any()), membersIdsResponse); final MembersIdsResponse response = target.getRoomMembersIds("ROOM_ID", "USER_ID").get(); verify(retrofitMock, only()).getMembersIds("room", "ROOM_ID", "USER_ID"); assertThat(response).isSameAs(membersIdsResponse); }
@Test public void testSerializable() throws Exception { List<Point> points = new ArrayList<>(); points.add(Point.fromLngLat(1.0, 1.0)); points.add(Point.fromLngLat(2.0, 2.0)); points.add(Point.fromLngLat(3.0, 3.0)); BoundingBox bbox = BoundingBox.fromLngLats(1.0, 2.0, 3.0, 4.0); LineString lineString = LineString.fromLngLats(points, bbox); byte[] bytes = serialize(lineString); assertEquals(lineString, deserialize(bytes, LineString.class)); }
@Test public void requestHandledShouldBeSetMailboxes() { assertThat(new SetMailboxesMethod(NO_PROCESSOR, TIME_METRIC_FACTORY).requestHandled().getName()).isEqualTo("setMailboxes"); }
@Test public void testGetPaths_DoesNotRecordMatchesBeneathMatchedParents() throws Exception { DependencyNode root = parse( "nested.txt" ); PathRecordingDependencyVisitor visitor = new PathRecordingDependencyVisitor( new ArtifactMatcher() ); root.accept( visitor ); List<List<DependencyNode>> paths = visitor.getPaths(); assertEquals( paths.toString(), 1, paths.size() ); assertPath( paths.get( 0 ), "x" ); }
@Test(expectedExceptions = IllegalArgumentException.class) public void invalidExtensionsRoot1() { final Document extensions = XML.parse("<extensions xmlns=\"adsf\">some test</extensions>"); final GPX gpx = GPX.builder() .extensions(extensions) .build(); }
@Test public void parseMethodDescriptor_3() { List<String> rets = Utils.parseMethodDescriptor("(II[Ljava/lang/String;I)V"); assertEquals(4, rets.size(), 0); }
@Test public void experimentTypeCV() { builder.experiment(CROSS_VALIDATION, "cv"); assertEquals(builder.type.toString(), CROSS_VALIDATION.toString()); }
@Test void get17() { assertEquals(m17, instance.get17()); }
@Test public void testAreaAddres() throws Exception { result1 = IsisUtil.areaAddres(Bytes.toArray( IsisUtil.areaAddressToBytes(areaAddres))); assertThat(result1, is(areaAddres)); }
@Test public void expandTab() { Assertions.assertEquals("\t", PatternUtils.expandEscapedChars("\\t")); }
@Test public void testIsOnShouldReturnTrueIfLocalhostRequestProcessorIsEnabled() { given(localhostRequestProcessor.isEnabled()).willReturn(true); boolean result = underTest.isOn(); assertTrue(result); }
@Test(expectedExceptions = IllegalStateException.class) public void testWhenNoDatabagItem() throws IOException { ChefApi chefApi = createMock(ChefApi.class); Client client = createMock(Client.class); RunListForGroup fn = new RunListForGroup(new BootstrapConfigForGroup("jclouds", chefApi), json); expect(chefApi.getDatabagItem("jclouds", "foo")).andReturn(null); replay(client); replay(chefApi); fn.apply("foo"); verify(client); verify(chefApi); }
@Test public void test() { assertThat(BigDecimalUtils.valueOf(0).intValue()).isEqualTo(0); assertThat(BigDecimalUtils.valueOf(100).intValue()).isEqualTo(100); assertThat(BigDecimalUtils.valueOf(1000).intValue()).isEqualTo(1000); }
@Test public void rdsTestGetOneInstance(){ Mockito.when(amazonRDSClient.describeDBInstances(Mockito.any())).thenReturn( new DescribeDBInstancesResult().withDBInstances( initializeInstance("instance1", RDS_ENGINE_PG, "gk-A-instance", "db-gk1", STATUS_AVAILABLE, SG_ONE, null))); Optional<GatekeeperRDSInstance> instance = rdsLookupService.getOneInstance(test, "gk-A-instance", "gk-A-instance"); Assert.assertTrue(instance.isPresent()); Assert.assertEquals("TEST", instance.get().getApplication()); Assert.assertEquals("available", instance.get().getStatus()); Assert.assertEquals(new HashSet<>(Arrays.asList("gk_readonly","gk_datafix","gk_dba")), new HashSet<>(instance.get().getAvailableRoles())); }
@Test public void setPage() throws Exception { PageInfo pageInfo = new PageInfo(PAGE_SIZE, 0, 50, 100); pageInfo.setPage(1); assertEquals(1, pageInfo.getPage()); assertEquals(11, pageInfo.getFrom()); assertEquals(20, pageInfo.getTo()); }
@Test public void destroyDismissesWithoutFlourish() { presenter.takeView(view); when(view.isShowing()).thenReturn(true); activityScope.destroy(); verify(view).dismiss(eq(WITHOUT_FLOURISH)); }
@Test public void originalGeneIdIsFilteredOut() { when(jdbcTemplate.queryForObject(CE_GENES_SQL_QUERY_TEMPLATE, String.class, "E-FOOBAR", "ENSGFOOBAR")) .thenReturn("ENSGFOOBAR, ENSGFOOBAR1, ENSGFOOBAR2, ENSGFOOBAR3"); assertThat(subject.coexpressedGenesFor("E-FOOBAR", "ENSGFOOBAR")) .hasSize(3) .doesNotContain("ENSGFOOBAR"); }
@Test public void testExecuteSingleNestedRelation() throws Exception { JsonApiDocument jsonApiDocument = new JsonApiDocument(); MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>(); queryParams.put(INCLUDE, Collections.singletonList("children.friends")); includedProcessor.execute(jsonApiDocument, parentRecord1, Optional.of(queryParams)); List<Resource> expectedIncluded = Arrays.asList(childRecord1.toResource(), childRecord2.toResource()); List<Resource> actualIncluded = jsonApiDocument.getIncluded(); assertEquals(expectedIncluded, actualIncluded, "Included Processor added single nested requested resources from 'include' query param"); }
@Test public void testCount() { @SuppressWarnings("unused") SoftwareProcess r1 = app.createAndManageChild(EntitySpec.create(SoftwareProcess.class, RestMockSimpleEntity.class)); SoftwareProcess r2 = app.createAndManageChild(EntitySpec.create(SoftwareProcess.class, RestMockSimpleEntity.class)); Entities.start(app, Arrays.<Location>asList(loc)); Entities.dumpInfo(app); log.info("r2loc: "+r2.getLocations()); log.info("props: "+((LocationInternal)r2.getLocations().iterator().next()).config().getBag().getAllConfig()); Map<Location, Integer> counts = new EntityLocationUtils(mgmt).countLeafEntitiesByLocatedLocations(); log.info("count: "+counts); assertEquals(ImmutableList.copyOf(counts.values()), ImmutableList.of(2), "counts="+counts); }
@Test public void testSupplierExpirationReloadsTheCache() { ImageCacheSupplier imageCache = new ImageCacheSupplier(Suppliers.<Set<? extends Image>> ofInstance(images), 3, Atomics.<AuthorizationException> newReference(), Providers.of(getImageStrategy)); assertEquals(imageCache.get().size(), 1); Optional<? extends Image> image = imageCache.get("foo"); assertTrue(image.isPresent()); assertEquals(image.get().getName(), "imageName-foo"); assertEquals(imageCache.get().size(), 2); Uninterruptibles.sleepUninterruptibly(4, TimeUnit.SECONDS); assertEquals(imageCache.get().size(), 1); assertFalse(any(imageCache.get(), idEquals("foo"))); }
@Test public void testGetStorageAttributeIntegerValueByName_1() { String attributeName = "test"; String attributeValue = "1234"; StorageEntity storageEntity = storageDaoTestHelper.createStorageEntityWithAttributes(attributeName, attributeValue); boolean attributeRequired = false; boolean attributeValueRequiredIfExists = true; Integer value = storageHelper.getStorageAttributeIntegerValueByName(attributeName, storageEntity, attributeRequired, attributeValueRequiredIfExists); assertEquals(new Integer(attributeValue), value); }
@Test public void testMove() throws Exception { RectangleArea rectangle = new RectangleArea(10.5d, 20.5d, 30.5d, 40.5d); RectangleArea result = rectangle.move(0.5d, 0d); assertThat(result, is(new RectangleArea(11d, 20.5d, 30.5d, 40.5d))); }
@Test public void isSigned() throws Exception { assertTrue(actualMetaData.isSigned(1)); }
@Test public void testInvokeAny() throws Exception { tracedExecutorService.invokeAny(callableList); verify(wrappedExecutorService).invokeAny(any(List.class)); verify(traceContext, times(callableList.size())).isEmpty(); verify(traceContext, times(callableList.size())).getCurrentSpan(); verifyNoMoreInteractions(wrappedExecutorService, traceContext); }
@Test public void shouldDestructureToastWithTupleFieldMatch() { transform( "module scotch.test", "data Person { name :: (String, String) }", "firstName Person { name = (fn, _) } = fn" ); shouldHavePattern("scotch.test.(#1)", asList( capture("firstName", t(0)), struct("Person", t(1), asList( field("name", t(2), struct("scotch.data.tuple.(,)", t(4), asList( field("_0", t(7), capture("fn", t(6))), field("_1", t(10), ignore(t(9))) ))) )) ), unshuffled(id("fn", t(11)))); }
@Test public void testLocalDatasetDeleteion() throws Exception { deploy(WorkflowAppWithLocalDataset.class, 200, Constants.Gateway.API_VERSION_3_TOKEN, TEST_NAMESPACE1); final ProgramId workflow = new NamespaceId(TEST_NAMESPACE1) .app(WorkflowAppWithLocalDataset.APP_NAME) .workflow(WorkflowAppWithLocalDataset.WORKFLOW_NAME); startProgram(Id.Program.fromEntityId(workflow), ImmutableMap.of("dataset.*.keep.local", "true")); Tasks.waitFor(1, () -> getProgramRuns(Id.Program.fromEntityId(workflow), ProgramRunStatus.COMPLETED).size(), 5, TimeUnit.SECONDS); List<RunRecord> runRecords = getProgramRuns(Id.Program.fromEntityId(workflow), ProgramRunStatus.COMPLETED); Assert.assertEquals(1, runRecords.size()); String pid = runRecords.get(0).getPid(); final Map<String, String> properties = ImmutableMap.of(Constants.AppFabric.WORKFLOW_LOCAL_DATASET_PROPERTY, "true"); Collection<DatasetSpecificationSummary> instances = datasetFramework.getInstances(new NamespaceId(TEST_NAMESPACE1), properties); Assert.assertEquals(1, instances.size()); DatasetSpecificationSummary summary = instances.iterator().next(); Assert.assertTrue(summary.getName().endsWith(pid)); Map<String, String> updatedProperties = new HashMap<>(summary.getProperties()); updatedProperties.remove(Constants.AppFabric.WORKFLOW_KEEP_LOCAL); datasetFramework.updateInstance(new DatasetId(TEST_NAMESPACE1, summary.getName()), DatasetProperties.of(updatedProperties)); CConfiguration testConf = CConfiguration.create(); testConf.set(Constants.AppFabric.LOCAL_DATASET_DELETER_INTERVAL_SECONDS, "1"); testConf.set(Constants.AppFabric.LOCAL_DATASET_DELETER_INITIAL_DELAY_SECONDS, "1"); new LocalRunRecordCorrectorService(testConf, store, programStateWriter, runtimeService, namespaceAdmin, datasetFramework).startUp(); Tasks.waitFor(0, () -> datasetFramework.getInstances(new NamespaceId(TEST_NAMESPACE1), properties).size(), 30, TimeUnit.SECONDS, 1, TimeUnit.SECONDS); }
@Test public void unexpectedTradeEventsAreSendToConfiguredMailAddress() throws MailSendingException { cut.unexpectedEvent(SOME_TEXT); verify(mailSender).sendMail(eq(SOME_SENDER_ADDRESS), eq(SOME_RECIVER_ADDRESS), anyString(), eq(SOME_TEXT)); }
@Test public void testImplicitParentSpan() { OpencensusTracerFactory factory = new OpencensusTracerFactory(internalTracer, defaultSpanAttributes); Span parentSpan = mock(Span.class); Context origContext = ContextUtils.withValue(Context.current(), parentSpan).attach(); try { factory.newTracer( NoopApiTracer.getInstance(), SpanName.of("FakeClient", "FakeMethod"), OperationType.Unary); } finally { Context.current().detach(origContext); } verify(internalTracer).spanBuilderWithExplicitParent(anyString(), same(parentSpan)); }
@Test public void testGetValueForBounds() throws SecurityException, NoSuchMethodException { Method method = SimpleFederatedService.class.getDeclaredMethod( "getValueForBounds", Double.TYPE, Double.TYPE, Double.TYPE, Double.TYPE); FederatedServiceMethodInvocationHandler handler = _factory.getHandlerForMethod(method); FederatedByBoundsMethodInvocationHandlerImpl impl = (FederatedByBoundsMethodInvocationHandlerImpl) handler; assertEquals(0, impl.getLat1ArgumentIndex()); assertEquals(1, impl.getLon1ArgumentIndex()); assertEquals(2, impl.getLat2ArgumentIndex()); assertEquals(3, impl.getLon2ArgumentIndex()); }
@Test (expected = InvalidInputDataException.class) public void testDetachInvalidSecurityGroup() throws Exception{ ec2RaiderImplUnderTest.detachSecurityGroup("1234","sg-99"); }
@Test public void nanCarryErrorrhoTest() { assertThatIllegalArgumentException() .isThrownBy(() -> BlackScholesFormulaRepository.rho( SPOT, STRIKES_INPUT[1], TIME_TO_EXPIRY, VOLS[1], INTEREST_RATES[1], NAN, true)); }
@Test public void testDefaultConstructor() { var obj = new DelayedService(); assertEquals(obj.response(System.nanoTime()), "Delayed service is down"); }
@Test public void testGetDocsWhiteList() throws Exception { Set<String> ids = new HashSet<>(); ids.addAll(Arrays.asList("539 11252 1359 10576 12662".split(" "))); SearchClient searchClient = SearchClientFactory.getClient(TMDB_URL); Set<String> whiteListFields = new HashSet<>(); whiteListFields.add("original_title"); whiteListFields.add("id"); List<StoredDocument> docs = searchClient.getDocs("id", ids, whiteListFields, Collections.EMPTY_SET); assertEquals(5, docs.size()); StoredDocument doc1359 = null; for (int i = 0; i < docs.size(); i++) { StoredDocument sd = docs.get(i); assertEquals(2, sd.getFields().size()); if (sd.getFields().get("id").equals("1359")) { doc1359 = sd; } } String title = (String) doc1359.getFields().get("original_title"); assertEquals("American Psycho", title); }
@Test public void calculate_close() { assertZero(this.aligning.calculate(new Vector2d(6.1, 4.8), 3, 4, new Vector2d(6, 5))); }
@Test public void testListContainers() throws Exception { final Path container = new Path("/", EnumSet.of(Path.Type.directory)); final AttributedList<Path> list = new GoogleStorageBucketListService(session).list(container, new DisabledListProgressListener()); assertFalse(list.isEmpty()); }
@Test public void testBlockquote() { try { sink = new Xhtml5BaseSink( writer ); sink.blockquote(); sink.blockquote_(); } finally { sink.close(); } assertEquals( "<blockquote></blockquote>", writer.toString() ); writer = new StringWriter(); try { sink = new Xhtml5BaseSink( writer ); sink.blockquote( attributes ); sink.blockquote_(); } finally { sink.close(); } assertEquals( "<blockquote style=\"bold\"></blockquote>", writer.toString() ); }
@Test public void testMatchAnyCommunity() { NamedCommunitySet expr = new NamedCommunitySet(COMMUNITY_LIST_NAME); Set<Community> communityCandidates = ImmutableSet.of(StandardCommunity.of(1L), StandardCommunity.of(2L)); assertThat(expr, matchAnyCommunity(_env, communityCandidates)); }
@Test public void executeWithStringForSuccess() { setupValuesWithString(); when(currentStep.getAllData(eq("context"))).then(invocation -> { LinkedList<IData<Context>> ret = new LinkedList<>(); ret.add(new MockData<>("context:someContextKey", new Context(Context.ContextType.string, "someString"))); return ret; }); IBehaviorCondition.ExecutionState actualExecutionState = contextMatcher.execute(conversationMemory, new LinkedList<>()); Assert.assertEquals(IBehaviorCondition.ExecutionState.SUCCESS, actualExecutionState); }
@Test(groups="10s", timeOut=60000) public void testPlus() { Random rnd = new Random(); for(int i = 0; i < 200; i++){ rnd.setSeed(i); IntIterableRangeSet t1 = makeItv(rnd, 50); IntIterableRangeSet t2 = makeItv(rnd, 50); IntIterableRangeSet s1 = plus1(t1, t2); IntIterableRangeSet s2 = IntIterableSetUtils.plus(t1, t2); Assert.assertEquals(s2.SIZE, s1.SIZE); Assert.assertEquals(s2.CARDINALITY, s1.CARDINALITY); Assert.assertEquals(Arrays.copyOf(s2.ELEMENTS, s2.SIZE), Arrays.copyOf(s1.ELEMENTS, s1.SIZE)); } }
@Test public void testWithConsumerThrowingException() { AtomicBoolean terminated = new AtomicBoolean(); MultiAssertSubscriber<Integer> subscriber = Multi.createFrom().<Integer> emitter(e -> { e.onTermination(() -> terminated.set(true)); e.emit(1).emit(2).emit(3); throw new RuntimeException("boom"); }).subscribe().withSubscriber(MultiAssertSubscriber.create(3)); subscriber.assertSubscribed() .assertReceived(1, 2, 3) .assertHasFailedWith(RuntimeException.class, "boom"); assertThat(terminated).isTrue(); }
@Test(expected = IllegalArgumentException.class) public void fillMap_should_throw_exception_if_defaultMap_is_smaller_than_mapToFill() { final Map<String, Long> defaultMap = new HashMap<>(); defaultMap.put("1", 0L); final Map<String, Long> mapToFill = new HashMap<>(); mapToFill.put("2", 0L); mapToFill.put("3", 0L); fillMap(defaultMap, mapToFill); }
@Test public void testUpdateReleaseInvalidDefaultReleaseVersion_NonInteractive() throws Exception { ReleasePhase phase = (MapVersionsPhase) lookup( ReleasePhase.class, TEST_MAP_RELEASE_VERSIONS ); List<MavenProject> reactorProjects = Collections.singletonList( createProject( "bar", "1.11-SNAPSHOT" ) ); ReleaseDescriptorBuilder builder = new ReleaseDescriptorBuilder(); builder.setDefaultReleaseVersion( "3.0-SNAPSHOT" ); builder.setInteractive( false ); try { phase.execute( ReleaseUtils.buildReleaseDescriptor( builder ), new DefaultReleaseEnvironment(), reactorProjects ); fail( "Should fail due to invalid version" ); } catch( ReleaseExecutionException e ) { assertEquals( "3.0-SNAPSHOT is invalid, expected a non-snapshot", e.getMessage() ); } }
@Test public void toResponse() { final TransactionNotFoundException transactionNotFoundException = new TransactionNotFoundException("OUCH"); final Response result = instance.toResponse(transactionNotFoundException); assertThat(result).isNotNull(); final String message = result.getEntity().toString(); assertThat(message).isEqualTo("OUCH"); assertThat(result.getStatus()).isEqualTo(404); }
@Test public void testSetEnvFromInputStringWithQuotes() { Map<String, String> environment = new HashMap<String, String>(); String envString = "YARN_CONTAINER_RUNTIME_TYPE=docker" + ",YARN_CONTAINER_RUNTIME_DOCKER_IMAGE=hadoop-docker" + ",YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS=\"/dir1:/targetdir1,/dir2:/targetdir2\"" + ",YARN_CONTAINER_RUNTIME_DOCKER_ENVIRONMENT_VARIABLES=\"HADOOP_CONF_DIR=$HADOOP_CONF_DIR,HADOOP_HDFS_HOME=/hadoop\"" ; Apps.setEnvFromInputString(environment, envString, File.pathSeparator); assertEquals("docker", environment.get("YARN_CONTAINER_RUNTIME_TYPE")); assertEquals("hadoop-docker", environment.get("YARN_CONTAINER_RUNTIME_DOCKER_IMAGE")); assertEquals("/dir1:/targetdir1,/dir2:/targetdir2", environment.get("YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS")); assertEquals("HADOOP_CONF_DIR=,HADOOP_HDFS_HOME=/hadoop", environment.get("YARN_CONTAINER_RUNTIME_DOCKER_ENVIRONMENT_VARIABLES")); environment.clear(); environment.put("HADOOP_CONF_DIR", "etc/hadoop"); Apps.setEnvFromInputString(environment, envString, File.pathSeparator); assertEquals("docker", environment.get("YARN_CONTAINER_RUNTIME_TYPE")); assertEquals("hadoop-docker", environment.get("YARN_CONTAINER_RUNTIME_DOCKER_IMAGE")); assertEquals("/dir1:/targetdir1,/dir2:/targetdir2", environment.get("YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS")); assertEquals("HADOOP_CONF_DIR=etc/hadoop,HADOOP_HDFS_HOME=/hadoop", environment.get("YARN_CONTAINER_RUNTIME_DOCKER_ENVIRONMENT_VARIABLES")); }
@Test public void requireThatSearchCloseToMaxUnevenUpperBoundIsSensible() { PredicateRangeTermExpander expander = new PredicateRangeTermExpander(10, 0, 9223372036854771234L); Iterator<String> expectedLabels = Arrays.asList( "key=9223372036854770000-9223372036854770009", "key=9223372036854770000-9223372036854770099", "key=9223372036854770000-9223372036854770999").iterator(); expander.expand("key", 9223372036854770000L, range -> assertEquals(PredicateHash.hash64(expectedLabels.next()), range), (edge, value) -> { assertEquals(PredicateHash.hash64("key=9223372036854770000"), edge); assertEquals(0, value); }); assertFalse(expectedLabels.hasNext()); }
@Test public void testReset() throws Throwable { Profiler profiler = new Profiler(); profiler.reset(); assertEquals(0, profiler.events.size(), "profiler.events.size()"); }
@Test public void executesHttpPOSTRequestWithTemplateReplacement() { setField(postDelegate, "url", new FixedValue("foo")); final ResponseEntity<Object> responseEntity = mock(ResponseEntity.class); given(responseEntity.getBody()).willReturn("bar"); given(restTemplate.exchange(any(String.class), eq(POST), any(HttpEntity.class), eq(Object.class), any(Map.class))).willReturn(responseEntity); given(delegateExecution.hasVariable(PARAMS_KEY)).willReturn(true); given(delegateExecution.getVariable(PARAMS_KEY)).willReturn(new HashMap<String, Object>()); doThrow(RuntimeException.class).when(delegateExecution).setVariable(eq(DATA_KEY), eq("bar")); try { postDelegate.execute(delegateExecution); fail("Expected RuntimeException to be thrown by mock"); } catch (IllegalArgumentException iae) { fail(iae.getMessage()); } catch (RuntimeException re) { assertTrue(true); } }
@Test public void testNonExistingTicket() { String queryString = QUERY_STRING + "InvalidID"; IClient iClient = new IClientMock(iAppInstance, logger, queryString); IMediaStream stream = new IMediaStreamMock(logger, name, iClient); TicketChecker ticketChecker = new TicketChecker("Stream", ticketToolMock); boolean result = ticketChecker.checkTicket(stream, stream.getClient()); assertFalse("Expected not to be allowed", result); }
@Test public void renderSpeakPreview() throws Exception { String content = "pixel `art` is better"; assertEquals("<p>pixel <code>art</code> is better</p>\n", Article.renderSpeakPreview(content)); }
@Test public void testCreateWithProvidedTracer() { Tracer mock = Mockito.mock(Tracer.class); JmsTracer jmsTracer = OpenTracingTracerFactory.create(mock); assertEquals("Unexpected tracer instance type", OpenTracingTracer.class, jmsTracer.getClass()); Mockito.verifyNoInteractions(mock); jmsTracer.close(); Mockito.verifyNoInteractions(mock); }
@Test public void encryptHmacSHA1() { String blankjHmacSHA1 = "88E83EFD915496860C83739BE2CF4752B2AC105F"; assertEquals( blankjHmacSHA1, EncryptUtils.encryptHmacSHA1ToString("blankj", blankjHmackey) ); assertEquals( blankjHmacSHA1, EncryptUtils.encryptHmacSHA1ToString("blankj".getBytes(), blankjHmackey.getBytes()) ); assertArrayEquals( UtilsBridge.hexString2Bytes(blankjHmacSHA1), EncryptUtils.encryptHmacSHA1("blankj".getBytes(), blankjHmackey.getBytes()) ); }
@Test public void validate_shouldPassIfTheDuplicateNameIsForATermFromAnotherConceptSource() { ConceptReferenceTerm term = new ConceptReferenceTerm(); term.setName("weight term2"); term.setCode("unique code"); term.setConceptSource(Context.getConceptService().getConceptSource(1)); Errors errors = new BindException(term, "term"); new ConceptReferenceTermValidator().validate(term, errors); Assert.assertEquals(false, errors.hasErrors()); }
@Test public void testSetValues() { Statistics stat = new Statistics(); for (int i = 0; i < 10; i++) { Vector<Double> v = new Vector<>(); int count = (int) (Math.random() * 100); for (int j = 0; j < count; j++) { v.add(Math.random()); stat.setValues(v); Assert.assertEquals(v, stat.getValues()); Assert.assertNotSame(v, stat.getValues()); } } List<Double> v = new ArrayList<>(); stat.setValues(v); Assert.assertEquals(0, stat.count()); v.add((double) 0); Assert.assertEquals(0, stat.count()); try { stat.setValues((List<Double>)null); Assert.fail("IllegalArgumentException expected but not thrown"); } catch (IllegalArgumentException e) { } }
@Test public void testProduct() throws Exception { Object[] expected = new Object[] {"*", 1f, 2f}; Object[] actual = product(literal(1), literal(2)).toArray(); assertTrue("expression should match", Arrays.deepEquals(expected, actual)); }
@Test public void testPlus() throws IOException { HMapID m1 = new HMapID(); m1.put(1, 5.0); m1.put(2, 22.0); HMapID m2 = new HMapID(); m2.put(1, 4.0); m2.put(3, 5.0); m1.plus(m2); assertEquals(m1.size(), 3); assertTrue(m1.get(1) == 9); assertTrue(m1.get(2) == 22); assertTrue(m1.get(3) == 5); }
@Test public void testPut() { assertTrue(index.put("abcd", 0)); assertEquals(1, index.size()); assertTrue(index.put("abc", 0)); assertEquals(2, index.size()); }
@Test public void dispose() { TestDisposableSubscriber<Integer> tc = new TestDisposableSubscriber<Integer>(); assertFalse(tc.isDisposed()); tc.dispose(); assertTrue(tc.isDisposed()); BooleanSubscription d = new BooleanSubscription(); tc.onSubscribe(d); assertTrue(d.isCancelled()); assertEquals(0, tc.start); }
@Test public void testAddUserCheckXML() throws Exception { User user = new User(); user.setName("test"); user.setUserDN("dn"); user.setUserType(UserTypeEnum.RODS_USER); GeneralAdminInp pi = GeneralAdminInp.instanceForAddUser(user); String tagOut = pi.getParsedTags(); StringBuilder sb = new StringBuilder(); sb.append("<generalAdminInp_PI><arg0>add</arg0>\n"); sb.append("<arg1>user</arg1>\n"); sb.append("<arg2>test</arg2>\n"); sb.append("<arg3>rodsuser</arg3>\n"); sb.append("<arg4></arg4>\n"); sb.append("<arg5></arg5>\n"); sb.append("<arg6></arg6>\n"); sb.append("<arg7></arg7>\n"); sb.append("<arg8></arg8>\n"); sb.append("<arg9></arg9>\n"); sb.append("</generalAdminInp_PI>\n"); Assert.assertEquals("unexpected XML protocol result", sb.toString(), tagOut); }
@Test void createInstance_stackWithTwoResources_returnsStackResourceRegistryWithTwoResources() throws Exception { Map<String, String> resourceIdMappings = new HashMap<>(); resourceIdMappings.put("logicalResourceIdOne", "physicalResourceIdOne"); resourceIdMappings.put("logicalResourceIdTwo", "physicalResourceIdTwo"); StackResourceRegistryFactoryBean stackResourceRegistryFactoryBean = makeStackResourceRegistryFactoryBean( STACK_NAME, resourceIdMappings); StackResourceRegistry stackResourceRegistry = stackResourceRegistryFactoryBean .createInstance(); assertThat(stackResourceRegistry.lookupPhysicalResourceId("logicalResourceIdOne")) .isEqualTo("physicalResourceIdOne"); assertThat(stackResourceRegistry.lookupPhysicalResourceId("logicalResourceIdTwo")) .isEqualTo("physicalResourceIdTwo"); }
@Test public void childOrder() throws Exception{ String json = "{\"jcr:primaryType\":\"nam:nt:unstructured\",\"a\":{},\"c\":{},\"b\":{}}"; NodeState nodeState = deserialize(json); PropertyState childOrder = nodeState.getProperty(":childOrder"); assertNotNull(childOrder); assertEquals(asList("a", "c", "b"), childOrder.getValue(Type.NAMES)); }
@Test public void testNext() throws Exception { BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(bucket)); bufferedWriter.write("apple"); bufferedWriter.newLine(); bufferedWriter.write("banana"); bufferedWriter.newLine(); bufferedWriter.write("car"); bufferedWriter.newLine(); bufferedWriter.write("dog"); bufferedWriter.newLine(); bufferedWriter.flush(); assertArrayEquals("apple".getBytes(), lineReadBucket.next()); assertArrayEquals("banana".getBytes(), lineReadBucket.next()); assertArrayEquals("car".getBytes(), lineReadBucket.next()); assertArrayEquals("dog".getBytes(), lineReadBucket.next()); }
@Test (expected = CertificateException.class) public void throwsExceptionWhenCertificateIsNullInCheckServerTrusted() throws CertificateException { x509TrustManager.checkServerTrusted(null, null); }
@Test public void testHasTextOk() { when(element.text()).thenReturn("There is a 5% increase"); elementAssert.hasText("There is a 5% increase"); }
@Test public void produceLinkLocalIp_notSiteLocal_ipv6() throws Exception { nicWithAddress(Inet6Address.getByName("2001:db8::c001")); assertThat(platform.produceLinkLocalIp()) .isNull(); }
@Test(expected = UnsupportedOperationException.class) public void subscribeNotSupported() { Result<Object> result = resultFactory.just(new Object()); result.subscribe(null, null); }
@Test void evaluateClassMethods() throws XWikiVelocityException { this.engine.initialize(new Properties()); Context context = new XWikiVelocityContext(); context.put("var", new TestClass()); assertEvaluate("org.xwiki.velocity.internal.DefaultVelocityEngineTest$TestClass name", "$var.class.getName() $var.getName()", context); }
@Test public void testIgnoreExtraServerComponentsStartupFailures() throws Exception { ServerConfiguration serverConf = new ServerConfiguration() .setAutoRecoveryDaemonEnabled(false) .setHttpServerEnabled(false) .setExtraServerComponents(new String[] { "bad-server-component"}) .setIgnoreExtraServerComponentsStartupFailures(true); BookieConfiguration conf = new BookieConfiguration(serverConf); BookieServer mockServer = PowerMockito.mock(BookieServer.class); whenNew(BookieServer.class) .withArguments(any(ServerConfiguration.class), any(StatsLogger.class), any(Supplier.class)) .thenReturn(mockServer); BookieSocketAddress bookieAddress = new BookieSocketAddress("127.0.0.1", 1281); when(mockServer.getLocalAddress()).thenReturn(bookieAddress); LifecycleComponentStack stack = buildBookieServer(conf); assertEquals(2, stack.getNumComponents()); stack.start(); verify(mockServer, times(1)).start(); stack.stop(); stack.close(); verify(mockServer, times(1)).shutdown(); }
@Test public void hasPosition() { Position pos = new Position(123, 234, 7); DirectionPath path = new DirectionPath(pos); assertEquals(pos, path.getCurrentPosition()); }
@Test public void requiresThatLabelsContainOneCharacter() { assertThrows(TopicSyntaxException.class, () -> Topic.parse("foo/bar/{}")); }
@Test public void test23() throws Exception { UnivariatePolynomial<BigInteger> a = UnivariatePolynomial.create(0, 14, 50, 11233219232222L, 108, 130, 70); UnivariatePolynomial<BigInteger> b = UnivariatePolynomial.create(63, 92, 143, 1245222, 146, 120, 90); UnivariatePolynomial<BigInteger> gcd1 = UnivariatePolynomial.create(1, 2, 3, 4, 5, 4, 3, 2, 1, -1, -2, -3, -4, -5, -4, -3, -2, -1, 999); UnivariatePolynomial<BigInteger> gcd2 = UnivariatePolynomial.create(999999L, 123L, 123L, 342425L, 312L, -12312432423L, 13212123123123L, -123124342345L); UnivariatePolynomial<BigInteger> gcd3 = UnivariatePolynomial.create(991999L, 123L, 123L, 342425L, 312L, -12312432423L, 13212123123123L, 123124342345L); UnivariatePolynomial<BigInteger> gcd4 = UnivariatePolynomial.create(Long.MAX_VALUE, Long.MAX_VALUE - 1, Long.MAX_VALUE - 2, Long.MAX_VALUE - 3, Long.MAX_VALUE - 4, Long.MAX_VALUE - 5); UnivariatePolynomial<BigInteger> gcd = gcd1.multiply(gcd2).multiply(gcd3).multiply(gcd4); a = a.multiply(gcd); b = b.multiply(gcd); UnivariatePolynomial<BigInteger> gcdActual = PseudoPRS(a, b).gcd(); assertGCD(a, b, gcdActual); APolynomialRemainderSequence<UnivariatePolynomial<BigInteger>> prs = SubresultantPRS(a, b); assertPolynomialRemainders(a, b, prs); UnivariatePolynomial<BigInteger> gcdSubresultant = prs.gcd(); assertEquals(gcdActual.degree, gcdSubresultant.degree); UnivariatePolynomial<BigInteger> gcdModular = ModularGCD(a, b); assertEquals(gcdActual.degree, gcdModular.degree); System.out.println(gcdActual.normMax().bitLength()); }
@Test public void setAngle() throws IOException { Servo servo = new Servo(mPwm); servo.setAngleRange(0, 180); servo.setAngle(90); assertEquals(90, servo.getAngle(), EPSILON); }
@Test void testBitSetOfImmutableIntList() { ImmutableIntList list = ImmutableIntList.of(); assertThat(BitSets.of(list), equalTo(new BitSet())); list = ImmutableIntList.of(2, 70, 5, 0); assertThat(BitSets.of(list), equalTo(BitSets.of(0, 2, 5, 70))); }
@Test public void testSnapshotSkipsNonCdcEnabledTable() throws Exception { CassandraConnectorContext context = generateTaskContext(); SnapshotProcessor snapshotProcessor = Mockito.spy(new SnapshotProcessor(context)); when(snapshotProcessor.isRunning()).thenReturn(true); int tableSize = 5; context.getCassandraClient().execute("CREATE TABLE IF NOT EXISTS " + keyspaceTable("non_cdc_table") + " (a int, b text, PRIMARY KEY(a)) WITH cdc = false;"); context.getSchemaHolder().refreshSchemas(); for (int i = 0; i < tableSize; i++) { context.getCassandraClient().execute("INSERT INTO " + keyspaceTable("non_cdc_table") + "(a, b) VALUES (?, ?)", i, String.valueOf(i)); } ChangeEventQueue<Event> queue = context.getQueue(); assertEquals(queue.totalCapacity(), queue.remainingCapacity()); snapshotProcessor.process(); assertEquals(queue.totalCapacity(), queue.remainingCapacity()); deleteTestKeyspaceTables(); deleteTestOffsets(context); context.cleanUp(); }
@Test public void testPerformStartOperation() throws IOException { Task responseTask = new Task(); responseTask.setId("12345"); responseTask.setState("QUEUED"); responseTask.setQueuedTime(Date.from(Instant.now())); ObjectMapper mapper = new ObjectMapper(); String serializedTask = mapper.writeValueAsString(responseTask); setupMocks(serializedTask, HttpStatus.SC_CREATED); VmApi vmApi = new VmRestApi(restClient); Task task = vmApi.performStartOperation("foo"); assertEquals(task, responseTask); }
@Test public void testEmptyArray() { @SuppressWarnings("unchecked") DynamicArray<Uint> array = DynamicArray.empty("uint"); assertThat( TypeEncoder.encodeDynamicArray(array), is("0000000000000000000000000000000000000000000000000000000000000000") ); }
@Test public void testEagerlyLoadOutsideUoWFails() { DummyDomainObject parent = new DummyDomainObject(); ForeignKeyListHolder<DummyDomainObject, DummyDomainObject> h = new ForeignKeyListHolder<DummyDomainObject, DummyDomainObject>(parent, null, null, null); parent.setId(1l); parent.getChanged().clear(); try { h.get(); Assert.fail(); } catch (RuntimeException e) { Assert.assertEquals("The UoW is currently closed", e.getMessage()); } }
@Test public void testOriginalCmdForm() throws Exception { String[] cliArgs = {"in_dir", "false"}; expect(cli.hasOption("t")).andReturn(false).once(); expect(shellState.getTableName()).andReturn("tablename").once(); expect(cli.getArgs()).andReturn(cliArgs).atLeastOnce(); expect(shellState.getAccumuloClient()).andReturn(client).atLeastOnce(); expect(client.tableOperations()).andReturn(tableOperations); shellState.checkTableState(); expectLastCall().once(); expect(tableOperations.importDirectory("in_dir")).andReturn(bulkImport).once(); expect(bulkImport.to("tablename")).andReturn(bulkImport).once(); expect(bulkImport.tableTime(false)).andReturn(bulkImport).once(); bulkImport.load(); expectLastCall().once(); replay(client, cli, shellState, tableOperations, bulkImport); cmd.execute("importdirectory in_dir false", cli, shellState); }
@Test public void send() throws Exception { boolean success = EmailUtil.send("favorisites用户", "1203948298@qq.com", "123456是您的favorisites验证码", "<div style=\"text-align: center;color:dodgerblue;\">欢迎注册使用favoristes， 您的验证码是123456</div>"); System.out.println(success); }
@Test(expected = IllegalArgumentException.class) public void negativeLease() { LeaseRequestResult.leaseGranted(-1L); }
@Test public void shouldReturnOKIfNodeCouldBeFilled() { WebElement element = mock(WebElement.class); given(webSiteConnector.getElement(node)).willReturn(element); assertTrue(f.executeAction(connectors).isSuccess()); verify(element).sendKeys(f.getValue()); }
@Test public void syncMarkets_sync_complete() { when(splashPreference.isMarketSynced()).thenReturn(FALSE); presenter.syncMarkets(); verify(syncMarket).execute(argumentCaptorBoolean.capture()); argumentCaptorBoolean.getValue().onComplete(); verify(view).onSyncMarketSuccess(); }
@Test public void getSelectedProtocol_alpn() throws Exception { when(platform.getTlsExtensionType()).thenReturn(TlsExtensionType.ALPN_AND_NPN); AndroidNegotiator negotiator = new AndroidNegotiator(platform); FakeAndroidSslSocket androidSock = new FakeAndroidSslSocketAlpn(); String actual = negotiator.getSelectedProtocol(androidSock); assertEquals("h2", actual); }
@Test public void testXSDSelector() { final ClassType studentType = provider.getClassType("Student"); final SemanticSelector selector = generateXSDSelectorMap(); final Map<Type, SelectorQueryPlan> queryPlan = defaultSelectorQueryEngine.assembleQueryPlan(selector); assertNotNull(queryPlan); SelectorQueryPlan plan = queryPlan.get(studentType); assertFalse("should be false", plan.getIncludeFields().isEmpty()); assertTrue("should be true", plan.getExcludeFields().isEmpty()); assertTrue("should be true", plan.getChildQueryPlans().isEmpty()); }
@Test(expected = ArithmeticException.class) public void modulusWithZeroDivisorShouldRaiseArithmeticException() { modulus(2, 0); }
@Test void validate() { EntityValidator<TestEntity> validator = new EntityValidator<>(TestEntity.class); TestEntity entity = new TestEntity(); entity.intField = 3; validator.validate(entity); }
@Test(expected = NullPointerException.class) public void testMetricDataCantBeNull() { managerUnderTest.detect(null); }
@Test public void whenVehicleDependentInternalRouteStateIsNotSet_itMustBeSetCorrectly() { VehicleImpl vehicle = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance("loc")).build(); VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).build(); VehicleRoute route = getRoute(vehicle); StateManager stateManager = new StateManager(vrpMock); StateId id = InternalStates.COSTS; Double costs = stateManager.getRouteState(route, vehicle, id, Double.class); assertTrue(costs == null); }
@Test public void stringRepresentationContainsExpected() { final JsonValueFieldDefinition<JsonArray> underTest = JsonValueFieldDefinition.newInstance(KNOWN_JSON_POINTER, JsonArray.class, JsonValue::isArray, JsonValue::asArray, knownFieldMarkers); assertThat(underTest.toString()) .contains("pointer") .contains("valueType") .contains("JsonArray") .contains("checkJavaTypeFunction") .contains("mappingFunction") .contains("markers"); }
@Test public void testDecodingFileWithLimit() throws Exception { final ReadableByteChannel channel = new ReadableByteChannelMock( new String[] {"stuff; more stuff; ", "a lot more stuff!"}, StandardCharsets.US_ASCII); final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII); final BasicHttpTransportMetrics metrics = new BasicHttpTransportMetrics(); final IdentityDecoder decoder = new IdentityDecoder(channel, inbuf, metrics); final int i = inbuf.fill(channel); Assert.assertEquals(19, i); createTempFile(); final RandomAccessFile testfile = new RandomAccessFile(this.tmpfile, "rw"); try { final FileChannel fchannel = testfile.getChannel(); long pos = 0; long bytesRead = decoder.transfer(fchannel, pos, 1); Assert.assertEquals(1, bytesRead); Assert.assertFalse(decoder.isCompleted()); Assert.assertEquals(0, metrics.getBytesTransferred()); pos += bytesRead; bytesRead = decoder.transfer(fchannel, pos, 2); Assert.assertEquals(2, bytesRead); Assert.assertFalse(decoder.isCompleted()); Assert.assertEquals(0, metrics.getBytesTransferred()); pos += bytesRead; bytesRead = decoder.transfer(fchannel, pos, 17); Assert.assertEquals(16, bytesRead); Assert.assertFalse(decoder.isCompleted()); Assert.assertEquals(0, metrics.getBytesTransferred()); pos += bytesRead; bytesRead = decoder.transfer(fchannel, pos, 1); Assert.assertEquals(1, bytesRead); Assert.assertFalse(decoder.isCompleted()); Assert.assertEquals(1, metrics.getBytesTransferred()); pos += bytesRead; bytesRead = decoder.transfer(fchannel, pos, 2); Assert.assertEquals(2, bytesRead); Assert.assertFalse(decoder.isCompleted()); Assert.assertEquals(3, metrics.getBytesTransferred()); pos += bytesRead; bytesRead = decoder.transfer(fchannel, pos, 15); Assert.assertEquals(14, bytesRead); Assert.assertFalse(decoder.isCompleted()); Assert.assertEquals(17, metrics.getBytesTransferred()); pos += bytesRead; bytesRead = decoder.transfer(fchannel, pos, 1); Assert.assertEquals(-1, bytesRead); Assert.assertTrue(decoder.isCompleted()); Assert.assertEquals(17, metrics.getBytesTransferred()); } finally { testfile.close(); } Assert.assertEquals("stuff; more stuff; a lot more stuff!", CodecTestUtils.readFromFile(this.tmpfile)); }
@Test public void testEquals() { assertFalse(getTestObject().equals(null)); assertFalse(getTestObject().equals("DummyString")); assertTrue(getTestObject().equals(getTestObject())); DigitalService sameObject = getTestObject(); assertTrue(sameObject.equals(sameObject)); DigitalService differentObject = getTestObject(); differentObject.setDescription("Different"); assertFalse(getTestObject().equals(differentObject)); }
@Test public void testCheckStringOneZero() throws Exception { thrown.expect(stringLengthException(0, 0, 1)); checkString(" ", 0); }
@Test public void testThisEntry() throws Exception { Collection<ACITuple> tuples = getTuples( UserClass.THIS_ENTRY ); AciContext aciContext = new AciContext( null, null ); aciContext.setAciTuples( tuples ); aciContext.setUserDn( USER_NAME ); aciContext.setAuthenticationLevel( AuthenticationLevel.NONE ); aciContext.setEntryDn( USER_NAME ); assertEquals( 1, filter.filter( aciContext, OperationScope.ENTRY, null ).size() ); aciContext = new AciContext( null, null ); aciContext.setAciTuples( tuples ); aciContext.setUserDn( USER_NAME ); aciContext.setAuthenticationLevel( AuthenticationLevel.NONE ); aciContext.setEntryDn( new Dn( schemaManager, "ou=unrelated" ) ); assertEquals( 0, filter.filter( aciContext, OperationScope.ENTRY, null ).size() ); }
@Ignore @Test(timeout = TIMEOUT) public void test07() throws Exception { int result = new Solution().solution(0, Integer.MAX_VALUE, 1); assertEquals(0, result); }
@Test(expected = IllegalArgumentException.class) public void testIndexForbidden() { tested = new DeleteCanvasControlPointCommand(edge, 3); tested.allow(canvasHandler); }
@Test public void connectCustomerToVpnBinding() { doNothing().when(MOCK_aaiResourcesClient).connect(isA(AAIResourceUri.class), isA(AAIResourceUri.class)); aaiVpnBindingResources.connectCustomerToVpnBinding("testCustId", "testVpnId"); verify(MOCK_aaiResourcesClient, times(1)).connect(isA(AAIResourceUri.class), isA(AAIResourceUri.class)); }
@Test public void testEquals() { int colNum = schema.size(); LazyTuple t1 = new LazyTuple(schema, new byte[colNum][], -1); LazyTuple t2 = new LazyTuple(schema, new byte[colNum][], -1); t1.put(0, DatumFactory.createInt4(1)); t1.put(1, DatumFactory.createInt4(2)); t1.put(3, DatumFactory.createInt4(2)); t2.put(0, DatumFactory.createInt4(1)); t2.put(1, DatumFactory.createInt4(2)); t2.put(3, DatumFactory.createInt4(2)); assertEquals(t1, t2); Tuple t3 = new VTuple(colNum); t3.put(0, DatumFactory.createInt4(1)); t3.put(1, DatumFactory.createInt4(2)); t3.put(3, DatumFactory.createInt4(2)); assertEquals(t1, t3); assertEquals(t2, t3); LazyTuple t4 = new LazyTuple(schema, new byte[colNum][], -1); assertNotSame(t1, t4); }
@Test public void testEquals() throws Exception { double lat = 34.2; double lon = -119.2; Location a = new Location(lat, lon); Location b = new Location(lat, lon); assertEquals("equality: latitude", b.latitude, a.latitude, 0); assertEquals("equality: longitude", b.longitude, a.longitude, 0); assertEquals("equality", a, a); assertEquals("equality", a, b); }
@Test public void testExtension() { when(mockFile.getName()).thenReturn("bla.pdf"); assertTrue(victim.isValid(mockFile, null)); }
@Test void fillText() throws IOException { Path outP = Paths.get("target/Canvas-fillText.ofd"); try (OFDDoc ofdDoc = new OFDDoc(outP)) { VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout()); Canvas canvas = new Canvas(200d, 200d); canvas.setPosition(Position.Absolute) .setX(5d).setY(45d) .setBorder(1d); canvas.setDrawer(ctx -> { FontSetting fontSetting = new FontSetting(5, FontSet.get(FontName.NotoSerif)) .setCharDirection(180) .setReadDirection(90); ctx.setFont(fontSetting); ctx.fillText("你好 Hello World!", 10, 50); }); vPage.add(canvas); ofdDoc.addVPage(vPage); } System.out.println("生成文档位置：" + outP.toAbsolutePath().toString()); }
@Test public void blockInTheFutureLimit() { int validPeriod = 540; BlockTimeStampValidationRule validationRule = new BlockTimeStampValidationRule(validPeriod); BlockHeader header = Mockito.mock(BlockHeader.class); Block block = Mockito.mock(Block.class); Mockito.when(block.getHeader()).thenReturn(header); Mockito.when(header.getTimestamp()) .thenReturn((System.currentTimeMillis() / 1000) + validPeriod); Assert.assertTrue(validationRule.isValid(header)); }
@Test public void testStream() { InputStream mockIs = mock(InputStream.class); assertSame(mockIs, IdentityInputStreamMarshaller.of().stream(mockIs)); }
@Test public void shouldValidateTheSHA1WithRSASignature() throws Exception { KeyFactory keyFactory = KeyFactory.getInstance("RSA"); KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA"); KeyPair pair = keyGen.generateKeyPair(); EncodedKeySpec encoded = new X509EncodedKeySpec(pair.getPublic().getEncoded()); PublicKey encodedPublic = keyFactory.generatePublic(encoded); String encodePublicBase64 = Base64.encodeToString(encodedPublic.getEncoded(), Base64.DEFAULT); Signature sig = Signature.getInstance("SHA1WithRSA"); sig.initSign(pair.getPrivate()); String data = "some sample data"; sig.update(data.getBytes()); String signature = Base64.encodeToString(sig.sign(), Base64.DEFAULT); SignatureValidator validator = new DefaultSignatureValidator(encodePublicBase64); assertThat(validator.validate(data, signature)).isTrue(); assertThat(validator.validate(data+"extraData", signature)).isFalse(); }
@Test public void utf8() { ConfigDef.Validator validator = new ValidCharset(); validator.ensureValid("testing", "utf8"); }
@Test public void shouldThrowExceptionOnNullMapConfiguration() { try { GraphFactory.open((Map) null); fail("Should have thrown an exception since configuration is null"); } catch (Exception ex) { final Exception expected = Graph.Exceptions.argumentCanNotBeNull("configuration"); assertEquals(expected.getClass(), ex.getClass()); assertEquals(expected.getMessage(), ex.getMessage()); } }
@Test public void testSetUpdateTime() { final double time = 10; final File instance = createFile(); assertEquals(0, instance.getLastUpdateTime()); assertTrue(instance.setUpdateTime(time)); assertEquals(time, instance.getLastUpdateTime()); }
@Test public void testCpGenco () { assertNotNull(genco, "created something"); assertEquals(genco.getUsername(), "Test", "correct name"); assertEquals(4.0, genco.getPriceInterval(), 1e-6, "correct price interval"); }
@Test(expected = IllegalArgumentException.class) public void testArgmaxException1() throws Exception { ArrayMath.argmax(null); }
@Test public void testCompareTo() throws Exception { assertEquals(0, new DeliveryBucketImpl("D1", "S001").compareTo(new DeliveryBucketImpl("D1", "S001"))); assertTrue(0 > new DeliveryBucketImpl("D1", "S001").compareTo(new DeliveryBucketImpl("D2", "S001"))); assertTrue(0 < new DeliveryBucketImpl("D2", "S001").compareTo(new DeliveryBucketImpl("D1", "S001"))); assertFalse(0 == new DeliveryBucketImpl("D1", "S002").compareTo(new DeliveryBucketImpl("D1", "S001"))); assertFalse(0 == new DeliveryBucketImpl("D1", "S001").compareTo(new DeliveryBucketImpl("D1", "S002"))); assertTrue(0 > new DeliveryBucketImpl("D1", "S001").compareTo(new DeliveryBucketImpl("D2", "S002"))); assertTrue(0 < new DeliveryBucketImpl("D1", "S002").compareTo(new DeliveryBucketImpl("D2", "S001"))); assertTrue(0 > new DeliveryBucketImpl("D2", "S001").compareTo(new DeliveryBucketImpl("D1", "S002"))); assertTrue(0 < new DeliveryBucketImpl("D2", "S002").compareTo(new DeliveryBucketImpl("D1", "S001"))); assertTrue(0 == new DeliveryBucketImpl("D1", "S001", "Q1").compareTo(new DeliveryBucketImpl("D1", "S001", "Q1"))); assertTrue(0 > new DeliveryBucketImpl("D1", "S001").compareTo(new DeliveryBucketImpl("D1", "S001", "Q1"))); assertTrue(0 < new DeliveryBucketImpl("D1", "S001", "Q1").compareTo(new DeliveryBucketImpl("D1", "S001"))); final SortedMap<DeliveryBucket, Object> buckets = new TreeMap<>(); buckets.put(new DeliveryBucketImpl("D1", "S001"), new Object()); buckets.put(new DeliveryBucketImpl("D2", "S001"), new Object()); buckets.put(new DeliveryBucketImpl("D3", "S001"), new Object()); buckets.put(new DeliveryBucketImpl("D3", "S001", "Q1"), new Object()); buckets.put(new DeliveryBucketImpl("D4", "S001"), new Object()); buckets.put(new DeliveryBucketImpl("D5", "S001"), new Object()); buckets.put(new DeliveryBucketImpl("D1", "S002"), new Object()); buckets.put(new DeliveryBucketImpl("D2", "S002"), new Object()); buckets.put(new DeliveryBucketImpl("D3", "S002", "Q1"), new Object()); buckets.put(new DeliveryBucketImpl("D3", "S002", "Q2"), new Object()); buckets.put(new DeliveryBucketImpl("D4", "S002"), new Object()); buckets.put(new DeliveryBucketImpl("D5", "S002"), new Object()); final List<String> order = new ArrayList<>(Arrays.asList( "S001_D1_", "S001_D2_", "S001_D3_", "S001_D3_Q1", "S001_D4_", "S001_D5_", "S002_D1_", "S002_D2_", "S002_D3_Q1", "S002_D3_Q2", "S002_D4_", "S002_D5_" )); for (final DeliveryBucket bucket : buckets.keySet()) { assertEquals(bucket.toString(), order.remove(0)); } assertTrue(order.isEmpty()); }
@Test public void testResolveParameterizedClassClassClassint01() throws Exception { try { GenericsUtil.resolveParameterizedClass(null, null, 0); fail("例外がスローされませんでした。"); } catch (IllegalArgumentException e) { assertEquals("Argument 'genericsClass' (" + Class.class.getName() + ") is null", e.getMessage()); assertEquals(IllegalArgumentException.class.getName(), e.getClass() .getName()); } }
@Test public void test() { underTest.setSourceSdlResource("sourceSdlResource"); underTest.setTargetIntrospectionFile("targetIntrospectionFile"); underTest.execute(); verify(generator).generate("sourceSdlResource", "targetIntrospectionFile"); }
@Test public void testInit() throws Exception { presenter.init(); verify(view, times(1)).init(presenter); verify(view, times(0)).showStatusPanel(anyBoolean(), anyBoolean(), anyBoolean()); verify(view, times(0)).showSizePanelIcon(any(IconType.class), anyString(), anyString(), anyBoolean()); verify(view, times(0)).showSizePanel(anyString(), anyString()); }
@Test void findAndTerminateOldConsentsByNewConsentId_malformedEncryptedId() { when(securityDataService.decryptId(MALFORMED_ENCRYPTED_CONSENT_ID)).thenReturn(Optional.empty()); CmsResponse<Boolean> response = consentServiceInternalEncrypted.findAndTerminateOldConsentsByNewConsentId(MALFORMED_ENCRYPTED_CONSENT_ID); assertTrue(response.hasError()); assertEquals(CmsError.TECHNICAL_ERROR, response.getError()); verify(consentService, never()).findAndTerminateOldConsentsByNewConsentId(any()); }
@Test public void testEqualsObject() { assertFalse(this.record.equals(null)); assertFalse(this.record.equals(new Object())); assertTrue(this.record.equals(this.record)); assertTrue(this.record.equals(new ShapeFileIndexRecord(this.offset, this.length, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset, this.length+2, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset, this.length-2, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset+2, this.length, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset+2, this.length+2, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset+2, this.length-2, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset-2, this.length, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset-2, this.length+2, false, -1))); assertFalse(this.record.equals(new ShapeFileIndexRecord(this.offset-2, this.length-2, false, -1))); }
@Test public void testUpCastRetainsSubClassValues() throws Exception { ProxyInvocationHandler handler = new ProxyInvocationHandler(Maps.newHashMap()); SubClass extended = handler.as(SubClass.class); extended.setExtended("subClassValue"); SubClass extended2 = extended.as(Simple.class).as(SubClass.class); assertEquals("subClassValue", extended2.getExtended()); }
@Test public void selectingAuthTypeNtlmReturnsNtlmIfNtlmRequested() { selectAuthMethod(CredentialsConfig.AuthType.NTLM); filter.filterAbstractHttpRequest(null, wsdlRequest); AuthScheme scheme = getSchemeFor(AuthPolicy.NTLM); assertThat(scheme, instanceOf(NTLMScheme.class)); }
@Test void parse() { assertThat(new KafkaURI("kafka-0.kafka").bootstrapURIs) .containsExactly("kafka-0.kafka:9092"); assertThat(new KafkaURI("kafka-0.kafka:9092").bootstrapURIs) .containsExactly("kafka-0.kafka:9092"); assertThat(new KafkaURI("kafka-0.kafka, kafka-1.kafka:9092").bootstrapURIs) .containsExactly("kafka-0.kafka:9092", "kafka-1.kafka:9092"); }
@Test public void serializeRoundOfTreeMap_resultJsonHasRound() throws IOException { treeMap.setRound(true); treeMapSerializer.serialize(treeMap, jgen, new DefaultSerializerProvider.Impl()); jgen.flush(); JsonNode actualObj = mapper.readTree(sw.toString()); Assertions.assertThat(actualObj.has("round")).isTrue(); Assertions.assertThat(actualObj.get("round").asBoolean()).isTrue(); }
@Test public void testReportJSException() throws Exception { getInstance().reportJSException(instance.getInstanceId(),"test","test exception"); }
@Test public void shouldSetValueAfterTextChange() { viewHolder.populate(viewModel, stockCard); viewHolder.etIssued.setText("30"); assertEquals("30", viewModel.getIssued()); assertEquals("70", viewModel.getStockExistence()); assertEquals("70", viewHolder.txStockExistence.getText().toString()); }
@Test public void oauth1Callback_multipleMatchingUsers() throws Exception { ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry(); ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret"); connectionFactoryLocator.addConnectionFactory(connectionFactory1); StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository(Arrays.asList("testuser1", "testuser2")); ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null); providerSignInController.afterPropertiesSet(); MockMvc mockMvc = standaloneSetup(providerSignInController).build(); mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")) .andExpect(redirectedUrl("/signin?error=multiple_users")); }
@Test public void testIncrease() { final Attribute attribute = new Attribute(); attribute.increase(2); assertEquals(2, attribute.get()); }
@Test public void testIsReservedParameter() { Assert.assertTrue(ReservedParameters.isReservedParameter(UIContext.class)); Assert.assertTrue(ReservedParameters.isReservedParameter(UIPrompt.class)); Assert.assertTrue(ReservedParameters.isReservedParameter(UIOutput.class)); Assert.assertTrue(ReservedParameters.isReservedParameter(UIProgressMonitor.class)); Assert.assertTrue(ReservedParameters.isReservedParameter(UIProvider.class)); Assert.assertTrue(ReservedParameters.isReservedParameter(UIExecutionContext.class)); Assert.assertTrue(ReservedParameters.isReservedParameter(UIDesktop.class)); Assert.assertFalse(ReservedParameters.isReservedParameter(String.class)); Assert.assertFalse(ReservedParameters.isReservedParameter(File.class)); }
@Test public void testCompressShouldCallClose() throws IOException { given(source.read((byte[]) Mockito.any())).willReturn(-1); underTest.compress(source); verify(gzipOutputStream).close(); }
@Test public void testAdaptTicker() throws IOException { InputStream is = BithumbAdaptersTest.class.getResourceAsStream( "/org/knowm/xchange/bithumb/dto/marketdata/example-ticker.json"); final BithumbTicker bithumbAccount = mapper.readValue(is, BithumbTicker.class); final Ticker ticker = BithumbAdapters.adaptTicker(bithumbAccount, CurrencyPair.BTC_KRW); assertThat(ticker.getOpen()).isEqualTo(new BigDecimal("151300")); assertThat(ticker.getLast()).isEqualTo(new BigDecimal("168900")); assertThat(ticker.getBid()).isEqualTo(new BigDecimal("168800")); assertThat(ticker.getAsk()).isEqualTo(new BigDecimal("168900")); assertThat(ticker.getHigh()).isEqualTo(new BigDecimal("171600")); assertThat(ticker.getLow()).isEqualTo(new BigDecimal("148600")); assertThat(ticker.getVwap()).isEqualTo(new BigDecimal("161373.9643")); assertThat(ticker.getVolume()).isEqualTo(new BigDecimal("294028.02849871")); assertThat(ticker.getTimestamp().getTime()).isEqualTo(1546440237614L); }
@Test public void testGetCurrentMenuItem() { MenuItem expected = getNavigationViewMenuItem(NavigationMenu.ACCESS_POINTS); MenuItem actual = fixture.getCurrentMenuItem(); assertEquals(expected, actual); assertTrue(actual.isCheckable()); assertTrue(actual.isChecked()); }
@Test public void pasitiveCheckForUpdates() { DefaultUpdateService victim = new DefaultUpdateService("{\"currentVersion\" : \"3.0.0\"}"); assertEquals("3.0.0", victim.getLatestVersion()); }
@Test(expected = HttpException.class) public void testBasicFailure() { mockReturnCode = 400; TestPojo testPojo = configServerApi.get("/path", TestPojo.class); assertEquals(testPojo.errorCode.intValue(), mockReturnCode); assertLogStringContainsGETForAHost(); }
@Test public void testIsEmpty() { Props p = new Props(); assertEquals(true, p.isEmpty()); p.put(PropType.PERFORMANCE, "foo", "foo"); assertEquals(false, p.isEmpty()); }
@Test public void shouldFindDispatchersByComponentAndLocation() throws Exception { final Dispatcher dispatcher1 = dispatcherCache.dispatcherFor(COMMAND_API, LOCAL); final Dispatcher dispatcher2 = dispatcherCache.dispatcherFor(COMMAND_API, LOCAL); assertThat(dispatcher1, is(notNullValue())); assertThat(dispatcher1, is(sameInstance(dispatcher2))); }
@Test public void resolveInlineRequestBodyWithRequired() { OpenAPI openAPI = TestUtils.parseSpec("src/test/resources/3_0/inline_model_resolver.yaml"); new InlineModelResolver().flatten(openAPI); RequestBody requestBodyReference = openAPI.getPaths().get("/resolve_inline_request_body_with_required").getPost().getRequestBody(); assertTrue(requestBodyReference.getRequired()); RequestBody referencedRequestBody = ModelUtils.getReferencedRequestBody(openAPI, requestBodyReference); assertTrue(referencedRequestBody.getRequired()); }
@Test public void testNullDsrcPosition3D() { DsrcPosition3D input = new DsrcPosition3D(); OdePosition3D result = Position3DBuilder.odePosition3D(input); assertNull(result.getLatitude()); assertNull(result.getLongitude()); assertNull(result.getElevation()); }
@Test public void testSetRouterId() throws Exception { ospfArea.setRouterId(Ip4Address.valueOf("1.1.1.1")); assertThat(ospfArea.routerId(), is(Ip4Address.valueOf("1.1.1.1"))); }
@Test public void testCheckNotNullWithNullMessage() { String message = null; expectedException.expect(BadRequestException.class); expectedException.expectMessage(Matchers.is("null")); WebPreconditions.checkNotNull(nullReference, message); }
@Test public void shouldExtractLocalProductionNumberAsRecordId() { picaDecoder.process(FIELD_107F_0_ID); verify(receiver).startRecord(RECORD_ID); }
@Test public void testConstruct() { gaugeInterceptor.onConstruct(enhancedInstance, null); final MeterService service = ServiceManager.INSTANCE.findService(MeterService.class); final Map<MeterId, MeterTransformer> meterMap = (Map<MeterId, MeterTransformer>) Whitebox.getInternalState(service, "meterMap"); Assert.assertEquals(1, meterMap.size()); final Object field = meterMap.values().iterator().next(); Assert.assertNotNull(field); Assert.assertTrue(field instanceof GaugeTransformer); final GaugeTransformer gaugeTransformer = (GaugeTransformer) field; Assert.assertNotNull(gaugeTransformer.getId()); Assert.assertEquals("test", gaugeTransformer.getId().getName()); Assert.assertEquals(MeterType.GAUGE, gaugeTransformer.getId().getType()); Assert.assertEquals(Arrays.asList(new MeterTag("k1", "v1")), gaugeTransformer.getId().getTags()); }
@Test public void testPartialGlobMismatch() { SamplingRule rule = new SamplingRule() .withAttributes(null) .withHost("*") .withServiceName("*.foo.*") .withHTTPMethod("*") .withResourceARN("*") .withURLPath("/bar/*") .withServiceType("AWS::EC2::Instance"); SamplingRequest req = new SamplingRequest( "role-arn", "arn:aws:service:us-east-1:111111111111:resource", "www.bar.com", "192.168.1.1", "GET", "/foo/baz", "AWS::EC2::Instance", null ); Matchers m = new Matchers(rule); Assert.assertFalse(m.match(req)); }
@Test public void should_Process_Ok() throws Exception { DoubleFieldTransformator doubleFieldTransformator = new DoubleFieldTransformator(); RawDataGen rd = RawDataGen.builder().messageSend("1548").project("project").type("type").build(); ObjectMapper obj = new ObjectMapper(); String value = obj.writeValueAsString(rd); ObjectNode jsonValue = JSONUtils.getInstance().parseObj(value); doubleFieldTransformator.apply(null, ParameterTransformation.builder() .keyField("messageSend") .build(), jsonValue); assertThat(jsonValue.path("messageSend_double").asDouble()).isEqualTo(new Double(1548)); assertThat(jsonValue.path("messageSend").asText()).isEqualTo(""); }
@Test public void testMatchDelegatedTrustAssertionInvalidAction() { Assertion assertion = new Assertion(); assertion.setAction("READ"); assertion.setEffect(AssertionEffect.ALLOW); assertion.setResource("domain:*"); assertion.setRole("domain:role.Role"); assertFalse(zms.matchDelegatedTrustAssertion(assertion, null, null, null)); }
@Test public void testUpdateTableWhenCacheDisabled() { when(hiveConf.getBoolean(AWS_GLUE_TABLE_CACHE_ENABLE, false)).thenReturn(false); TableInput tableInput = new TableInput(); AWSGlueMetastoreCacheDecorator cacheDecorator = new AWSGlueMetastoreCacheDecorator(hiveConf, glueMetastore); doNothing().when(glueMetastore).updateTable(TABLE_NAME, tableInput); cacheDecorator.updateTable(TABLE_NAME, tableInput); assertNull(cacheDecorator.tableCache); verify(glueMetastore, times(1)).updateTable(TABLE_NAME, tableInput); }
@Test public void testSerialize() { MatchEntryBuilder builder = prepareMplsLabelMatchEntry(168535); ByteBuf buffer = PooledByteBufAllocator.DEFAULT.buffer(); serializer.serialize(builder.build(), buffer); checkHeader(buffer, false); assertEquals("Wrong value", 168535, buffer.readUnsignedInt()); assertTrue("Unexpected data", buffer.readableBytes() == 0); }
@Test(groups = "1s") public void testBoundsForPow() throws Exception { int[] values = {-10,-3,-2,-1,0,1,2,3,10}; int n = values.length; for(int l1 = 0; l1 < n; l1++){ for(int u1 = l1; u1 < n; u1++){ for(int l2 = 4; l2 < n-1; l2++){ for(int u2 = l2; u2 < n-1; u2++){ Model model = new Model(); IntVar x = model.intVar(values[l1], values[u1]); IntVar y = model.intVar(values[l2], values[u2]); int[] bounds = VariableUtils.boundsForPow(x, y); System.out.printf("[%d,%d]\n", values[l1], values[u1]); System.out.printf("[%d,%d]\n", values[l2], values[u2]); System.out.printf("[%d,%d]\n\n", bounds[0], bounds[1]); IntVar z = model.intVar(bounds[0], bounds[1]); model.table(new IntVar[]{x, y, z}, generateTuples(vs -> vs[2] == MathUtils.pow(vs[0], vs[1]), true, x, y, z)).post(); model.getSolver().findAllSolutions(); Assert.assertEquals(model.getSolver().getSolutionCount(), listForPow(values[l1],values[u1],values[l2],values[u2]).size()); } } } } }
@Test public void testStatic() { PartitionSpec spec = new PartitionSpec("test", Collections.emptyList(), Interpreter.STATIC, "static", 0); assertEquals("static", spec.interpret("")); }
@Test void testEquals() { final ToLongNullable<String> copy = instance; assertTrue(instance.equals(copy)); assertFalse(instance.equals(null)); final ToLongNullable<String> another = new ToLongNullableImpl<>( instance.inner(), instance.isNullPredicate() ); final ToLongNullable<String> originalSame = new ToLongNullableImpl<>( instance.inner(), Objects::isNull ); final ToLongNullable<String> isNullSame = new ToLongNullableImpl<>( String::length, instance.isNullPredicate() ); assertTrue(instance.equals(another)); assertFalse(instance.equals(originalSame)); assertFalse(instance.equals(isNullSame)); }
@Test public void testMappedCollectionWrapperBinding_1() throws Exception { Map<String,List<String>> map = new LinkedHashMap<>( 2 ); map.put( "key1", Arrays.asList( "value11", "value12" )); map.put( "key2", Arrays.asList( "value2" )); map.put( "key3", null ); map.put( "key4", new ArrayList<String>( 0 )); map.put( null, Arrays.asList( "value4" )); MappedCollectionWrapper obj = new MappedCollectionWrapper( map ); StringWriter writer = new StringWriter(); ObjectMapper mapper = JSonBindingUtils.createObjectMapper(); mapper.writeValue( writer, obj ); String s = writer.toString(); Assert.assertEquals( "{\"key1\":[\"value11\",\"value12\"],\"key2\":[\"value2\"],\"key3\":[],\"key4\":[],\"\":[\"value4\"]}", s ); }
@SuppressWarnings("deprecation") @Test public void addGenericAndObserve() { GenericLifecycleObserver generic = mock(GenericLifecycleObserver.class); mRegistry.addObserver(generic); dispatchEvent(ON_CREATE); verify(generic).onStateChanged(mLifecycleOwner, ON_CREATE); reset(generic); dispatchEvent(ON_CREATE); verify(generic, never()).onStateChanged(mLifecycleOwner, ON_CREATE); }
@Test void constructor9() { final Supplier<MutableTuple9<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer>> constructor = MutableTuples.constructor(Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class); test(constructor.get()); }
@Test public void direct_dependencies_to_self_by_annotation() { JavaClasses javaClasses = importPackagesOf(getClass()); assertThat(javaClasses.get(OnClass.class).getDirectDependenciesToSelf()) .areAtLeastOne(annotationTypeDependency() .from(ClassWithAnnotationDependencies.class) .to(OnClass.class) .inLineNumber(0)); assertThat(javaClasses.get(OnField.class).getDirectDependenciesToSelf()) .areAtLeastOne(annotationTypeDependency() .from(ClassWithAnnotationDependencies.class) .to(OnField.class) .inLineNumber(0)); assertThat(javaClasses.get(OnMethod.class).getDirectDependenciesToSelf()) .areAtLeastOne(annotationTypeDependency() .from(ClassWithAnnotationDependencies.class) .to(OnMethod.class) .inLineNumber(0)); assertThat(javaClasses.get(OnConstructor.class).getDirectDependenciesToSelf()) .areAtLeastOne(annotationTypeDependency() .from(ClassWithAnnotationDependencies.class) .to(OnConstructor.class) .inLineNumber(0)); assertThat(javaClasses.get(WithType.class).getDirectDependenciesToSelf()) .areAtLeastOne(annotationMemberOfTypeDependency() .from(ClassWithAnnotationDependencies.class) .to(WithType.class) .inLineNumber(0)); assertThat(javaClasses.get(B.class).getDirectDependenciesToSelf()) .areAtLeastOne(annotationMemberOfTypeDependency() .from(ClassWithAnnotationDependencies.class) .to(B.class) .inLineNumber(0)); }
@Test public void inlineIncludes() throws ParserConfigurationException, WSSecurityException { SoapMessage msg = mock(SoapMessage.class); Collection<Attachment> attachmentList = new ArrayList<>(); attachmentList.add(createMockAttachment(DIG_REF_ID, DIG_BINARY_DATA)); attachmentList.add(createMockAttachment(SIG_REF_ID, SIG_BINARY_DATA)); when(msg.getAttachments()).thenReturn(attachmentList); Element signatureElem = createSignatureElementWithIncludes(DIG_REF_ID, SIG_REF_ID); CONNECTSignatureProcessor processor = new CONNECTSignatureProcessor(); processor.inlineSignatureAttachments(msg, signatureElem); assertDigitalValueIsInline(signatureElem, DIG_BASE64_DATA); assertSignatureValueIsInline(signatureElem, SIG_BASE64_DATA); }
@Test public void test() throws IOException { String input = "4 Neden önemli?"; TurkishMorphology analyzer = TurkishMorphology.createWithDefaults(); RuleBasedDisambiguator disambiguator = new RuleBasedDisambiguator(analyzer, Rules.fromResources()); ResultSentence resultSentence = disambiguator.disambiguate(input); System.out.println(resultSentence.allIgnoredCount()); for (AmbiguityAnalysis a : resultSentence.results) { a.getForTrainingOutput().forEach(System.out::println); } }
@Test public void testGetMetadataFileUri() { Process process = new Process(); process.setProcessBaseUri(URI.create("relative/path/no/ending/slash")); URI uri = ServiceManager.getProcessService().getMetadataFileUri(process); Assert.assertEquals(URI.create("relative/path/no/ending/slash/meta.xml"), uri); process.setProcessBaseUri(URI.create("relative/path/with/ending/slash/")); uri = ServiceManager.getProcessService().getMetadataFileUri(process); Assert.assertEquals(URI.create("relative/path/with/ending/slash/meta.xml"), uri); }
@Test public void testGetJMSXDeliveryCountWhenNotSet() throws JMSException { JmsMessageFacade facade = Mockito.mock(JmsMessageFacade.class); JmsMessage message = Mockito.mock(JmsMapMessage.class); Mockito.when(message.getFacade()).thenReturn(facade); assertEquals(Integer.valueOf(0), JmsMessagePropertyIntercepter.getProperty(message, JMSX_DELIVERY_COUNT)); Mockito.verify(facade).getDeliveryCount(); }
@Test public void testContextClick() { fluentElement.contextClick(); verify(mouse).contextClick(any()); }
@Test public void shouldConvert() { final LocalTime now = LocalTime.now(); final Date date = new Date(); final Calendar calendar = Calendar.getInstance(); assertEquals(now, dateReader.read(LocalTime.class, now)); assertEquals(date.toInstant().atZone(ZoneId.systemDefault()).toLocalTime(), dateReader.read(LocalTime.class, date)); assertEquals(calendar.toInstant().atZone(ZoneId.systemDefault()).toLocalTime(), dateReader.read(LocalTime.class, calendar)); assertEquals(date.toInstant().atZone(ZoneId.systemDefault()).toLocalTime(), dateReader.read(LocalTime.class, date.getTime())); }
@Test public void handleShouldThrowExceptionWhenRelatedProcessInstanceIsNotFound() { CloudProcessStartedEvent event = buildProcessStartedEvent(); given(processInstanceRepository.findById("200")).willReturn(Optional.empty()); expectedException.expect(QueryException.class); expectedException.expectMessage("Unable to find process instance with the given id: "); handler.handle(event); }
@Test(expected = IllegalArgumentException.class) public void testLengthEmpty() { DerUtils.decodeLength(ByteBuffer.allocate(0)); }
@Test public void guess4B_twoStereo_and_other() throws Exception { TemplateParameterContextProvider contextProvider = AudioUtils.createContext( new FFmpegAudioChannels[][]{ {FC}, {FL, FR, FC, LFE, SL, SR}, {FL, FR}, {FR, FL} }); AudioMapType audioMap = new AudioMapGuesser(contextProvider, EBU_R_123_4_B).guessAudioMap(); checkAudioMapSize(audioMap, 4); checkEBUTrack(audioMap, 0, 2, 1); checkEBUTrack(audioMap, 1, 2, 2); checkEBUTrack(audioMap, 2, 3, 2); checkEBUTrack(audioMap, 3, 3, 1); }
@Test public void shouldProvisionMultiEnvVariable() throws Exception { Container container_match = new ContainerBuilder().withName("maven").build(); when(podSpec.getContainers()).thenReturn(ImmutableList.of(container_match)); Secret secret = new SecretBuilder() .withData(ImmutableMap.of("foo", "random", "bar", "freedom")) .withMetadata( new ObjectMetaBuilder() .withName("test_secret") .withAnnotations( ImmutableMap.of( String.format(ANNOTATION_ENV_NAME_TEMPLATE, "foo"), "MY_FOO", String.format(ANNOTATION_ENV_NAME_TEMPLATE, "bar"), "MY_BAR", ANNOTATION_MOUNT_AS, "env", ANNOTATION_AUTOMOUNT, "true")) .withLabels(emptyMap()) .build()) .build(); when(secrets.get(any(LabelSelector.class))).thenReturn(singletonList(secret)); secretApplier.applySecret(environment, runtimeIdentity, secret); assertEquals(container_match.getEnv().size(), 2); EnvVar var = container_match.getEnv().get(0); assertEquals(var.getName(), "MY_FOO"); assertEquals(var.getValueFrom().getSecretKeyRef().getName(), "test_secret"); assertEquals(var.getValueFrom().getSecretKeyRef().getKey(), "foo"); EnvVar var2 = container_match.getEnv().get(1); assertEquals(var2.getName(), "MY_BAR"); assertEquals(var2.getValueFrom().getSecretKeyRef().getName(), "test_secret"); assertEquals(var2.getValueFrom().getSecretKeyRef().getKey(), "bar"); }
@Test public void safeNext() { int i = source.nextChar(); boolean ok = i == 'a' || die( "" + (char) i); i = source.nextChar(); ok = i == 'b' || die( "" + (char) i); i = source.nextChar(); ok = i == 'c' || die( "" + (char) i); try { i = source.nextChar(); die(); } catch ( RuntimeException aiobe ) { } }
@Test public void testGetId() { assertEquals(ID, representation.getId()); }
@Test public void parseCorrectMetadataXml() throws Exception { this.metadataProvider = new MetadataXmlProvider(MetadataUtils.getCorrectMetadataXml(), TemplateParameterContextCreator.getCurrentTmpDir()); assertNotNull(metadataProvider.getDpp()); assertNotNull(metadataProvider.getDpp().getEditorial()); assertNotNull(metadataProvider.getDpp().getTechnical()); assertNotNull(metadataProvider.getDpp().getTechnical().getAudio()); assertNotNull(metadataProvider.getDpp().getTechnical().getVideo()); }
@Test public void testCreateLoginContextNullAuthToken() throws Exception { context.checking(new Expectations() { { oneOf(configuration).getAppConfigurationEntry(REALM_NAME); } }); LoginContext loginContext = factory.createLoginContext(null, null); context.assertIsSatisfied(); assertNotNull(loginContext); Subject subject = loginContext.getSubject(); assertNull(subject); }
@Test public void testFindMinimumRangeValue() { CategoryDataset d1 = createCategoryDataset1(); Number min1 = DatasetUtilities.findMinimumRangeValue(d1); assertEquals(1.0, min1); XYDataset d2 = createXYDataset1(); Number min2 = DatasetUtilities.findMinimumRangeValue(d2); assertEquals(100.0, min2); }
@Test void allowPOSTWithCORS() { when(request.header("Origin")).thenReturn(Optional.of("localhost")); var controller = new EventController(List.of("*"), null); assertThat(controller.options(request).header("Access-Control-Allow-Methods")) .hasValueSatisfying(methods -> assertThat(methods).contains("POST")); }
@Test public void test02() throws Exception { pipeResource("02"); Solution.main(null); assertEquals(getResult("clu hlt io"), this.output.toString()); }
@Test void equals() { final Endpoint a1 = Endpoint.of("a"); final Endpoint a2 = Endpoint.of("a"); assertThat(a1).isNotEqualTo(new Object()); assertThat(a1).isEqualTo(a1); assertThat(a1).isEqualTo(a2); }
@Test public void testListEndpointOfMajorExceptSelf() { Set<NodeEndpoint> endpoints = new HashSet<>(); endpoints.add(new NodeEndpoint("A", "localhost", 2333)); endpoints.add(new NodeEndpoint("B", "localhost", 2334)); endpoints.add(new NodeEndpoint("C", "localhost", 2335)); NodeGroup group = new NodeGroup(endpoints, NodeId.of("A")); Assert.assertEquals(2, group.listEndpointOfMajorExceptSelf().size()); }
@Test public void statement() throws FormatterException { String input = "int x\n=42;"; List<Replacement> replacements = new SnippetFormatter() .format( SnippetKind.STATEMENTS, input, ImmutableList.of(Range.closedOpen(0, input.length())), 4, false); assertThat(replacements) .containsExactly(Replacement.create(5, 6, " "), Replacement.create(7, 7, " ")); }
@Test public void testGetZooKeeperClusterKey() { Configuration conf = HBaseConfiguration.create(); conf.set(HConstants.ZOOKEEPER_QUORUM, "\tlocalhost\n"); conf.set(HConstants.ZOOKEEPER_CLIENT_PORT, "3333"); conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, "hbase"); String clusterKey = ZKConfig.getZooKeeperClusterKey(conf, "test"); assertTrue(!clusterKey.contains("\t") && !clusterKey.contains("\n")); assertEquals("localhost:3333:hbase,test", clusterKey); }
@Test public void testTypeNameException() throws Exception { ListOp list = new ListOp(); list.setDataStore(TestHelper.createFactoryWithGetNamesException().createDataStore(null)); exception.expect(GeoToolsOpException.class); list.call(); }
@Test public void testMinimalRequirements() { MotechURLSecurityRule securityRule = new MotechURLSecurityRule(); securityRule.setPattern("pattern"); securityRule.setProtocol(HTTP); securityRule.setSupportedSchemes(Arrays.asList(USERNAME_PASSWORD)); securityRule.setMethodsRequired(Arrays.asList(ANY)); SecurityFilterChain filterChain = securityBuilder.buildSecurityChain(securityRule, GET); assertNotNull(filterChain); assertEquals(10, filterChain.getFilters().size()); }
@Test public void add_page_model_calls_page_model_manager() throws Exception { WidgetType mockType = Mockito.mock(WidgetType.class); when(mockType.hasParameter(Mockito.anyString())).thenReturn(true); when(widgetTypeManager.getWidgetType(Mockito.anyString())).thenReturn(mockType); PageModelRequest pageModelRequest = validPageModelRequest(); PageModelDto result = pageModelService.addPageModel(pageModelRequest); Mockito.verify(pageModelManager, Mockito.times(1)).addPageModel(Mockito.any(PageModel.class)); assertThat(result).isNotNull(); assertThat(result.getCode()).isEqualTo(pageModelRequest.getCode()); assertThat(result.getDescr()).isEqualTo(pageModelRequest.getDescr()); assertThat(result.getPluginCode()).isEqualTo(pageModelRequest.getPluginCode()); assertThat(result.getMainFrame()).isEqualTo(DEFAULT_MAIN_FRAME); assertThat(result.getTemplate()).isEqualTo(pageModelRequest.getTemplate()); }
@Test(expectedExceptions = { FHIROperationException.class }) public void testBulkImportUtilSourceBadFormatNull() throws IOException, FHIRException { FHIRRequestContext.set(new FHIRRequestContext("default")); BulkDataImportUtil.retrieveInputSource(loadTestFile("/testdata/import/import-demo-bad-format2.json")); }
@Test public void maxPreviewVersion() { SdkUpdaterConfigurable configurable = Mockito.mock(SdkUpdaterConfigurable.class); List<DetailsTreeNode> nodes = ImmutableList.of( new DetailsTreeNode(new PackageNodeModel(new UpdatablePackage(new FakePackage.FakeRemotePackage("foo;1.0.1-alpha2"))), null, configurable), new DetailsTreeNode(new PackageNodeModel(new UpdatablePackage(new FakePackage.FakeRemotePackage("foo;1.0.1-beta1"))), null, configurable), new DetailsTreeNode(new PackageNodeModel(new UpdatablePackage(new FakePackage.FakeRemotePackage("foo;1.0.0"))), null, configurable) ); MultiVersionTreeNode node = new MultiVersionTreeNode(nodes); node.cycleState(); assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(0).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.INSTALLED, nodes.get(1).getCurrentState()); assertEquals(PackageNodeModel.SelectedState.NOT_INSTALLED, nodes.get(2).getCurrentState()); }
@Test public void testIsEmpty() { Assert.assertTrue(StringUtils.isEmpty(null)); Assert.assertTrue(StringUtils.isEmpty("")); Assert.assertTrue(StringUtils.isEmpty(" ")); Assert.assertFalse(StringUtils.isEmpty("spark,hive,pigLi")); }
@Test public void givenValidEIP1559Transaction_whenEIP1559Finalized_thenReturnsTrue() { assertThat(eip1559.isValidFormat(TransactionFixture.EIP1559, FEE_MARKET_TRANSACTIONS)).isTrue(); }
@Test public void testReadKeyFromFile_LicenseFileHasMultipleKeysWithWhitespace() throws Exception { File tmpLicenseFile = File.createTempFile("license", "lic"); PrintWriter out = new PrintWriter(tmpLicenseFile); out.println("4 = this-is-a-license"); out.println("5 = this-is-another-license"); out.close(); assertEquals("this-is-a-license", licenseChecker .readKeyFromFile(tmpLicenseFile.toURI().toURL(), 4)); assertEquals("this-is-another-license", licenseChecker .readKeyFromFile(tmpLicenseFile.toURI().toURL(), 5)); tmpLicenseFile.delete(); }
@Test public void testTextToXML() throws JsonProcessingException { TextXmlMessage textXmlMessage = new TextXmlMessage(); textXmlMessage.setContent("content"); textXmlMessage.setFromUser("from user"); textXmlMessage.setToUser("to user"); textXmlMessage.setCreateTime(new Date()); String xml = QyXmlMessages.toXml(textXmlMessage); Assert.assertTrue(xml.contains("<ToUserName><![CDATA[to user]]></ToUserName>")); Assert.assertTrue(xml.contains("<FromUserName><![CDATA[from user]]>")); Assert.assertTrue(xml.contains("<MsgType><![CDATA[text]]></MsgType>")); Assert.assertTrue(xml.contains("<Content><![CDATA[content]]></Content>")); }
@Test public void trafficlight_green_set_display_block__others_are_none() { when(scanResult.getTrafficLight()).thenReturn(TrafficLight.GREEN.name()); Map<String, Object> map = builderToTest.build(scanResult); assertEquals(HIDE_LIGHT, map.get("styleRed")); assertEquals(HIDE_LIGHT, map.get("styleYellow")); assertEquals(SHOW_LIGHT, map.get("styleGreen")); }
@Test public void testGetRoleTokenTrustDomainWildCardGivenRole() { SignedDomain signedDomain = createSignedDomainWildCard("weather", "netops"); store.processDomain(signedDomain, false); signedDomain = createTenantSignedDomainWildCard("netops"); store.processDomain(signedDomain, false); Principal principal = SimplePrincipal.create("user_domain", "siteops_user_1", "v=U1;d=user_domain;n=siteops_user_1;s=signature", 0, null); ResourceContext context = createResourceContext(principal); RoleToken roleToken = zts.getRoleToken(context, "weather", "netops_superusers", null, null, null); com.yahoo.athenz.auth.token.RoleToken token = new com.yahoo.athenz.auth.token.RoleToken(roleToken.getToken()); assertEquals(token.getRoles().size(), 1); assertTrue(token.getRoles().contains("netops_superusers")); }
@Test public void a_line_with_function_test_is_recognized_and_returns_function_with_name_test() throws Exception { BashScriptModel bashScriptModel = builderToTest.build("function test {}"); assertThat(bashScriptModel).hasFunctions(1).hasFunction("test"); }
@Test public void testGetHostAddress() { Assert.assertNotEquals(null, NetUtils.getHostAddress()); Deencapsulation.setField(NetUtils.class, "hostAddress", null); Assert.assertNotEquals(null, NetUtils.getHostAddress()); }
@Test( expected = NotFoundException.class ) public void shouldHandleNoFoundPathsCorrectly() { long[] nodes = createMoreComplexGraph(); actions.findSinglePath( nodes[0], nodes[1], map( "max_depth", 2, "algorithm", "shortestPath", "relationships", map( "type", "to", "direction", "in" ), "single", false ) ); }
@Test public void testGetSerialIndex() { Day d = new Day(1, 1, 1900); assertEquals(2, d.getSerialIndex()); d = new Day(15, 4, 2000); assertEquals(36631, d.getSerialIndex()); }
@Test public void testIsNotArchive() { ClassLoader classLoader = getClass().getClassLoader(); File file1 = new File(classLoader.getResource("scripts/exit_0.py").getFile()); assertFalse(Utils.isArchive(file1.getAbsolutePath())); }
@Test public void unmarshal_nullValue_nullValue() throws Exception { Map<String, String[]> actual = objectUnderTest.unmarshal(null); assertNull(actual); }
@Test public void testMainClass() throws Exception { String[] args = { Password.PORTABLE_PASSWORD, TEXT }; Password.generatePassword(args); Password.generatePassword(null); Password.generatePassword(new String[0]); }
@Test public void testCompareToWhenItemOrderingNameIsLessThanObjectOrderingName() { final DecisionNavigatorItem item = new DecisionNavigatorItem("123", "Red", null, null, null); final Object object = new DecisionNavigatorItem("456", "Hat", null, null, null); final int result = item.compareTo(object); assertTrue(result > 0); }
@Test public void testUndoTaskAssignmentByTaskMap() { Map<Long, Long> taskMap = new HashMap<Long, Long>(); taskMap.put(documentDTO.getDocumentID(), user.getUserID()); entityManager.getTransaction().begin(); int result = taskAssignmentResourceFacadeImp.undoTaskAssignment(taskMap); entityManager.getTransaction().commit(); assertEquals(1,result); taskAssignment=null; }
@Test public void shouldNotBlockTransactionsForSmallBatch() throws Exception { long safeZone = 10; TransactionBatchCommitter committer = newBatchCommitter( safeZone ); TransactionChain chain = createTxChain( 3, 1, 1 ); committer.apply( chain.first, chain.last ); verify( kernelTransactions, never() ).blockNewTransactions(); verify( kernelTransactions, never() ).unblockNewTransactions(); }
@Test public void testCreateProcessWithStartEvent() { modelInstance = Bpmn.createProcess() .startEvent() .done(); assertThat(modelInstance.getModelElementsByType(eventType)) .hasSize(1); }
@Test void operationType() { RelationshipPost RelationshipPost = new RelationshipPost(metaResource, metaResourceField, relatedMetaResource); Assert.assertEquals(OperationType.POST, RelationshipPost.operationType()); }
@Test public void findATCKlassifikaatoridDetailandmedv1() throws XRoadServiceConsumptionException { String ATCKood = "A01AA01"; List<String> ATCKoodid = new ArrayList<String>(); ATCKoodid.add(ATCKood); List<ATCKlassifikaator> items = ravimiametXRoadServiceImpl.findATCKlassifikaatoridDetailandmed(ATCKoodid); Assert.assertNotNull(items); Assert.assertTrue(items.size() == 1); ATCKlassifikaator klassifikaator = items.get(0); Assert.assertTrue(ATCKood.equals(klassifikaator.getKood())); Assert.assertEquals("naatriumfluoriid", klassifikaator.getNimiEesti()); }
@Test public void rangeToHighlight_with_no_name_but_some_signature() { TreeMetaDataProvider metaDataProvider = new TreeMetaDataProvider(emptyList(), Arrays.asList( new TokenImpl(range(5, 1, 5, 10), "fun", Token.Type.KEYWORD), new TokenImpl(range(5, 11, 5, 15), "foo", Token.Type.OTHER), new TokenImpl(range(5, 17, 5, 18), "{", Token.Type.OTHER), new TokenImpl(range(5, 19, 5, 20), "}", Token.Type.OTHER))); TreeMetaData functionMetaData = metaDataProvider.metaData(range(5, 1, 5, 20)); TreeMetaData bodyMetaData = metaDataProvider.metaData(range(5, 17, 5, 20)); BlockTree body = new BlockTreeImpl(bodyMetaData, emptyList()); assertThat(new FunctionDeclarationTreeImpl(functionMetaData, emptyList(), false, null, null, emptyList(), body, emptyList()).rangeToHighlight()) .isEqualTo(range(5, 1, 5, 15)); }
@Test public void testStandardCase() throws IOException { List<RESULT> samples = new ArrayList<>(); samples.add(RESULT.EVENTS); samples.add(RESULT.EMPTY); samples.add(RESULT.EVENTS); try (TestEventStream eventStream = new TestEventStream(new CollectionObjectStream<>(samples))) { int eventCounter = 0; while (eventStream.read() != null) { eventCounter++; } Assert.assertEquals(2, eventCounter); } }
@Test public void testOCLArgumentQualification() throws IOException { Optional<ASTOCLArgumentQualification> result = parser.parse_StringOCLArgumentQualification("(a, b, c, foo)"); assertFalse(parser.hasErrors()); assertTrue(result.isPresent()); ASTOCLArgumentQualification ast = result.get(); String output = prettyPrinter.prettyprint(ast); result = parser.parse_StringOCLArgumentQualification(output); assertFalse(parser.hasErrors()); assertTrue(result.isPresent()); assertTrue(ast.deepEquals(result.get())); }
@Test public void testSplitWithCommaOrSemicolon() throws Exception { String[] s = StringUtils.splitWithCommaOrSemicolon(null); Assert.assertTrue(CommonUtils.isEmpty(s)); s = StringUtils.splitWithCommaOrSemicolon(""); Assert.assertTrue(CommonUtils.isEmpty(s)); s = StringUtils.splitWithCommaOrSemicolon("1"); Assert.assertNotNull(s); Assert.assertEquals(s.length, 1); s = StringUtils.splitWithCommaOrSemicolon("1,"); Assert.assertNotNull(s); Assert.assertEquals(s.length, 1); s = StringUtils.splitWithCommaOrSemicolon(" 1,"); Assert.assertNotNull(s); Assert.assertEquals(s.length, 1); s = StringUtils.splitWithCommaOrSemicolon(" 1,2"); Assert.assertNotNull(s); Assert.assertEquals(s.length, 2); s = StringUtils.splitWithCommaOrSemicolon(" 1;2"); Assert.assertNotNull(s); Assert.assertEquals(s.length, 2); }
@Test public final void testOperate() throws SirixException { AtomicValue item1 = new AtomicValue(3.0, Type.DOUBLE); AtomicValue item2 = new AtomicValue(2.0, Type.DOUBLE); AbstractAxis op1 = new LiteralExpr(holder.getXmlNodeReadTrx(), holder.getXmlNodeReadTrx().getItemList().addItem(item1)); AbstractAxis op2 = new LiteralExpr(holder.getXmlNodeReadTrx(), holder.getXmlNodeReadTrx().getItemList().addItem(item2)); AbstractObAxis axis = new MulOpAxis(holder.getXmlNodeReadTrx(), op1, op2); assertEquals(true, axis.hasNext()); axis.next(); assertThat(6.0, is(Double.parseDouble(holder.getXmlNodeReadTrx().getValue()))); assertEquals(holder.getXmlNodeReadTrx().keyForName("xs:double"), holder.getXmlNodeReadTrx().getTypeKey()); assertEquals(false, axis.hasNext()); }
@Test public void throwsExceptionWhenDelimiterIsNullAndHeadersAreSet() { PCollectionView<List<String>> header = testPipeline.apply(Create.of("header")).apply(View.asList()); assertThrows( "Column delimiter should be set if headers are present.", IllegalArgumentException.class, () -> DLPInspectText.newBuilder() .setProjectId(PROJECT_ID) .setBatchSizeBytes(BATCH_SIZE_SMALL) .setInspectTemplateName(TEMPLATE_NAME) .setHeaderColumns(header) .build()); testPipeline.run().waitUntilFinish(); }
@Test public void testGetDaysInMonth() { assertDays(DateHelper.getDaysInMonth(1, 2010), 31); assertDays(DateHelper.getDaysInMonth(2, 2010), 28); assertDays(DateHelper.getDaysInMonth(3, 2010), 31); assertDays(DateHelper.getDaysInMonth(4, 2010), 30); assertDays(DateHelper.getDaysInMonth(5, 2010), 31); assertDays(DateHelper.getDaysInMonth(6, 2010), 30); assertDays(DateHelper.getDaysInMonth(7, 2010), 31); assertDays(DateHelper.getDaysInMonth(8, 2010), 31); assertDays(DateHelper.getDaysInMonth(9, 2010), 30); assertDays(DateHelper.getDaysInMonth(10, 2010), 31); assertDays(DateHelper.getDaysInMonth(11, 2010), 30); assertDays(DateHelper.getDaysInMonth(12, 2010), 31); }
@Test void dateFromHeaderShouldUseCurrentCenturyWhenNone() throws Exception { String headers = "From: user <userdomain>\n" + "To: user1 <user1domain>, user2 <user2domain>\n" + "Cc: usercc <userccdomain>\n" + "Bcc: userbcc <userbccdomain>\n" + "Date: Wed, 17 May 17 14:18:52 +0300\n" + "Subject: test subject\n"; MetaDataWithContent testMail = MetaDataWithContent.builder() .uid(MessageUid.of(2)) .keywords(Keywords.strictFactory().from(Keyword.SEEN)) .size(headers.length()) .internalDate(INTERNAL_DATE) .content(new ByteArrayInputStream(headers.getBytes(StandardCharsets.UTF_8))) .attachments(ImmutableList.of()) .mailboxId(MAILBOX_ID) .messageId(new TestMessageId.Factory().generate()) .build(); MessageFullView testee = messageFullViewFactory.fromMetaDataWithContent(testMail).block(); assertThat(testee.getDate()) .isEqualTo(Instant.parse("2017-05-17T11:18:52.000Z")); }
@Test public void skipContextUser() throws Exception { parameters.put(WatchListEventMimeMessageFactory.SKIP_CONTEXT_USER_PARAMETER, true); EventsAndSubscribersSource source = new EventsAndSubscribersSource(events, subscribers); extractor = new WatchListMessageDataExtractor(source, parameters, mockEventMatcher, mockExecution, mockExplicitDocumentReferenceResolver); when(mockContext.getUserReference()).thenReturn(testSubscriberReference); WatchListMessageData result = extractor.extract(testSubscriberReference, mockDocument, mockUserObject); assertNull(result); }
@Test(expected = StandardException.class) public void testNegativeOverFlow() throws StandardException { SQLLongint long1 = new SQLLongint(Long.MIN_VALUE); SQLLongint long2 = new SQLLongint(1); long1.minus(long1, long2, null); }
@Test public void testGetOptionProperties() throws Exception { String[] args = new String[] { "-Dparam1=value1", "-Dparam2=value2", "-Dparam3", "-Dparam4=value4", "-D", "--property", "foo=bar" }; Options options = new Options(); options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D')); options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt("property").create()); Parser parser = new GnuParser(); CommandLine cl = parser.parse(options, args); Properties props = cl.getOptionProperties("D"); assertNotNull("null properties", props); assertEquals("number of properties in " + props, 4, props.size()); assertEquals("property 1", "value1", props.getProperty("param1")); assertEquals("property 2", "value2", props.getProperty("param2")); assertEquals("property 3", "true", props.getProperty("param3")); assertEquals("property 4", "value4", props.getProperty("param4")); assertEquals("property with long format", "bar", cl.getOptionProperties("property").getProperty("foo")); }
@Test public void shouldCreateDirectory() throws IOException { File root = temporaryFolder.newFolder(); File dir = new File(root, "folder/folder2/myFolder"); boolean result = FileUtils.createDirectory(dir); assertThat(result, equalTo(true)); assertThat(dir.exists(), equalTo(true)); assertThat(dir.isDirectory(), equalTo(true)); }
@Test(expected = UnsupportedOperationException.class) public void testToLong() { cb.toLong(null); }
@Test public final void testGetGlobeCoordinatesValue() { GlobeCoordinatesValue o1 = Datamodel.makeGlobeCoordinatesValue(90.0, 190.5, GlobeCoordinatesValue.PREC_DECI_DEGREE, GlobeCoordinatesValue.GLOBE_EARTH); GlobeCoordinatesValue o2 = factory.getGlobeCoordinatesValue(90.0, 190.5, GlobeCoordinatesValue.PREC_DECI_DEGREE, GlobeCoordinatesValue.GLOBE_EARTH); assertEquals(o1, o2); }
@Test public void reconcileObjectCollections_addObject_updateObject_removeObject_removeFlagTrue() { TestObject newObject = new TestObject("newName1", "newValue1"); updatedObjectsMap.put(newObject, newObject); updatedObjectsMap.get(object2).setValue("New Value For Object 2"); updatedObjectsMap.remove(object1); ArrayList<TestObject> existingObjects = new ArrayList<TestObject>(existingObjectsMap.values()); ArrayList<TestObject> updatedObjects = new ArrayList<TestObject>(updatedObjectsMap.values()); assertFalse(org.apache.commons.collections.CollectionUtils.isEqualCollection(existingObjects, updatedObjects)); CollectionUtils.reconcileObjectCollections(existingObjects, updatedObjects, reconciliationHelper, true); assertTrue(org.apache.commons.collections.CollectionUtils.isEqualCollection(existingObjects, updatedObjects)); }
@Test void testRunWithUnknownCommand() { AssertExit.assertExitWithStatus(2, () -> run(asList("unknownCommand"))); }
@Test public void shouldReportWhenSaveFailed() { CommandSender sender = mock(CommandSender.class); String player = "my_user12"; String password = "passPass"; given(playerCache.isAuthenticated(player)).willReturn(true); HashedPassword hashedPassword = mock(HashedPassword.class); given(passwordSecurity.computeHash(password, player)).willReturn(hashedPassword); given(dataSource.updatePassword(player, hashedPassword)).willReturn(false); asyncChangePassword.changePasswordAsAdmin(sender, player, password); verify(commonService).send(sender, MessageKey.ERROR); verify(passwordSecurity).computeHash(password, player); verify(dataSource).updatePassword(player, hashedPassword); }
@Test public void testEmptySubpolygon() throws ParseException { Geometry geometry = GEOMETRY_FACTORY.createMultiPolygon(null); GeometryReducer reducer = new GeometryReducer(); Geometry actual = reducer.apply(geometry, context); assertThat(actual.isEmpty(), is(true)); }
@Test public void sanitizeKeepLinkTargetBlank() throws Exception { String html = "<a href=\"foo\" target=\"_blank\">link</a>"; String expected = "<a href=\"foo\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>"; HtmlSanitizerService service = Framework.getService(HtmlSanitizerService.class); String res = service.sanitizeString(html, null); assertEquals(expected, res); }
@Test public void test_getDataInterval() { Assert.assertEquals(baseSegment.getDataInterval(), hashJoinSegment.getDataInterval()); }
@Test public void shouldReturnFailureResultWhenProcessingFails() { final CallParameter callParameter = callParameter(); mockBlockchainForBlockHeader(Hash.ZERO, 1L); mockWorldStateForAccount(Hash.ZERO, Address.fromHexString("0x0"), 1L); final Transaction expectedTransaction = Transaction.builder() .nonce(1L) .gasPrice(callParameter.getGasPrice()) .gasLimit(callParameter.getGasLimit()) .to(callParameter.getTo()) .sender(callParameter.getFrom()) .value(callParameter.getValue()) .payload(callParameter.getPayload()) .signature(FAKE_SIGNATURE) .build(); mockProcessorStatusForTransaction(1L, expectedTransaction, Status.FAILED); final Optional<TransactionSimulatorResult> result = transactionSimulator.process(callParameter, 1L); assertThat(result.get().isSuccessful()).isFalse(); verifyTransactionWasProcessed(expectedTransaction); }
@SuppressWarnings({ "unchecked" }) @Test public void testDoStartIgnoreCredentialIfStartEmptyIsSet(final VertxTestContext ctx) { credentialsConfig.setFilename(CREDENTIALS_FILE_NAME); credentialsConfig.setStartEmpty(true); registrationConfig.setFilename(REGISTRATION_FILE_NAME); registrationConfig.setStartEmpty(true); when(fileSystem.existsBlocking(credentialsConfig.getFilename())).thenReturn(Boolean.TRUE); when(fileSystem.existsBlocking(registrationConfig.getFilename())).thenReturn(Boolean.TRUE); final Promise<Void> startTracker = Promise.promise(); startTracker.future().onComplete(ctx.succeeding(s -> ctx.verify(() -> { verify(fileSystem, never()).readFile(anyString(), any(Handler.class)); ctx.completeNow(); }))); start(startTracker); }
@Test public void getAttributeUUIDNodeBooleanStringArray() { UUID id = UUID.fromString("e48d046f-975c-4a22-92ff-cb23b50716ce"); assertEquals(id, XMLUtil.getAttributeUUID(this.document, true, "catalog", "book", "description", "uuid1")); assertNull(XMLUtil.getAttributeUUID(this.document, true, "catalog", "book", "description", "Uuid1")); assertEquals(id, XMLUtil.getAttributeUUID(this.document, false, "catalog", "book", "description", "uuid1")); assertEquals(id, XMLUtil.getAttributeUUID(this.document, false, "catalog", "book", "description", "Uuid1")); }
@Test public void fromTopicAndPath() { final TopicPath topicPath = ImmutableTopicPath.of("ns", "id", TopicPath.Group.THINGS, TopicPath.Channel.TWIN, TopicPath.Criterion.COMMANDS, TopicPath.Action.MODIFY); final MessagePath messagePath = ImmutableMessagePath.of(JsonPointer.of("/policyId")); final DittoHeaders dittoHeaders = DittoHeaders.empty(); final UnknownTopicPathException exception = UnknownTopicPathException.fromTopicAndPath(topicPath, messagePath, dittoHeaders); Assertions.assertThat(exception) .hasMessageContaining(topicPath.getPath()) .hasMessageContaining(messagePath.toString()); }
@Test public void testRemove() { PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream())); PdfArray array = new PdfArray(); array.add(new PdfNumber(1).makeIndirect(doc).getIndirectReference()); array.add(new PdfNumber(2).makeIndirect(doc).getIndirectReference()); array.add(new PdfNumber(3).makeIndirect(doc)); array.add(new PdfNumber(4).makeIndirect(doc)); array.add(new PdfNumber(5)); array.add(new PdfNumber(6)); PdfArray array2 = new PdfArray(); array2.add(new PdfNumber(1).makeIndirect(doc).getIndirectReference()); array2.add(new PdfNumber(2).makeIndirect(doc).getIndirectReference()); array2.add(new PdfNumber(3).makeIndirect(doc)); array2.add(new PdfNumber(4).makeIndirect(doc)); array2.add(new PdfNumber(5)); array2.add(new PdfNumber(6)); for (PdfObject obj : array2) { array.remove(obj); } Assert.assertEquals(0, array.size()); }
@Test public void getZoneSeaShouldLookupSeaGuid() throws Exception { when(mockZoneMapProvider.getZoneToSliIdMap()).thenReturn(getDummySeaIdMap()); Entity seaEntity = Mockito.mock(Entity.class); when(seaEntity.getId()).thenReturn(SEA_ID2); List<Entity> queryResult = Arrays.asList(new Entity[] { seaEntity }); when(mockSlcInterface.read(eq(SLI_TYPE_SEA2), queryCaptor.capture())).thenReturn(queryResult); String seaId = resolver.getZoneSea(ZONE_ID2); Assert.assertEquals(1, queryCaptor.getAllValues().size()); Assert.assertEquals(SLI_VALUE_SEA2, queryCaptor.getAllValues().get(0).getParameters().get(SLI_FIELD_SEA2)); Assert.assertEquals(SEA_ID2, seaId); }
@Test public void testHandleShortSyntaxNestedNestedMethods() { String line = "get(describe(1), find(\"name\", eq, \"foo\"))"; String expected = "concourse.get(concourse.describe(1), concourse.find(\"name\", eq, \"foo\"))"; Assert.assertEquals(expected, SyntaxTools.handleShortSyntax(line, options())); }
@Test(expected = IllegalArgumentException.class) public void testSetNullPointer() throws JWNLException { testObj.getPointers().set(0, null); }
@Test public void noHistoryEventHandlerTest() { defaultHistoryConfiguration.preInit(springProcessEngineConfiguration); verify(springProcessEngineConfiguration, times(0)).setHistoryEventHandler(Mockito.any(HistoryEventHandler.class)); }
@Test public void should_delete_report_by_id_and_tenant() { populateDatabase(); repository.deleteReportByIdAndTenant(processId, TENANT_ID); FindIterable<Document> iterable = preservationReportCollection.find(and(eq("processId", processId), eq("tenantId", TENANT_ID))); MongoCursor<Document> iterator = iterable.iterator(); List<Document> documents = new ArrayList<>(); while (iterator.hasNext()) { documents.add(iterator.next()); } assertThat(documents).isEmpty(); assertThat(documents.size()).isEqualTo(0); }
@Test public void testLeftJoin() { ImmutableList.Builder<JoinNode.EquiJoinClause> criteriaBuilder = ImmutableList.builder(); criteriaBuilder.add(new JoinNode.EquiJoinClause(A, D)); criteriaBuilder.add(new JoinNode.EquiJoinClause(B, E)); List<JoinNode.EquiJoinClause> criteria = criteriaBuilder.build(); Map<Symbol, ColumnHandle> leftAssignments = Maps.filterKeys(scanAssignments, Predicates.in(ImmutableList.of(A, B, C))); TableScanNode leftScan = tableScanNode(leftAssignments); Map<Symbol, ColumnHandle> rightAssignments = Maps.filterKeys(scanAssignments, Predicates.in(ImmutableList.of(D, E, F))); TableScanNode rightScan = tableScanNode(rightAssignments); FilterNode left = filter( leftScan, and( lessThan(BE, AE), lessThan(CE, bigintLiteral(10)), equals(GE, bigintLiteral(10)))); FilterNode right = filter( rightScan, and( equals(DE, EE), lessThan(FE, bigintLiteral(100)))); PlanNode node = new JoinNode( newId(), JoinNode.Type.LEFT, left, right, criteria, left.getOutputSymbols(), right.getOutputSymbols(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableMap.of(), Optional.empty()); Expression effectivePredicate = effectivePredicateExtractor.extract(SESSION, node, TypeProvider.empty(), typeAnalyzer); assertEquals( normalizeConjuncts(effectivePredicate), normalizeConjuncts( lessThan(BE, AE), lessThan(CE, bigintLiteral(10)), or(equals(DE, EE), and(isNull(DE), isNull(EE))), or(lessThan(FE, bigintLiteral(100)), isNull(FE)), or(equals(AE, DE), isNull(DE)), or(equals(BE, EE), isNull(EE)))); }
@Test public void renameWithLengthLimit() throws Exception { String c256 = String.join("", Collections.nCopies(16, "0123456789ABCDEF")); AlluxioURI oldPath = BASE_EXPECTED_URI.join("/old"); AlluxioURI newPath = BASE_EXPECTED_URI.join("/" + c256); doNothing().when(mFileSystem).rename(oldPath, newPath); assertEquals(-ErrorCodes.ENAMETOOLONG(), mFuseFs.rename("/old", "/" + c256)); }
@Test public void breadthFirst_breadthFirst() { Walker<String> walker = dataType.newWalker(ImmutableListMultimap.of("foo", "bar", "foo", "baz", "bar", "dog")); assertThat(walker.breadthFirstFrom("foo")) .containsExactly("foo", "bar", "baz", "dog") .inOrder(); }
@Test public void testHashCodeTransitive() throws Exception { assertEquals( tagA.hashCode(), tagACopy.hashCode() ); assertEquals( tagACopy.hashCode(), tagB.hashCode() ); assertEquals( tagA.hashCode(), tagB.hashCode() ); }
@Test void testBucketCount() { DistributionBucket bucket = new DistributionBucket(new long[]{0, 10, 50, 100, 1000}); assertEquals(6, bucket.getCount()); }
@Test public void createResponseMapper() { Method responseEntityMethod = ReflectUtils.findMethod(this.getClass(), "responseEntity"); ProducerResponseMapper mapper = factory .createResponseMapper(factorys, responseEntityMethod.getGenericReturnType()); Assert.assertThat(mapper, Matchers.instanceOf(SpringmvcProducerResponseMapper.class)); ResponseEntity<String[]> responseEntity = new ResponseEntity<>(new String[] {"a", "b"}, HttpStatus.OK); Response response = mapper.mapResponse(null, responseEntity); Assert.assertThat(response.getResult(), Matchers.arrayContaining("a", "b")); }
@Test public void replace_MatchNotFound_ReturnsOriginalString() { assertEquals("abc", StringUtils.replace("abc", "d", "e")); }
@Test public void convertDataPolicyStrings() { assertEquals(DataPolicy.EMPTY, converter.convert("empty")); assertEquals(DataPolicy.PARTITION, converter.convert("Partition")); assertEquals(DataPolicy.PERSISTENT_REPLICATE, converter.convert("PERSISTENT_REPLICATE")); assertNull(converter.convert("invalid")); assertNull(converter.convert(null)); }
@Override @Test public void convertNullSDKToAPI() { sdkExternal1 = null; converter = new ExternalConverter(sdkExternal1); assertThat("Converter didn't return a null api object for a null sdk object", converter.toAPIExternal(), nullValue()); }
@Test public void collectMetrics_WithOneRecord() { LongValueRecorderSdk longMeasure = testSdk.longValueRecorderBuilder("testRecorder").build(); testClock.advanceNanos(SECOND_NANOS); longMeasure.record(12, Labels.empty()); List<MetricData> metricDataList = longMeasure.collectAll(); assertThat(metricDataList) .containsExactly( MetricData.create( Descriptor.create("testRecorder", "", "1", Type.SUMMARY, Labels.empty()), RESOURCE, INSTRUMENTATION_LIBRARY_INFO, Collections.singletonList( SummaryPoint.create( testClock.now() - SECOND_NANOS, testClock.now(), Labels.empty(), 1, 12, valueAtPercentiles(12, 12))))); }
@Test public void getAllChildWorkflowsQueriesAllChildWorkflows() { List<WorkflowInstance> result = singletonList(mock(WorkflowInstance.class)); when(workflowDao.queryWorkflowInstances(queryCaptor.capture())).thenReturn(result); assertThat(execution.getAllChildWorkflows(), is(result)); QueryWorkflowInstances actualQuery = queryCaptor.getValue(); assertThat(actualQuery.parentWorkflowId, is(99L)); assertThat(actualQuery.types, emptyCollectionOf(String.class)); assertThat(actualQuery.businessKey, is(nullValue())); assertThat(actualQuery.includeCurrentStateVariables, is(false)); }
@Test public void testSetupNoHmacSecret() { final HMACAuthenticator authenticator = new HMACAuthenticator(); final Map<String, Object> configMap = new HashMap<>(); configMap.put(CONFIG_CREDENTIALS_DB, "configCredDb"); assertThrows(IllegalStateException.class, () -> authenticator.setup(configMap)); }
@Test public void testGetModelPropertyValueByName() throws Exception { CreateAttribute createAttribute = new CreateAttribute(); createAttribute.setModelPropertyByName( "Time Forma...", "xxxxx" ); assertNull( createAttribute.getModelPropertyValueByName( "Time Forma..." ) ); createAttribute.setModelPropertyByName( "Time Source Format", "xxxxx" ); assertTrue( createAttribute.getTimeFormat().equalsIgnoreCase( "xxxxx" ) ); createAttribute.setModelPropertyByName( "Time Level Type", ModelAnnotation.TimeType.TimeHalfYears ); assertTrue( createAttribute.getTimeType().equals( ModelAnnotation.TimeType.TimeHalfYears ) ); createAttribute.setModelPropertyByName( "Geo Type", ModelAnnotation.GeoType.Continent.toString() ); }
@Test void doesNotCloseBrowsers_ifHoldBrowserOpenSettingIsTrue() { Configuration.holdBrowserOpen = true; WebDriver webDriver = container.getAndCheckWebDriver(); assertThat(webDriver).isNotNull(); assertThat(container.allWebDriverThreads).hasSize(0); assertThat(container.cleanupThreadStarted.get()).isFalse(); }
@Test public void load() throws Exception { List<Variable> list = new ArrayList<>(); list.add(new Variable("probe")); list.add(new Variable("mode")); list.add(new Variable("should-have-default", "should have default value", "default")); ConfigurationLoader config = new ConfigurationLoader(list); Map<String, Object> result; try { result = config.loadConfiguration(testYML); } catch (IOException e) { throw new RuntimeException(e); } assertEquals(createTestingProbeList(), result.get("probe")); assertTrue(result.get("probe") instanceof ArrayList); assertEquals("continual", result.get("mode")); assertFalse(result.get("mode") instanceof ArrayList); assertTrue(result.get("mode") instanceof String); assertEquals("default", result.get("should-have-default")); assertFalse(result.get("should-have-default") instanceof ArrayList); assertTrue(result.get("should-have-default") instanceof String); }
@Test public void testGetCurrentAllocatedMips() { assertNull(vm.getCurrentAllocatedMips()); }
@Test public void testGetStatisticsForDistinctKeys() { SortedKeyStatisticsAttributeIndex<Integer, Car> backingIndex = mockBackingIndex(); PartialSortedKeyStatisticsAttributeIndex<Integer, Car> index = wrapWithPartialIndex(backingIndex); index.getStatisticsForDistinctKeys(noQueryOptions()); verify(backingIndex, times(1)).getStatisticsForDistinctKeys(noQueryOptions()); }
@Test public void noConversion() { WidgetComment comment = new JpaWidgetComment(); assertThat(widgetCommentConverter.convert(comment, null), is(sameInstance(comment))); }
@Test public void testIsBackupKey() { final SessionIdFormat cut = new SessionIdFormat(StorageKeyFormat.ofHost("localhost")); assertTrue(cut.isBackupKey("bak:localhost_foo")); }
@Test public void you_created_a_group() { DecryptedGroup group = newGroupBy(you, 0) .build(); assertThat(producer.describeNewGroup(group), is("You created the group.")); }
@Test public void readRequestMethodNull() { String result = extractor.getRequestMethod(httpServletRequest.getClass(), httpServletRequest); assertThat(result, is(HttpInfo.UNDEFINED)); }
@Test public void simpleGetWithEscapedPath() { JmxReadRequest req = JmxRequestFactory.createGetRequest("read/java.lang:type=Memory/HeapMemoryUsage/used!/bla!/blub/bloe",procParams); assertEquals(req.getPathParts().size(),2,"Size of path"); assertEquals(req.getPath(),"used!/bla!/blub/bloe","Path properly parsed"); }
@Test public void testFindProcessedOrderModificationsBeforeDate() { final Date myDate = new Date(); final List<WorldpayOrderModificationModel> result = testObj.findProcessedOrderModificationsBeforeDate(myDate); assertTrue(result.size() == 1); assertSame(worldpayOrderModificationModelMock, result.get(0)); verify(flexibleSearchServiceMock).search(queryArgumentCaptor.capture()); final FlexibleSearchQuery queryArgumentCaptorValue = queryArgumentCaptor.getValue(); assertEquals(ORDER_MODIFICATION_CLEAN_UP_QUERY, queryArgumentCaptorValue.getQuery()); assertEquals(myDate, queryArgumentCaptorValue.getQueryParameters().get(BEFORE_DATE)); assertEquals(true, queryArgumentCaptorValue.getQueryParameters().get(PROCESSED)); assertEquals(false, queryArgumentCaptorValue.getQueryParameters().get(DEFECTIVE)); }
@Test public final void testDoPostSetsResponseTypeAndWritesResponse() throws ServletException, IOException { given(response.getWriter()).willReturn(printWriter); given(messageLoggingToggle.isRequestLoggingOn()).willReturn(false); given(messageLoggingToggle.isResponseLoggingOn()).willReturn(false); underTest.doPost(request, response); verify(response).setContentType("application/json"); verify(messageLoggingToggle).isRequestLoggingOn(); verify(messageLoggingToggle).isResponseLoggingOn(); verify(printWriter).write("{\"requestLogging\":false,\"responseLogging\":false}"); }
@Test public void testCalculateSceneRasterHeight_MDS_DSD_lessLines() { final int numRecords_1 = 109; final int numRecords_2 = 1865; final int numLines_1 = (numRecords_1 - 1) * 32; final int numLines_2 = (numRecords_2 - 1) * 32; DSD geolocationDSD = new DSD(0, "ignore", 'A', "", 12, 13, numRecords_1, 14); assertEquals(numLines_1, AatsrProductFile.calculateSceneRasterHeight(geolocationDSD, numLines_1 - 12)); geolocationDSD = new DSD(0, "ignore", 'A', "", 12, 13, numRecords_2, 14); assertEquals(numLines_2, AatsrProductFile.calculateSceneRasterHeight(geolocationDSD, numLines_2 - 24)); }
@Test public void setOpenLoopInPreferencesShouldLimitClosedLoop() { when(SP.getString(R.string.key_aps_mode, "open")).thenReturn("open"); Constraint<Boolean> c = new Constraint<>(true); c = safetyPlugin.isClosedLoopAllowed(c); Assert.assertTrue(c.getReasons().contains("Closed loop mode disabled in preferences")); Assert.assertEquals(Boolean.FALSE, c.value()); }
@Test public void testHash() { int hashA = new LanguageSample(new Language("aLang"), "aContext").hashCode(); int hashB = new LanguageSample(new Language("bLang"), "aContext").hashCode(); int hashC = new LanguageSample(new Language("aLang"), "bContext").hashCode(); Assert.assertNotEquals(hashA, hashB); Assert.assertNotEquals(hashA, hashC); Assert.assertNotEquals(hashB, hashC); }
@Test public void testDeactivate() { event.deactivate(); event.write("HELLO"); assertEquals("", out.toString()); }
@Test public void shouldMergeTemplateIntoStringThrowExceptionOnNullModel() throws Exception { String templateReference = "file." + UUID.randomUUID(); assertions.assertThat(templateReference).isNotNull(); expectedException.expect(NullPointerException.class); templateService.mergeTemplateIntoString(templateReference, null); fail("NullPointerException expected"); }
@Test public void testThrowAuthorizationFailureWithCause() { try { AuthorizationUtils.throwAuthorizationFailure(Collections.singleton("Basic"), null, new RuntimeException("expired token")); fail("WebApplicationException expected"); } catch (WebApplicationException ex) { Response r = ex.getResponse(); assertEquals("expired token", r.getEntity()); assertEquals(401, r.getStatus()); Object value = r.getMetadata().getFirst(HttpHeaders.WWW_AUTHENTICATE); assertNotNull(value); assertEquals("Basic", value.toString()); } }
@Test public void testGetStreamToConsumerTasks() { String system = "test-system"; String streamId0 = "test-stream-0"; String streamId1 = "test-stream-1"; HashMap<String, String> configs = new HashMap<>(); configs.put(JobConfig.JOB_NAME, "test-app"); configs.put(JobConfig.JOB_DEFAULT_SYSTEM, "test-system"); StreamTestUtils.addStreamConfigs(configs, streamId0, system, streamId0); StreamTestUtils.addStreamConfigs(configs, streamId1, system, streamId1); Config config = new MapConfig(configs); when(this.context.getJobContext().getConfig()).thenReturn(config); SystemStreamPartition ssp0 = new SystemStreamPartition(system, streamId0, new Partition(0)); SystemStreamPartition ssp1 = new SystemStreamPartition(system, streamId0, new Partition(1)); SystemStreamPartition ssp2 = new SystemStreamPartition(system, streamId1, new Partition(0)); TaskName task0 = new TaskName("Task 0"); TaskName task1 = new TaskName("Task 1"); Set<SystemStreamPartition> ssps = new HashSet<>(); ssps.add(ssp0); ssps.add(ssp2); TaskModel tm0 = new TaskModel(task0, ssps, new Partition(0)); ContainerModel cm0 = new ContainerModel("c0", Collections.singletonMap(task0, tm0)); TaskModel tm1 = new TaskModel(task1, Collections.singleton(ssp1), new Partition(1)); ContainerModel cm1 = new ContainerModel("c1", Collections.singletonMap(task1, tm1)); Map<String, ContainerModel> cms = new HashMap<>(); cms.put(cm0.getId(), cm0); cms.put(cm1.getId(), cm1); JobModel jobModel = new JobModel(config, cms, null); Multimap<SystemStream, String> streamToTasks = OperatorImplGraph.getStreamToConsumerTasks(jobModel); assertEquals(streamToTasks.get(ssp0.getSystemStream()).size(), 2); assertEquals(streamToTasks.get(ssp2.getSystemStream()).size(), 1); }
@Test public void getQueueExpireAfter_returnsNullWhenHeaderIsMinusOne(TestContext testContext) { final String headerValue = "-1"; final MultiMap headers = createHeaderReturningSimpleValue(HTTP_HEADER_X_QUEUE_EXPIRE_AFTER, headerValue); final Integer returnedExpireValue = ExpiryCheckHandler.getQueueExpireAfter(headers); testContext.assertNull(returnedExpireValue); }
@Test public void servicesAreSuspended() throws Exception { systemManager.suspendServices(); verifySuspendCompleted(); }
@Test public void getNumChildren() throws Exception { assertEquals(4, fce.getNumChildren()); assertEquals(fce.getArgs().size(), fce.getNumChildren()); assertEquals(fce.getNumArgs(), fce.getNumChildren()); }
@Test public void testNewGeneratorContext() { factory.newGeneratorContext(); assertThat(factory.getGeneratorContexts()).hasSize(1); assertThat(factory.getGeneratorContexts().get(0).getDepth()).isEqualTo(0); factory.newGeneratorContext(); assertThat(factory.getGeneratorContexts()).hasSize(2); assertThat(factory.getGeneratorContexts().get(1).getDepth()).isEqualTo(0); }
@Test public final void getCacheShouldReturnSameInstanceForSameName() { final SpringCache firstObtainedSpringCache = objectUnderTest.getCache(TEST_CACHE_NAME); final SpringCache secondObtainedSpringCache = objectUnderTest.getCache(TEST_CACHE_NAME); assertSame( "getCache() should have returned the same SpringCache instance for the same name", firstObtainedSpringCache, secondObtainedSpringCache); }
@Test public void verifyCreateAreNotIgnored() { boolean ignoreEvent = jdbcCallback.eventCanBeIgnored(Operation.CREATE); assertThat(ignoreEvent).isFalse(); }
@Test public void testContainsAll() { List<String> sut = new ArrayList<String>(1); sut.add("1"); sut.add("2"); sut.add("3"); sut.add("4"); List<String> data = new ArrayList<String>(); data.add("2"); data.add("4"); assertTrue(sut.containsAll(data)); }
@Test public void testGetPodsbyLabel_WhenK8sReturnsPodWithMismatchingId_ReturnsEmptyList() throws Exception { String name = UUID.randomUUID().toString(); String namespace = UUID.randomUUID().toString(); mockPodsByName(namespace, name, newPod(UUID.randomUUID().toString(), name, namespace, "node")); KubernetesPod result = this.service.getPodById(UUID.randomUUID().toString(), namespace, name); assertNull("The result should be null.", result); }
@Test @Ignore("connecting to the outside world makes this test flaky") public void testCommonClientUsesExtensibleTrustManager() throws Exception { ArgumentCaptor<X509Certificate[]> certificateChainCaptor = ArgumentCaptor.forClass(X509Certificate[].class); ArgumentCaptor<SSLEngine> sslEngineCaptor = ArgumentCaptor.forClass(SSLEngine.class); HttpClient httpClient = webClientFactory.getCommonHttpClient(); ContentResponse response = httpClient.GET(TEST_URL); if (response.getStatus() != 200) { fail("Statuscode != 200"); } verify(extensibleTrustManager).checkServerTrusted(certificateChainCaptor.capture(), anyString(), sslEngineCaptor.capture()); verifyNoMoreInteractions(extensibleTrustManager); assertThat(sslEngineCaptor.getValue().getPeerHost(), is("www.eclipse.org")); assertThat(sslEngineCaptor.getValue().getPeerPort(), is(443)); assertThat(certificateChainCaptor.getValue()[0].getSubjectX500Principal().getName(), containsString("eclipse.org")); }
@Test public void txpool_status_manyTxs() throws Exception { Transaction tx1 = createSampleTransaction(); Transaction tx2 = createSampleTransaction(); Transaction tx3 = createSampleTransaction(); Transaction tx4 = createSampleTransaction(); List<Transaction> transactions = Arrays.asList(tx1, tx2, tx3); List<Transaction> txs = Arrays.asList(tx1, tx4); when(transactionPool.getPendingTransactions()).thenReturn(transactions); when(transactionPool.getQueuedTransactions()).thenReturn(txs); String result = txPoolModule.status(); ObjectMapper om = new ObjectMapper(); JsonNode node = om.reader().forType(JsonNode.class).readValue(result); JsonNode queuedNode = checkFieldIsNumber(node, "queued"); JsonNode pendingNode = checkFieldIsNumber(node, "pending"); Assert.assertEquals(txs.size(), queuedNode.asInt()); Assert.assertEquals(transactions.size(), pendingNode.asInt()); }
@Test public void testOneWayReceived() throws Exception { ospfMessage = new HelloPacket(); ospfNbr.setState(OspfNeighborState.ATTEMPT); channel = EasyMock.createMock(Channel.class); ospfNbr.oneWayReceived(ospfMessage, channel); channel1 = EasyMock.createMock(Channel.class); ospfNbr.setState(OspfNeighborState.DOWN); ospfNbr.oneWayReceived(ospfMessage, channel1); channel2 = EasyMock.createMock(Channel.class); ospfNbr.setState(OspfNeighborState.TWOWAY); ospfNbr.oneWayReceived(ospfMessage, channel2); assertThat(ospfNbr, is(notNullValue())); }
@Test public void exceptionIfSetWithNegativePosition() { BitSet set = new BitSet(17); try { set.set(-1); Assert.fail(); } catch (IndexOutOfBoundsException ex) { Assert.assertEquals("Index: -1, Size: 17", ex.getMessage()); } }
@Test public void testSupports_sameTenant() throws Exception { user.setUsername("lala"); List<GrantedAuthority> authorityList = new ArrayList<GrantedAuthority>(1); authorityList.add(new SimpleGrantedAuthority("SSS")); authentication = new UsernamePasswordAuthenticationToken(user, user, authorityList); assertTrue(voter.isPermitted(authentication, permission, object)); }
@Test(expected = UnsupportedOperationException.class) public void testGrouperResultImmutable() { Set<TaskModel> taskModels = generateTaskModels(3); Set<ContainerModel> containers = new GroupByContainerCount(3).group(taskModels); containers.remove(containers.iterator().next()); }
@Test void whenNoConcreteTypeIsFound_thenShouldThrowAnInstantiationError() { Mockito.when(context.getParameters().isScanClasspathForConcreteTypes()).thenReturn(true); assertThatThrownBy(() -> objenesisObjectFactory.createInstance(AbstractFoo.class, context)).isInstanceOf(InstantiationError.class); }
@Test public void testStartSubWorkflow() { WorkflowDef workflowDef = new WorkflowDef(); Workflow workflowInstance = new Workflow(); workflowInstance.setWorkflowDefinition(workflowDef); Task task = new Task(); task.setOutputData(new HashMap<>()); Map<String, Object> inputData = new HashMap<>(); inputData.put("subWorkflowName", "UnitWorkFlow"); inputData.put("subWorkflowVersion", 3); task.setInputData(inputData); String workflowId = "workflow_1"; Workflow workflow = new Workflow(); workflow.setWorkflowId(workflowId); when(workflowExecutor.startWorkflow(eq("UnitWorkFlow"), eq(3), eq(inputData), eq(null), any(), any(), any(), eq(null), any())) .thenReturn(workflowId); when(workflowExecutor.getWorkflow(anyString(), eq(false))).thenReturn(workflow); workflow.setStatus(Workflow.WorkflowStatus.RUNNING); subWorkflow.start(workflowInstance, task, workflowExecutor); assertEquals("workflow_1", task.getSubWorkflowId()); assertEquals(Task.Status.IN_PROGRESS, task.getStatus()); workflow.setStatus(Workflow.WorkflowStatus.TERMINATED); subWorkflow.start(workflowInstance, task, workflowExecutor); assertEquals("workflow_1", task.getSubWorkflowId()); assertEquals(Task.Status.FAILED, task.getStatus()); workflow.setStatus(Workflow.WorkflowStatus.COMPLETED); subWorkflow.start(workflowInstance, task, workflowExecutor); assertEquals("workflow_1", task.getSubWorkflowId()); assertEquals(Task.Status.COMPLETED, task.getStatus()); }
@Test public void getHostOrDefault() { var in = HostAndPort.newInstance(8080); var ans = in.getHostOrDefault("localhost"); assertEquals("localhost", ans); assertEquals("localhost", HostAndPort.newInstance("localhost").getHostOrDefault("tiki.vn")); }
@Test public void shouldNotBeAbleToWithdrawWhenThereIsNotEnoughMoney() { UUID cardId = UUID.randomUUID(); CreditCard creditCard = new CreditCard(new CreditCardRecord(cardId, TEN)); assertThatExceptionOfType(NotEnoughMoneyException.class) .isThrownBy( () -> creditCard.withdraw(new WithdrawalCommand(cardId, new BigDecimal(100)))); }
@Test public void test6() throws Exception { String[] vars = {"a", "b"}; Ring<BigInteger> ring = new IntegersZp(2); Comparator<DegreeVector> ordering = MonomialOrder.LEX; MultivariatePolynomial<BigInteger> dividend = MultivariatePolynomial.parse("a^2*b+a*b^2+b^2", ring, ordering, vars); MultivariatePolynomial<BigInteger> f1 = MultivariatePolynomial.parse("a*b - 1", ring, ordering, vars); MultivariatePolynomial<BigInteger> f2 = MultivariatePolynomial.parse("b^2 - 1", ring, ordering, vars); MultivariatePolynomial<BigInteger>[] qd; qd = MultivariateDivision.divideAndRemainder(dividend, f1, f2); assertQuotientReminder(qd, dividend, f1, f2); assertArrayEquals(new MultivariatePolynomial[]{ MultivariatePolynomial.parse("a+b", ordering, vars), MultivariatePolynomial.parse("1", ordering, vars), MultivariatePolynomial.parse("a+b+1", ordering, vars) }, qd); assertQuotientReminder(dividend, f2, f1); }
@Test public void deleteTestTimeout2() throws IOException { new Expectations() {{ capturingSnmpSession.set((PDU) any, (Snmp) any, (UserTarget) any, anyBoolean); result = mockResponseEvent; mockResponseEvent.getResponse(); result = null; }}; assertEquals(HttpStatus.REQUEST_TIMEOUT, testTimDeleteController.deleteTim("{\"rsuTarget\":\"127.0.0.1\",\"rsuRetries\":\"1\",\"rsuTimeout\":\"2000\"}", 42).getStatusCode()); }
@Test public void testMstart() throws Exception { new ThreadPool().mstart(); }
@Test public void test() { assertThat(PrimitiveOperations.getType(new PrefixExpressionTreeImpl(Tree.Kind.UNARY_MINUS, null,new IsExpressionTreeImpl(null, null, null, null, null) ))).isEqualTo(PrimitiveType.INTEGER); assertThat(PrimitiveOperations.getType(new PrefixExpressionTreeImpl(Tree.Kind.LOGICAL_COMPLEMENT, null,new IsExpressionTreeImpl(null, null, null, null, null) ))).isEqualTo(PrimitiveType.BOOLEAN); assertThat(PrimitiveOperations.getType(new PrefixExpressionTreeImpl(Tree.Kind.ARGUMENTS, null,new IsExpressionTreeImpl(null, null, null, null, null) ))).isEqualTo(null); }
@Test public void getStringReturnsJsonString() throws Exception { testJSON = new JSONObject(); testJSON.put(testKey, testString); final Representation request = mockedJsonRequest(testJSON.toString()); classUnderTest = new RequestParametersJson(request); assertEquals(testString, classUnderTest.getString(testKey)); }
@Test public void pointToPointIntent() { ConnectPoint ingress = NetTestTools.connectPoint("ingress", 1); ConnectPoint egress = NetTestTools.connectPoint("egress", 2); final PointToPointIntent intent = PointToPointIntent.builder() .appId(appId) .selector(emptySelector) .treatment(emptyTreatment) .ingressPoint(ingress) .egressPoint(egress).build(); final JsonCodec<PointToPointIntent> intentCodec = context.codec(PointToPointIntent.class); assertThat(intentCodec, notNullValue()); final ObjectNode intentJson = intentCodec.encode(intent, context); assertThat(intentJson, matchesIntent(intent)); }
@Test void IngestFromFile_NullFileSourceInfo_IllegalArgumentException() { assertThrows(IllegalArgumentException.class, () -> streamingIngestClient.ingestFromFile(null, ingestionProperties), "Expected IllegalArgumentException to be thrown, but it didn't"); }
@Test public void testDefinition() throws Exception { String definition = "the_geom=the_geom"; List<Definition> def = TransformProcess.toDefinition(definition); assertEquals(1, def.size()); assertEquals("the_geom", def.get(0).name); assertTrue(def.get(0).expression instanceof PropertyName); }
@Test public void findAnnotationMultipleActionNameGiven() { StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor(); TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), "def2"); Assert.assertNotNull(tilesDefinition); Assert.assertEquals("def2", tilesDefinition.name()); }
@Test public void testPortListToMap() { ImmutableSet<Port> input = ImmutableSet.of(Port.tcp(1000), Port.udp(2000)); ImmutableSortedMap<String, Map<?, ?>> expected = ImmutableSortedMap.of("1000/tcp", ImmutableMap.of(), "2000/udp", ImmutableMap.of()); Assert.assertEquals(expected, ImageToJsonTranslator.portSetToMap(input)); }
@Test public void testRewordAlterColumnTypeNoSemicolon() throws Exception { Assert.assertEquals( "alter table DLFolder alter column userName set data type " + "varchar(75);\n", buildSQL("alter_column_type DLFolder userName VARCHAR(75)")); }
@Test public void shouldGenerateAsyncApi() throws IOException, URISyntaxException { String actual = AsyncApiGenerator.builder() .withAsyncApiBase(getClass().getResource("/asyncapi_template.yaml")) .withSchema("./schema.json", BaseEvent.class) .generateYaml(); String expected = TestUtil.readResource("/asyncapi_expected.yaml"); Map<String, Object> expectedJson = YamlUtil.load(expected, new TypeReference<Map<String, Object>>() {}); Map<String, Object> actualJson = YamlUtil.load(actual, new TypeReference<Map<String, Object>>() {}); assertThat(actualJson).isEqualToComparingFieldByFieldRecursively(expectedJson); }
@Test public void isValidExtension() { Assert.assertFalse(StorageManagerUtil.isValidExtension(null)); Assert.assertTrue(StorageManagerUtil.isValidExtension("extension")); Assert.assertTrue(StorageManagerUtil.isValidExtension("txt")); Assert.assertTrue(StorageManagerUtil.isValidExtension("t_t")); Assert.assertFalse(StorageManagerUtil.isValidExtension("t..t")); Assert.assertFalse(StorageManagerUtil.isValidExtension("t t")); Assert.assertFalse(StorageManagerUtil.isValidExtension("(1)")); Assert.assertFalse(StorageManagerUtil.isValidExtension("r_?n")); Assert.assertFalse(StorageManagerUtil.isValidExtension("d_../ex")); Assert.assertFalse(StorageManagerUtil.isValidExtension("%2e%2e/e")); Assert.assertFalse(StorageManagerUtil.isValidExtension("ex..%2f_n")); Assert.assertFalse(StorageManagerUtil.isValidExtension("dir_na%2e%2e%2fme")); }
@Test public void deleteNodeTest() throws ApiException { String path = null; String name = null; api.deleteNode(path, name); }
@Test public void testReadArray() throws Exception { byte[] expected = Arrays.copyOf(DATA_BYTES, 4); assertEquals(4, in.read(bs)); assertArrayEquals(expected, bs); }
@Test public void testDebugWithException() { Logger mock = createStrictMock(Logger.class); expect(mock.getName()).andReturn("foo"); mock.debug("a", e); replay(mock); InternalLogger logger = new Slf4JLogger(mock); logger.debug("a", e); verify(mock); }
@Test public void testData() throws Exception { SimpleOp op = new SimpleOp(); Product s = new Product("S", "S", 10, 10); s.setPreferredTileSize(10, 2); op.setSourceProduct(s); Product t = op.getTargetProduct(); OperatorExecutor2 ex = new OperatorExecutor2(t); TracingHandler2 handler = new TracingHandler2(); Object metrics = ex.execute(handler); assertEquals(5, handler.trace.size()); OperatorExecutor2.Frame frame0 = handler.trace.get(0); assertNotNull(frame0.getData(0)); assertEquals(0.1f, frame0.getData(0).getElemFloatAt(0), 0.0f); assertEquals(0.3f, frame0.getData(3).getElemFloatAt(0), 0.0f); assertEquals(0.1f - 0.3f, frame0.getData(6).getElemFloatAt(0), 0.0f); assertEquals(0.1f, frame0.getData(0).getElemFloatAt(7), 0.0f); assertEquals(0.3f, frame0.getData(3).getElemFloatAt(7), 0.0f); assertEquals(0.1f - 0.3f, frame0.getData(6).getElemFloatAt(7), 0.0f); OperatorExecutor2.Frame frame3 = handler.trace.get(3); assertEquals(0.1f, frame3.getData(0).getElemFloatAt(0), 0.0f); assertEquals(0.3f, frame3.getData(3).getElemFloatAt(0), 0.0f); assertEquals(0.1f - 0.3f, frame3.getData(6).getElemFloatAt(0), 0.0f); assertEquals(0.1f, frame3.getData(0).getElemFloatAt(7), 0.0f); assertEquals(0.3f, frame3.getData(3).getElemFloatAt(7), 0.0f); assertEquals(0.1f - 0.3f, frame3.getData(6).getElemFloatAt(7), 0.0f); assertNotNull(metrics); }
@Test(expected = IllegalArgumentException.class) public void testSubstituteMapIncomplete() throws Exception { URITemplate ut = new URITemplate("/foo/{a}/{b}/{a:\\d}"); Map<String, String> map = new HashMap<>(); map.put("b", "bar"); ut.substitute(map); }
@Test public void testReplyToRequestFromUsIpv6() { Ip6Address ourIp = Ip6Address.valueOf("1000::1"); MacAddress ourMac = MacAddress.valueOf(1L); Ip6Address theirIp = Ip6Address.valueOf("1000::100"); expect(hostService.getHostsByIp(theirIp)).andReturn(Collections.emptySet()); expect(interfaceService.getInterfacesByIp(ourIp)) .andReturn(Collections.singleton(new Interface(getLocation(1), Collections.singletonList(new InterfaceIpAddress( ourIp, IpPrefix.valueOf("1000::1/64"))), ourMac, VLAN1))); expect(hostService.getHost(HostId.hostId(ourMac, VLAN1))).andReturn(null); replay(hostService); replay(interfaceService); Ethernet ndpRequest = buildNdp(ICMP6.NEIGHBOR_SOLICITATION, ourMac, MacAddress.valueOf("33:33:ff:00:00:01"), ourIp, theirIp); proxyArp.reply(ndpRequest, getLocation(5)); assertEquals(1, packetService.packets.size()); verifyPacketOut(ndpRequest, getLocation(1), packetService.packets.get(0)); packetService.packets.clear(); proxyArp.reply(ndpRequest, getLocation(2)); assertEquals(0, packetService.packets.size()); }
@Test public void shouldStopAllocRecording() throws Exception { RemoteCallable<Void> callable = JProfiler.stopAllocRecording(); changeClass(callable); callable.call(); verify(ControllerStub.methodStub).method("stopAllocRecording"); }
@SuppressWarnings("deprecation") @Test public void testGetInternalState_superClass_parameterized() throws Exception { ClassWithChildThatHasInternalState tested = new ClassWithChildThatHasInternalState(); int internalState = Whitebox.getInternalState(tested, "internalState", ClassWithInternalState.class, int.class); assertEquals(0, internalState); }
@Test public void T_filter_3() throws IOException{ List<PrimitiveObject> dic = new ArrayList<PrimitiveObject>(); dic.add( new StringObj( "abc" ) ); dic.add( new StringObj( "bcd" ) ); dic.add( new StringObj( "cde" ) ); dic.add( new StringObj( "def" ) ); dic.add( new StringObj( "efg" ) ); IntBuffer buffer = IntBuffer.allocate( 100 ); for( int i = 0 ; i < 100 ; i++ ){ buffer.put( i % 5 ); } ICellIndex index = new BufferDirectSequentialStringCellIndex( new TestDicManager( dic ) , buffer ); IFilter filter = new ForwardMatchStringFilter( "bc" ); FilterdExpressionIndex result = new FilterdExpressionIndex( index.filter( filter , new boolean[100] ) ); assertEquals( result.size() , 20 ); for( int i = 0,n=0 ; n < 100 ; i++,n+=5 ){ assertEquals( result.get(i) , n+1 ); } }
@Test public void testFormatAlertMessage_MultiBit_mB() throws Exception { bitcoinConfiguration.setBitcoinSymbol(BitcoinSymbol.MICON.name()); final BitcoinURI bitcoinURI = new BitcoinURI("bitcoin:1AhN6rPdrMuKBGFDKR1k9A8SCLYaNgXhty?amount=0.01&label=Please%20donate%20to%20multibit.org"); assertThat(Formats.formatAlertMessage(bitcoinURI).get()).isEqualTo("Payment \"Please donate to multibit.org\" (1AhN6rPdrMuKBGFDKR1k9A8SCLYaNgXhty) for \"mB 10.00000\". Continue ?"); }
@Test public void withAdditionalOutputProducedOutputs() { TransformResult<Integer> result = StepTransformResult.<Integer>withoutHold(transform) .withAdditionalOutput(OutputType.PCOLLECTION_VIEW) .build(); assertThat(result.getOutputTypes(), containsInAnyOrder(OutputType.PCOLLECTION_VIEW)); }
@Test(expected=IllegalArgumentException.class) public void testSetChannelNegative() { AccessPoint accessPoint = new AccessPoint(SSID, ENCRYPTION_TYPE); accessPoint.setChannel(-10); }
@Test public void insertBulkTest() throws Exception { Collection<Row> rows = new LinkedList<>(); rows.add(createRow(VALUE1)); rows.add(createRow(VALUE2)); decisionStorageEngine.insert(createTableMetadata(), rows, false,connection); verify(decisionApi, times(2)).insertData(eq(CATALOG + "_" + TABLE), anyList()); }
@Test public void shouldRewriteDefaultResourcesWithFreeResourcesLimitIfItExists() throws Exception { when(accountManager.getById(any())).thenReturn(account); when(freeResourcesLimitManager.get(any())) .thenReturn( new FreeResourcesLimitImpl( "user123", singletonList(new ResourceImpl(TEST_RESOURCE_TYPE, 12345, TEST_RESOURCE_UNIT)))); List<ProvidedResources> result = provider.getResources("user123"); assertEquals(result.size(), 1); ProvidedResources providedResources = result.get(0); assertEquals( providedResources, new ProvidedResourcesImpl( FreeResourcesProvider.FREE_RESOURCES_PROVIDER, "user123", "user123", -1L, -1L, singletonList(new ResourceImpl(TEST_RESOURCE_TYPE, 12345, TEST_RESOURCE_UNIT)))); verify(freeResourcesLimitManager).get("user123"); }
@Test(expected = IllegalStateException.class) public void undo() { command.undo(scenarioSimulationContextLocal); }
@Test public void createRoleShouldThrowExceptionWhenSchoolPermissionIsAppliedToVaultRole() { expectedException.expect(IllegalStateException.class); expectedException.expectMessage("Unable to apply permission with type SCHOOL to role of type VAULT"); RoleModel toCreate = aRole(RoleType.VAULT); toCreate.addPermission(aPermission(Permission.CAN_VIEW_RETRIEVES, PermissionModel.PermissionType.SCHOOL)); underTest.createRole(toCreate); }
@Test public void testRemoveRoles() { String automaticRoleValue = this.getHelper().createName(); IdmAutomaticRoleAttributeDto automaticRole = this.getHelper().createAutomaticRole(this.getHelper().createRole().getId()); this.getHelper().createAutomaticRoleRule(automaticRole.getId(), AutomaticRoleAttributeRuleComparison.EQUALS, AutomaticRoleAttributeRuleType.IDENTITY, IdmIdentity_.description.getName(), null, automaticRoleValue); List<IdmIdentityDto> identities = new ArrayList<IdmIdentityDto>(); for (int index = 0; index < 134; index++) { IdmIdentityDto identity = this.getHelper().createIdentity((GuardedString)null); identities.add(identity); identity.setDescription(automaticRoleValue); identityService.save(identity); identity = identityService.save(identity); checkIdentityRoles(identity, 1, automaticRole.getId()); } for (IdmIdentityDto identity : identities) { identity.setDescription(null); identity = saveIdentityWithouRecalculation(identity); checkIdentityRoles(identity, 1, automaticRole.getId()); } ProcessAllAutomaticRoleByAttributeTaskExecutor autoRolecalculation = new ProcessAllAutomaticRoleByAttributeTaskExecutor(); longRunningTaskManager.executeSync(autoRolecalculation); for (IdmIdentityDto identity : identities) { checkIdentityRoles(identity, 0, null); } }
@Test(expected = InvalidParameterException.class) public void must_throw_exception_on_null_url() { getFilm = new GetFilmImpl(filmsRepository); getFilm.run(); }
@Test public void testObtainStartScales() { final TransitionValues values = new TransitionValues(); values.values.put(Scale.PROPERTY_TRANSITION_SCALE_X, 0.15f); values.values.put(Scale.PROPERTY_TRANSITION_SCALE_Y, 0.95f); final float[] scales = Scale.obtainStartScales(values, 0.5f, 0.25f); assertThat(scales, is(notNullValue())); assertThat(scales.length, is(2)); assertThat(scales[0], is(0.15f)); assertThat(scales[1], is(0.95f)); }
@Test public void testIsErrorEnabled() { when(mockLogger.isErrorEnabled()).thenReturn(true); InternalLogger logger = InternalLoggerFactory.getInstance("mock"); assertTrue(logger.isErrorEnabled()); verify(mockLogger).isErrorEnabled(); }
@Test void isEmptyForEmptyDirectory() { boolean result = s3Client.isEmpty(bucket, keyRoot, null); assertThat(result).isTrue(); }
@Test public void testRemoveConnection() { String namespace = "test-namespace-remove"; String address1 = "12.23.34.45:1997"; String address2 = "12.23.34.46:1998"; String address3 = "12.23.34.47:1999"; ConnectionManager.addConnection(namespace, address1); ConnectionManager.addConnection(namespace, address2); ConnectionManager.addConnection(namespace, address3); assertEquals(3, ConnectionManager.getConnectedCount(namespace)); ConnectionManager.removeConnection(namespace, address3); assertEquals(2, ConnectionManager.getConnectedCount(namespace)); assertFalse(ConnectionManager.getOrCreateConnectionGroup(namespace).getConnectionSet().contains( new ConnectionDescriptor().setAddress(address3) )); }
@Test public void testFromEipServiceJson_emptyJson() throws Exception { GatewaysManager gatewaysManager = new GatewaysManager(mockContext, sharedPreferences); assertEquals(0, gatewaysManager.size()); }
@Test public void when_property_apifest_port_is_empty_use_default_port() throws Exception { String input = "apifest.port="; InputStream in = new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8"))); ServerConfig.loadProperties(in); assertTrue(ServerConfig.port == ServerConfig.DEFAULT_APIFEST_PORT); }
@Test public void testExecuteFunction_3() throws Exception { String[] values = new String[] {}; Variables variables = new Variables(); String result = TaxFunctions.executeFunction(values, variables); assertNotNull(result); }
@Test public void testAddAspect() { PropertyElementDescriptors descriptors = new PropertyElementDescriptors(TestPmo.SINGLE_PMO_PROPERTY); assertThat(descriptors.getAllAspects(), is(empty())); EnabledAspectDefinition enabledAspectDefinition = new EnabledAspectDefinition(EnabledType.ENABLED); descriptors.addAspect(Arrays.<LinkkiAspectDefinition> asList(enabledAspectDefinition)); assertThat(descriptors.getAllAspects(), contains(enabledAspectDefinition)); }
@Test public void testWritingDoesNotFail() throws IOException { Path tempDir = Files.createTempDirectory("rheem-spark"); tempDir.toFile().deleteOnExit(); Path targetFile = tempDir.resolve("testWritingDoesNotFail"); RddChannel.Instance input = this.createRddChannelInstance(Arrays.asList(1.123f, -0.1f, 3f)); final SparkTextFileSink<Float> sink = new SparkTextFileSink<>( targetFile.toUri().toString(), new TransformationDescriptor<>( f -> String.format("%.2f", f), Float.class, String.class ) ); final ChannelInstance[] inputs = new ChannelInstance[]{input}; final ChannelInstance[] outputs = new ChannelInstance[]{}; this.evaluate(sink, inputs, outputs); }
@Test public void testParseOutputSettingsAllSupportedOutputFormats() { OutputSettings outputSettings = instance.parseOutputSettings( "outputOptions:\n" + " outputPassVariantsOnly: true\n" + " numGenes: 1\n" + " outputPrefix: results/Pfeiffer-hiphive\n" + " outputFormats: [HTML, JSON, TSV-GENE, TSV-VARIANT, VCF]\n"); Set<OutputFormat> outputFormats = EnumSet.of(OutputFormat.HTML, OutputFormat.JSON, OutputFormat.TSV_GENE, OutputFormat.TSV_VARIANT, OutputFormat.VCF); assertThat(outputSettings.getOutputFormats(), equalTo((outputFormats))); }
@Test void close() { redis.close(); }
@Test public void testGrouping() throws Exception { assertEquals("0.1", format(Coin.parseCoin("0.1"), 0, 1, 2, 3)); assertEquals("0.010", format(Coin.parseCoin("0.01"), 0, 1, 2, 3)); assertEquals("0.001", format(Coin.parseCoin("0.001"), 0, 1, 2, 3)); assertEquals("0.000100", format(Coin.parseCoin("0.0001"), 0, 1, 2, 3)); assertEquals("0.000010", format(Coin.parseCoin("0.00001"), 0, 1, 2, 3)); assertEquals("0.000001", format(Coin.parseCoin("0.000001"), 0, 1, 2, 3)); }
@Test public void testNotFound() { PluginDescriptorFinder descriptorFinder = new PropertiesPluginDescriptorFinder(); assertThrows(PluginRuntimeException.class, () -> descriptorFinder.find(pluginsPath.resolve("test-plugin-3"))); }
@Test public void shouldRecycleViewInRepositoryPresenter() { final RepositoryPresenter<List<String>> listRepositoryPresenter = repositoryPresenterOf(String.class) .layout(LAYOUT_ID) .bindWith(binder) .recycleWith(recycler) .forList(); listRepositoryPresenter.bind(STRING_LIST, 1, viewHolder); listRepositoryPresenter.recycle(viewHolder); verify(recycler).accept(view); }
@Test public void suggesterWildcardQueryTest() { List<LookupResultItem> suggestions = searcher.suggest(new TermQuery(new Term("test", "test")), "test", new SuggesterWildcardQuery(new Term("test", "?pengrok")), k -> 0); List<String> tokens = suggestions.stream().map(LookupResultItem::getPhrase).collect(Collectors.toList()); assertThat(tokens, contains("opengrok")); }
@Test public void availableStream0ShouldBeFalse() { loopGroup.register(channel).awaitUninterruptibly(); Promise<Channel> channelPromise = new DefaultPromise<>(loopGroup.next()); channelPromise.setSuccess(channel); MultiplexedChannelRecord record = new MultiplexedChannelRecord(channel, 0, null, streamChannelInitializer); assertFalse(record.acquireStream(null)); }
@Test public void shouldAddAlphaValueToQueueWhenBackgroundIsNotReadyToSetAlphaDirectly() { float initAlphaLevel = drawerBackgroundView.blurBackground.getAlpha(); drawerBackgroundView.setAlpha(0.43f); assertThat(drawerBackgroundView.blurBackground.getAlpha()).isEqualTo(initAlphaLevel); }
@Test public void testWriteDisplayData() { XmlIO.Write<Integer> write = XmlIO.<Integer>write().withRootElement("bird").withRecordClass(Integer.class); DisplayData displayData = DisplayData.from(write); assertThat(displayData, hasDisplayItem("rootElement", "bird")); assertThat(displayData, hasDisplayItem("recordClass", Integer.class)); }
@Test public void testWktRowToProto() { ProtoDynamicMessageSchema schemaProvider = schemaFromDescriptor(WktMessage.getDescriptor()); SerializableFunction<Row, DynamicMessage> fromRow = schemaProvider.getFromRowFunction(); assertEquals(WKT_MESSAGE_PROTO.toString(), fromRow.apply(WKT_MESSAGE_ROW).toString()); }
@Test public void associatedTaxaRearedEx() { String associatedTaxa = "ReAred ex Homo sapiens"; List<Map<String, String>> properties = parseAssociatedTaxa(associatedTaxa); assertThat(properties.size(), is(1)); assertThat(properties.get(0).get(TaxonUtil.TARGET_TAXON_NAME), is("ReAred ex Homo sapiens")); assertThat(properties.get(0).get(INTERACTION_TYPE_NAME), is("reared ex")); assertThat(properties.get(0).get(INTERACTION_TYPE_ID), is(nullValue())); }
@Test public void testParse02() throws Exception { DecimalColumnParser decimalColumnParser = new DecimalColumnParser(); String column = "-\\123,456.00"; DecimalColumnParser_FileLineObjectStub01 stub = new DecimalColumnParser_FileLineObjectStub01(); stub.setDecimal02(null); Method method = DecimalColumnParser_FileLineObjectStub01.class .getDeclaredMethod("setDecimal02", new Class[] { BigDecimal.class }); String columnFormat = "-\\###,###,###.##"; decimalColumnParser.parse(column, stub, method, columnFormat); BigDecimal result = stub.getDecimal02(); assertNotNull(result); assertEquals(BigDecimal.valueOf(12345600, 2), result); }
@Test public void equal_zeros() { Version v1 = Version.of(1,2,3), v2 = Version.of(1,2,3,0,0); assertThat(v2).isEqualTo(v1); assertThat(v1).isEqualTo(v2); }
@Test(expected = IllegalArgumentException.class) public void testIsNullWithMessageFailure() { Assert.isNull("Hi", "Failure!"); }
@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = ".*Impossible.*") public void invalidSyntax() throws InvalidSyntaxException { expect(context.getServiceReferences("org.jolokia.restrictor.Restrictor", null)).andThrow(new InvalidSyntaxException("", null)); replay(context); restrictor.isHttpMethodAllowed(HttpMethod.GET); }
@Test public void testRectangularTabList() { RectangularTabOverlay tabOverlay = tabOverlayHandler.enterContentOperationMode(ContentOperationMode.RECTANGULAR); for (val dimension : tabOverlay.getSupportedSizes()) { tabOverlay.setSize(dimension); assertEquals("Size check failed for size " + dimension, dimension.getSize(), clientTabList.getSize()); } }
@Test public void testHandle_dotDirectory() throws IOException { ComponentUpload component = new ComponentUpload(); component.getFields().put("directory", "."); AssetUpload asset = new AssetUpload(); asset.getFields().put("filename", "foo.jar"); asset.setPayload(jarPayload); component.getAssetUploads().add(asset); try { underTest.handle(repository, component); fail("Expected validation exception"); } catch (ValidationErrorsException e) { assertThat(e.getValidationErrors().size(), is(1)); assertThat(e.getValidationErrors().get(0).getMessage(), is("Path is not allowed to have '.' or '..' segments: '" + path("./foo.jar") + "'")); } }
@Test public void canSerialiseDateClass() throws SerialisationException { assertTrue(serialiser.canHandle(Date.class)); }
@Test(expected = ExportCreationException.class) public void doNotExportDirtyEntitlements() throws Exception { config.setProperty(ConfigProperties.SYNC_WORK_DIR, "/tmp/"); Consumer consumer = mock(Consumer.class); Entitlement ent = mock(Entitlement.class); Principal principal = mock(Principal.class); IdentityCertificate idcert = new IdentityCertificate(); List<Entitlement> entitlements = new ArrayList<>(); entitlements.add(ent); when(pki.getSHA256WithRSAHash(any(InputStream.class))).thenReturn( "signature".getBytes()); when(pprov.get()).thenReturn(principal); when(principal.getUsername()).thenReturn("testUser"); when(ec.listByConsumer(consumer)).thenReturn(entitlements); when(ent.isDirty()).thenReturn(true); idcert.setSerial(new CertificateSerial(10L, new Date())); idcert.setKey("euh0876puhapodifbvj094"); idcert.setCert("hpj-08ha-w4gpoknpon*)&^%#"); idcert.setCreated(new Date()); idcert.setUpdated(new Date()); when(consumer.getIdCert()).thenReturn(idcert); KeyPair keyPair = createKeyPair(); when(consumer.getKeyPair()).thenReturn(keyPair); when(pki.getPemEncoded(keyPair.getPrivateKey())).thenReturn("privateKey".getBytes()); CandlepinQuery cqmock = mock(CandlepinQuery.class); when(cqmock.iterator()).thenReturn(Arrays.asList(new ConsumerType("system")).iterator()); when(ctc.listAll()).thenReturn(cqmock); Exporter e = new Exporter(ctc, oc, me, ce, cte, re, ece, ecsa, pe, psa, pce, ec, ee, pki, config, exportRules, pprov, dvc, dve, cdnc, cdne, pc, su, exportExtensionAdapter, translator); e.getFullExport(consumer, null, null, null, new HashMap<>()); }
@Test public void offsetWithHoleTest() throws MismatchedDimensionException, TransformException, ProcessException { final List<Map.Entry<GridCoverage,Geometry[]>> inputs = new ArrayList<>(); { final CoordinateReferenceSystem crs = CommonCRS.WGS84.normalizedGeographic(); final GeneralEnvelope envelope = new GeneralEnvelope(crs); envelope.setRange(0, 0, 2); envelope.setRange(1, 0, 2); final BufferedImage image = BufferedImages.createImage(2, 2, 1, DataBuffer.TYPE_INT); image.getRaster().setSample(0, 0, 0, 1); image.getRaster().setSample(1, 0, 0, 1); image.getRaster().setSample(0, 1, 0, 1); image.getRaster().setSample(1, 1, 0, 1); final GridCoverage gridCoverage2d = new GridCoverageBuilder() .setValues(image) .setDomain(envelope) .flipAxis(1) .build(); Geometry geometry = GF.createPolygon( new Coordinate[] { new Coordinate(0, 0), new Coordinate(2, 0), new Coordinate(2, 2), new Coordinate(0, 2), new Coordinate(0, 0) } ); geometry = JTS.transform(geometry, gridCoverage2d.getGridGeometry().getGridToCRS(PixelInCell.CELL_CORNER)); inputs.add(new AbstractMap.SimpleImmutableEntry<>(gridCoverage2d,new Geometry[]{geometry,null})); } { final CoordinateReferenceSystem crs = CommonCRS.WGS84.normalizedGeographic(); final GeneralEnvelope envelope = new GeneralEnvelope(crs); envelope.setRange(0, 4, 6); envelope.setRange(1, 0, 2); final BufferedImage image = BufferedImages.createImage(2, 2, 1, DataBuffer.TYPE_INT); image.getRaster().setSample(0, 0, 0, 2); image.getRaster().setSample(1, 0, 0, 2); image.getRaster().setSample(0, 1, 0, 2); image.getRaster().setSample(1, 1, 0, 2); final GridCoverage gridCoverage2d = new GridCoverageBuilder() .setValues(image) .setDomain(envelope) .flipAxis(1) .build(); Geometry geometry = GF.createPolygon( new Coordinate[] { new Coordinate(0, 0), new Coordinate(2, 0), new Coordinate(2, 2), new Coordinate(0, 2), new Coordinate(0, 0) } ); geometry = JTS.transform(geometry, gridCoverage2d.getGridGeometry().getGridToCRS(PixelInCell.CELL_CORNER)); inputs.add(new AbstractMap.SimpleImmutableEntry<>(gridCoverage2d,new Geometry[]{geometry,null})); } final GridCoverage gridCoverage = new Compose(inputs,null).executeNow(); final WritableRaster raster = ((BufferedImage)gridCoverage.render(null)).getRaster(); assertEquals(1, raster.getSample(0, 0, 0)); assertEquals(1, raster.getSample(0, 1, 0)); assertEquals(1, raster.getSample(1, 0, 0)); assertEquals(1, raster.getSample(1, 1, 0)); assertEquals(0, raster.getSample(2, 0, 0)); assertEquals(0, raster.getSample(2, 1, 0)); assertEquals(0, raster.getSample(3, 0, 0)); assertEquals(0, raster.getSample(3, 1, 0)); assertEquals(2, raster.getSample(4, 0, 0)); assertEquals(2, raster.getSample(4, 1, 0)); assertEquals(2, raster.getSample(5, 0, 0)); assertEquals(2, raster.getSample(5, 1, 0)); }
@Test public void testRemoveChunkFromOvershadowd() { nextRootPartitionId = 1; PartitionChunk<OvershadowableInteger> chunk = newRootChunk(); Assert.assertTrue(addVisibleToManager(chunk)); assertManagerState(); chunk = newNonRootChunk(0, 2, 1, 2); expectedOvershadowedChunks.add(expectedVisibleChunks.remove(0)); Assert.assertTrue(addVisibleToManager(chunk)); assertManagerState(); chunk = expectedOvershadowedChunks.remove(0); Assert.assertEquals(chunk, manager.removeChunk(chunk)); assertManagerState(); }
@Test public void canAcquireFileResources() { String filePath = ResourceFactoryTest.class.getResource("/com/hotels/styx/common/io/resource.txt").getPath(); Resource resource = ResourceFactory.newResource(filePath); assertThat(resource, contains("This is an example resource.\nIt has content to use in automated tests.")); }
@Test public void testToJSONObject() { HistogramMetric histogramMetric = new HistogramMetric( new Date(), RandomTestUtil.randomDouble()); HistoricalMetric historicalMetric = new HistoricalMetric( Collections.singletonList(histogramMetric), RandomTestUtil.randomDouble()); JSONObject jsonObject = historicalMetric.toJSONObject(); Assert.assertEquals( JSONUtil.put( "histogram", JSONUtil.put( JSONUtil.put( "key", _formatDate(histogramMetric.getKey()) ).put( "value", histogramMetric.getValue() )) ).put( "value", historicalMetric.getValue() ).toJSONString(), jsonObject.toJSONString()); }
@Test public void testShutdownThreadPool() throws InterruptedException { ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1); executor.execute(sampleRunnable); boolean ret = ShutdownThreadsHelper.shutdownExecutorService(executor); boolean isTerminated = executor.isTerminated(); assertEquals("Incorrect return value", ret, isTerminated); assertTrue("ExecutorService is not shutdown", isTerminated); }
@Test public void pruneAndArchiveMultipleLogs() throws IOException { life.start(); generateTransactionLogFiles( logFiles ); long highestCorrectLogFileIndex = 5; File highestCorrectLogFile = logFiles.getLogFileForVersion( highestCorrectLogFileIndex ); long fileSizeBeforePrune = highestCorrectLogFile.length(); int bytesToPrune = 7; long byteOffset = fileSizeBeforePrune - bytesToPrune; LogPosition prunePosition = new LogPosition( highestCorrectLogFileIndex, byteOffset ); life.shutdown(); logPruner.truncate( prunePosition ); life.start(); assertEquals( 6, logFiles.logFiles().length ); assertEquals( byteOffset, highestCorrectLogFile.length() ); File corruptedLogsDirectory = new File( databaseDirectory, CorruptedLogsTruncator.CORRUPTED_TX_LOGS_BASE_NAME ); assertTrue( corruptedLogsDirectory.exists() ); File[] files = corruptedLogsDirectory.listFiles(); assertEquals( 1, files.length ); File corruptedLogsArchive = files[0]; checkArchiveName( highestCorrectLogFileIndex, byteOffset, corruptedLogsArchive ); try ( ZipFile zipFile = new ZipFile( corruptedLogsArchive ) ) { assertEquals( 7, zipFile.size() ); checkEntryNameAndSize( zipFile, highestCorrectLogFile.getName(), bytesToPrune ); long nextLogFileIndex = highestCorrectLogFileIndex + 1; int lastFileIndex = TOTAL_NUMBER_OF_LOG_FILES - 1; for ( long index = nextLogFileIndex; index < lastFileIndex; index++ ) { checkEntryNameAndSize( zipFile, TransactionLogFiles.DEFAULT_NAME + "." + index, SINGLE_LOG_FILE_SIZE ); } checkEntryNameAndSize( zipFile, TransactionLogFiles.DEFAULT_NAME + "." + lastFileIndex, SINGLE_LOG_FILE_SIZE - 1 ); } }
@Test public void isDaemon() { scheduler.isDaemon(); verify(delegate).isDaemon(); }
@Test public void testGetType() { System.out.println("getQueryCode"); assertEquals(Types.REF, new ReferenceField().getType()); assertEquals(Types.REF, new ReferenceField("table").getType()); }
@Test public void addAuditProxyNullListener() throws Exception { AuditSupport auditSupport = new AuditSupport(this); Field mapField = AuditSupport.class.getDeclaredField("map"); mapField.setAccessible(true); AuditListenerMap map = (AuditListenerMap)mapField.get(auditSupport); AuditListener auditListener = new AuditListenerProxy("test", null); auditSupport.addAuditListener(auditListener); Assert.assertNull(map.get("test")); }
@Test public void testNewContext() { DocumentGrapherExecutionContext ctx1 = JsonHelperConfiguration.newContext(db, log); Assert.assertNotNull(ctx1); DocumentGrapherExecutionContext ctx2 = JsonHelperConfiguration.newContext(db, log); Assert.assertNotNull(ctx2); Assert.assertFalse("Configurazion must be renew",ctx1 == ctx2); }
@Test public void testHandle_alreadyAuthorized() throws Exception { attributesMap.set(SecurityHandler.AUTHORIZED_KEY, true); underTest.handle(context); verify(securityFacet, never()).ensurePermitted(any()); }
@Test public void testRoom() throws Exception { final Host host = new Host(new SDSProtocol(), "duck.dracoon.com", new Credentials( System.getProperties().getProperty("sds.user"), System.getProperties().getProperty("sds.key") )); host.setDefaultPath(new Path("test", EnumSet.of(Path.Type.directory, Path.Type.volume, Path.Type.triplecrypt)).getAbsolute()); final SDSSession session = new SDSSession(host, new DisabledX509TrustManager(), new DefaultX509KeyManager()); session.open(Proxy.DIRECT, new DisabledHostKeyCallback(), new DisabledLoginCallback()); session.login(Proxy.DIRECT, new DisabledLoginCallback(), new DisabledCancelCallback()); final SDSNodeIdProvider nodeid = new SDSNodeIdProvider(session).withCache(cache); final Quota.Space quota = new SDSQuotaFeature(session, nodeid).get(); assertNotNull(quota.available); assertNotNull(quota.used); }
@Test public void shouldConvertLong2IpString() { assertTrue("172.16.0.0".equals(IPv4ToolSet.long2ip(2886729728L))); }
@Test public void shouldDisabledFieldWhenTypeForOrderIsSelected() throws Exception { String typeTask = OperationalTaskTypeTaskOTFO.EXECUTION_OPERATION_IN_ORDER.getStringValue(); given(typeTaskField.getFieldValue()).willReturn(typeTask); given(operationalTasksForOrdersService.isOperationalTaskTypeTaskOtherCase(typeTask)).willReturn(false); operationalTaskDetailsHooksOTFO.disableFieldsWhenOrderTypeIsSelected(view); Mockito.verify(nameField).setEnabled(false); Mockito.verify(descriptionField).setEnabled(false); Mockito.verify(productionLineField).setEnabled(false); Mockito.verify(orderField).setEnabled(true); Mockito.verify(technologyOperationComponentField).setEnabled(true); }
@Test public void extract_InvalidTraceId_Size_SingleHeader() { Map<String, String> invalidHeaders = new LinkedHashMap<>(); invalidHeaders.put( B3Propagator.COMBINED_HEADER, "abcdefghijklmnopabcdefghijklmnop" + "00" + "-" + SPAN_ID_BASE16 + "-" + B3Propagator.TRUE_INT); assertThat( getSpanContext( b3PropagatorSingleHeader.extract(Context.current(), invalidHeaders, getter))) .isSameInstanceAs(SpanContext.getInvalid()); }
@Test public void testGetNonExistentPathSize_NonExistantPath() throws IOException { FileSystem mockFs = new MockFileSystem(); assertEquals(-1L, SourceTargetHelper.getPathSize(mockFs, new Path("does/not/exist"))); }
@Test public void getManagedConfiguration() throws Exception { MavenManagedRepository repo = MavenManagedRepository.newLocalInstance( "test01", "My Test repo", Paths.get("target/repositories") ); repo.setLocation( new URI("target/this.is/a/test") ); repo.setScanned( true ); repo.setDescription( repo.getPrimaryLocale(), "This is a description" ); repo.setLayout( "maven2" ); repo.setBlocksRedeployment( true ); repo.setName( repo.getPrimaryLocale(), "test0002" ); repo.setSchedulingDefinition( "0 0 05 ? * WED" ); repo.addActiveReleaseScheme( ReleaseScheme.RELEASE ); repo.addActiveReleaseScheme( ReleaseScheme.SNAPSHOT ); StagingRepositoryFeature stagingFeat = repo.getFeature( StagingRepositoryFeature.class ).get( ); stagingFeat.setStageRepoNeeded( true ); IndexCreationFeature indexCreationFeature = repo.getFeature( IndexCreationFeature.class ).get(); indexCreationFeature.setIndexPath( new URI("test/.indexes") ); indexCreationFeature.setSkipPackedIndexCreation( true ); ArtifactCleanupFeature artifactCleanupFeature = repo.getFeature( ArtifactCleanupFeature.class ).get(); artifactCleanupFeature.setRetentionPeriod( Period.ofDays( 5 ) ); artifactCleanupFeature.setRetentionCount( 7 ); artifactCleanupFeature.setDeleteReleasedSnapshots( true ); ManagedRepositoryConfiguration cfg = provider.getManagedConfiguration( repo ); assertEquals("target/this.is/a/test", cfg.getLocation()); assertTrue(cfg.isScanned()); assertEquals( "This is a description", cfg.getDescription() ); assertEquals("maven2", cfg.getLayout()); assertTrue(cfg.isBlockRedeployments()); assertEquals("test0002", cfg.getName()); assertEquals("0 0 05 ? * WED", cfg.getRefreshCronExpression()); assertTrue(cfg.isStageRepoNeeded()); assertEquals("test/.indexes", cfg.getIndexDir()); assertTrue(cfg.isSkipPackedIndexCreation()); assertEquals(5, cfg.getRetentionPeriod()); assertEquals(7, cfg.getRetentionCount()); assertTrue(cfg.isDeleteReleasedSnapshots()); assertTrue(cfg.isReleases()); assertTrue(cfg.isSnapshots()); assertTrue(cfg.isScanned()); }
@Test public void testVariables() { QuickstartCqlVisitor v = visitLogic( "valueset \"Office Visit\" = ValueSet('2.16.840.1.113883.3.464.1003.101.12.1001')\n" + "valueset \"Acute Pharyngitis\" = ValueSet('2.16.840.1.113883.3.464.1003.102.12.1011')\n" + "let encounter = [NonOccurrence of Encounter, Performance: \"Office Visit\"]\n" + "let pharyngitis = [Condition: \"Acute Pharyngitis\"]"); Collection<String> varSet = v.getVariables(); assertEquals(varSet.size(), 2); assertTrue(varSet.contains("encounter")); assertTrue(varSet.contains("pharyngitis")); }
@Test(expected = SamzaException.class) public void testGetIndexRequestInvalidMessage() throws Exception { INDEX_REQUEST_FACTORY.getIndexRequest(new OutgoingMessageEnvelope(SYSTEM, "{'foo':'bar'}")); }
@Test public void testDeleteMetaField() { IMetadataService metaService = repositoryService.getRepository("software-deployment").getMetadataService(); MetadataContext metaContext = new MetadataContext(); String className = "ServiceCluster"; metaService.deleteMetaField(className, "name", metaContext); MetaClass meta = metaService.getMetaClass(className); Assert.assertNull(meta.getFieldByName("name")); }
@Test void doPeriodicValidation_remittanceInformationStructuredArray_reference_error() { Remittance remittance = new Remittance(); remittance.setReference(VALUE_36_LENGTH); periodicPayment.setRemittanceInformationStructuredArray(Collections.singletonList(remittance)); validator.doPeriodicValidation(periodicPayment, messageError, validationConfig); assertEquals(MessageErrorCode.FORMAT_ERROR_OVERSIZE_FIELD, messageError.getTppMessage().getMessageErrorCode()); assertArrayEquals(new Object[]{"reference", 35}, messageError.getTppMessage().getTextParameters()); }
@Test(expected = UnsupportedOperationException.class) public void testUpdateCode1() throws Exception { this.allThesaurus.updateCode("oldns", "oldcode", "newcode"); }
@Test public void doubleHashNextWithError() { DeliberateException de = new DeliberateException(); Iterator<Integer> iterator = Publisher.<Integer>failed(de) .toIterable().iterator(); assertThat("Item expected but not found.", iterator.hasNext(), is(true)); assertThat("Second hasNext inconsistent with first.", iterator.hasNext(), is(true)); expected.expect(sameInstance(de)); iterator.next(); }
@Test public void parseWithoutParser() { Fixture fixture = Fixture.parseFrom(Fixtures.SIMPLE_WITH_DELAY); assertThat(fixture.statusCode).isEqualTo(200); assertThat(fixture.delay).isEqualTo(300); assertThat(fixture.body).isEqualTo("{result:{}}"); assertThat(fixture.headers).containsExactly("Auth:auth", "key:value"); }
@Test public void Permission_JSONから生成() throws Exception { JSONObject jsonRead = new JSONObject(); jsonRead.put("read", true); NCMBAcl.Permission p1 = new NCMBAcl.Permission(jsonRead); Assert.assertTrue(p1.readable); Assert.assertFalse(p1.writable); JSONAssert.assertEquals(new JSONObject("{'read':true}"), p1.toJson(), false); JSONObject jsonWrite = new JSONObject(); jsonWrite.put("write", true); NCMBAcl.Permission p2 = new NCMBAcl.Permission(jsonWrite); Assert.assertFalse(p2.readable); Assert.assertTrue(p2.writable); JSONAssert.assertEquals(new JSONObject("{'write':true}"), p2.toJson(), false); JSONObject jsonReadWrite = new JSONObject(); jsonReadWrite.put("read", true); jsonReadWrite.put("write", true); NCMBAcl.Permission p3 = new NCMBAcl.Permission(jsonReadWrite); Assert.assertTrue(p3.readable); Assert.assertTrue(p3.writable); JSONAssert.assertEquals(new JSONObject("{'read':true, 'write':true}"), p3.toJson(), false); }
@Test public void parseNotification() throws Exception { InputStream input = JsonDeserializerTest.class.getResourceAsStream(NOTIFICATION_JSON); String jsonString = IOUtils.toString(input); List<LWM2MResource> resources = deserializer.deserialize(jsonString); assertThat(resources, hasSize(1)); assertThat(resources.get(0).getType(), nullValue()); assertThat(resources.get(0).getNestedInstances(), hasSize(3)); assertThat(resources.get(0).getNestedInstances().get(0).getType(), equalTo(LWM2MResourceType.FLOAT)); }
@Test public void testGettersAndSetters() { realm.getAuthenticationTokenClass(); assertEquals("src/test/resources/tls/server/granted_certs.jks", realm.getGrantedKeyStoreName()); assertEquals("azerty12", realm.getGrantedKeyStorePassphrase()); assertEquals("src/test/resources/tls/server/truststore.jks", realm.getTrustedKeyStoreName()); assertEquals("azerty10", realm.getTrustedKeyStorePassphrase()); }
@Test public void resolveViewNameMobileDeviceMobilePrefixForward() throws Exception { this.viewName = "forward:about"; device.setDeviceType(DeviceType.MOBILE); request.setAttribute(DeviceUtils.CURRENT_DEVICE_ATTRIBUTE, device); viewResolver.setMobilePrefix("mobile/"); replayMocks("forward:about"); }
@Test public void testSupportedEditAction() { assertThat(cell.getSupportedEditAction()).isEqualTo(GridCellEditAction.SINGLE_CLICK); }
@Test public void testGetReferenceBeans() { ReferenceAnnotationBeanPostProcessor beanPostProcessor = context.getBean(BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class); Collection<ReferenceBean<?>> referenceBeans = beanPostProcessor.getReferenceBeans(); Assert.assertEquals(1, referenceBeans.size()); ReferenceBean<?> referenceBean = referenceBeans.iterator().next(); TestBean testBean = context.getBean(TestBean.class); Assert.assertNotNull(referenceBean.get()); }
@Test public void parseValid() throws Exception { Element connectionLeasingElement = getXMLConfigurationElement("5000", "milliseconds"); LeaseConfigurationParser parser = new LeaseConfigurationParser(); LeaseConfiguration configuration = parser.parse(connectionLeasingElement, "source"); assertEquals(5000L, configuration.getLeaseLength()); }
@Test public void testSetHidden() { EasyMockSupport support = new EasyMockSupport(); RenderPropertyChangeListener listener = createListener(support); EasyMock.expectLastCall().times(2); DefaultTileRenderProperties props = new DefaultTileRenderProperties(10, true, true); props.setHidden(true); props.addListener(listener); support.replayAll(); ProxyTileRenderProperties proxyProps = new ProxyTileRenderProperties(props); assertTrue(proxyProps.isHidden()); proxyProps.setHidden(false); assertFalse(proxyProps.isHidden()); assertFalse(props.isHidden()); props.setHidden(true); assertTrue(proxyProps.isHidden()); support.verifyAll(); }
@Test(expectedExceptions = BadRequestException.class) public void shouldValidateUmaPolicyPermissionHasScopesAsListOfStrings() throws BadRequestException { JsonValue policy = json(object( field("policyId", "POLICY_ID"), field("permissions", array( object( field("subject", "SUBJECT_ONE"), field("scopes", array("SCOPE_A", "SCOPE_B"))), object( field("subject", "SUBJECT_TWO"), field("scopes", array(1))) )) )); try { UmaPolicy.valueOf(resourceSet, policy); } catch (BadRequestException e) { assertThat(e.getMessage()).contains("Required attribute, 'scopes', must be an array of Strings"); throw e; } }
@Test(timeout = 60000, expected = LogNotFoundException.class) public void testCreateLogMetadataWithCreateIfNotExistsSetToFalse() throws Exception { String logName = testName.getMethodName(); String logIdentifier = "<default>"; Utils.ioResult(getLog(uri, logName, logIdentifier, zkc, true, false)); }
@Test public void testIsNotApplicableWithEmtpyUser() { PlainMechanism mech = new PlainMechanism(); assertFalse("Should not be applicable with empty username", mech.isApplicable("", "pass", null)); }
@Test public void isWriteableForListOfOutputItems() throws Exception { Class<List> type = List.class; ParameterizedType genericType = ParameterizedTypeImpl.newParameterizedType(List.class, OutputItem.class); assertTrue(collectionMultipartFormDataMessageBodyWriter.isWriteable(type, genericType, new Annotation[0], null)); }
@Test public void testEnvironment() { LuaWrapper e = env.createTable(LuaFields.ENV); e.setString("CLASSPATH", "./*.jar"); e.setString("USER", "bob"); assertEquals(ImmutableMap.of("CLASSPATH", "./*.jar", "USER", "bob"), lclp.getEnvironment()); }
@Test public void unmarshall_ValidJsonContent_UnmarshallsCorrectly() throws Exception { CustomException ase = (CustomException) unmarshaller.unmarshall(JSON); assertEquals("Some error message", ase.getErrorMessage()); assertEquals("This is a customField", ase.getCustomField()); assertEquals(Integer.valueOf(42), ase.getCustomInt()); }
@Test public void copyReadOnlyBufferToNativeMemory() { final byte[] bytes = new byte[] {0, 1, 2, 3, 4, 5, 6, 7}; final ByteBuffer buf = ByteBuffer.wrap(bytes).asReadOnlyBuffer(); assertEquals(8, buf.remaining()); final Pointer ptr = BufferUtils.copyToNativeMemory(buf); assertNotNull(ptr); assertArrayEquals(bytes, ptr.getByteArray(0, bytes.length)); assertAll("buffer's state", () -> assertEquals(0, buf.position()), () -> assertEquals(8, buf.limit()) ); }
@Test public void testGetMasterRelation() { Mockito.when(resourceEntity.getMasterRelation(Matchers.any(ResourceEntity.class), Matchers.anySet())).thenCallRealMethod(); final int slaveResourceId = 21; final Set<ConsumedResourceRelationEntity> relations = new HashSet<ConsumedResourceRelationEntity>(); final ConsumedResourceRelationEntity resourceRelation = Mockito.mock(ConsumedResourceRelationEntity.class); relations.add(resourceRelation); final ResourceEntity slaveResource = Mockito.mock(ResourceEntity.class); Mockito.when(slaveResource.getId()).thenReturn(slaveResourceId); Mockito.when(resourceRelation.getSlaveResource()).thenReturn(slaveResource); final AbstractResourceRelationEntity result = resourceEntity.getMasterRelation(slaveResource, relations); assertEquals(resourceRelation, result); }
@Test public void testEquals() throws Exception { long now = System.currentTimeMillis(); Metric m1 = new Metric("a", tags1, now, 42); Metric m2 = new Metric("a", tags2, now, 42); Metric m3 = new Metric("a", tags1, now, 42); assertNotNull(m1); assertFalse(m1.toString().equals(m2.toString())); assertTrue(m1.equals(m1)); assertFalse(m1.equals(m2)); assertTrue(m1.equals(m3)); }
@Test(expected = WrongReferenceAttributeValueException.class) public void testCheckNullValue() throws Exception { System.out.println("testCheckNullValue()"); attributeToCheck.setValue(null); classInstance.checkAttributeSemantics(session, vo, attributeToCheck); }
@Test public void testResolveExceptionReceiverSoap12() throws Exception { Properties mappings = new Properties(); mappings.setProperty(Exception.class.getName(), "SENDER, Sender error"); mappings.setProperty(RuntimeException.class.getName(), "RECEIVER, Receiver error"); resolver.setExceptionMappings(mappings); MessageFactory messageFactory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL); SOAPMessage message = messageFactory.createMessage(); SoapMessageFactory factory = new SaajSoapMessageFactory(messageFactory); MessageContext context = new DefaultMessageContext(new SaajSoapMessage(message), factory); boolean result = resolver.resolveException(context, null, new IllegalArgumentException("bla")); Assert.assertTrue("resolveException returns false", result); Assert.assertTrue("Context has no response", context.hasResponse()); SoapMessage response = (SoapMessage) context.getResponse(); Assert.assertTrue("Response has no fault", response.getSoapBody().hasFault()); Soap12Fault fault = (Soap12Fault) response.getSoapBody().getFault(); Assert.assertEquals("Invalid fault code on fault", SoapVersion.SOAP_12.getServerOrReceiverFaultName(), fault.getFaultCode()); Assert.assertEquals("Invalid fault string on fault", "Receiver error", fault.getFaultReasonText(Locale.ENGLISH)); Assert.assertNull("Detail on fault", fault.getFaultDetail()); }
@Test public void testOnMouseDown() { final int clientX = 1; final int clientY = 2; final int x = 3; final int y = 4; widget.initialize(item, shapeFactory, itemMouseDownCallback); widget.onMouseDown(clientX, clientY, x, y); verify(itemMouseDownCallback, times(1)).accept(itemMouseEventCaptor.capture()); assertEquals(ITEM_ID, itemMouseEventCaptor.getValue().getId()); assertEquals(clientX, itemMouseEventCaptor.getValue().getMouseX(), 0); assertEquals(clientY, itemMouseEventCaptor.getValue().getMouseY(), 0); assertEquals(x, itemMouseEventCaptor.getValue().getItemX(), 0); assertEquals(y, itemMouseEventCaptor.getValue().getItemY(), 0); }
@Test public void testPoll() { PriorityQueue<TestElement> queue = new PriorityQueue<TestElement>(0); assertEmptyQueue(queue); TestElement a = new TestElement(5); TestElement b = new TestElement(10); TestElement c = new TestElement(2); TestElement d = new TestElement(7); TestElement e = new TestElement(6); assertOffer(queue, a); assertOffer(queue, b); assertOffer(queue, c); assertOffer(queue, d); assertSame(c, queue.peek()); assertSame(c, queue.poll()); assertEquals(3, queue.size()); assertOffer(queue, e); assertEquals(4, queue.size()); assertSame(a, queue.peek()); assertSame(a, queue.poll()); assertEquals(3, queue.size()); assertSame(e, queue.peek()); assertSame(e, queue.poll()); assertEquals(2, queue.size()); assertSame(d, queue.peek()); assertSame(d, queue.poll()); assertEquals(1, queue.size()); assertSame(b, queue.peek()); assertSame(b, queue.poll()); assertEmptyQueue(queue); }
@Test public void checkNaviProptertyCanBeCreated() throws ODataJPAModelException { EntityType<?> et = helper.getEntityType(BusinessPartner.class); Attribute<?, ?> jpaAttribute = helper.getDeclaredAttribute(et, "roles"); new IntermediateNavigationProperty(new JPADefaultEdmNameBuilder(PUNIT_NAME), schema.getStructuredType(jpaAttribute), jpaAttribute, schema); }
@SuppressWarnings("unchecked") @Test public void testBidirectionalReachabilityFailure() throws IOException { NetworkFactory nf = new NetworkFactory(); Configuration.Builder cb = nf.configurationBuilder().setConfigurationFormat(ConfigurationFormat.CISCO_IOS); Interface.Builder ib = nf.interfaceBuilder().setActive(true); HeaderSpace tcpHeaderSpace = HeaderSpace.builder().setIpProtocols(ImmutableList.of(IpProtocol.TCP)).build(); ExprAclLine permitTcpLine = ExprAclLine.accepting().setMatchCondition(match(tcpHeaderSpace)).build(); HeaderSpace udpHeaderSpace = HeaderSpace.builder().setIpProtocols(ImmutableList.of(IpProtocol.UDP)).build(); ExprAclLine permitUdpLine = ExprAclLine.accepting().setMatchCondition(match(udpHeaderSpace)).build(); Configuration source1 = cb.build(); Vrf vrf = nf.vrfBuilder().setOwner(source1).build(); ib.setOwner(source1).setVrf(vrf); Interface source1Iface = ib.setAddress(ConcreteInterfaceAddress.parse("2.0.0.1/29")).build(); source1Iface.setIncomingFilter( nf.aclBuilder().setOwner(source1).setLines(ImmutableList.of(permitTcpLine)).build()); vrf.setStaticRoutes( ImmutableSortedSet.of( StaticRoute.builder() .setNetwork(Prefix.parse("255.255.255.0/24")) .setAdministrativeCost(1) .setNextHopInterface(source1Iface.getName()) .setNextHopIp(Ip.parse("2.0.0.3")) .build())); Configuration source2 = cb.build(); vrf = nf.vrfBuilder().setOwner(source2).build(); ib.setOwner(source2).setVrf(vrf); Interface source2Iface1 = ib.setAddress(ConcreteInterfaceAddress.parse("1.0.0.0/31")).build(); Interface source2Iface2 = ib.setAddress(ConcreteInterfaceAddress.parse("2.0.0.2/29")).build(); Prefix source2Iface1RoutePrefix = Prefix.parse("9.9.9.9/32"); vrf.setStaticRoutes( ImmutableSortedSet.of( StaticRoute.builder() .setNetwork(source2Iface1RoutePrefix) .setAdministrativeCost(1) .setNextHopInterface(source2Iface1.getName()) .build(), StaticRoute.builder() .setNetwork(Prefix.parse("255.255.255.0/24")) .setAdministrativeCost(1) .setNextHopInterface(source2Iface2.getName()) .setNextHopIp(Ip.parse("2.0.0.3")) .build())); Configuration fw = cb.build(); ib.setOwner(fw).setVrf(nf.vrfBuilder().setOwner(fw).build()); ib.setAddress(ConcreteInterfaceAddress.parse("2.0.0.3/29")).build(); Interface fwI2 = ib.setAddress(ConcreteInterfaceAddress.parse("3.0.0.1/29")).build(); Interface fwI3 = ib.setAddress(ConcreteInterfaceAddress.parse("255.255.255.0/24")).build(); IpAccessList permitUdpAcl = nf.aclBuilder().setOwner(fw).setLines(ImmutableList.of(permitUdpLine)).build(); fwI2.setFirewallSessionInterfaceInfo( new FirewallSessionInterfaceInfo( false, ImmutableList.of(fwI2.getName()), null, permitUdpAcl.getName())); Ip poolIp = Ip.parse("5.5.5.5"); fwI3.setOutgoingTransformation(always().apply(assignSourceIp(poolIp, poolIp)).build()); fwI3.setIncomingFilter( nf.aclBuilder().setOwner(fw).setLines(ImmutableList.of(ExprAclLine.REJECT_ALL)).build()); fwI3.setFirewallSessionInterfaceInfo( new FirewallSessionInterfaceInfo(false, ImmutableList.of(fwI3.getName()), null, null)); SortedMap<String, Configuration> configurations = ImmutableSortedMap.of( source1.getHostname(), source1, source2.getHostname(), source2, fw.getHostname(), fw); Batfish batfish = getBatfish(configurations, temp); batfish.computeDataPlane(batfish.getSnapshot()); Location source1Loc = new InterfaceLocation(source1.getHostname(), source1Iface.getName()); Location source2Loc = new InterfaceLinkLocation(source2.getHostname(), source2Iface1.getName()); Location fwI2Loc = new InterfaceLinkLocation(fw.getHostname(), fwI2.getName()); Ip source1LocIp = Ip.parse("2.0.0.1"); Prefix source2LocPrefix = Prefix.parse("9.9.9.0/24"); Ip fwI2LocIp = Ip.parse("1.0.0.5"); IpSpaceAssignment assignment = IpSpaceAssignment.builder() .assign(source1Loc, source1LocIp.toIpSpace()) .assign(source2Loc, source2LocPrefix.toIpSpace()) .assign(fwI2Loc, fwI2LocIp.toIpSpace()) .build(); HeaderSpaceToBDD headerSpaceToBDD = new HeaderSpaceToBDD(PKT, ImmutableMap.of()); IpSpaceToBDD srcIpSpaceToBdd = headerSpaceToBDD.getSrcIpSpaceToBdd(); BDD source1LocIpBdd = PKT.getSrcIp().value(source1LocIp.asLong()); BDD source1LocSuccessBdd = source1LocIpBdd.and(headerSpaceToBDD.toBDD(tcpHeaderSpace)); BDD source1LocFailBdd = source1LocIpBdd.and(headerSpaceToBDD.toBDD(tcpHeaderSpace).not()); BDD source2LocPrefixBdd = srcIpSpaceToBdd.toBDD(source2LocPrefix); BDD source2LocSuccessBdd = srcIpSpaceToBdd.toBDD(source2Iface1RoutePrefix); BDD source2LocFailBdd = source2LocPrefixBdd.and(source2LocSuccessBdd.not()); BDD fwI2LocIpBdd = PKT.getSrcIp().value(fwI2LocIp.asLong()); BDD fwI2LocSuccessBdd = fwI2LocIpBdd.and(headerSpaceToBDD.toBDD(udpHeaderSpace)); BDD fwLocFailBdd = fwI2LocIpBdd.and(headerSpaceToBDD.toBDD(udpHeaderSpace).not()); Ip dstIp = Ip.parse("255.255.255.1"); BDD dstIpBdd = PKT.getDstIp().value(dstIp.asLong()); DataPlane dataPlane = batfish.loadDataPlane(batfish.getSnapshot()); BidirectionalReachabilityResult result = new BidirectionalReachabilityAnalysis( PKT, configurations, dataPlane.getForwardingAnalysis(), new IpsRoutedOutInterfacesFactory(dataPlane.getFibs()), assignment, matchDst(dstIp), ImmutableSet.of(), ImmutableSet.of(), configurations.keySet(), ALL_DISPOSITIONS) .getResult(); assertEquals( result.getStartLocationReturnPassSuccessBdds(), ImmutableMap.of( source1Loc, source1LocSuccessBdd.and(dstIpBdd), source2Loc, source2LocSuccessBdd.and(dstIpBdd), fwI2Loc, fwI2LocSuccessBdd.and(dstIpBdd))); assertEquals( result.getStartLocationReturnPassFailureBdds(), ImmutableMap.of( source1Loc, source1LocFailBdd.and(dstIpBdd), source2Loc, source2LocFailBdd.and(dstIpBdd), fwI2Loc, fwLocFailBdd.and(dstIpBdd))); }
@Test public void testGetPRFAlgorithm() { for (CipherSuite suite : CipherSuite.values()) { if (suite.name().contains("GOST")) { continue; } assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS10, suite) == PRFAlgorithm.TLS_PRF_LEGACY); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS11, suite) == PRFAlgorithm.TLS_PRF_LEGACY); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.DTLS10, suite) == PRFAlgorithm.TLS_PRF_LEGACY); } assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS12, CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384) == PRFAlgorithm.TLS_PRF_SHA384); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.DTLS12, CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384) == PRFAlgorithm.TLS_PRF_SHA384); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS12, CipherSuite.TLS_CECPQ1_ECDSA_WITH_CHACHA20_POLY1305_SHA256) == PRFAlgorithm.TLS_PRF_SHA256); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.DTLS12, CipherSuite.TLS_CECPQ1_ECDSA_WITH_CHACHA20_POLY1305_SHA256) == PRFAlgorithm.TLS_PRF_SHA256); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS12, CipherSuite.SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA) == PRFAlgorithm.TLS_PRF_SHA256); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.DTLS12, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CCM) == PRFAlgorithm.TLS_PRF_SHA256); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS12, CipherSuite.TLS_DH_anon_EXPORT_WITH_RC4_40_MD5) == PRFAlgorithm.TLS_PRF_SHA256); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS12, CipherSuite.TLS_GOSTR341001_WITH_28147_CNT_IMIT) == PRFAlgorithm.TLS_PRF_GOSTR3411); assertTrue(AlgorithmResolver.getPRFAlgorithm(ProtocolVersion.TLS12, CipherSuite.TLS_GOSTR341112_256_WITH_28147_CNT_IMIT) == PRFAlgorithm.TLS_PRF_GOSTR3411_2012_256); }
@Test public void testOwnersActions() throws ApiException { final String resourceId = SamConstants.WORKFLOW_PREFIX + FOO_WORKFLOW_NAME; when(resourcesApiMock.resourceAction(SamConstants.RESOURCE_TYPE, resourceId, SamConstants.toSamAction(Role.Action.SHARE))) .thenReturn(Boolean.TRUE); final List<Role.Action> actions = samPermissionsImpl.getActionsForWorkflow(userMock, workflowInstance); Assert.assertEquals(Role.Action.values().length, actions.size()); }
@Test public final void testUpdateNonexistentState() { DBReportRequestStateManager mgr = new DBReportRequestStateManager(sessionFactory); ReportRequestState newState = getTestReportRequestState( testDevices.get(0) ); newState.setDueDate(DeviceGroup.MINUTE_MS_INTERVAL); mgr.update(newState); Assert.assertEquals(mgr.getState(testDevices.get(0)), newState); }
@Test public void checkOrderPreserved() throws SerialisationException { byte[] startBytes = serialiser.serialise(0.0f); for (Float test = 1.0f; test >= 5; test += 0.1f) { byte[] newTestBytes = serialiser.serialise(test); assertTrue(compare(newTestBytes, startBytes) < 0); startBytes = newTestBytes; } }
@Test public void testAttributeValueMapToLogString() { assertThat( TimeSeriesDAODynamoDB.attributeValueMapToLogString( ImmutableMap.of( "string", new AttributeValue().withS("s"), "bool", new AttributeValue().withBOOL(true))), is("string=s")); assertThat( TimeSeriesDAODynamoDB.attributeValueMapToLogString( ImmutableMap.of( "number", new AttributeValue().withS("1"), "bool", new AttributeValue().withBOOL(true))), is("number=1")); }
@Test public void testSecondOrder() { BasisFunctionKnots knots = BasisFunctionKnots.fromInternalKnots(KNOTS, 2); final Function<Double, Double> func = GENERATOR.generate(knots, 3); assertThat(func.apply(0.76)).isEqualTo(0.0); assertThat(func.apply(1.5)).isEqualTo(0.125); assertThat(func.apply(2.0)).isEqualTo(0.5); assertThat(func.apply(2.5)).isEqualTo(0.75); assertThat(func.apply(4.0)).isEqualTo(0.0); }
@Test public void updatePageRequest_withEmptyTitle_throwsIllegalArgumentException() { this.expectedException.expect(IllegalArgumentException.class); this.expectedException.expectMessage("title must be set"); this.httpRequestFactory.updatePageRequest("1234", "1", "", "content", 2, "test message"); }
@Test public void shouldThrowExceptionWhenConvertingFromStringAndWrongFormat() { String booleanInString = "on"; String format = "wrong format"; Map<String, String> attributes = singletonMap("format", format); assertThatThrownBy(() -> converter.fromString(Boolean.class, booleanInString, attributes)) .isExactlyInstanceOf(IllegalArgumentException.class) .hasMessageEndingWith("Invalid 'format' meta-attribute value, it must contain '/' separator character. Provided value is 'wrong format'."); }
@Test public void sendingCoffeeServedShouldIncreaseCoffeeCount() { new JavaTestKit(system) {{ ActorRef guest = system.actorOf(Guest.props(system.deadLetters(), new Coffee.Akkaccino(), duration("100 milliseconds"))); interceptInfoLogMessage(this, ".*[Ee]njoy.*1\\.*", 1, () -> { guest.tell(new Waiter.CoffeeServed(new Coffee.Akkaccino()), ActorRef.noSender()); }); }}; }
@Test public void createScopeByTypeKeyAndChildScopeWithoutDefaultKeyTest() { PreferenceScope componentScope = scopeFactory.createScope(DefaultScopes.COMPONENT.type(), "my-component", genericScope); assertEquals(DefaultScopes.COMPONENT.type(), componentScope.type()); assertEquals("my-component", componentScope.key()); }
@Test public void testPathComponents() throws Exception { assertEquals(ImmutableList.of("a", "b", "c"), PathUtils.toPathComponents(Path.of("/a/b/c"))); assertEquals(ImmutableList.of("a", "b", "c"), PathUtils.toPathComponents(Path.of("a/b/c"))); assertEquals(ImmutableList.of("a", "b", "c/"), PathUtils.toPathComponents(Path.of("a/b/\"c/\""))); }
@Test public void testEmptyNodeSelectionTerm() { NodeSelectorSpec spec = new NodeSelectorSpec(); List<InetSocketAddress> result = manager.getServers(spec); Assert.assertEquals(numOfServers, result.size()); }
@Test public void isAvailableReturnsTrueWhenNoCurrenciesSpecifiedInConfiguration() { when(apmConfigurationMock.getCurrencies()).thenReturn(Collections.emptySet()); final boolean result = testObj.isAvailable(apmConfigurationMock, cartModelMock); assertTrue(result); }
@Test public void testUnconfirmedReadsNumber() { final SFTPReadFeature feature = new SFTPReadFeature(session); assertEquals(33, feature.getMaxUnconfirmedReads(new TransferStatus().length(TransferStatus.MEGA * 1L))); assertEquals(64, feature.getMaxUnconfirmedReads(new TransferStatus().length((long) (TransferStatus.GIGA * 1.3)))); }
@Test(expected = AccessControlException.class) public void testGetPrivilegeInvalidRemappedNamespace() throws Exception { NamePathMapper mapper = new NamePathMapperImpl(new LocalNameMapper(root, ImmutableMap.of("prefix", "unknownUri"))); create(root, mapper).getPrivilege("prefix:read"); }
@Test public void testInstanceOfSampleTissueProcessing() throws Exception { SampleSlide slide = new SampleSlideImpl(); assertTrue("Slide is a type of Tissue Processing", LimsUtils.isTissueProcessingSample(slide)); }
@Test public void testSize() { assertEquals(9, tree.size()); assertEquals(16, treeWithDups.size()); }
@Test(expected = IllegalArgumentException.class) public void shouldThrowIllegalArgumentExceptionIfImplDefinedPartLengthIsGreaterThanNine() { RecordFormat.create().withImplDefinedPartLength(10); }
@Test public void tooLongInputStringShouldContainErrorCode() { assertThat(QueryMessages.inputTooLong().toString(), containsString("%ERROR:107:")); }
@Test public void testGetLocaleWhenLanguageAndCountry() { properties.put("locale", "fr_FR"); userTaskPageProviver.setProperties(properties); assertEquals(new Locale("fr", "FR"), userTaskPageProviver.getLocale()); }
@Test public void testGetByProductId() { ProductCategoryService productCategoryService = (ProductCategoryService) ctx().getBean(ServiceSpringKeys.PRODUCT_CATEGORY_SERVICE); EntityFactory entityFactory = productCategoryService.getGenericDao().getEntityFactory(); ProductService productService = (ProductService) ctx().getBean(ServiceSpringKeys.PRODUCT_SERVICE); ProductTypeService productTypeService = (ProductTypeService) ctx().getBean(ServiceSpringKeys.PRODUCT_TYPE_SERVICE); BrandService brandService = (BrandService) ctx().getBean(ServiceSpringKeys.BRAND_SERVICE); Product product = entityFactory.getByIface(Product.class); product.setCode("PROD_CODE"); product.setName("product"); product.setDescription("description"); product.setProducttype(productTypeService.findById(1L)); product.setBrand(brandService.findById(101L)); product = productService.create(product); assertTrue(product.getProductId() > 0); ProductCategory productCategory = entityFactory.getByIface(ProductCategory.class); productCategory.setProduct(product); productCategory.setCategory(categoryService.findById(128L)); productCategory.setRank(0); productCategory = productCategoryService.create(productCategory); assertTrue(productCategory.getProductCategoryId() > 0); productCategory = entityFactory.getByIface(ProductCategory.class); productCategory.setProduct(product); productCategory.setCategory(categoryService.findById(133L)); productCategory.setRank(0); productCategory = productCategoryService.create(productCategory); assertTrue(productCategory.getProductCategoryId() > 0); List<Category> list = categoryService.findByProductId(product.getProductId()); assertEquals(2, list.size()); }
@Test public void testResizeNodes() { final Node stage = createNode(AdHocSubprocess.class, 1.0, 1.0, 25.0, 25.0); final Node task = createNode(UserTask.class, 1.0, 1.0, 5.0, 5.0); final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(stage, task, index, originalParent, originalIndex); final Edge childEdge = mock(Edge.class); when(childEdge.getContent()).thenReturn(mock(Child.class)); when(childEdge.getTargetNode()).thenReturn(task); when(stage.getOutEdges()).thenReturn(Collections.singletonList(childEdge)); command.resizeNodes(); assertEquals(Optional.of(Bounds.create(1.0, 1.0, 25.0, 25.0)), command.originalParentBounds); assertEquals(1, command.originalBounds.size()); assertEquals(Optional.of(Bounds.create(1.0, 1.0, 5.0, 5.0)), command.originalBounds.get(task.getUUID())); assertEquals(Bounds.create(1.0, 1.0, 1.0 + CHILD_WIDTH + STAGE_GAP * 2, 1.0 + CHILD_HEIGHT + STAGE_GAP * 2), ((View) stage.getContent()).getBounds()); assertEquals(Bounds.create(STAGE_GAP, STAGE_GAP, STAGE_GAP + CHILD_WIDTH, STAGE_GAP + CHILD_HEIGHT), ((View) task.getContent()).getBounds()); command.undoResizeNodes(); assertEquals(Bounds.create(1.0, 1.0, 25.0, 25.0), ((View) stage.getContent()).getBounds()); assertEquals(Bounds.create(1.0, 1.0, 5.0, 5.0), ((View) task.getContent()).getBounds()); }
@Test public void html_tags_at_start_of_string_are_removed() { Assert.assertEquals("foo", DocumentationUtils.stripHtmlTags ("<bar>foo</bar>")); }
@Test public void shouldParseBindAllAsLocalhost() { String sourceIp = "0.0.0.0"; String parsedIp = ManagementClient.formatIP(sourceIp); Assert.assertEquals("127.0.0.1", parsedIp); }
@Test public void testEquals() { DecorateInstruction deco1 = new DecorateInstruction("decoA"); DecorateInstruction deco2 = new DecorateInstruction("decoA"); DecorateInstruction deco3 = new DecorateInstruction("deco3"); Assert.assertEquals(deco1, deco2); Assert.assertEquals(deco1.hashCode(), deco2.hashCode()); Assert.assertEquals(deco1, deco1); Assert.assertNotEquals(deco1, deco3); Assert.assertNotEquals(deco2, deco3); Assert.assertNotEquals(deco2, null); Assert.assertNotEquals(deco2, new Object()); }
@Test public void testModifySecurityConfig1() { SecurityConfig sc = new SecurityConfig(); Mockito.when(securityRepository.findById(Mockito.any(UUID.class))).thenReturn(null); Response result = securityServiceImpl.modifySecurityConfig(sc, headers); Assert.assertEquals(new Response<>(0, "Security Config Not Exist", null), result); }
@Test public void testButtonItemSetsItsId() { TestButtonItem item = new TestButtonItem(); final int id = 12345; item.setId(id); assertEquals("Button's id should be set", item.createButton(mParent).getId(), id); }
@Test public void tryToGetInstanceWithNullReason() { assertThatNullPointerException() .isThrownBy(() -> Shutdown.getInstance(null, dittoHeaders)) .withMessageContaining("ShutdownReason") .withMessageContaining("must not be null") .withNoCause(); }
@Test void testRenewCertificateWhenCertGenerationFeatureIsEnabledButClusterDoesNotHaveUserFacingCert() { Stack stack = TestUtil.stack(); boolean result = underTest.renewCertificate(stack); verify(environmentClientService, Mockito.times(0)).getByCrn(Mockito.anyString()); Assertions.assertEquals(Boolean.TRUE, result); }
@Test public void ipOrNullv6_notMappedIpv4() { assertThat(IpLiteral.ipOrNull("::ffef:43.0.192.2")).isNull(); }
@Test public void clientCaModeTrustStorePasswordInConfigAndPrefixedEnvVarThenValid() { final SslConfig sslConfig = new SslConfig(); sslConfig.setTls(SslAuthenticationMode.STRICT); sslConfig.setGenerateKeyStoreIfNotExisted(true); sslConfig.setServerTrustMode(SslTrustMode.CA); sslConfig.setClientTrustMode(SslTrustMode.CA); sslConfig.setServerTrustStore(tmpFile); sslConfig.setServerTrustStorePassword("password".toCharArray()); sslConfig.setClientTrustStore(tmpFile); sslConfig.setEnvironmentVariablePrefix("PREFIX"); sslConfig.setClientTrustStorePassword("password".toCharArray()); when(envVarProvider.hasEnv(EnvironmentVariables.CLIENT_TRUSTSTORE_PWD)).thenReturn(false); when(envVarProvider.hasEnv( sslConfig.getEnvironmentVariablePrefix() + "_" + EnvironmentVariables.CLIENT_TRUSTSTORE_PWD)) .thenReturn(true); final boolean result = validator.isValid(sslConfig, context); final String msg = "Trust store config not valid. If client trust mode is CA, trust store must exist and not be null"; verify(context, never()).buildConstraintViolationWithTemplate(msg); assertThat(result).isTrue(); }
@Test void accesslog() { ProtocolBuilder builder = new ProtocolBuilder(); builder.accesslog("accesslog"); Assertions.assertEquals("accesslog", builder.build().getAccesslog()); }
@Test public void shouldResolveCorrectly() { ActionsContainer container = actionClassesResolver.resolve(); assertNotNull(container); ActionClassInformation classInformation = container.getActionClass(SimpleActionClass.NAME); assertNotNull(classInformation); assertEquals(SimpleActionClass.NAME, classInformation.getName()); assertEquals("sampleActionBean", classInformation.getSpringBeanName()); assertEquals(SimpleActionClass.class, classInformation.getType()); assertTrue(classInformation.isSingleton()); assertNotNull(classInformation.getSingletonActionClassInstance()); }
@Test public void testFormatDMSLon() { ExportOptionsModel model = new ExportOptionsModel(); model.setSelectedLatLonFormat(LatLonFormat.DMS); LatLonFormatter formatter = new LatLonFormatter(model); Object formatted = formatter.format(-104.780539575, new LongitudeKey()); assertEquals("104°46'49.942\"W", formatted.toString()); }
@Test public void testGetValue() { assertEquals(V2[0], ID2.getValue(0)); assertEquals(V2[1], ID2.getValue(1)); }
@Test public void testMigrateSecondDbInTheList() throws IOException { DbMigrator dbMigrator = new DbMigrator(dbInfoExtractor); doReturn(0).when(dbInfoExtractor).getHeight(firstDbPath.toAbsolutePath().toString()); doReturn(10).when(dbInfoExtractor).getHeight(secondDbPath.toAbsolutePath().toString()); doReturn(10).when(dbInfoExtractor).getHeight(targetDbPath.toAbsolutePath().toString()); doReturn(secondDbPath).when(dbInfoExtractor).getPath(secondDbPath.toAbsolutePath().toString()); doReturn(targetDbPath).when(dbInfoExtractor).getPath(targetDbPath.toAbsolutePath().toString()); List<Path> migrated = dbMigrator.migrate(Arrays.asList(firstDbPath, secondDbPath), targetDbPath); Assertions.assertEquals(1, migrated.size()); Assertions.assertEquals(secondDbPath.getParent(), migrated.get(0)); Assertions.assertArrayEquals(secondDbPayload, Files.readAllBytes(targetDbPath)); }
@Test(expected = StackTooSmallException.class) public void testEXP_4() { program = getProgram("621234560a"); try { vm.step(program); vm.step(program); } finally { assertTrue(program.isStopped()); } }
@Test public void timeoutTest() { try { methodLevelTimeoutBean.timeout(true); } catch (TimeoutException toe) { return; } Assert.fail(); }
@Test public void testGetElementsContainingPoint() { rootQuad.add(box1); rootQuad.add(box2); rootQuad.add(box3); rootQuad.add(box4); Array<CollisionBox> collisionBoxs = rootQuad.getElementsContainingPoint(new Point(16, 16)); Assert.assertEquals(1, collisionBoxs.size); Assert.assertEquals(true, collisionBoxs.contains(box1, false)); collisionBoxs = rootQuad.getElementsContainingPoint(new Point(112, 16)); Assert.assertEquals(1, collisionBoxs.size); Assert.assertEquals(true, collisionBoxs.contains(box2, false)); collisionBoxs = rootQuad.getElementsContainingPoint(new Point(16, 112)); Assert.assertEquals(1, collisionBoxs.size); Assert.assertEquals(true, collisionBoxs.contains(box3, false)); collisionBoxs = rootQuad.getElementsContainingPoint(new Point(112, 112)); Assert.assertEquals(1, collisionBoxs.size); Assert.assertEquals(true, collisionBoxs.contains(box4, false)); }
@Test public void normalizeFromVirtualWikiRequestPreservesWikiPath() throws Exception { when(this.xwikiCfg.getProperty("xwiki.webapppath")).thenReturn("xwiki"); HttpServletRequest req = createMockRequest(); when(req.getServletPath()).thenReturn("/wiki"); when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference("dev")); assertEquals("/xwiki/wiki/dev/one/two", this.mocker.getComponentUnderTest().normalize(this.testURL).serialize()); }
@Test public void callIsSuccessful() { final CliResult result = adminCliAdapter.call(); assertThat(result.getConfig()).isEmpty(); assertThat(result.getStatus()).isEqualTo(0); assertThat(result.isSuppressStartup()).isTrue(); }
@Test public void deleteDocument() { String url = String.format("%s/%s/document/config/%s/delete", projectRestURL, projectId, documentConfigId); setupDeleteWithRestResultExpectations(url); service.deleteDocument(projectId, documentConfigId); setupDeleteWithRestResultVerifications(url); }
@Test public void testToString() { assertEquals("ByteKeyRange{startKey=[], endKey=[0a]}", UP_TO_10.toString()); }
@Test public void testDefaultMapping() { generator.setFillRate(1.0) .setMaxCollectionItems(16) .withGenerator(CompactFields.kDescriptor, g -> { g.setValueGenerator(CompactFields._Field.NAME, ctx -> ctx.getFairy().textProducer().latinWord()); g.setValueGenerator(CompactFields._Field.LABEL, ctx -> ctx.getFairy().textProducer().word()); }).withGenerator(NormalFields.kDescriptor, g -> { g.setValueGenerator(NormalFields._Field.NAME, ctx -> ctx.getFairy().textProducer().latinWord()); g.setValueGenerator(NormalFields._Field.LABEL, ctx -> ctx.getFairy().textProducer().word()); }); OptionalFields expected = generator.generate(OptionalFields.kDescriptor) .mutate() .setId(1234) .setTimestampS((int) clock.instant().getEpochSecond()) .setTimestampMs(clock.instant().getEpochSecond() * 1000) .build(); OptionalFields empty = OptionalFields.builder() .setId(2345) .build(); try (Handle handle = db.getDBI().open()) { handle.createUpdate("INSERT INTO mappings_v3.default_mappings (" + " id, present, tiny, small, medium, large, real," + " fib, name, data, compact," + " timestamp_s, timestamp_ms," + " binary_message, blob_message, other_message," + " blob_data, base64_data, int_bool" + ") VALUES (" + " :e.id," + " :e.present," + " :e.tiny," + " :e.small," + " :e.medium," + " :e.large," + " :e.real," + " :e.fib," + " :e.name," + " :e.data," + " :e.message," + " :timestamp_s," + " :e.timestamp_ms," + " :e.binary_message," + " :e.blob_message," + " :e.clob_message," + " :e.blob_data," + " :e.base64_data," + " :e.int_bool" + ")") .bind("timestamp_s", toField(expected, TIMESTAMP_S, Types.TIMESTAMP)) .bindNamedArgumentFinder(forMessage("e", expected, withType(TIMESTAMP_MS, Types.TIMESTAMP), withType(BINARY_MESSAGE, Types.BINARY), withType(BLOB_MESSAGE, Types.BLOB), withType(CLOB_MESSAGE, Types.CLOB), withType(BLOB_DATA, Types.BLOB), withType(BASE64_DATA, Types.VARCHAR))) .execute(); handle.createUpdate("INSERT INTO mappings_v3.default_mappings (" + " id, present, tiny, small, medium, large, real," + " fib, name, data, compact," + " timestamp_s, timestamp_ms," + " binary_message, blob_message, other_message," + " blob_data, base64_data, int_bool" + ") VALUES (" + " :id," + " :present," + " :tiny," + " :small," + " :medium," + " :large," + " :real," + " :fib," + " :name," + " :data," + " :message," + " :timestamp_s," + " :timestamp_ms," + " :binary_message," + " :blob_message," + " :clob_message," + " :blob_data," + " :base64_data," + " :int_bool" + ")") .bind("timestamp_s", toField(empty, TIMESTAMP_S, Types.TIMESTAMP)) .bindNamedArgumentFinder(forMessage(empty, withType(TIMESTAMP_MS, Types.TIMESTAMP), withType(BINARY_MESSAGE, Types.BINARY), withType(BLOB_MESSAGE, Types.BLOB), withType(CLOB_MESSAGE, Types.CLOB), withType(BLOB_DATA, Types.BLOB), withType(BASE64_DATA, Types.VARCHAR), withType(INT_BOOL, Types.INTEGER))) .execute(); OptionalFields val = handle.createQuery("SELECT m.* FROM mappings_v3.default_mappings m WHERE id = :id") .bind("id", toField(expected, ID)) .map(toMessage("default_mappings", OptionalFields.kDescriptor, columnsFromAllFields(), withColumn("compact", MESSAGE), withColumn("other_message", CLOB_MESSAGE))) .findFirst() .orElseThrow(() -> new AssertionError("No content in default_mappings")); OptionalFields val2 = handle.createQuery("SELECT * FROM mappings_v3.default_mappings WHERE id = :id") .bind("id", toField(empty, ID)) .map(toMessage(OptionalFields.kDescriptor, columnsFromAllFields(), withColumn("compact", MESSAGE), withColumn("other_message", CLOB_MESSAGE))) .findFirst() .orElseThrow(() -> new AssertionError("No content in default_mappings")); assertThat(val, is(equalToMessage(expected))); assertThat(val2, is(equalToMessage(empty))); } }
@Test public void testRunningState() { setStartupProgressForRunningState(startupProgress); MetricsRecordBuilder builder = getMetrics(metrics, true); assertTrue(getLongCounter("ElapsedTime", builder) >= 0L); assertGauge("PercentComplete", 0.375f, builder); assertCounter("LoadingFsImageCount", 100L, builder); assertTrue(getLongCounter("LoadingFsImageElapsedTime", builder) >= 0L); assertCounter("LoadingFsImageTotal", 100L, builder); assertGauge("LoadingFsImagePercentComplete", 1.0f, builder); assertCounter("LoadingEditsCount", 100L, builder); assertTrue(getLongCounter("LoadingEditsElapsedTime", builder) >= 0L); assertCounter("LoadingEditsTotal", 200L, builder); assertGauge("LoadingEditsPercentComplete", 0.5f, builder); assertCounter("SavingCheckpointCount", 0L, builder); assertCounter("SavingCheckpointElapsedTime", 0L, builder); assertCounter("SavingCheckpointTotal", 0L, builder); assertGauge("SavingCheckpointPercentComplete", 0.0f, builder); assertCounter("SafeModeCount", 0L, builder); assertCounter("SafeModeElapsedTime", 0L, builder); assertCounter("SafeModeTotal", 0L, builder); assertGauge("SafeModePercentComplete", 0.0f, builder); }
@Test public void testDetectResource() { Resource resource = ResourceUtils.detectResource(); if (System.getenv("KUBERNETES_SERVICE_HOST") != null) { assertThat(resource.getType()).isEqualTo(K8sResource.TYPE); } else if (GcpMetadataConfig.isRunningOnGcp()) { assertThat(resource.getType()).isEqualTo(HostResource.TYPE); assertThat(resource.getLabels().get(CloudResource.PROVIDER_KEY)) .isEqualTo(CloudResource.PROVIDER_GCP); } else if (AwsIdentityDocUtils.isRunningOnAws()) { assertThat(resource.getType()).isEqualTo(HostResource.TYPE); assertThat(resource.getLabels().get(CloudResource.PROVIDER_KEY)) .isEqualTo(CloudResource.PROVIDER_AWS); } else { assertThat(resource).isNotNull(); assertThat(resource.getType()).isNull(); assertThat(resource.getLabels()).isEmpty(); } }
@Test public void rangeErrorstrikeForDelta3Test() { assertThatIllegalArgumentException() .isThrownBy(() -> BlackScholesFormulaRepository.strikeForDelta( SPOT, 100., TIME_TO_EXPIRY, VOLS[1], INTEREST_RATES[1], COST_OF_CARRY, false)); }
@Test public void testGetSummaryDataForFailureSummary() { String expected = "\n\nScript: test\nFailures: 1\nErrors: 0"; assertEquals(expected, formatter.getSummaryData(ReportUtil.getTestSummary())); }
@Test public void valueIsPassedInFuture() throws Exception { final String result = runTask(FOO_TASK).future().get(30, SECONDS); assertThat(result, is("foo")); }
@Test public void testGetEngineName() { assertEquals("Kotlin Compiler", factory.getEngineName()); }
@Test public void test_currentCash_valuationAtSettlement() { CurrencyAmount ccComputed = TRADE_PRICER.currentCash(TRADE, SETTLEMENT); assertThat(ccComputed).isEqualTo(UPFRONT_PAYMENT.getValue()); }
@Test void convert_test() { String input = "SZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2MBAAABRQ"; AuthenticatorData<RegistrationExtensionAuthenticatorOutput> result = new AuthenticatorDataConverter(objectConverter).convert(Base64UrlUtil.decode(input)); assertThat(result.getRpIdHash()).isNotNull(); assertThat(result.getRpIdHash()).hasSize(32); assertThat(result.getFlags()).isEqualTo(BIT_UP); assertThat(result.getSignCount()).isEqualTo(325); assertThat(result.getAttestedCredentialData()).isNull(); assertThat(result.getExtensions().getKeys()).isEmpty(); }
@Test( expected = ValueFormatException.class ) public void shouldNotCreateLongFromReaderContainingStringWithContentsOtherThanLong() throws Exception { factory.create(new ByteArrayInputStream("something".getBytes("UTF-8"))); }
@Test public void testMismatchType() throws Exception { final Matcher<JsonNode> sut = jsonArray(contains(jsonText("a"))); final StringDescription description = new StringDescription(); sut.describeMismatch(NF.booleanNode(false), description); assertThat(description.toString(), is( "was not an array node, but a boolean node" )); }
@Test public void should_update_a_property_of_a_widget_and_return_the_list_of_properties() throws Exception { Property property = aProperty().build(); List<Property> expectedProperties = asList(property); when(widgetService.updateProperty("customLabel", "toBeUpdated", property)).thenReturn(expectedProperties); mockMvc.perform(put("/rest/widgets/customLabel/properties/toBeUpdated") .contentType(MediaType.APPLICATION_JSON_VALUE) .content(convertObjectToJsonBytes(property))) .andExpect(status().isOk()) .andExpect(content().json(toJson(expectedProperties))); verify(widgetService).updateProperty("customLabel", "toBeUpdated", property); }
@Test public void testCustomFileURLFromSystemProperty() { URL cfgFileURL = this.getClass().getResource("resources/bus-overwrite.xml"); System.setProperty(Configurer.USER_CFG_FILE_PROPERTY_URL, cfgFileURL.toString()); Bus bus = new SpringBusFactory().createBus((String)null, true); checkCustomerConfiguration(bus); System.clearProperty(Configurer.USER_CFG_FILE_PROPERTY_URL); }
@Test public void testEnableDrag_Unpinned() { builder.onDecisionTablePinnedEvent(new DecisionTablePinnedEvent(modeller, false)); verify(view, times(1)).enableDrag(eq(true)); }
@Test public void shouldCombineSynteticObjects() throws Exception { Person captain = new Person("Jim", null, null); Person member1 = new Person("Joe", null, null); Team team1 = new Team("A", captain, null); List<Person> members = new ArrayList<>(); members.add(member1); Team team2 = new Team("A", null, members); Team combined = Beans.combine(team1, team2); assertNotNull(combined); assertEquals("A", combined.getName()); assertEquals(captain, combined.getCaptain()); assertNotNull(combined.getMembers()); assertEquals(member1, combined.getMembers().get(0)); }
@Test public void getConnectionClass(){ final String connectionType = "lfc"; final String type = "application/connections." + connectionType + "+json"; Class expectedClass = Number.class; when(contextsManager.getContextDescriptionClass(connectionType)).thenReturn(expectedClass); final Class<?> result = service.getContextClass(MediaType.valueOf(type)); assertSame(result, expectedClass); }
@Test public void testEquals(){ Long id = 1L; String userId = "dudes"; String userName = "The Dude"; String userEmail = "TheDude@email.com"; User user = new User(userId, userName, userEmail); user.setId(id); User user2 = user; User user3 = new User(userId, userName, userEmail); user3.setId(id); Assert.assertEquals("Same address space", user, user2); Assert.assertEquals("Different Objects same values", user, user3); Assert.assertNotEquals("Different Object Types", user, "Hello World"); Assert.assertNotEquals("Different ids", user.setId(2L), user3); user.setId(id); Assert.assertNotEquals("Different name", user.setUserId(""), user3); user.setUserId(userName); Assert.assertNotEquals("Different application", user.setName(""), user3); user.setName(userEmail); Assert.assertNotEquals("Different instance Id", user.setEmail(""), user3); user.setEmail(userEmail); }
@Test public void testGetImageSize() { assertNull(uut.getImageSize(PRODUCT_IMAGE_ID)); uut.setImageMapping(mockedProductKey, PRODUCT_IMAGE_ID, size); assertNull(uut.getImageSize(NAME_IMAGE_ID)); assertEquals(size, uut.getImageSize(PRODUCT_IMAGE_ID)); uut.setImageMapping(mockedProductKey, PRODUCT_IMAGE_ID_LARGE, sizeLarge); assertNull(uut.getImageSize(NAME_IMAGE_ID)); assertNotEquals(sizeLarge, uut.getImageSize(PRODUCT_IMAGE_ID)); assertEquals(size, uut.getImageSize(PRODUCT_IMAGE_ID)); }
@Test public void testApplyFiltersToScript_14() throws Exception { Collection<ScriptFilter> filters = new LinkedList(); Script script = new Script(); script.setSteps(new LinkedList()); ScriptFilterUtil.applyFiltersToScript(filters, script); }
@Test(expected = RequiredFieldException.class) public void pushContent_invalidParams_4() throws Exception { Map<String, Object> content = new HashMap<String, Object>(); content.put("test", "test"); getTested(false).pushContent(TYPE_KNOWN, "", content); }
@Test public void testServiceParser(){ TccActionImpl tccAction = new TccActionImpl(); boolean result = localTCCRemotingParser.isService(tccAction, "a"); Assertions.assertTrue(result); }
@Test public void testTreeLevels() { assertEquals(1, subject.treeLevels()); DynamicTreeData t = new DynamicTreeData(); t.setRoot(new DTreeNode(true)).setHeight(15); t.getRoot().setLeft(new DTreeNode(1)).setHeight(12) .setLeft(new DTreeNode(2)); t.getRoot().setRight(new DTreeNode(3)).setHeight(13) .setLeft(new DTreeNode(4)); t.print(); assertEquals(3, t.distinctHeights()); assertEquals(2, t.treeLevels()); DynamicTreeData t2 = new DynamicTreeData(); t2.setRoot(new DTreeNode(true)).setHeight(15); t2.getRoot().setLeft(new DTreeNode(1)).setHeight(12) .setLeft(new DTreeNode(2)); t2.getRoot().setRight(new DTreeNode(3)).setHeight(12) .setLeft(new DTreeNode(4)); t2.print(); assertEquals(2, t2.distinctHeights()); assertEquals(2, t2.treeLevels()); }
@Test public void testClientServerConnectionTls() throws Exception { addBrokerToZk(2); final CompletableFuture<BaseCommand> promise = new CompletableFuture<>(); NioEventLoopGroup workerGroup = connectToService(service.getServiceUrlTls(), promise, true); assertEquals(promise.get(10, TimeUnit.SECONDS).getType(), BaseCommand.Type.CONNECTED); workerGroup.shutdownGracefully(); }
@Test public void trims() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf(" p "); assertEquals(p1, p2); }
@Test public void adapter_version_initial_0() { assertEquals(0, metaDataToTest.getAdapterVersion()); }
@Test public void shouldGetAsString() { assertThat(claim.asString(), is(nullValue())); }
@Test public void createTokenHasUid() throws IOException { OAuth2AccessToken accessToken = extractor.createToken("ACCESS_TOKEN", null, 123, null, null, mapper.readTree(responseOk), responseOk); Assert.assertEquals("ACCESS_TOKEN", accessToken.getAccessToken()); assertTrue(accessToken instanceof WeiboToken); if (accessToken instanceof WeiboToken) { Assert.assertEquals("12341234", ((WeiboToken) accessToken).getUid()); } }
@Test(expected = IllegalArgumentException.class) public void parseLineAsciiStringMalformedCodeWithPhrase() { parseLine(new AsciiString("200a foo")); }
@Test public void createSheetConfigWithOnlyNameShouldSetNameFlag() { assertEquals("Name", new SheetConfig.Builder().name("Name").build().getName()); }
@Test public void listAvailableStorageLocationsAssignedAfterCollection() throws Exception { PID unitPid = makePid(); PID collPid = makePid(); PID folderPid = makePid(); mockAncestors(folderPid, getContentRootPid(), unitPid, collPid); helper.addStorageLocation(LOC1_ID, LOC1_NAME, LOC1_BASE); helper.addStorageLocation(LOC2_ID, LOC2_NAME, LOC2_BASE); helper.addMapping(collPid.getId(), LOC1_ID); helper.addMapping(folderPid.getId(), LOC2_ID); initializeManager(); List<StorageLocation> locs = locManager.listAvailableStorageLocations(folderPid); assertEquals(1, locs.size()); assertIsLocation1(locs.get(0)); }
@Test public void testGetNamespaceInvalidName() throws Exception { String nsName = ""; CompletableFuture<GetNamespaceResponse> getFuture = rootRangeStore.getNamespace( createGetNamespaceRequest(nsName)); GetNamespaceResponse response = FutureUtils.result(getFuture); assertEquals(StatusCode.INVALID_NAMESPACE_NAME, response.getCode()); }
@Test public void getLdapName() throws Exception { assertThat(user.getLdapName(),is(OLD_LDAPNAME)); }
@Test public void testSimpleKey() throws Exception { String key = fieldKey("simpleKey"); assertThat(graphVisualizer.shortName(key)).isEqualTo("String"); }
@Test public void childNames() { Set<String> preferred = ImmutableSet.of("jcr:content"); CountingIterable<NodeStateEntry> citr = createList(preferred, asList("/a", "/a/jcr:content", "/a/c", "/a/d", "/e", "/e/f")); ChildNodeStateProvider p = new ChildNodeStateProvider(citr, "/a", preferred); assertEquals(asList("jcr:content", "c", "d"), copyOf(childNames(p.children()))); assertEquals(5, citr.getCount()); }
@Test public void testInvalidValue() throws ValidatorException, ParserException { thrown.expect(ParserException.class); String schema = "{ \"type\": \"boolean\" }"; String testPayload = "Banana"; JsonObject schemaObject = (JsonObject) parser.parse(schema); BooleanValidator.validateBoolean(schemaObject, testPayload); }
@Test public void testReadAnnotationFromSpecifiedSchema() throws Exception { AnalysisEngine xmiWriter = AnalysisEngineFactory.createEngine("de.julielab.jcore.consumer.xmi.desc.jcore-xmi-db-writer", XMIDBWriter.PARAM_ANNOS_TO_STORE, new String[]{"tokenschema:"+Token.class.getCanonicalName(), "sentenceschema:"+Sentence.class.getCanonicalName()}, XMIDBWriter.PARAM_COSTOSYS_CONFIG, costosysConfig, XMIDBWriter.PARAM_STORE_ALL, false, XMIDBWriter.PARAM_STORE_BASE_DOCUMENT, true, XMIDBWriter.PARAM_TABLE_DOCUMENT, "_data.documents", XMIDBWriter.PARAM_DO_GZIP, false, XMIDBWriter.PARAM_STORE_RECURSIVELY, true, XMIDBWriter.PARAM_UPDATE_MODE, true, XMIDBWriter.PARAM_BASE_DOCUMENT_ANNOTATION_TYPES, new String[]{MeshHeading.class.getCanonicalName(), AbstractText.class.getCanonicalName(), Title.class.getCanonicalName(), de.julielab.jcore.types.pubmed.Header.class.getCanonicalName()} ); JCas jCas = XmiDBSetupHelper.getJCasWithRequiredTypes(); jCas.setDocumentText("This is a sentence. This is another one."); de.julielab.jcore.types.pubmed.Header header = new de.julielab.jcore.types.pubmed.Header(jCas); header.setDocId("12345"); header.addToIndexes(); new Sentence(jCas, 0, 19).addToIndexes(); new Sentence(jCas, 20, 40).addToIndexes(); new Token(jCas, 0, 19).addToIndexes(); new Token(jCas, 20, 40).addToIndexes(); xmiWriter.process(jCas); jCas.reset(); xmiWriter.collectionProcessComplete(); CollectionReader xmiReader = CollectionReaderFactory.createReader(XmiDBReader.class, XmiDBReader.PARAM_COSTOSYS_CONFIG_NAME, costosysConfig, XmiDBReader.PARAM_READS_BASE_DOCUMENT, true, XmiDBReader.PARAM_ANNOTATIONS_TO_LOAD, new String[]{"tokenschema:"+Token.class.getCanonicalName(), "sentenceschema:"+Sentence.class.getCanonicalName()}, XmiDBReader.PARAM_TABLE, xmisubset, XmiDBReader.PARAM_RESET_TABLE, true ); List<String> tokenText = new ArrayList<>(); List<String> sentenceText = new ArrayList<>(); assertTrue(xmiReader.hasNext()); while (xmiReader.hasNext()) { xmiReader.getNext(jCas.getCas()); JCasUtil.selectSingle(jCas, Header.class); JCasUtil.select(jCas, Token.class).stream().map(Annotation::getCoveredText).forEach(tokenText::add); JCasUtil.select(jCas, Sentence.class).stream().map(Annotation::getCoveredText).forEach(sentenceText::add); jCas.reset(); } assertFalse(tokenText.isEmpty()); assertFalse(sentenceText.isEmpty()); }
@Test void createPortImplementation_throwsUserNotAuthorizedException() throws PropertyServerException, UserNotAuthorizedException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvalidParameterException { String methodName = "createPort"; UserNotAuthorizedException mockedException = mockException(UserNotAuthorizedException.class, methodName); when(dataEngineCommonHandler.createExternalEntity(USER, null, InstanceStatus.ACTIVE, PortPropertiesMapper.PORT_IMPLEMENTATION_TYPE_NAME, EXTERNAL_SOURCE_DE_QUALIFIED_NAME)).thenThrow(mockedException); UserNotAuthorizedException thrown = assertThrows(UserNotAuthorizedException.class, () -> portHandler.createPortImplementation(USER, getPortImplementation(), EXTERNAL_SOURCE_DE_QUALIFIED_NAME)); assertTrue(thrown.getMessage().contains("OMAS-DATA-ENGINE-404-001 ")); }
@Test public void testGetParametersWithDisabledDEfaults() throws Exception { unit.setActive(false); unit.setSecurity(false); StudyPlanCycle entity = new StudyPlanCycle(); String name = "name"; String abbrName = "abbrName"; entity.setName(name); entity.setAbbrName(abbrName); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("name", name); expected.put("abbrName", abbrName); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void testGetReturnTypes () throws Exception{ Class clazz = TypeClass.class; Type[] types = ReflectUtils.getReturnTypes(clazz.getMethod("getFuture")); Assertions.assertEquals("java.lang.String", types[0].getTypeName()); Assertions.assertEquals("java.lang.String", types[1].getTypeName()); Type[] types1 = ReflectUtils.getReturnTypes(clazz.getMethod("getString")); Assertions.assertEquals("java.lang.String", types1[0].getTypeName()); Assertions.assertEquals("java.lang.String", types1[1].getTypeName()); Type[] types2 = ReflectUtils.getReturnTypes(clazz.getMethod("getListFuture")); Assertions.assertEquals("java.util.List", types2[0].getTypeName()); Assertions.assertEquals("java.util.List<java.lang.String>", types2[1].getTypeName()); }
@Test public void testForward() throws Exception { TestWebApplicationRequest request = new TestWebApplicationRequest(); TestWebApplicationResponse response = new TestWebApplicationResponse(); DefaultWebApplication webApp = new DefaultWebApplication(); webApp.addServlet("Snoop", TestSnoopServlet.class); webApp.initialize(); webApp.start(); RequestDispatcher dispatcher = webApp.getNamedDispatcher("Snoop"); dispatcher.forward(request, response); String responseText = new String(response.getResponseBytes()); webApp.stop(); assertTrue(responseText.contains("<title>Snoop</title>")); }
@Test public void testBecomeWithNoSessionToken() throws Exception { thrown.expect(IllegalArgumentException.class); thrown.expectMessage("Must specify a sessionToken for the user to log in with"); ParseUser.become(null); }
@Test public void TestcomputeVerticalEdgeDiffractionRayOverBuilding() throws LayerDelaunayError, ParseException { GeometryFactory factory = new GeometryFactory(); WKTReader wktReader = new WKTReader(factory); Envelope cellEnvelope = new Envelope(new Coordinate(0, 0, 0.), new Coordinate(20, 15, 0.)); MeshBuilder mesh = new MeshBuilder(); mesh.addGeometry(wktReader.read("POLYGON((5 5, 7 5, 7 6, 8 6, 8 8, 5 8, 5 5))"), 4.3); mesh.addGeometry(wktReader.read("POLYGON((9 7, 10 7, 10 9, 9 9, 9 7))"), 4.3); mesh.finishPolygonFeeding(cellEnvelope); FastObstructionTest manager = new FastObstructionTest(mesh.getPolygonWithHeight(), mesh.getTriangles(), mesh.getTriNeighbors(), mesh.getVertices()); PropagationProcessData processData = new PropagationProcessData(manager); ComputeRays computeRays = new ComputeRays(processData); Coordinate p1 = new Coordinate(4, 3, 3); Coordinate p2 = new Coordinate(13, 10, 6.7); assertFalse(manager.isFreeField(p1, p2)); List<Coordinate> b1OffsetRoof = manager.getWideAnglePointsByBuilding(1, Math.PI * (1 + 1 / 16.0), Math.PI * (2 - (1 / 16.))); int i = 0; assertEquals(0, new Coordinate(5, 5).distance(b1OffsetRoof.get(i++)), 2 * FastObstructionTest.wideAngleTranslationEpsilon); assertEquals(0, new Coordinate(7, 5).distance(b1OffsetRoof.get(i++)), 2 * FastObstructionTest.wideAngleTranslationEpsilon); assertEquals(0, new Coordinate(8, 6).distance(b1OffsetRoof.get(i++)), 2 * FastObstructionTest.wideAngleTranslationEpsilon); assertEquals(0, new Coordinate(8, 8).distance(b1OffsetRoof.get(i++)), 2 * FastObstructionTest.wideAngleTranslationEpsilon); assertEquals(0, new Coordinate(5, 8).distance(b1OffsetRoof.get(i++)), 2 * FastObstructionTest.wideAngleTranslationEpsilon); assertEquals(0, new Coordinate(5, 5).distance(b1OffsetRoof.get(i++)), 2 * FastObstructionTest.wideAngleTranslationEpsilon); List<Coordinate> ray = computeRays.computeSideHull(true, p1, p2); i = 0; assertEquals(0, p1.distance(ray.get(i++)), 0.02); assertEquals(0, new Coordinate(5, 8).distance(ray.get(i++)), 0.02); assertEquals(0, p2.distance(ray.get(i++)), 0.02); ray = computeRays.computeSideHull(false, p1, p2); i = 0; assertEquals(0, p1.distance(ray.get(i++)), 0.02); assertEquals(0, new Coordinate(7, 5).distance(ray.get(i++)), 0.02); assertEquals(0, p2.distance(ray.get(i++)), 0.02); ray = computeRays.computeSideHull(false, p2, p1); i = 0; assertEquals(0, p2.distance(ray.get(i++)), 0.02); assertEquals(0, new Coordinate(5, 8).distance(ray.get(i++)), 0.02); assertEquals(0, p1.distance(ray.get(i++)), 0.02); ray = computeRays.computeSideHull(true, p2, p1); i = 0; assertEquals(0, p2.distance(ray.get(i++)), 0.02); assertEquals(0, new Coordinate(7, 5).distance(ray.get(i++)), 0.02); assertEquals(0, p1.distance(ray.get(i++)), 0.02); }
@Test public void shouldSearchWithNulls() throws Exception { SearchRequest request = new SearchRequest(); when(dao1.search(eq(request))).thenReturn(null); when(dao2.search(eq(request))).thenReturn(null); SearchResponse actual = multiIndexDao.search(request); assertNull(actual); }
@Test public void testUserTasksInCaseAdBusinessAdmin() { Map<String, OrganizationalEntity> roleAssignments = new HashMap<>(); roleAssignments.put("owner", new UserImpl(USER)); Map<String, Object> data = new HashMap<>(); CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, data, roleAssignments); String caseId2 = null; String caseId = caseService.startCase(deploymentUnit.getIdentifier(), USER_TASK_STAGE_CASE_P_ID, caseFile); assertNotNull(caseId); assertEquals(FIRST_CASE_ID, caseId); try { CaseInstance cInstance = caseService.getCaseInstance(caseId); assertNotNull(cInstance); assertEquals(FIRST_CASE_ID, cInstance.getCaseId()); assertEquals(deploymentUnit.getIdentifier(), cInstance.getDeploymentId()); List<TaskSummary> tasks = caseRuntimeDataService.getCaseTasksAssignedAsBusinessAdmin(caseId, "Administrator", null, new QueryContext()); assertNotNull(tasks); assertEquals(0, tasks.size()); Map<String, Object> taskInput = new HashMap<>(); taskInput.put("ActorId", "john"); caseService.triggerAdHocFragment(caseId, "Missing data", taskInput); tasks = caseRuntimeDataService.getCaseTasksAssignedAsBusinessAdmin(caseId, "Administrator", null, new QueryContext()); assertNotNull(tasks); assertEquals(1, tasks.size()); TaskSummary task = tasks.get(0); assertEquals("Missing data", task.getName()); caseId2 = caseService.startCase(deploymentUnit.getIdentifier(), USER_TASK_STAGE_CASE_P_ID, caseFile); assertNotNull(caseId2); assertEquals("CASE-0000000002", caseId2); caseService.triggerAdHocFragment(caseId2, "Missing data", taskInput); tasks = caseRuntimeDataService.getCaseTasksAssignedAsBusinessAdmin(caseId2, "Administrator", null, new QueryContext()); assertNotNull(tasks); assertEquals(1, tasks.size()); task = tasks.get(0); assertEquals("Missing data", task.getName()); tasks = caseRuntimeDataService.getCaseTasksAssignedAsBusinessAdmin(caseId, "Administrator", null, new QueryContext()); assertNotNull(tasks); assertEquals(1, tasks.size()); task = tasks.get(0); assertEquals("Missing data", task.getName()); } catch (Exception e) { logger.error("Unexpected error {}", e.getMessage(), e); fail("Unexpected exception " + e.getMessage()); } finally { if (caseId != null) { caseService.cancelCase(caseId); } if (caseId2 != null) { caseService.cancelCase(caseId2); } } }
@Test public void buildWithoutPropertiesFile_supportsAllFields() throws IOException { Credentials credentials = UserCredentials.newBuilder() .setClientId(CLIENT_ID) .setClientSecret(CLIENT_SECRET) .setRefreshToken(REFRESH_TOKEN) .build(); GoogleAdsClient client = GoogleAdsClient.newBuilder() .setCredentials(credentials) .setDeveloperToken(DEVELOPER_TOKEN) .setLoginCustomerId(LOGIN_CUSTOMER_ID) .setEnableGeneratedCatalog(enabledGeneratedCatalog) .setTransportChannelProvider(localChannelProvider) .build(); assertGoogleAdsClient(client); }
@Test public void buildShouldThrowWhenBothMapAndOldKeyword() { assertThatThrownBy(() -> CreationMessage.builder() .mailboxIds(ImmutableList.of("ba9-0f-dead-beef")) .headers(ImmutableMap.of()) .keywords(ImmutableMap.of("$Draft", true)) .isAnswered(Optional.of(true)) .build()) .isInstanceOf(IllegalArgumentException.class) .hasMessage("Does not support keyword and is* at the same time"); }
@Test public void testCreateCorrectBaselineWithMaxHeightGreaterThanAscentPlusDescent() throws Exception { PowerMockito.mockStatic( TextUtility.class ); when(TextUtility.createPaddedBaselineInfo( anyInt(), any(FontMetrics.class), any(BaselineInfo.class) )).thenCallRealMethod(); long maxHeight = (long) 15000; FontMetrics fontMetrics = mock( FontMetrics.class ); when( fontMetrics.getMaxHeight() ).thenReturn( maxHeight ); when( fontMetrics.getMaxAscent() ).thenReturn( (long) 4500 ); when( fontMetrics.getMaxDescent() ).thenReturn( (long) 4500 ); BaselineInfo baseLineInfo = new BaselineInfo(); baseLineInfo.setDominantBaseline(BaselineInfo.MIDDLE); when( fontMetrics.getBaselines( anyInt(), any(BaselineInfo.class))).thenReturn( baseLineInfo ); DefaultExtendedBaselineInfo baseLine = (DefaultExtendedBaselineInfo)TextUtility.createPaddedBaselineInfo( 'x', fontMetrics, null ); Assert.assertEquals( baseLine.getBaselines()[ExtendedBaselineInfo.AFTER_EDGE], RenderableText.convert(maxHeight) ); }
@Test void updateScaStatusConsentStatusConsentData() throws IOException { when(cmsPsuAisClient.updateAuthorisationStatus(any(), any(), any(), any(), any(), any(), any(), any(), any())).thenReturn(ResponseEntity.ok().build()); when(tokenStorageService.toBase64String(any())).thenReturn(CONSENT_ID); when(aspspConsentDataClient.updateAspspConsentData(any(), any())).thenReturn(ResponseEntity.ok().build()); redirectConsentService.updateScaStatusConsentStatusConsentData(USER_ID, getConsentWorkflow(AisConsentRequestType.DEDICATED_ACCOUNTS, IBAN_DE)); verify(aspspConsentDataClient, times(1)).updateAspspConsentData(ENCRYPTED_CONSENT_ID, new CmsAspspConsentDataBase64(CONSENT_ID, CONSENT_ID)); }
@Test public void testHashCode() { assertEquals(attr.hashCode(), (new ElasticAttribute("theName")).hashCode()); assertTrue(attr.hashCode()!=(new ElasticAttribute("name")).hashCode()); }
@Test public void testIllegalValueStartsWithNull() throws Exception { ByteBuf headerBlock = Unpooled.buffer(22); headerBlock.writeInt(1); headerBlock.writeInt(4); headerBlock.writeBytes(nameBytes); headerBlock.writeInt(6); headerBlock.writeByte(0); headerBlock.writeBytes(valueBytes); decoder.decode(ByteBufAllocator.DEFAULT, headerBlock, frame); assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size()); headerBlock.release(); }
@Test public void testInflateGroups_multipleSameEmpty() throws Exception { String value = inflater.inflateGroups("{(foo)} {(foo)}", Sets.newHashSet("foo")); assertThat(value, equalTo("{(foo)} {(foo)}")); }
@Test public void testResolver() { EndpointResolverRules endpointResolver = new EndpointResolverRules(); ResolveEndpointRequest request = new ResolveEndpointRequest("foo", "test", "", ""); String endpoint = endpointResolver.resolve(request); Assert.assertEquals(null, endpoint); }
@Test public void testGetParameters() throws Exception { Long personId = 1L; Person person = new Person(); person.setId(personId); Long languageId = 2L; Language language = new Language(); language.setId(languageId); String firstName = "first name"; String fatherName = "father name"; PersonName entity = new PersonName(); entity.setPerson(person); entity.setLanguage(language); entity.setFirstName(firstName); entity.setFatherName(fatherName); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("person", person); expected.put("language", language); expected.put("firstName", firstName); expected.put("fatherName", fatherName); expected.put("status", RowStatus.ACTIVE); expected.put("userGroups", groups); when(languageDao.getEntityById(anyLong())).thenReturn(language); when(personDao.getEntityById(anyLong())).thenReturn(person); Map<String, Object> actual = unit.getParameters(entity); verify(languageDao).getEntityById(languageId); verify(personDao).getEntityById(personId); assertEquals(expected, actual); }
@Test public void testListen() { GatewayNotifier notifier = mock(GatewayNotifier.class); EurekaInstanceRegisteredListener listener = new EurekaInstanceRegisteredListener(Mockito.mock(MetadataTranslationService.class), Mockito.mock(MetadataDefaultsService.class), notifier); listener.listen(createEvent("host:service:instance")); verify(notifier, times(1)).serviceUpdated("service", "host:service:instance"); listener.listen(createEvent("unknown format")); verify(notifier, times(1)).serviceUpdated(null, "unknown format"); verify(notifier, never()).distributeInvalidatedCredentials(anyString()); listener.listen(createEvent("host:GATEWAY:instance")); verify(notifier, times(1)).distributeInvalidatedCredentials("host:GATEWAY:instance"); }
@Test public void require_that_iterators_work() { String val = "foo"; TestNodeVector v = new TestNodeVector(val, val, val); assertTrue(v.listIterator().hasNext()); assertTrue(v.listIterator(0).hasNext()); assertTrue(v.listIterator(1).hasNext()); assertTrue(v.listIterator(2).hasNext()); assertFalse(v.listIterator(3).hasNext()); }
@Test public void testParseWellFormedUnclosedEndAtCueEnd() throws Exception { Spanned text = parseCueText("An <u some trailing stuff>unclosed u tag with " + "<i>italic</i> inside"); assertThat(text.toString()).isEqualTo("An unclosed u tag with italic inside"); UnderlineSpan[] underlineSpans = getSpans(text, UnderlineSpan.class); StyleSpan[] styleSpans = getSpans(text, StyleSpan.class); assertThat(underlineSpans).hasLength(1); assertThat(styleSpans).hasLength(1); assertThat(styleSpans[0].getStyle()).isEqualTo(ITALIC); assertThat(text.getSpanStart(underlineSpans[0])).isEqualTo(3); assertThat(text.getSpanStart(styleSpans[0])).isEqualTo(23); assertThat(text.getSpanEnd(styleSpans[0])).isEqualTo(29); assertThat(text.getSpanEnd(underlineSpans[0])).isEqualTo(36); }
@Test public void addMarker_shouldSetInteractive() throws Exception { MarkerOptions markerOptions = new MarkerOptions().interactive(false); BitmapMarker marker = bitmapMarkerManager.addMarker(markerOptions); verify(marker).setInteractive(false); }
@Test public void testDistanceCalculationWithWindow() { double[] timeSeries3 = { 0.50, 0.87, 0.90, 0.82, 0.70 }; double[] timeSeries4 = { 0.10, 0.10, 0.10, 0.10, 0.10 }; double expectation = 3.29; DynamicTimeWarping dtw = new DynamicTimeWarping(); double distance = dtw.distanceWithWindow(timeSeries3, timeSeries4, 10000); assertEquals(expectation, distance, 1.0E-5); }
@Test public void shouldRecordTwoDistinctObservationsOnCause() { final long timestampOne = 7; final long timestampTwo = 10; final int offset = 0; when(clock.time()).thenReturn(timestampOne).thenReturn(timestampTwo); for (int i = 0; i < 2; i++) { assertTrue(log.record(i == 1 ? new RuntimeException("One") : new RuntimeException("One", new Exception("Cause")))); } final ArgumentCaptor<Integer> lengthArg = ArgumentCaptor.forClass(Integer.class); final InOrder inOrder = inOrder(buffer); inOrder.verify(buffer).putBytes(eq(offset + ENCODED_ERROR_OFFSET), any(byte[].class)); inOrder.verify(buffer).putLong(offset + FIRST_OBSERVATION_TIMESTAMP_OFFSET, timestampOne); inOrder.verify(buffer).putIntOrdered(eq(offset + LENGTH_OFFSET), lengthArg.capture()); inOrder.verify(buffer).getAndAddInt(offset + OBSERVATION_COUNT_OFFSET, 1); inOrder.verify(buffer).putLongOrdered(offset + LAST_OBSERVATION_TIMESTAMP_OFFSET, timestampOne); final int recordTwoOffset = BitUtil.align(lengthArg.getValue(), RECORD_ALIGNMENT); inOrder.verify(buffer).putBytes(eq(recordTwoOffset + ENCODED_ERROR_OFFSET), any(byte[].class)); inOrder.verify(buffer).putLong(recordTwoOffset + FIRST_OBSERVATION_TIMESTAMP_OFFSET, timestampTwo); inOrder.verify(buffer).putIntOrdered(eq(recordTwoOffset + LENGTH_OFFSET), anyInt()); inOrder.verify(buffer).getAndAddInt(recordTwoOffset + OBSERVATION_COUNT_OFFSET, 1); inOrder.verify(buffer).putLongOrdered(recordTwoOffset + LAST_OBSERVATION_TIMESTAMP_OFFSET, timestampTwo); }
@Test public void testConvertFromEnvAndSdxResponseWithoutWAInput() { TelemetryResponse response = new TelemetryResponse(); LoggingResponse loggingResponse = new LoggingResponse(); S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters(); s3Params.setInstanceProfile(INSTANCE_PROFILE_VALUE); loggingResponse.setS3(s3Params); response.setLogging(loggingResponse); SdxClusterResponse sdxClusterResponse = new SdxClusterResponse(); sdxClusterResponse.setCrn("crn:cdp:cloudbreak:us-west-1:someone:sdxcluster:sdxId"); sdxClusterResponse.setName("sdxName"); TelemetryRequest result = underTest.convert(response, sdxClusterResponse); assertTrue(result.getFeatures().getWorkloadAnalytics().isEnabled()); assertEquals(INSTANCE_PROFILE_VALUE, result.getLogging().getS3().getInstanceProfile()); assertEquals("sdxId", result.getWorkloadAnalytics().getAttributes().get("databus.header.sdx.id").toString()); assertEquals("sdxName", result.getWorkloadAnalytics().getAttributes().get("databus.header.sdx.name").toString()); }
@Test public void testGetMetricSettings() { System.out.println("getMetricSettings"); PerfMonCollector instance = new PerfMonCollector(); JMeterProperty expResult = null; JMeterProperty result = instance.getMetricSettings(); }
@Test public void testMultiplexExceptions() { try { cut.generateKeys(null); fail("Expected exception"); } catch (InvalidParameterException ex) { } try { cut.generateKeys(new Object[0]); fail("Expected exception"); } catch (InvalidParameterException ex) { } }
@Test public void testSelectOrgByIdWithAllExpand() throws ODataException { UriParameter key = mock(UriParameter.class); when(key.getName()).thenReturn("ID"); when(key.getText()).thenReturn("'2'"); List<UriParameter> keyPredicates = new ArrayList<>(); keyPredicates.add(key); JPAInlineItemInfo item = createOrgExpandRoles(keyPredicates, null); cut = new JPAExpandJoinQuery(OData.newInstance(), sessionContext, item, headers, requestContext, Optional.empty()); JPAExpandQueryResult act = cut.execute(); assertEquals(1, act.getNoResults()); assertEquals(2, act.getNoResultsDeep()); }
@Test public void should_return_transforming_iterator_when_call_iterate_function() { ScrollableResultsImplementor scrollableResultsImplementor = createMock(ScrollableResultsImplementor.class); FactoryExpression<?> factoryExpression = createMock(FactoryExpression.class); expect(nativeQuery.unwrap(NativeQuery.class)).andReturn(nativeQuery); expect(nativeQuery.scroll(FORWARD_ONLY)).andReturn(scrollableResultsImplementor); assertEquals(TransformingIterator.class, hibernateHandler.iterate(nativeQuery, factoryExpression).getClass()); }
@Test public void testToString() { Datastream ds = new Datastream(null, "original", 555l, "text/plain", "file.txt", "txt", CHECKSUM); assertEquals("original", ds.getName()); assertEquals("text/plain", ds.getMimetype()); assertEquals("file.txt", ds.getFilename()); assertEquals("txt", ds.getExtension()); assertEquals(555, ds.getFilesize().longValue()); assertEquals(CHECKSUM, ds.getChecksum()); assertEmpty(ds.getOwner()); assertEquals("original|text/plain|file.txt|txt|555|" + CHECKSUM + "|", ds.toString()); }
@Test public void versionIsPresent() { final Document event = new Document().append("ts", new BsonTimestamp(100, 2)) .append("h", Long.valueOf(1987654321)) .append("ns", "dbA.collectA"); source.opLogEvent("rs", event); assertThat(source.struct().getString(SourceInfo.DEBEZIUM_VERSION_KEY)).isEqualTo(Module.version()); }
@Test public void testAdd() throws Exception { for (int i = 0; i < 10; i++) { assertEquals("The size of the set is wrong.", i, set.size()); assertTrue("The first add of an element should be true.", set.add(i)); assertFalse("The second add of an element should be false.", set.add(i)); } }
@Test public void testGetChildren() { final ExplicitNode instance = getInstance("start"); final NodeBase child = getInstance("child"); child.addParent(instance); assertEquals(Arrays.asList(child), instance.getChildren()); }
@Test public void shouldReturnNullIfNoCleanupPolicySet() throws Exception { StoreLoadParameters emptyParameters = mock(StoreLoadParameters.class); when(emptyParameters.getFilter("cleanupPolicy")).thenReturn(null); assertThat(underTest.previewCleanup(emptyParameters), is(nullValue())); }
@Test public void timestampToConnectOptional() { Schema schema = Timestamp.builder().optional().schema(); String msg = "{ \"schema\": { \"type\": \"int64\", \"name\": \"org.apache.kafka.connect.data.Timestamp\", \"version\": 1, \"optional\": true }, \"payload\": null }"; SchemaAndValue schemaAndValue = converter.toConnectData(TOPIC, msg.getBytes()); assertEquals(schema, schemaAndValue.schema()); assertNull(schemaAndValue.value()); }
@Test public void strbeforeTest() { Expr e = factory.strbefore(factory.none(), factory.none()); assertTrue(e instanceof E_StrBefore); }
@Test public void testGetCurrentUserCommand() { ParseRESTUserCommand command = ParseRESTUserCommand.getCurrentUserCommand("sessionToken"); assertEquals("users/me", command.httpPath); assertEquals(ParseHttpRequest.Method.GET, command.method); assertNull(command.jsonParameters); assertEquals("sessionToken", command.getSessionToken()); }
@Test public void patronAccessCollection() { addPidToAncestors(); addPrincipalRoles(pid, PUBLIC_PRINC, canViewMetadata); List<RoleAssignment> assignments = aclFactory.getPatronAccess(pid); assertEquals(1, assignments.size()); RoleAssignment assignment = assignments.get(0); assertEquals(canViewMetadata, assignment.getRole()); assertEquals(PUBLIC_PRINC, assignment.getPrincipal()); }
@Test public void givenMenuItemIsSet_thenMenuItemComposerIsAdded() { simpleChromeCustomTabsIntentBuilder.withMenuItem(ANY_LABEL, ANY_PENDING_INTENT); verify(mockComposers).add(any(MenuItemComposer.class)); }
@Test public void shouldScanAllMetaAnnotationsByType() throws Exception { scanner = new JavaAnnotationScanner(MyType.class.getMethod("method")); Collection<Annotation> annotations = scanner.allWith(Embedded.class); assertThat(annotations, hasSize(1)); }
@Test(expected = NullPointerException.class) public void registerCalculator_ShouldThrowException_WhenInputIsNull() { BinaryHashCodeCalculator.registerCalculator(null); }
@Test public void testNonNull_Collection_Null() { Collection<String> c = null; c = CollectionUtils.nonNull(c); assertNotNull(c); assertTrue(c.isEmpty()); }
@Test void intersects_withOverlap() { Bitlist bitlist1 = create(1, 3, 5); Bitlist bitlist2 = create(0, 3, 4); assertThat(bitlist1.intersects(bitlist2)).isTrue(); }
@Test public void testInflateGroups_multipleSameExist() throws Exception { doReturn(Optional.of("foo")).when(world).get("foo"); String value = inflater.inflateGroups("{(foo)} {(foo)}", Sets.newHashSet("foo")); assertThat(value, equalTo("foo foo")); }
@Test public void testGetEntityWithYarnACLsEnabled() throws Exception { AdminACLsManager oldAdminACLsManager = timelineACLsManager.setAdminACLsManager(adminACLsManager); try { TimelineEntities entities = new TimelineEntities(); TimelineEntity entity = new TimelineEntity(); entity.setEntityId("test id 3"); entity.setEntityType("test type 3"); entity.setStartTime(System.currentTimeMillis()); entity.setDomainId("domain_id_1"); entities.addEntity(entity); WebResource r = resource(); ClientResponse response = r.path("ws").path("v1").path("timeline") .queryParam("user.name", "writer_user_1") .accept(MediaType.APPLICATION_JSON) .type(MediaType.APPLICATION_JSON) .post(ClientResponse.class, entities); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); TimelinePutResponse putResponse = response.getEntity(TimelinePutResponse.class); Assert.assertEquals(0, putResponse.getErrors().size()); response = r.path("ws").path("v1").path("timeline") .path("test type 3").path("test id 3") .queryParam("user.name", "reader_user_1") .accept(MediaType.APPLICATION_JSON) .get(ClientResponse.class); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); entity = response.getEntity(TimelineEntity.class); Assert.assertNull(entity.getPrimaryFilters().get( TimelineStore.SystemFilter.ENTITY_OWNER.toString())); response = r.path("ws").path("v1").path("timeline") .path("test type 3").path("test id 3") .queryParam("fields", "relatedentities") .queryParam("user.name", "reader_user_1") .accept(MediaType.APPLICATION_JSON) .get(ClientResponse.class); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); entity = response.getEntity(TimelineEntity.class); Assert.assertNull(entity.getPrimaryFilters().get( TimelineStore.SystemFilter.ENTITY_OWNER.toString())); response = r.path("ws").path("v1").path("timeline") .path("test type 3").path("test id 3") .queryParam("fields", "primaryfilters") .queryParam("user.name", "reader_user_1") .accept(MediaType.APPLICATION_JSON) .get(ClientResponse.class); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); entity = response.getEntity(TimelineEntity.class); Assert.assertNull(entity.getPrimaryFilters().get( TimelineStore.SystemFilter.ENTITY_OWNER.toString())); response = r.path("ws").path("v1").path("timeline") .path("test type 3").path("test id 3") .queryParam("user.name", "reader_user_2") .accept(MediaType.APPLICATION_JSON) .get(ClientResponse.class); assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); assertEquals(ClientResponse.Status.NOT_FOUND, response.getClientResponseStatus()); } finally { timelineACLsManager.setAdminACLsManager(oldAdminACLsManager); } }
@Test public void testChangeState_invalidAction() throws Exception { Response resp = this.resource.changeInstanceState( this.app.getName(), null, null ); Assert.assertEquals( Status.FORBIDDEN.getStatusCode(), resp.getStatus()); }
@Test public void testToString() { assertEquals(tested.toString(), CONSTRUCTOR_IDENTIFIER + ":" + CONSTRUCTOR_TYPE + ":" + CONSTRUCTOR_TAGS); assertNotEquals(tested.toString(), CONSTRUCTOR_IDENTIFIER + ":" + CONSTRUCTOR_TYPE + ":" + "[myCustomTag]"); VariableDeclaration comparable = new VariableDeclaration(CONSTRUCTOR_IDENTIFIER, CONSTRUCTOR_TYPE, null); assertEquals(comparable.toString(), CONSTRUCTOR_IDENTIFIER + ":" + CONSTRUCTOR_TYPE); comparable = new VariableDeclaration(CONSTRUCTOR_IDENTIFIER, CONSTRUCTOR_TYPE, ""); assertEquals(comparable.toString(), CONSTRUCTOR_IDENTIFIER + ":" + CONSTRUCTOR_TYPE); }
@Test public void testGetAmountAsString() throws ISOException { assertThat(iSOAmount.getAmountAsString(), is("8402000000001000")); }
@Test public void testRestart() { CronJobTrigger rebootTrigger = new CronJobTrigger("@restart"); assertEquals(now, rebootTrigger.getNextExecutionAfter(now)); }
@Test public void createSlugWithNullValue() { String slug = Slug.makeSlug(null, true); Assert.assertEquals(null, slug); }
@Test(expected = NotImplementedException.class) public void testInferenceVisitors() throws Throwable { String document = "Some text."; String script = "CW;"; AnalysisEngine ae = AnalysisEngineFactory.createEngine(RutaEngine.class, RutaEngine.PARAM_RULES, script, RutaEngine.PARAM_INFERENCE_VISITORS, new String[] { TestRutaInferenceVisitor.class.getName() }); CAS cas = RutaTestUtils.getCAS(document); try { ae.process(cas); } catch (AnalysisEngineProcessException e) { Throwable cause = e.getCause(); throw cause; } }
@Test public void allGroupsOfAnUserTest(){ int grpTestUserNum = 5, grpUUserNum = 3; String usrTestName = "test"; String usrTestPasswd = "test"; User testUser = new User(); testUser.setName(usrTestName); testUser.setRole(Role.USER); testUser.setNewPassword(usrTestPasswd); Set<UserGroup> testUserGroups = createSomeGroups(grpTestUserNum, usrTestName); addSomeUserGroups(testUserGroups); testUser.setGroups(testUserGroups); geoStoreClient.insert(testUser); User u = new User(); u.setName("u"); u.setRole(Role.USER); Set<UserGroup> uGroups = createSomeGroups(grpUUserNum, "u"); addSomeUserGroups(uGroups); u.setGroups(uGroups); geoStoreClient.insert(u); GeoStoreClient userClient = createUserClient(usrTestName, usrTestPasswd); ExtGroupList result = userClient.searchUserGroup(0, 10, "*"); assertEquals(result.getCount(), grpTestUserNum); }
@Test public void relativePathFromScmRoot_should_return_dot_project_root() { assertThat(newGitScmProvider().relativePathFromScmRoot(worktree)).isEqualTo(Paths.get("")); }
@Test public void testGetFirstMillisecondWithTimeZone() { Year y = new Year(1950); TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); Calendar c = new GregorianCalendar(zone); assertEquals(-631123200000L, y.getFirstMillisecond(c)); try { y.getFirstMillisecond(null); fail("NullPointerException should have been thrown"); } catch (NullPointerException e) { } }
@Test public void validate_shouldPassValidationIfFieldLengthsAreCorrect() { PersonAddress personAddress = new PersonAddress(); personAddress.setStartDate(null); personAddress.setEndDate(null); personAddress.setAddress1("address1"); personAddress.setAddress2("address2"); personAddress.setCityVillage("cityVillage"); personAddress.setStateProvince("stateProvince"); personAddress.setPostalCode("postalCode"); personAddress.setCountry("country"); personAddress.setLatitude("latitude"); personAddress.setLongitude("longitude"); personAddress.setVoidReason("voidReason"); personAddress.setCountyDistrict("countyDistrict"); personAddress.setAddress3("address3"); personAddress.setAddress4("address4"); personAddress.setAddress5("address5"); Errors errors = new BindException(personAddress, "personAddress"); validator.validate(personAddress, errors); Assert.assertEquals(false, errors.hasErrors()); }
@Test public void testOneMatch() throws Exception { FilterFactoryImpl ff = new FilterFactoryImpl(); Function func = ff.function( "equalTo", ff.literal(Arrays.asList(1, 2, 3)), ff.literal(Arrays.asList(1, 4, 5)), ff.literal("ONE")); assertTrue((Boolean) func.evaluate(new Object())); }
@Test public void setsMetricsServiceBuilderIsClientFalseByDefault() { MetricsService.Builder theMetricsServiceBuilder = mock(MetricsService.Builder.class); new InternalCacheBuilder(new Properties(), new CacheConfig(), theMetricsServiceBuilder, nullSingletonSystemSupplier, constructorOf(constructedSystem()), nullSingletonCacheSupplier, constructorOf(constructedCache())); verify(theMetricsServiceBuilder).setIsClient(false); }
@Test public void testInit() { DataCenterAwarePolicy policy = DataCenterAwarePolicy.builder().withChildPolicy(myChildPolicy).withLocalDc(myLocalDc).build(); policy.init(myClusterMock, myHostList); verify(myChildPolicy, times(1)).init(myClusterMock, myHostList); }
@Test public void compareMajor() { final XfsVersion v2_00 = new XfsVersion("2.00"); final XfsVersion v3_00 = new XfsVersion("3.00"); assertEquals(false, v2_00.isGE(v3_00)); assertEquals(true, v3_00.isGE(v2_00)); assertEquals(true, v3_00.isGE(v3_00)); }
@Test public void toClient_localResource_expanded() { final Resource localResource = new DataTypeImpl(); final String testUri = "/test/resource/uri"; localResource.setURIString(testUri); final ResourceReference serverObject = new ResourceReference(localResource); final ClientDataType expectedClientObject = new ClientDataType(); expectedClientObject.setUri(testUri); ToClientConverter defaultToClientConverter = mockClientConverter(localResource, expectedClientObject); mockClientConverterForPairServerResourceAndClientType(localResource, defaultToClientConverter.getClientResourceType(), expectedClientObject); final ClientUriHolder result = converter.toClient(serverObject, new ToClientConversionOptions().setExpanded(true)); assertSame(result, expectedClientObject); assertEquals(result.getUri(), testUri); }
@Test public void testToString() { IDifference result = AtomTypeHybridizationDifference.construct("Foo", null, IAtomType.Hybridization.SP1); String diffString = result.toString(); Assert.assertNotNull(diffString); assertOneLiner(diffString); }
@Test public void contentDeletedNoPatronPermissions() { addPidToAncestors(); addPidToAncestors(); when(objectAclFactory.isMarkedForDeletion(pid)).thenReturn(true); mockFactoryPrincipalRoles(pid, PATRON_PRINC, canViewMetadata); assertFalse(evaluator.hasPermission(pid, PATRON_PRINCIPLES, Permission.viewMetadata)); }
@Test public void defaultProfile() throws IOException { ConfigFile configFile = ConfigFileReader.parse("src/test/resources/unit_test_config"); assertEquals("value", configFile.get("key")); assertEquals("value2", configFile.get("key2")); assertEquals("value3", configFile.get("key3")); assertEquals("value4", configFile.get("key4")); assertEquals("=val=ue=", configFile.get("key5")); assertEquals("value6", configFile.get("[key6")); }
@Test public void shouldHandleBasicMBean() throws Throwable { when( jmxServer.getAttribute( beanName, "name" ) ).thenReturn( "Hello, world!" ); JmxQueryProcedure procedure = new JmxQueryProcedure( ProcedureSignature.procedureName( "bob" ), jmxServer ); RawIterator<Object[],ProcedureException> result = procedure.apply( null, new Object[]{"*:*"}, resourceTracker ); assertThat( asList( result ), contains( equalTo( new Object[]{ "org.neo4j:chevyMakesTheTruck=bobMcCoshMakesTheDifference", "This is a description", map( attributeName, map( "description", "This is the attribute desc.", "value", "Hello, world!" ) ) } ) ) ); }
@Test public void testSingleParseSelectForNested() throws InvalidParseOperationException { final SelectParserSingle request = new SelectParserSingle(); request.parse(nestedSearchQuery); assertNotNull(request); }
@Test public void joinInput1NullOutputNotNull() { final ArrayList<String> list = new ArrayList<String>(); list.add(""); final String delim = null; final String retval = Formats.join(list, delim); Assert.assertEquals("", retval); }
@Test public void deserializeElection_emptyOrNull() throws Exception { AddressBasedAuthorizer mockAuthorizer = mock(AddressBasedAuthorizer.class); ABICallElection election; election = BridgeSerializationUtils.deserializeElection(null, mockAuthorizer); assertEquals(0, election.getVotes().size()); election = BridgeSerializationUtils.deserializeElection(new byte[]{}, mockAuthorizer); assertEquals(0, election.getVotes().size()); }
@Test public void tests_that_generateCommonIamPrincipalAuthMetadata_checks_assumed_role_arn() { authenticationService.adminRoleArns = "arn:aws:sts::0000000000:assumed-role/admin/role-session"; String principalArn = "arn:aws:sts::0000000000:assumed-role/admin/role-session"; String iamRoleArn = "arn:aws:iam::0000000000:role/admin"; when(awsIamRoleArnParser.convertPrincipalArnToRoleArn(principalArn)).thenReturn(iamRoleArn); when(awsIamRoleArnParser.isAssumedRoleArn(principalArn)).thenReturn(true); Map<String, String> result = authenticationService.generateCommonIamPrincipalAuthMetadata(principalArn); assertTrue(result.containsKey(CerberusPrincipal.METADATA_KEY_IS_ADMIN)); assertEquals("true", result.get(CerberusPrincipal.METADATA_KEY_IS_ADMIN)); }
@Test public void whenCreated_statusHasCreationTime() { assertThat(domainStatus.getStartTime(), SystemClockTestSupport.isDuringTest()); }
@Test public void testVirtLimitMessage() { ComplianceReason reason = buildReason("GUEST_LIMIT", buildGeneralAttributes("8", "4")); generator.setMessage(consumer, reason, new Date()); assertEquals( "Only supports 4 of 8 virtual guests.", reason.getMessage()); }
@Test public void shouldFailWithCorrectPartialResultOnIncompleteMacroWithParamLiteral() { String result = null; try { processor.process("Value {test;param;:lit", withoutContext(), RESOLVER); } catch (ValuePostProcessingException e) { result = e.getPartialResult(); } assertEquals("Value {test;param;:lit", result); }
@Test public void partition_first_case() { List<Integer> resultToPartition = IntStream.rangeClosed(1, 494).boxed().collect(Collectors.toList()); List<List<Integer>> partitionedResult = listPartitioner.partition(resultToPartition, 5, true); Assert.assertEquals(partitionedResult.size(), 5); List<Integer> toCompare = Arrays.asList(99, 99, 99, 99, 98); int idx = 0; for (List<Integer> partitionedWork : partitionedResult) { Assert.assertEquals(partitionedWork.size(), toCompare.get(idx++).intValue()); } }
@Test public void getObjectMetadataNonExistingObject() throws Exception { doReturn(Optional.empty()) .when(objectReferentialRepository).find(any(), any()); assertThatThrownBy(() -> tapeLibraryContentAddressableStorage .getObjectMetadata("0_unit", "objectName", true)) .isInstanceOf(ContentAddressableStorageNotFoundException.class); verify(objectReferentialRepository).find("0_unit", "objectName"); Mockito.verifyNoMoreInteractions(basicFileStorage, objectReferentialRepository, archiveReferentialRepository, fileBucketTarCreatorManager, readWriteQueueRepository, tapeCatalogService); }
@Test public void testJWTFilterMissingAuthorization() throws Exception { MockHttpServletRequest request = new MockHttpServletRequest(); request.setRequestURI("/api/test"); MockHttpServletResponse response = new MockHttpServletResponse(); MockFilterChain filterChain = new MockFilterChain(); jwtFilter.doFilter(request, response, filterChain); assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value()); assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull(); }
@Test public void shouldAccountForResponses() throws Exception { request.reply(response); verify(requestStats).response(response); }
@Test public void testDoubleToBytesBE() { assertArrayEquals(DOUBLE_PI_BE , ByteUtils.doubleToBytesBE(Math.PI, new byte[8], 0)); }
@Test public void testToResponseClassNotFoundException() { RestExceptionMapper mapper = new RestExceptionMapper(); Response resp = mapper.toResponse(new ClassNotFoundException()); assertEquals(resp.getStatus(), Response.Status.NOT_IMPLEMENTED.getStatusCode()); }
@Test public void testWakeupInOnJoinComplete() throws Exception { setupCoordinator(RETRY_BACKOFF_MS); coordinator.wakeupOnJoinComplete = true; mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE)); mockClient.prepareResponse(joinGroupFollowerResponse(1, "memberId", "leaderId", Errors.NONE)); mockClient.prepareResponse(syncGroupResponse(Errors.NONE)); AtomicBoolean heartbeatReceived = prepareFirstHeartbeat(); try { coordinator.ensureActiveGroup(); fail("Should have woken up from ensureActiveGroup()"); } catch (WakeupException e) { } assertEquals(1, coordinator.onJoinPrepareInvokes); assertEquals(0, coordinator.onJoinCompleteInvokes); assertFalse(heartbeatReceived.get()); coordinator.wakeupOnJoinComplete = false; consumerClient.poll(0); coordinator.ensureActiveGroup(); assertEquals(1, coordinator.onJoinPrepareInvokes); assertEquals(1, coordinator.onJoinCompleteInvokes); awaitFirstHeartbeat(heartbeatReceived); }
@Test public void controller_shouldInitializeModelForReleaseVersions() { String oldVersion = buildProperties.getVersion(); buildProperties.setVersion("13.3"); FragmentModel model = new FragmentModel(); controller.controller(model, kenyaui); Assert.assertThat(model, hasEntry("moduleVersion", (Object) "13.3")); Assert.assertThat(model, hasKey("systemLocation")); Assert.assertThat(model, hasKey("systemLocationCode")); buildProperties.setVersion(oldVersion); }
@Test public void testEncodeSinglePaddingCharacter() { byte[] data = YBase64.encode(SINGLE_PAD_PUBLIC_KEY.getBytes(StandardCharsets.UTF_8)); assertEquals(new String(data, StandardCharsets.UTF_8), SINGLE_PADDING); }
@Test public void postDelete() { final Object object = new Object(); mStubTableActionAlterations.postDelete(object) .test() .assertValue(object) .assertComplete() .assertNoErrors(); }
@Test public void testOnLeaveMessageFromStart() throws Exception { LeaveMessage leaveMessage = new LeaveMessage(messageId, contactGroupId, privateGroupId, inviteTimestamp, lastLocalMessageId); CreatorSession session = getDefaultSession(START); expectAbortWhenSubscribedToGroup(); CreatorSession newSession = engine.onLeaveMessage(txn, session, leaveMessage); assertSessionAborted(session, newSession); }
@Test void ensureMockEntryPointStartIsCalledExactlyOnce() { val mep = runAndGetMock(); Mockito.verify(mep.getMock(), Mockito.times(1)).start(); }
@Test public void testSaveChanges2() { Order order = new Order(); Mockito.when(orderRepository.findById(Mockito.any(UUID.class))).thenReturn(order); Mockito.when(orderRepository.save(Mockito.any(Order.class))).thenReturn(null); Response result = orderServiceImpl.saveChanges(order, headers); Assert.assertEquals(new Response<>(1, "Success", order), result); }
@Test public void retrievesMethodInvokerFiltersByPath() { MethodInvokerFilter embeddedMethodInvokerFilter = mock(MethodInvokerFilter.class); when(embeddedProviders.getMethodInvokerFilters("/a")).thenReturn(newArrayList(embeddedMethodInvokerFilter)); PathMatchesMethodInvokerFilter pathMatchesMethodInvokerFilter = new PathMatchesMethodInvokerFilter(); AllMatchesMethodInvokerFilter allMatchesMethodInvokerFilter = new AllMatchesMethodInvokerFilter(); applicationProviders.addMethodInvokerFilter(pathMatchesMethodInvokerFilter); applicationProviders.addMethodInvokerFilter(allMatchesMethodInvokerFilter); assertEquals(newArrayList(allMatchesMethodInvokerFilter, embeddedMethodInvokerFilter), applicationProviders.getMethodInvokerFilters("/a")); }
@Test public void testValidateNullExtensions() throws Exception { OAuthBearerClientInitialResponse.validateExtensions(null); }
@Test public void isPaymentValid_isAmountLessThan100ValidCodePassed_returnsFalse() { String bankCode = "058"; Double amount = 1.0; boolean isPaymentValid = SUT.isPaymentValid(bankCode, amount); assertThat(false, is(isPaymentValid)); }
@Test public void instanceGroupObjectTypeTest() { final String id = "test1"; AAIResourceUri aaiUri = AAIUriFactory.createResourceUri(AAIObjectType.INSTANCE_GROUP, id); assertEquals("/network/instance-groups/instance-group/test1", aaiUri.build().toString()); }
@Test public void shouldUnwrapArrayResponses() throws Exception { final Message in = new DefaultMessage(camelContext); exchange.setIn(in); in.setBody("{\"body\":[{\"b1\":\"c1\"},{\"b2\":\"c2\"}]}"); processor.process(exchange); assertThat(in.getBody()).isEqualTo("[{\"b1\":\"c1\"},{\"b2\":\"c2\"}]"); }
@Test public void removeSchema() throws Exception { File file = temporaryFolder.newFile("points.fgb"); Map<String, Serializable> params = new HashMap<>(); params.put("flatgeobuf-file", file); DataStore store = DataStoreFinder.getDataStore(params); assertTrue(file.exists()); store.removeSchema(new NameImpl("points")); assertFalse(file.exists()); }
@Test public void testDeleteRedisPool() throws Exception { String id = null; String result = poolManagement.deleteRedisPool(id); Assert.assertEquals(id, result); }
@Test public void toJvmArray() { LongArray arr = createTestData(); long[] expected = {1L, 3L}; Assert.assertArrayEquals(expected, arr.toJvmArray()); }
@Test(expected = UnsupportedOperationException.class) public void testInnerClassChangeForType() throws Exception { new ByteBuddy().decorate(Foo.class).innerTypeOf(Object.class); }
@Test public void coverage() { CashSwaptionSettlement test = CashSwaptionSettlement.of(date(2015, 6, 30), CashSwaptionSettlementMethod.CASH_PRICE); coverImmutableBean(test); CashSwaptionSettlement test2 = CashSwaptionSettlement.of(date(2015, 7, 30), CashSwaptionSettlementMethod.PAR_YIELD); coverBeanEquals(test, test2); coverEnum(CashSwaptionSettlementMethod.class); coverEnum(SettlementType.class); }
@Test public void shouldBeEnabledByAssociatedFeature() { Properties configuration = new Properties(); configuration.setProperty("feature.test", "true"); EarlyAccessFeature feature = new EarlyAccessFeature("test", "test description", false); EarlyAccessFeature implied = new EarlyAccessFeature("implied", "implied feature", false, feature); assertTrue(feature.isEnabled(configuration)); assertTrue(implied.isEnabled(configuration)); }
@Test public void testMODIFY_QUOTA() throws Exception { workflow.MODIFY_QUOTA(); verify( environmentManager ).loadEnvironment( TestHelper.ENV_ID ); }
@Test public void skipProcessingWithWrongMessageTypeOnResponse() { when(messageContext.getResponse()).thenReturn(mock(WebServiceMessage.class)); unit.handleResponse(messageContext); assertThat(backend.isEmpty(), is(true)); }
@Test public void testGetAll() throws Throwable { SimpleConfiguration simpleConfiguration = new SimpleConfiguration(); simpleConfiguration.put("testString", ""); String[] result = simpleConfiguration.getAll("testString"); assertEquals(1, result.length, "result.length"); assertEquals("", result[0], "result[0]"); }
@Test public final void testCreatePacketPayloadNotIncludingFrameType() { XBee64BitAddress source64Addr = new XBee64BitAddress("0013A2004032D9AB"); XBee16BitAddress source16Addr = new XBee16BitAddress("B45C"); int sourceEndpoint = 0xA0; int destEndpoint = 0xA1; int clusterID = 0x1554; int profileID = 0xC105; int options = 0x06; byte[] data = new byte[]{0x68, 0x6F, 0x6C, 0x61}; byte[] payload = new byte[17 + data.length]; System.arraycopy(source64Addr.getValue(), 0, payload, 0, source64Addr.getValue().length); System.arraycopy(source16Addr.getValue(), 0, payload, 8, source16Addr.getValue().length); payload[10] = (byte)sourceEndpoint; payload[11] = (byte)destEndpoint; payload[12] = (byte)(clusterID >> 8); payload[13] = (byte)clusterID; payload[14] = (byte)(profileID >> 8); payload[15] = (byte)profileID; payload[16] = (byte)options; System.arraycopy(data, 0, payload, 17, data.length); exception.expect(IllegalArgumentException.class); exception.expectMessage(is(equalTo("Payload is not an Explicit Rx Indicator packet."))); ExplicitRxIndicatorPacket.createPacket(payload); }
@Test public void indention_for_textBeforeColumn_having_one_tab_character_create_new_lines_with_same_cursorPos_replaced_correctly() { StringBuilder origin = new StringBuilder(); origin.append("parent {\n"); origin.append(" $cursor\n"); origin.append("}\n"); InsertionData result = supportToTest.prepareInsertionString(origin.toString(), "\t"); StringBuilder expected = new StringBuilder(); expected.append("parent {\n"); expected.append("\t "); int expectedPos = expected.length(); expected.append("\n"); expected.append("\t}\n"); assertEquals(expected.toString(), result.sourceCode); assertEquals(expectedPos, result.cursorOffset); }
@Test public void shouldFailSilentlyWhenNoTrailers() throws Exception { when(movie.getId()).thenReturn("12345"); when(movieDetailsInteractor.getTrailers(movie.getId())).thenReturn(Observable.error(new SocketTimeoutException())); movieDetailsPresenter.showTrailers(movie); verifyZeroInteractions(view); }
@Test @Category(SlowTest.class) public void testIPTripleDescriptor1() throws java.lang.Exception { SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer mol = sp.parseSmiles("C#CCC"); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol); addExplicitHydrogens(mol); lpcheck.saturate(mol); double result = ((DoubleResult) descriptor.calculate(mol.getBond(0), mol).getValue()).doubleValue(); double resultAccordingNIST = 9.44; Assert.assertEquals(resultAccordingNIST, result, 0.75); }
@Test public void configTest() { Map<String, String> options = new HashMap<>(); options.put("otel.ssp.export.sampled", "false"); SimpleSpanProcessor.Builder config = SimpleSpanProcessor.newBuilder(spanExporter) .fromConfigMap(options, ConfigTester.getNamingDot()); assertThat(config.getExportOnlySampled()).isEqualTo(false); }
@Test public void invokeZero() { FunctionTestUtil.assertResultBigDecimal(ceilingFunction.invoke(BigDecimal.ZERO), BigDecimal.ZERO); }
@SuppressWarnings("unchecked") @Test public void exceptions_in_callback_should_be_rethrown_and_connection_released() throws Exception { RestTemplate template = new RestTemplate(client); ResponseCallback<String> callback = mock(ResponseCallback.class); HttpResponse rsp = mock(HttpResponse.class); when(client.post(anyString(), anyString())).thenReturn(rsp); when(rsp.isSuccessful()).thenReturn(Boolean.TRUE); when(callback.success(rsp)).thenThrow(new Exception("test")); try { template.post("some_path", "content", callback); fail("RT expected"); } catch (RuntimeException e) { } verify(rsp).releaseConnection(); }
@Test public void stringValueTest() { UnmarshallerContext unmarshallerContext = new UnmarshallerContext(); Map<String, String> responseMap = new HashMap<String, String>(); responseMap.put("StringValueKey", "this is a string test"); unmarshallerContext.setResponseMap(responseMap); Assert.assertTrue("this is a string test".equals(unmarshallerContext.stringValue("StringValueKey"))); Assert.assertNull(unmarshallerContext.stringValue("NullStringValueKey")); }
@Test public void testSampleValues() { float[][][] xy = sampleTestFunction(11,13); float[] x1 = xy[0][0]; float[] x2 = xy[0][1]; float[][] y = xy[1]; float x1min = min(x1), x1max = max(x1); float x2min = min(x2), x2max = max(x2); BilinearInterpolator2 bi = makeInterpolator(x1,x2,y); int n1i = 101; int n2i = 102; float d1i = (x1max-x1min)/(n1i-1); float d2i = (x2max-x2min)/(n2i-1); float f1i = x1min; float f2i = x2min; Sampling s1i = new Sampling(n1i,d1i,f1i); Sampling s2i = new Sampling(n2i,d2i,f2i); float[][] yi = bi.interpolate(s1i,s2i); for (int i2i=0; i2i<n2i; ++i2i) { float x2i = (float)s2i.getValue(i2i); for (int i1i=0; i1i<n1i; ++i1i) { float x1i = (float)s1i.getValue(i1i); assertNear(testFunction00(x1i,x2i),yi[i2i][i1i]); } } }
@Test public void testCreateDefault() throws IOException { conf.setLong(HConstants.HREGION_MAX_FILESIZE, 1234L); ConstantSizeRegionSplitPolicy policy = (ConstantSizeRegionSplitPolicy)RegionSplitPolicy.create( mockRegion, conf); assertEquals(1234L, policy.getDesiredMaxFileSize()); htd.setMaxFileSize(9999L); policy = (ConstantSizeRegionSplitPolicy)RegionSplitPolicy.create( mockRegion, conf); assertEquals(9999L, policy.getDesiredMaxFileSize()); }
@Test public void testEvaluateBindingsParseInt() { ContainerDescription firstDescription = new ContainerDescription(); firstDescription.name = "A"; firstDescription._cluster = 5; firstDescription.hostname = "12"; ContainerDescription secondDescription = new ContainerDescription(); secondDescription.name = "B"; List<Binding> bindings = Arrays.asList( binding(Arrays.asList("_cluster"), "A~hostname")); Binding.ComponentBinding componentBinding = new Binding.ComponentBinding("B", bindings); CompositeTemplate compositeTemplate = createCompositeTemplate(Arrays .asList(firstDescription, secondDescription), Arrays.asList(componentBinding)); BindingEvaluator.evaluateBindings(compositeTemplate); firstDescription = (ContainerDescription) compositeTemplate.components.get("A").data; secondDescription = (ContainerDescription) compositeTemplate.components.get("B").data; assertNotNull(secondDescription._cluster); assertEquals(firstDescription.hostname, secondDescription._cluster.toString()); }
@Test public void scrollBy_scrolledMoreThanZero_listenerIsNotifiedAboutScroll() { prepareStubsForScrollBy(300, 3, false); int scrolled = layoutManager.scrollBy(200, null); assertThat(scrolled, is(greaterThan(0))); verify(mockScrollStateListener).onScroll(anyFloat()); }
@Test public void testFilterIncludedColumnsForNull() { Trigger trigger = new Trigger(); assertArrayEquals("Expected empty column array", new Column[0], trigger.filterIncludedColumns(null)); }
@Test public void notifiedWhenEngineExecutionSkipped() { adapter.executionSkipped( newEngineIdentifier(), "test" ); verify( listener ).testSkipped( any() ); }
@Test void returnNullForEvictionCount() { assertThat(metrics.evictionCount()).isNull(); }
@Test public void testGetNumDocuments() { System.out.println("getNumDocuments"); assertEquals(5000, corpus.getNumDocuments()); }
@Test public void equal_zeros_and_empty() { Version v1 = Version.of(), v2 = Version.of(0,0,0); assertThat(v2).isEqualTo(v1); assertThat(v1).isEqualTo(v2); }
@Test public void testGetPackedLength() { assertEquals(6, inter.getPackedLength(3)); }
@Test public void test_verifyFactor_with_500_error() { setupMockWhereVerifyGivesError(500L, "any error message"); try { oneLoginAuthConnector.verifyFactor(DEVICE_ID.toString(), STATE_TOKEN, OTP_TOKEN); fail("expected exception not thrown"); } catch (ApiException e) { assertTrue(e.getApiErrors().contains(DefaultApiError.GENERIC_BAD_REQUEST)); } }
@Test void testLower() { BinarySearchIterator iterator = new BinarySearchIterator(0, 15); int mid = Integer.MAX_VALUE; while(iterator.hasNext()) { int next = iterator.next(); assertTrue(next < mid); mid = next; iterator.lower(); } assertEquals(0, mid); }
@Test public void testDateFormatSecondsTimeZone() { String test = "%s"; String escapedString = BucketPath.escapeString( test, headersWithTimeZone, CUSTOM_TIMEZONE, true, Calendar.SECOND, 5, false); System.out.println("Escaped String: " + escapedString); Calendar cal2 = createCalendar(2012, 5, 23, 13, 46, 30, 0, CUSTOM_TIMEZONE); String expectedString = String.valueOf(cal2.getTimeInMillis() / 1000); System.out.println("Expected String: " + expectedString); Assert.assertEquals(expectedString, escapedString); }
@Test public void testGetMembersSet() throws Exception { redisSet.save(key,"2","23"); Set<String> result = redisSet.getMembersSet(key); Assert.assertEquals(new HashSet<String>(Arrays.asList("2","23")), result); deleteKey(); }
@Test public void testGenerateURL() { TimeSeriesURLGenerator g = new TimeSeriesURLGenerator(); DefaultXYDataset dataset = new DefaultXYDataset(); dataset.addSeries("Series '1'", new double[][] {{1.0, 2.0}, {3.0, 4.0}}); String s = g.generateURL(dataset, 0, 0); assertTrue(s.startsWith("index.html?series=Series+%271%27&amp;item=")); }
@Test public final void testCreateXBeeExceptionCauseNull() { Throwable cause = null; XBeeException e = new XBeeException(cause); assertThat("Created 'XBeeException' does not have the expected message", e.getMessage(), is(nullValue(String.class))); assertThat("Created 'XBeeException' does not have the expected cause", e.getCause(), is(nullValue(Throwable.class))); }
@Test public void testOverlappingLockSpinsInSameJvm() throws InterruptedException { FileChannel channel = randomFileChannel(); CountDownLatch latch = new CountDownLatch(2); Thread a = new Thread(() -> { FileLock lock = FileLocks.lock(channel, 0, 10, false); Random.tinySleep(); latch.countDown(); FileLocks.release(lock); }); Thread b = new Thread(() -> { FileLock lock = FileLocks.lock(channel, 3, 8, false); Random.tinySleep(); latch.countDown(); FileLocks.release(lock); }); a.start(); b.start(); latch.await(); Assert.assertTrue(true); }
@Test(expected=IllegalArgumentException.class) public void testGetArgAsDoubleWithBadStringArgument() { FunctionUtil.getArgAsDouble("abc"); }
@Test public void checksFileCorruption() { sessionContexts.onLogon(bSession, fixDictionary); sessionContexts.onLogon(aSession, fixDictionary); buffer.putBytes(8, new byte[1024]); newSessionContexts(buffer); verify(errorHandler).onError(any(FileSystemCorruptionException.class)); }
@Test public void simpleTest() { LonelySplitter splitter = new LonelySplitter(); List<Instance> instances = new ArrayList<>(); Model m0 = new DefaultModel(); m0.getMapping().addReadyVM(m0.newVM(1)); m0.getMapping().addRunningVM(m0.newVM(2), m0.newNode(1)); Model m1 = new DefaultModel(); m1.getMapping().addReadyVM(m1.newVM(3)); m1.getMapping().addSleepingVM(m1.newVM(4), m1.newNode(2)); m1.getMapping().addRunningVM(m1.newVM(5), m1.newNode(3)); instances.add(new Instance(m0, new ArrayList<>(), new MinMTTR())); instances.add(new Instance(m1, new ArrayList<>(), new MinMTTR())); TIntIntHashMap index = Instances.makeVMIndex(instances); Set<VM> all = new HashSet<>(m0.getMapping().getAllVMs()); all.addAll(m1.getMapping().getAllVMs()); Lonely single = new Lonely(m0.getMapping().getAllVMs()); Assert.assertTrue(splitter.split(single, null, instances, index, new TIntIntHashMap())); Assert.assertTrue(instances.get(0).getSatConstraints().contains(single)); Assert.assertFalse(instances.get(1).getSatConstraints().contains(single)); Lonely among = new Lonely(all, false); Assert.assertTrue(splitter.split(among, null, instances, index, new TIntIntHashMap())); Assert.assertTrue(instances.get(0).getSatConstraints().contains(new Lonely(m0.getMapping().getAllVMs(), false))); Assert.assertTrue(instances.get(1).getSatConstraints().contains(new Lonely(m1.getMapping().getAllVMs(), false))); }
@Test public void testGetMultipleBean() { Processor[] processors = SingletonServiceFactory.getBeans(Processor.class); Assert.assertEquals(processors.length, 3); Arrays.stream(processors).forEach(processor -> logger.debug(processor.process())); }
@Test(expected = UnsupportedOperationException.class) public void unsupportedRemove() { new SortResultIterator( QueryBuilder.select(), Collections.<QueryContext>emptyIterator()).remove(); }
@Test public void testOnCtrlDWhenDataTypeIsReadOnly() { when(listItem.isReadOnly()).thenReturn(true); shortcuts.onCtrlD(); verify(listItem, never()).insertFieldBelow(); }
@Test @SuppressWarnings("unchecked") public void checkDrawDelegatesToWrapped() { final Diagram diagram = mock(Diagram.class); final ParameterizedCommand loadCallback = mock(ParameterizedCommand.class); proxy.draw(diagram, loadCallback); verify(wrapped).draw(eq(diagram), eq(loadCallback)); }
@SuppressWarnings("ResultOfMethodCallIgnored") @Test public void doInBackground() { HttpConnectionRemoveFileTask task = new HttpConnectionRemoveFileTask(mFile); task.doInBackground(); verify(mFile).delete(); }
@Test public void test_jodaConvert() { assertJodaConvert(LongDoublePair.class, LongDoublePair.of(1L, 1.7d)); }
@Test public void testHasPrivilegesNullPath() { assertFalse(cugPermProvider.hasPrivileges(null, PrivilegeConstants.JCR_READ)); }
@Test public void concatSingleBatchJs() throws Exception { List<Node> nodes = seqNodes(js1, js2, js3); Node parent = js1.getParentNode(); assertEquals(3, parent.getChildNodes().getLength()); SimpleConcatUriManager mgr = simpleMgr(); ConcatVisitor.Js rewriter = new ConcatVisitor.Js(config(null, false, false), mgr); assertTrue(rewriter.revisit(gadget(), nodes)); assertEquals(1, parent.getChildNodes().getLength()); Element concatNode = (Element)parent.getChildNodes().item(0); Uri concatUri = Uri.parse(concatNode.getAttribute("src")); assertEquals(CONCAT_BASE_URI.getScheme(), concatUri.getScheme()); assertEquals(CONCAT_BASE_URI.getAuthority(), concatUri.getAuthority()); assertEquals(CONCAT_BASE_URI.getPath(), concatUri.getPath()); assertEquals(JS1_URL_STR, concatUri.getQueryParameter("1")); assertEquals(JS2_URL_STR, concatUri.getQueryParameter("2")); assertEquals(JS3_URL_STR, concatUri.getQueryParameter("3")); }
@Test public void testLocalizeAndroidStringsRemoveUntranslatedSingleItem() throws Exception { Repository repo = repositoryService.createRepository(testIdWatcher.getEntityName("repository")); RepositoryLocale repoLocale; try { repoLocale = repositoryService.addRepositoryLocale(repo, "en-GB"); } catch (RepositoryLocaleCreationException e) { throw new RuntimeException(e); } String assetContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!-- comment after prolog -->\n\n" + "<resources>\n" + " <string name=\"test\">This is test</string>\n" + "</resources>"; asset = assetService.createAssetWithContent(repo.getId(), "res/values/strings.xml", assetContent); asset = assetRepository.findOne(asset.getId()); assetId = asset.getId(); tmId = repo.getTm().getId(); PollableFuture<Asset> assetResult = assetService.addOrUpdateAssetAndProcessIfNeeded(repo.getId(), asset.getPath(), assetContent, false, null, null, null, null); try { pollableTaskService.waitForPollableTask(assetResult.getPollableTask().getId()); } catch (PollableTaskException | InterruptedException e) { throw new RuntimeException(e); } assetResult.get(); String expectedLocalized = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!-- comment after prolog -->" + "<resources>\n" + "</resources>"; String localizedAsset = tmService.generateLocalized(asset, assetContent, repoLocale, "en-GB", null, null, Status.ALL, InheritanceMode.REMOVE_UNTRANSLATED); logger.debug("localized=\n{}", localizedAsset); assertEquals(localizedAsset, localizedAsset); }
@Test public void testToKeys() { Meta one = new Meta("sys.cpu.user", "tag1", "value1"); List<Key> keys = one.toKeys(); Assert.assertTrue(keys.contains(new Key("m:sys.cpu.user"))); Assert.assertTrue(keys.contains(new Key("t:sys.cpu.user", "tag1"))); Assert.assertTrue(keys.contains(new Key("v:sys.cpu.user", "tag1", "value1"))); }
@Test public void parallelExecutionSign() throws Exception { ExecutorService single = Executors.newSingleThreadExecutor(); ExecutorService multiple = Executors.newCachedThreadPool(); byte[] data = "Hello world".getBytes(); PrivateKey k = new PrivateKey(2048); for(int i=0; i<200; i++) ExtendedSignature.sign(k, data); double t1 = parallelize(single, 1, ()-> { for(int i=0; i<100; i++) ExtendedSignature.sign(k, data); }); System.out.println(t1); double t2 = parallelize(multiple, 4, ()-> { for(int i=0; i<100; i++) ExtendedSignature.sign(k, data); }); System.out.println(t2); assertThat(Math.abs(t1-t2), is(lessThan(0.15))); }
@Test public void testEquals() { assertEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1), new ExtendedBlock(POOL_A, BLOCK_1_GS1)); assertNotEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1), new ExtendedBlock(POOL_B, BLOCK_1_GS1)); assertNotEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1), new ExtendedBlock(POOL_A, BLOCK_2_GS1)); assertEquals( new ExtendedBlock(POOL_A, BLOCK_1_GS1), new ExtendedBlock(POOL_A, BLOCK_1_GS2)); }
@Test void testIsDuplicateKey_isDuplicateKey_usingDataSource() throws Exception { String databaseProductName = "HSQL Database Engine"; DataSource dataSource = createMockDataSource(databaseProductName); SQLErrorCodesResolver sqlErrorCodesResolver = new SQLErrorCodesResolver(dataSource); SQLException sqlException = new SQLException("test", "error", -104); boolean isDuplicateKey = sqlErrorCodesResolver.isDuplicateKeyViolation(new PersistenceException("error", sqlException)); assertTrue(isDuplicateKey); }
@Test public void shouldLoadByUsernameWhenUserExists() { final User user = new User(); user.setEmail("name"); user.setPassword("123456"); user.setRole(Role.USER); when(repository.findByEmail(any(String.class))).thenReturn(Optional.of(user)); UserDetails loaded = service.loadUserByUsername("name"); assertThat(loaded.getUsername(), Matchers.equalTo(user.getEmail())); }
@Test public void shouldCompareWithLeftFirst() throws Exception { final ImmutablePair<String, String> pair1 = new ImmutablePair<>("A", "D"); final ImmutablePair<String, String> pair2 = new ImmutablePair<>("B", "C"); assertTrue(pair1.compareTo(pair1) == 0); assertTrue(pair1.compareTo(pair2) < 0); assertTrue(pair2.compareTo(pair2) == 0); assertTrue(pair2.compareTo(pair1) > 0); }
@Test public void setDefault() { HttpPostMeta meta = new HttpPostMeta(); assertNull( meta.getEncoding() ); meta.setDefault(); assertEquals( "UTF-8", meta.getEncoding() ); }
@Test public void testGetCommonPropertyTypeELContextObject() { replay(beanElResolver); Class<?> clazz = resolver.getCommonPropertyType(null, null); assertEquals("The class is not correct", String.class, clazz); clazz = resolver.getCommonPropertyType(null, "Base object"); assertNull("The class for non root objects must be null", clazz); verify(beanElResolver); }
@Test public void shouldAllowCreatingNewWorkspacesByDefault() throws Exception { try { repository.login("new-workspace"); } catch (NoSuchWorkspaceException e) { } JcrSession session1 = repository.login(); assertThat(session1.getRootNode(), is(notNullValue())); session1.getWorkspace().createWorkspace("new-workspace"); JcrSession session2 = repository.login("new-workspace"); assertThat(session2.getRootNode(), is(notNullValue())); }
@Test public void test_into_recycler() { RecyclerMultiAdapter adapter = SmartAdapter.empty().into(mockRecycler); verify(mockRecycler).setAdapter(adapter); }
@Test public void testCreateExeDir() throws Exception { PGETaskInstance pgeTask = createTestInstance(); File exeDir = new File(pgeTask.pgeConfig.getExeDir()); FileUtils.deleteDirectory(exeDir); assertFalse(exeDir.exists()); pgeTask.createExeDir(); assertTrue(exeDir.exists()); }
@Test void getLast() { assertTrue(ArrayUtils.getLast(EMPTY_ARRAY).isEmpty()); assertEquals("c", ArrayUtils.getLast(ARRAY).get()); }
@Test public void testCannotAddNewDependencyOfHigherType() { final Dependency mockNewDependency = mock(Dependency.class); when(mockNewDependency.getType()).thenReturn(DependencyType.WAR); final Pom pom = getMinimalPom(JAR); assertFalse(pom.canAddDependency(mockNewDependency, true)); }
@Test public void testCheckProjectAndAuth(){ Mockito.when(projectUserMapper.queryProjectRelation(1, 1)).thenReturn(getProjectUser()); User loginUser = getLoginUser(); Map<String, Object> result = projectService.checkProjectAndAuth(loginUser,null,projectName); logger.info(result.toString()); Status status = (Status)result.get(Constants.STATUS); Assert.assertEquals(Status.PROJECT_NOT_FOUNT,result.get(Constants.STATUS)); Project project = getProject(); project.setUserId(2); result = projectService.checkProjectAndAuth(loginUser,project,projectName); logger.info(result.toString()); Assert.assertEquals(Status.USER_NO_OPERATION_PROJECT_PERM,result.get(Constants.STATUS)); project.setUserId(1); result = projectService.checkProjectAndAuth(loginUser,project,projectName); logger.info(result.toString()); Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS)); }
@Test void ensureComplexMultiComponentsAreDetected() { c("1", "2"); c("2", "4"); c("2", "5"); c("4", "5"); c("5", "2"); c("2", "3"); c("3", "6"); c("6", "3"); c("5", "6"); c("4", "7"); c("5", "7"); c("6", "8"); c("7", "8"); c("8", "7"); c("9", "7"); c("7", "10"); c("10", "9"); c("10", "11"); c("11", "12"); c("12", "10"); val c = cycleDectector.apply(graph); assertEquals(c.getElements().size(), 4); }
@Test public void testPasswordIsUnMatch() { SystemAccountAuthenticator authenticator = createPasswordAuthenticator("20130802"); try { authenticator.authenticate("active user", "password1"); fail("エラーが発生するので、ここは通過しない"); } catch (AuthenticationFailedException e) { assertThat(e.getUserId(), is("1")); } }
@Test void assigns_wip_short() { RuntimeOptions options = parser .parse("-w") .build(); assertThat(options.isWip(), is(true)); }
@Test public void testGetValidatorImportReaderResolver() { final String modelNamespace = "0000-1111-2222-3333"; final String modelName = "model.dmn"; final String locationURI = "file.pmml"; final String pmmlXML = "<pmml/>"; final Path modelPath = mock(Path.class); final URI pmmlURI = URI.create(locationURI); final Path pmmlPath = mock(Path.class); final InputStream inputStream = mock(InputStream.class); when(importsHelper.getDMNModelPath(metadata, modelNamespace, modelName)).thenReturn(modelPath); when(importsHelper.loadPath(pmmlPath)).thenReturn(Optional.of(inputStream)); when(dmnIOHelper.isAsString(inputStream)).thenReturn(pmmlXML); doReturn(pmmlURI).when(domainValidator).getPMMLURI(modelPath, locationURI); doReturn(pmmlPath).when(domainValidator).getPath(pmmlURI); final Reader actualReader = domainValidator.getValidatorImportReaderResolver(metadata).newReader(modelNamespace, modelName, locationURI); final Reader expectedReader = new StringReader(pmmlXML); assertContent(expectedReader, actualReader); }
@Test public final void fileExtension() throws Exception { String path1 = "/var/lib/bar.foo"; String path2 = "barbar.foo"; String path3 = "/var/lib/foo.bar"; String pattern = ".*\\.foo"; Assert.assertTrue(new RegexFilePathMatcher(pattern).isMatch(path1)); Assert.assertTrue(new RegexFilePathMatcher(pattern).isMatch(path2)); Assert.assertFalse(new RegexFilePathMatcher(pattern).isMatch(path3)); }
@Test public void stringMultipleBundles() { TestResourceBundle bundle1 = new TestResourceBundle(); TestResourceBundle bundle2 = new TestResourceBundle(); TestResourceBundle bundle3 = new TestResourceBundle(); bundle1.getResourcesMap().put("A", "1"); bundle2.getResourcesMap().put("A", "2"); bundle3.getResourcesMap().put("A", "3"); bundle2.getResourcesMap().put("B", "2"); bundle3.getResourcesMap().put("B", "3"); Resources resources = new Resources(bundle1, bundle2, bundle3); assertThat(resources.string("A")).isEqualTo("1"); assertThat(resources.string("B")).isEqualTo("2"); }
@Test public void testExistsFile() throws IOException { String file = folder.getRoot()+ File.separator+"file.txt"; folder.newFile("file.txt"); assertThat(FileUtils.exists(file)).isTrue(); }
@Test(expected = IllegalStateException.class) public void handleWithNullChargingStation() throws UserIdentityUnauthorizedException { JsonObject commandObject = gson.fromJson("{listVersion:1,updateType:'DIFFERENTIAL',items:[{token:'1',status:'ACCEPTED', mobilityServiceProvider:'MSP',visibleId:'7007'},{token:'2',status:'BLOCKED'}]}", JsonObject.class); handler.handle(UNKNOWN_CHARGING_STATION_ID.getId(), commandObject, ROOT_IDENTITY_CONTEXT); }
@Test public void testBuildPsshAtom() { byte[] schemeData = new byte[]{0, 1, 2, 3, 4, 5}; byte[] psshAtom = PsshAtomUtil.buildPsshAtom(C.WIDEVINE_UUID, schemeData); ParsableByteArray parsablePsshAtom = new ParsableByteArray(psshAtom); assertThat(parsablePsshAtom.readUnsignedIntToInt()).isEqualTo(psshAtom.length); assertThat(parsablePsshAtom.readInt()).isEqualTo(TYPE_pssh); int fullAtomInt = parsablePsshAtom.readInt(); assertThat(parseFullAtomVersion(fullAtomInt)).isEqualTo(0); assertThat(parseFullAtomFlags(fullAtomInt)).isEqualTo(0); UUID systemId = new UUID(parsablePsshAtom.readLong(), parsablePsshAtom.readLong()); assertThat(systemId).isEqualTo(WIDEVINE_UUID); assertThat(parsablePsshAtom.readUnsignedIntToInt()).isEqualTo(schemeData.length); byte[] psshSchemeData = new byte[schemeData.length]; parsablePsshAtom.readBytes(psshSchemeData, 0, schemeData.length); assertThat(psshSchemeData).isEqualTo(schemeData); }
@Test public void testTrimLeadingZeroes() { assertThat(trimLeadingZeroes(new byte[]{}), CoreMatchers.is(new byte[]{})); assertThat(trimLeadingZeroes(new byte[]{0}), CoreMatchers.is(new byte[]{0})); assertThat(trimLeadingZeroes(new byte[]{1}), CoreMatchers.is(new byte[]{1})); assertThat(trimLeadingZeroes(new byte[]{0, 1}), CoreMatchers.is(new byte[]{1})); assertThat(trimLeadingZeroes(new byte[]{0, 0, 1}), CoreMatchers.is(new byte[]{1})); assertThat(trimLeadingZeroes(new byte[]{0, 0, 1, 0}), CoreMatchers.is(new byte[]{1, 0})); }
@Test public void find_by_app_name_order_by_release_time() { App app = new App(); app.setAppName("app"); app.setCreateUserId(1); app.setCreateTime(LocalDateTime.now()); Integer appId = appDao.save(app).getId(); AppRelease appRelease = new AppRelease(); appRelease.setAppId(appId); appRelease.setVersion("0.0.1"); appRelease.setTitle("title"); appRelease.setDescription("description"); appRelease.setReleaseTime(LocalDateTime.now()); appRelease.setReleaseMethod(ReleaseMethod.AUTO); appRelease.setCreateUserId(1); appRelease.setCreateTime(LocalDateTime.now().minusSeconds(1)); appReleaseDao.save(appRelease); appRelease = new AppRelease(); appRelease.setAppId(appId); appRelease.setVersion("0.0.2"); appRelease.setTitle("title2"); appRelease.setDescription("description2"); appRelease.setReleaseTime(LocalDateTime.now()); appRelease.setReleaseMethod(ReleaseMethod.AUTO); appRelease.setCreateUserId(1); appRelease.setCreateTime(LocalDateTime.now().minusSeconds(1)); appReleaseDao.save(appRelease); List<AppRelease> releases = appReleaseService.findAllByAppName("app"); assertThat(releases).hasSize(2).isSortedAccordingTo(Comparator.comparing(AppRelease::getReleaseTime).reversed()); }
@Test public void testRemoveDuplicates() { Element element = Mockito.mock(Element.class); MatcherAssert.assertThat("PRECONDITION : MUST contain double Elements", FluentElementFilter.createFluentElementFilter(element, element).getResult(), Matchers.contains(element, element)); MatcherAssert.assertThat(FluentElementFilter.createFluentElementFilter(element, element).removeDuplicates().getResult(), Matchers.contains(element)); }
@Test public void getInputStream() throws IOException { try (InputStream is = part.getInputStream()) { Assert.assertEquals(content, IOUtils.toString(is, StandardCharsets.UTF_8)); } }
@Test public void registerUser_shouldWorkAsExpected() throws Exception { String email = "test@example.com"; String rawPassword = "p@sSw0rd"; boolean isActive = false; User registeredUser = new User(); registeredUser.setEmail(email); registeredUser.setAccountName(email); registeredUser.setPassword(passwordEncoder.encode(rawPassword)); registeredUser.setActive(isActive); when(userService.registerUser(any(User.class), any(HttpServletRequest.class))) .thenReturn(registeredUser); mockMvc.perform(post("/user/register.action") .param("email", email) .param("password", rawPassword)) .andExpect(status().isOk()) .andExpect(content().contentType("application/json;charset=UTF-8")) .andExpect(jsonPath("$.*", hasSize(3))) .andExpect(jsonPath("$.success", is(true))) .andExpect(jsonPath("$.total", is(1))) .andExpect(jsonPath("$.data", containsString("You have been registered."))) .andExpect(jsonPath("$.data", containsString(email))); verify(userService, times(1)).registerUser(any(User.class), any(HttpServletRequest.class)); verifyNoMoreInteractions(userService); }
@Test public void testEqualsHashCode() { setupParameters(data, values); parameters.add(ff2.literal(InterpolateFunction.METHOD_COLOR)); Function fn1 = finder.findFunction("interpolate", parameters); Function fn2 = finder.findFunction("interpolate", parameters); setupParameters(data, values); parameters.add(ff2.literal(InterpolateFunction.METHOD_NUMERIC)); Function fn3 = finder.findFunction("interpolate", parameters); assertEquals(fn1, fn2); assertEquals(fn2, fn1); assertEquals(fn1.hashCode(), fn2.hashCode()); assertNotEquals(fn1, fn3); assertNotEquals(fn2, fn3); }
@Test public void run_rebuild() { when(grsSource.getName()).thenReturn(ciString("APNIC-GRS")); subject.grsImport(grsSource, true); verify(grsDao).cleanDatabase(); verify(grsDao, never()).getCurrentObjectIds(); }
@Test public void writeThemeMinimal() throws Exception { final ByteArrayOutputStream bos = new ByteArrayOutputStream(); final XMLStreamWriter writer = newInstance().createXMLStreamWriter( bos ); writer.writeStartElement( "Layer" ); writer.writeNamespace( "", WMSNS ); writer.writeNamespace( "xlink", XLNNS ); XMLAdapter.writeElement( writer, "Title", "Container" ); final LayerMetadata layerMetadata = createLayerMetadataMinimal(); layerMetadata.setQueryable( false ); final DatasetMetadata datasetMetadata = createDatasetMetadataMinimal(); final DoublePair scaleDenominators = new DoublePair( 0.0, 999999.9 ); final Map<String, String> authorityNameToUrl = emptyMap(); themeWriter.writeTheme( writer, layerMetadata, datasetMetadata, authorityNameToUrl, scaleDenominators, null ); writer.writeEndElement(); writer.flush(); bos.close(); final InputStream is = WmsCapabilities130ThemeWriterTest.class.getResourceAsStream( "wms130_layer_minimal.xml" ); final byte[] expected = IOUtils.readBytesAndClose( is, -1 ); assertValidity( new ByteArrayInputStream( bos.toByteArray() ), SCHEMA_URL ); assertArrayEquals( expected, bos.toByteArray() ); }
@Test public void setStatusDescription() throws Exception { responseDescriptor.setStatusDescription("test"); }
@Test public void testBuildWithDisabledStautsConstaint() throws Exception { unit.setActive(false); StudyPlanCycle context = new StudyPlanCycle(); String expected = "SELECT e FROM StudyPlanCycle e WHERE e.crtUserGroup IN (:userGroups) "; MultiplePagedSearch<StudyPlanCycle> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); String actualQuery = unit.build(pagedSearch); assertEquals(expected, actualQuery); }
@Test public void cloneAsVersionTest() { final ConnectClientRequest clone = OBJECT.cloneAsVersion(ABIVersion.BORON); Assert.assertNotNull(clone); Assert.assertEquals(ABIVersion.BORON, clone.getVersion()); }
@Test public void testJumpMethod11() throws Exception { File f = new File(project.getProjectRootPath(), "./src/main/java/meghanada/project/Project.java") .getCanonicalFile(); assertTrue(f.exists()); LocationSearcher searcher = getSearcher(); GlobalCache.getInstance().invalidateSource(f); Location result = timeIt(() -> searcher.searchDeclarationLocation(f, 619, 14, "runUnitTest").orElse(null)); assertNotNull(result); assertTrue(result.getPath().contains("Project.java")); assertEquals(625, result.getLine()); assertEquals(23, result.getColumn()); }
@Test public void testSetDisplayPrecision() { System.out.println("setDisplayPrecision"); boolean displayPrecision = false; GraphPanelChart instance = new GraphPanelChart(); instance.setDisplayPrecision(displayPrecision); }
@Test public void searchShouldHandleShardFailure() throws InvalidSearchException, IOException { SearchResponse response = mock(SearchResponse.class); SearchRequest request = new SearchRequest(); ShardSearchFailure fail = mock(ShardSearchFailure.class); SearchShardTarget target = new SearchShardTarget("node1", mock(Index.class), 1, "metron"); when(response.status()).thenReturn(RestStatus.OK); SearchHits hits = mock(SearchHits.class); when(hits.getTotalHits()).thenReturn(1L); when(response.getFailedShards()).thenReturn(1); when(response.getTotalShards()).thenReturn(2); when(response.getHits()).thenReturn(hits); ShardSearchFailure[] failures = { fail }; when(response.getShardFailures()).thenReturn(failures); when(fail.shard()).thenReturn(target); when(fail.index()).thenReturn("bro_index_2017-10-11"); when(fail.shardId()).thenReturn(1); ElasticsearchRequestSubmitter submitter = setup(response); SearchResponse actual = submitter.submitSearch(request); assertNotNull(actual); }
@Test public void shouldUseTheRaftLogWhenTheIndexIsNotPresent() throws Exception { InFlightLogEntryReader reader = new InFlightLogEntryReader( raftLog, inFlightCache, clearCache ); startingFromIndexReturnEntries( inFlightCache, logIndex, null ); startingFromIndexReturnEntries( raftLog, logIndex, entry ); RaftLogEntry raftLogEntry = reader.get( logIndex ); assertEquals( entry, raftLogEntry ); verify( inFlightCache ).get( logIndex ); verify( raftLog ).getEntryCursor( logIndex ); assertCacheIsUpdated( inFlightCache, logIndex ); verifyNoMoreInteractions( inFlightCache ); verifyNoMoreInteractions( raftLog ); }
@Test public void test_of_wrongInterpolator() { assertThatIllegalArgumentException() .isThrownBy(() -> SurfaceIborCapletFloorletVolatilityBootstrapDefinition.of( NAME, USD_LIBOR_3M, ACT_ACT_ISDA, DOUBLE_QUADRATIC, DOUBLE_QUADRATIC)); }
@Test public void testJDBCLookupProperties() { Map<String, String> properties = getBasicProperties(); properties.put("connector.lookup.cache.max-rows", "1000"); properties.put("connector.lookup.cache.ttl", "10s"); properties.put("connector.lookup.max-retries", "10"); final StreamTableSource<?> actual = TableFactoryService.find(StreamTableSourceFactory.class, properties) .createStreamTableSource(properties); final JDBCOptions options = JDBCOptions.builder() .setDBUrl("jdbc:derby:memory:mydb") .setTableName("mytable") .build(); final JDBCLookupOptions lookupOptions = JDBCLookupOptions.builder() .setCacheMaxSize(1000) .setCacheExpireMs(10_000) .setMaxRetryTimes(10) .build(); final TableSchema schema = TableSchema.builder() .field("aaa", DataTypes.INT()) .field("bbb", DataTypes.STRING()) .field("ccc", DataTypes.DOUBLE()) .build(); final JDBCTableSource expected = JDBCTableSource.builder() .setOptions(options) .setLookupOptions(lookupOptions) .setSchema(schema) .build(); assertEquals(expected, actual); }
@Test public void getCollectionName_notAllowListedCommand() { assertThat( listener.getCollectionName(new BsonDocument("cmd", new BsonString(" bar ")), "cmd")).isNull(); }
@Test public void testCreateNonexistingDirectory() { TableProvider result = instance.create(withParentDirectory); assertNotNull(result); }
@SuppressWarnings("unchecked") @Test public void exceptions_in_put3_should_be_rethrown_error_not_called_and_connection_released() throws Exception { RestTemplate template = new RestTemplate(client); ResponseCallback<String> callback = mock(ResponseCallback.class); HttpResponse rsp = mock(HttpResponse.class); when(client.put(anyString(), anyString())).thenReturn(rsp); when(rsp.isSuccessful()).thenReturn(Boolean.TRUE); when(callback.success(rsp)).thenThrow(new Exception("test")); try { template.put("some_path", "content", callback); fail("RT expected"); } catch (RuntimeException e) { } verify(callback, never()).error(any(HttpResponse.class)); verify(rsp).releaseConnection(); }
@Test(expected = JApiCmpException.class) public void testMissingOldVersion() { VersionChange vc = new VersionChange(Collections.<SemanticVersion>emptyList(), Collections.singletonList(new SemanticVersion(1, 2, 3)), false, false); vc.computeChangeType(); fail(); }
@Test public void tstGetRegistriesCount() { assertEquals(0, processManagerStatus.getRegistriesCount()); }
@Test public void testPartition() { int[] count = new int[] { 2, 1 }; int[] length = new int[] { 256, 512 }; PartitionUtil pu = new PartitionUtil(count, length); int DEFAULT_STR_HEAD_LEN = 8; long offerId = 12345; String memberId = "qiushuo"; int partNo1 = pu.partition(offerId); int partNo2 = pu.partition(memberId, 0, DEFAULT_STR_HEAD_LEN); Assert.assertEquals(0, partNo1); Assert.assertEquals(2, partNo2); }
@Test(expected = IllegalArgumentException.class) public void testSetValueInvalidKey() { List<MockObject> keys = new ArrayList<>(); MockObject m1 = new MockObject(1); MockObject m2 = new MockObject(2); MockObject m3 = new MockObject(3); keys.add(m1); keys.add(m2); DoubleMapGenotype<MockObject> doubleMapGeno = new DoubleMapGenotype<>(keys, new MockBounds()); doubleMapGeno.setValue(m3, 1.0); }
@Test public void testDefaultPermissions() { PermissionProvider pp = service.getPermissionProvider(); String[] groups = pp.getPermissionGroups("Read"); assertNotNull(groups); assertEquals(Arrays.asList("ReadRemove", "ReadWrite"), Arrays.asList(groups)); groups = pp.getPermissionGroups("ReadProperties"); assertNotNull(groups); assertEquals(Arrays.asList("Read", "ReadRemove", "ReadWrite"), Arrays.asList(groups)); groups = pp.getPermissionGroups("ReadChildren"); assertNotNull(groups); assertEquals(Arrays.asList("Read", "ReadRemove", "ReadWrite"), Arrays.asList(groups)); groups = pp.getPermissionGroups("Browse"); assertNotNull(groups); assertEquals(Arrays.asList("Read", "ReadProperties", "ReadRemove", "ReadWrite"), Arrays.asList(groups)); }
@Test public void testIteration4 () { final List <String> aList = CollectionHelper.newList ("s1", "s2", "s3", null, null); final FilterIterator <String> it = new FilterIterator <> (aList, Objects::nonNull); assertNotNull (it); assertEquals ("s1", it.next ()); assertEquals ("s2", it.next ()); assertEquals ("s3", it.next ()); try { it.next (); fail (); } catch (final NoSuchElementException ex) {} }
@Test public void testTransformInputNotJsonString(TestContext context) { JoltTransformer.transform("abcd", identitySpec).setHandler(transform -> { context.assertFalse(transform.succeeded()); context.assertNull(transform.result()); context.assertEquals(JsonUnmarshalException.class, transform.cause().getClass()); }); }
@Test public final void shouldParseYearMonthUp() throws ParseException { final String expr = "2013-05"; final boolean upComplete = true; final Date date = DateUtils.parseAndComplete(expr, upComplete); assertDateEquals(new DateTime(2013, 5, 31, 23, 59, 59, 999), date); }
@Test public void testEvalParamWithDot() { ScenarioContext ctx = getContext(); String param = "'ACS.Itself'"; assertEquals("ACS.Itself", Script.evalKarateExpression(param, ctx).getAsString()); }
@Test public void testGetQueueName() throws FileNotFoundException { final String JOB_CONF_FILE_NAME = "src/test/resources/job_1329348432655_0001_conf.xml"; Configuration jobConf = new Configuration(); jobConf.addResource(new FileInputStream(JOB_CONF_FILE_NAME)); String queueName = HadoopConfUtil.getQueueName(jobConf); assertEquals(queueName, "default"); }
@Test public void testGetStateBuildFinishedAsChecked() { assertTrue(webhookAllEnabled.getStateBeforeFinishedAsChecked().equals(CHECKED)); assertFalse(webhookAllDisabled.getStateBeforeFinishedAsChecked().equals(CHECKED)); }
@Test public void orderedBytesWhenModeIsBRG() { Ws2801.Mode mode = Ws2801.Mode.BRG; byte[] result = ColorUnpacker.getOrderedRgbBytes(mode, R, G, B); assertBytesOrder(result, B, R, G); }
@Test public void updateInternal_removeValue_stickyNotEnabled() { UpdateResult result = FeatureFlags.updateInternal(mapOf(), mapOf(A, false), mapOf(A, false), setOf(A), setOf(), setOf(A)); assertEquals(mapOf(A, false), result.getMemory()); assertEquals(mapOf(), result.getDisk()); assertTrue(result.getMemoryChanges().isEmpty()); }
@Test(enabled = TESTS_ENABLED) public void testDataSetList() { System.out.println("dataSetList"); CardApplicationPath cardApplicationPath = new CardApplicationPath(); CardApplicationPathType cardApplicationPathType = new CardApplicationPathType(); cardApplicationPathType.setCardApplication(appIdentifier_ESIGN); cardApplicationPath.setCardAppPathRequest(cardApplicationPathType); CardApplicationPathResponse cardApplicationPathResponse = instance.cardApplicationPath(cardApplicationPath); CardApplicationConnect cardApplicationConnect = new CardApplicationConnect(); cardApplicationConnect.setCardApplicationPath(cardApplicationPathResponse.getCardAppPathResultSet().getCardApplicationPathResult() .get(0)); CardApplicationConnectResponse result = instance.cardApplicationConnect(cardApplicationConnect); assertEquals(ECardConstants.Major.OK, result.getResult().getResultMajor()); DataSetList dataSetList = new DataSetList(); dataSetList.setConnectionHandle(result.getConnectionHandle()); DataSetListResponse dataSetListResponse = instance.dataSetList(dataSetList); System.out.println(ByteUtils.toHexString(result.getConnectionHandle().getSlotHandle())); Assert.assertTrue(dataSetListResponse.getDataSetNameList().getDataSetName().size() > 0); assertEquals(ECardConstants.Major.OK, dataSetListResponse.getResult().getResultMajor()); dataSetList = new DataSetList(); ConnectionHandleType wrongConnectionHandle = result.getConnectionHandle(); wrongConnectionHandle.setCardApplication(new byte[] { 0x0, 0x0, 0x0 }); dataSetList.setConnectionHandle(wrongConnectionHandle); dataSetListResponse = instance.dataSetList(dataSetList); assertEquals(ECardConstants.Major.ERROR, dataSetListResponse.getResult().getResultMajor()); assertEquals(ECardConstants.Minor.App.INCORRECT_PARM, dataSetListResponse.getResult().getResultMinor()); dataSetList = new DataSetList(); dataSetList.setConnectionHandle(null); dataSetListResponse = instance.dataSetList(dataSetList); assertEquals(ECardConstants.Major.ERROR, dataSetListResponse.getResult().getResultMajor()); assertEquals(ECardConstants.Minor.App.INCORRECT_PARM, dataSetListResponse.getResult().getResultMinor()); }
@Test public void testIsNotPresentKo() { when(element.present()).thenReturn(true); assertThatAssertionErrorIsThrownBy(() -> elementAssert.isNotPresent()) .hasMessage("Element in assertion is present"); }
@Test public void testToDisplayTimeWithUTCTimeOffSet() { final String input = "time(\"22:30:10Z\")"; final String expected = "22:30:10 UTC"; final String actual = formatter.toDisplay(input); assertEquals(expected, actual); }
@Test void createConsentAuthorization_Success() { when(aisConsentService.createAisConsentAuthorisation(CONSENT_ID, STARTED_XS2A_SCA_STATUS, PSU_DATA)) .thenReturn(Optional.of(buildCreateAuthorisationResponse())); when(aisConsentService.getAccountConsentById(CONSENT_ID)).thenReturn(Optional.of(consent)); Optional<CreateConsentAuthorizationResponse> actualResponseOptional = authorizationService.createConsentAuthorization(PSU_DATA, CONSENT_ID); assertThat(actualResponseOptional.isPresent()).isTrue(); CreateConsentAuthorizationResponse actualResponse = actualResponseOptional.get(); assertThat(actualResponse.getConsentId()).isEqualTo(CONSENT_ID); assertThat(actualResponse.getAuthorisationId()).isEqualTo(AUTHORISATION_ID); assertThat(actualResponse.getScaStatus()).isEqualTo(STARTED_SCA_STATUS); }
@Test public void testIndexOf() { wrapper.add("Apple"); wrapper.add("Banana"); assertEquals(0, wrapper.indexOf("Apple")); assertEquals(4, wrapper.lastIndexOf("Apple")); assertEquals(1, wrapper.indexOf("Banana")); assertEquals(5, wrapper.lastIndexOf("Banana")); assertEquals(2, wrapper.indexOf("Cantaloupe")); assertEquals(2, wrapper.lastIndexOf("Cantaloupe")); assertEquals(3, wrapper.indexOf("Dragon fruit")); assertEquals(3, wrapper.lastIndexOf("Dragon fruit")); }
@Test public void mapperCanHandlePrimitiveDouble() { verifyAttribute(EnhancedType.of(double.class), a -> a.name("value") .getter(FakeMappedItem::getAPrimitiveDouble) .setter(FakeMappedItem::setAPrimitiveDouble), FakeMappedItem.builder().aPrimitiveDouble(1.23).build(), AttributeValue.builder().n("1.23").build()); }
@Test public void testMaximumLetterCount() { Anagrams anagrams = new Anagrams("biro"); List<String> output = anagrams.generate(); assertThat(output.size()).isEqualTo(BIRO_MAX_COMBINATIONS); }
@Test public void testComparesLargerInet6AddressInet6Address() throws UnknownHostException { InetAddressNextHop<Inet6Address> a = new InetAddressNextHop<Inet6Address>((Inet6Address)Inet6Address.getByAddress(new byte[] { (byte)0xfe, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x02, (byte)0x22, (byte)0x15, (byte)0xff, (byte)0xfe, (byte)0x85, (byte)0xd9, (byte)0xe2 })); InetAddressNextHop<Inet6Address> b = new InetAddressNextHop<Inet6Address>((Inet6Address)Inet6Address.getByAddress(new byte[] { (byte)0xfe, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x02, (byte)0x22, (byte)0x15, (byte)0xff, (byte)0xfe, (byte)0x85, (byte)0xd9, (byte)0xe1 })); Assert.assertTrue(a.compareTo(b) > 0); }
@Test public void isRowsEquals() { TableMeta tableMeta = Mockito.mock(TableMeta.class); Mockito.when(tableMeta.getPrimaryKeyOnlyName()).thenReturn(Arrays.asList(new String[]{"pk"})); Mockito.when(tableMeta.getTableName()).thenReturn("table_name"); List<Row> rows = new ArrayList<>(); Field field = new Field("pk", 1, "12345"); Row row = new Row(); row.add(field); rows.add(row); Assertions.assertFalse(DataCompareUtils.isRowsEquals(tableMeta, rows, null).getResult()); Assertions.assertFalse(DataCompareUtils.isRowsEquals(tableMeta, null, rows).getResult()); List<Row> rows2 = new ArrayList<>(); Field field2 = new Field("pk", 1, "12345"); Row row2 = new Row(); row2.add(field2); rows2.add(row2); Assertions.assertTrue(DataCompareUtils.isRowsEquals(tableMeta, rows, rows2).getResult()); field.setValue("23456"); Assertions.assertFalse(DataCompareUtils.isRowsEquals(tableMeta, rows, rows2).getResult()); field.setValue("12345"); Field field3 = new Field("pk", 1, "12346"); Row row3 = new Row(); row3.add(field3); rows2.add(row3); Assertions.assertFalse(DataCompareUtils.isRowsEquals(tableMeta, rows, rows2).getResult()); }
@Test public void authenticate_with_authWaitTimeMillis_property() throws Exception { Properties props = new Properties(); props.setProperty(SpyMemcachedAdapter.AUTH_GENERATOR_PROPERTY_KEY, FakeAuthDescriptorGenerator.class.getName()); props.setProperty(SpyMemcachedAdapter.AUTH_WAIT_TIME_MILLIS_PROPERTY_KEY, String.valueOf(9999L)); ConnectionFactoryBuilder builder = new ConnectionFactoryBuilder(); spyMemcachedAdapter.authenticate(builder, new OverridableReadOnlyPropertiesImpl(props)); ConnectionFactory connectionFactory = builder.build(); assertThat(connectionFactory.getAuthDescriptor().getMechs()).isEqualTo(FakeAuthDescriptorGenerator.FAKE_MECHS); assertThat(connectionFactory.getAuthWaitTime()).isEqualTo(9999L); }
@Test public void testRetries() throws Exception { int maxRetries = 1; Metrics m = new Metrics(); SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m); try { Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL, maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, null, apiVersions); Future<RecordMetadata> future = accumulator.append(tp0, 0L, "key".getBytes(), "value".getBytes(), null, null, MAX_BLOCK_TIMEOUT).future; sender.run(time.milliseconds()); sender.run(time.milliseconds()); String id = client.requests().peek().destination(); Node node = new Node(Integer.parseInt(id), "localhost", 0); assertEquals(1, client.inFlightRequestCount()); assertTrue(client.hasInFlightRequests()); assertTrue("Client ready status should be true", client.isReady(node, 0L)); client.disconnect(id); assertEquals(0, client.inFlightRequestCount()); assertFalse(client.hasInFlightRequests()); assertFalse("Client ready status should be false", client.isReady(node, 0L)); sender.run(time.milliseconds()); sender.run(time.milliseconds()); sender.run(time.milliseconds()); assertEquals(1, client.inFlightRequestCount()); assertTrue(client.hasInFlightRequests()); long offset = 0; client.respond(produceResponse(tp0, offset, Errors.NONE, 0)); sender.run(time.milliseconds()); assertTrue("Request should have retried and completed", future.isDone()); assertEquals(offset, future.get().offset()); future = accumulator.append(tp0, 0L, "key".getBytes(), "value".getBytes(), null, null, MAX_BLOCK_TIMEOUT).future; sender.run(time.milliseconds()); for (int i = 0; i < maxRetries + 1; i++) { client.disconnect(client.requests().peek().destination()); sender.run(time.milliseconds()); sender.run(time.milliseconds()); sender.run(time.milliseconds()); } sender.run(time.milliseconds()); assertFutureFailure(future, NetworkException.class); } finally { m.close(); } }
@Test public void shouldReturnLocationFromEligibleCoupleEntityIfBindTypeIsEligibleCouple() { when(allEligibleCouples.findByCaseId("ec id 1")).thenReturn(eligibleCouple); locationLoader.loadLocationFor("eligible_couple", "ec id 1"); verify(eligibleCouple).location(); }
@Test(expected=IllegalArgumentException.class) public void parseEmbeddedThrowsException0() throws Exception { DateTimeUtil.parseEmbedded("app.2008-05-0.log"); }
@Test public void testSpecGetAllHistoryWithPartialAuthorization() { List<VersionedSupervisorSpec> versions1 = ImmutableList.of( new VersionedSupervisorSpec( new TestSupervisorSpec("id1", null, Collections.singletonList("datasource1")), "v1" ), new VersionedSupervisorSpec( new TestSupervisorSpec("id1", null, Collections.singletonList("datasource1")), "v2" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, Collections.singletonList("datasource1")), "tombstone" ) ); List<VersionedSupervisorSpec> versions2 = ImmutableList.of( new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v1" ), new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v2" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, Collections.singletonList("datasource2")), "tombstone" ) ); List<VersionedSupervisorSpec> versions3 = ImmutableList.of( new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v1" ), new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v2" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, Collections.singletonList("datasource2")), "tombstone" ), new VersionedSupervisorSpec( new TestSupervisorSpec("id3", null, Collections.singletonList("datasource3")), "v1" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, Collections.singletonList("datasource3")), "tombstone" ) ); List<VersionedSupervisorSpec> versions4 = ImmutableList.of( new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v1" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, null), "tombstone" ), new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v2" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, null), "tombstone" ), new VersionedSupervisorSpec( new TestSupervisorSpec("id2", null, Collections.singletonList("datasource2")), "v3" ) ); Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>(); history.put("id1", versions1); history.put("id2", versions2); history.put("id3", versions3); history.put("id4", versions4); EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(2); EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history); EasyMock.expect(supervisorManager.getSupervisorSpec("id1")).andReturn(Optional.of(SPEC1)).atLeastOnce(); EasyMock.expect(supervisorManager.getSupervisorSpec("id2")).andReturn(Optional.of(SPEC2)).atLeastOnce(); EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce(); EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce(); EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn( new AuthenticationResult("wronguser", "druid", null, null) ).atLeastOnce(); request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true); EasyMock.expectLastCall().anyTimes(); replayAll(); Response response = supervisorResource.specGetAllHistory(request); Map<String, List<VersionedSupervisorSpec>> filteredHistory = new HashMap<>(); filteredHistory.put("id1", versions1); filteredHistory.put( "id3", ImmutableList.of( new VersionedSupervisorSpec( new TestSupervisorSpec("id3", null, Collections.singletonList("datasource3")), "v1" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, Collections.singletonList("datasource3")), "tombstone" ) ) ); filteredHistory.put( "id4", ImmutableList.of( new VersionedSupervisorSpec( new NoopSupervisorSpec(null, null), "tombstone" ), new VersionedSupervisorSpec( new NoopSupervisorSpec(null, null), "tombstone" ) ) ); Assert.assertEquals(200, response.getStatus()); Assert.assertEquals(filteredHistory, response.getEntity()); resetAll(); EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent()); replayAll(); response = supervisorResource.specGetAllHistory(request); verifyAll(); Assert.assertEquals(503, response.getStatus()); }
@Test public void lessThanIsGreaterThanIsFalse() throws IOException { when(corc.getWritable(COL0)).thenReturn(TWO_WRITABLE); SearchArgument searchArgument = builder.startAnd().lessThan(COL0, PredicateLeaf.Type.LONG,ONE).end().build(); assertThat(new SearchArgumentFilter(searchArgument, structTypeInfo).accept(corc), is(false)); }
@Test(expected = IllegalArgumentException.class) public void setTimeout_TimeUnitMissing() { rxFit.setDefaultTimeout(TIMEOUT_TIME, null); assertNull(rxFit.timeoutTime); assertNull(rxFit.timeoutUnit); }
@Test(expected = JsonParseException.class) public void js_value_9() { JSON.parse("[1 2 3]") ; }
@Test public void testDeriveViewId3() throws Exception { request.setPathElements("/testwebapp", "/view2.jsf", null , null); String derivedViewId = viewHandlerSupport.deriveViewId(facesContext, "/view2.jsf"); Assert.assertNotNull(derivedViewId); }
@Test(expected = AssertionError.class) public void adding_filter_in_another_chain() throws Exception { m_chain.add_filter(m_filter); new EventFilterChain(m_sink).add_filter(m_filter); }
@Test public void empty() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> <p>now!</p></div>"); doc.outputSettings().prettyPrint(false); doc.select("p").empty(); assertEquals("<div><p></p> <p></p></div>", doc.body().html()); }
@Test public void filterByWithJsonPointer() { final FieldExpression fieldExpression = ef.filterBy(SLASH + FieldExpressionUtil.FIELD_NAME_THING_ID); final FilterFieldExpression expected = new SimpleFieldExpressionImpl(FieldExpressionUtil.FIELD_ID); assertThat(fieldExpression).isEqualTo(expected); }
@Test public void testAddToSearchQueue() { Mockito.doNothing().when(bankBranchQueueRepository).add(Mockito.any()); BankBranchRequest request = new BankBranchRequest(); request.setRequestInfo(getRequestInfo()); request.setBankBranches(new ArrayList<BankBranchContract>()); request.getBankBranches().add(getBankBranchContract()); bankBranchRepository.addToSearchQueue(request); Map<String, Object> message = new HashMap<>(); message.put("bankbranch_persisted", request); Mockito.verify(bankBranchQueueRepository).addToSearch(message); }
@Test public void makeDependencyNodesTest() { final DependencyGraph dependencyGraph = cpanListParser.parse(cpanListText, showDepsText); DependencyGraphResourceTestUtil.assertGraph("/cpan/expectedDependencyNodes_graph.json", dependencyGraph); }
@Test public void buildQueryStringOfLog() throws Exception { String result = store.buildQueryString(ElasticSearchStore.RecordType.LOG, "FLOWSTATS"); assertThat(result.contains(TsdrRecordPayload.ELK_DATA_CATEGORY + ":\\\"FLOWSTATS\\\"")).isTrue(); result = store.buildQueryString(ElasticSearchStore.RecordType.LOG, "[NID=][DC=FLOWSTATS][RK=][MN=]"); assertThat(result.contains(TsdrRecordPayload.ELK_DATA_CATEGORY + ":\\\"FLOWSTATS\\\"")).isTrue(); result = store.buildQueryString(ElasticSearchStore.RecordType.LOG, "[NID=][DC=FLOWSTATS][RK=][MN=PacketCount]"); assertThat(result.contains(TsdrRecordPayload.ELK_DATA_CATEGORY + ":\\\"FLOWSTATS\\\"")).isTrue(); assertThat(result.contains("PacketCount")).isFalse(); result = store.buildQueryString(ElasticSearchStore.RecordType.LOG, "[NID=][DC=FLOWSTATS][RK=][RA=key:value]"); assertThat(result.contains(TsdrRecordPayload.ELK_DATA_CATEGORY + ":\\\"FLOWSTATS\\\"")).isTrue(); assertThat(result.contains(TsdrRecordPayload.ELK_RA_KEY_NAME + ":\\\"key\\\"")).isTrue(); assertThat(result.contains(TsdrRecordPayload.ELK_RA_KEY_VALUE + ":\\\"value\\\"")).isTrue(); }
@Test public void testRemove() throws Exception { final ScmFileSet testFileSet = new ScmFileSet( basedir, new File( "src/main/java/Foo.java" ) ); List<File> removedFiles = Collections.singletonList( new File( "removed/file" ) ); when( accurev.defunct( basedir, testFileSet.getFileList(), "A deleted file" ) ).thenReturn( removedFiles ); AccuRevRemoveCommand command = new AccuRevRemoveCommand( getLogger() ); CommandParameters commandParameters = new CommandParameters(); commandParameters.setString( CommandParameter.MESSAGE, "A deleted file" ); RemoveScmResult result = command.remove( repo, testFileSet, commandParameters ); assertThat( result.isSuccess(), is( true ) ); assertThat( result.getRemovedFiles().size(), is( 1 ) ); assertHasScmFile( result.getRemovedFiles(), "removed/file", ScmFileStatus.DELETED ); }
@Test public void standaloneResetPosition_shouldNotStartClock() throws Exception { mediaClock.resetPosition(TEST_POSITION_US); assertClockIsStopped(); }
@Test public void testClearIndexTable() throws SQLException { Connection connection = null; Statement statement = null; try { ConnectionManager connectionManager = temporaryFileDatabase.getConnectionManager(true); createSchema(connectionManager); assertObjectExistenceInSQLIteMasterTable(TABLE_NAME, "table", true, connectionManager); assertObjectExistenceInSQLIteMasterTable(INDEX_NAME, "index", true, connectionManager); connection = spy(connectionManager.getConnection(null, noQueryOptions())); statement = spy(connection.createStatement()); when(connection.createStatement()).thenReturn(statement); DBQueries.clearIndexTable(NAME, connection); List<DBQueries.Row<Integer, String>> expectedRows = Collections.emptyList(); assertQueryResultSet("SELECT * FROM " + TABLE_NAME, expectedRows, connectionManager); verify(statement, times(1)).close(); }finally { DBUtils.closeQuietly(connection); DBUtils.closeQuietly(statement); } }
@Test public void testFormatNames() { final String[] formatNames = plugIn.getFormatNames(); assertNotNull(formatNames); assertEquals(1, formatNames.length); assertEquals("WorldView2GeoTIFF", formatNames[0]); }
@Test void testHashCodeSame() { User userOne = new User(EMAIL, PASSWORD, Collections.singletonMap("customKey", 1)); User userTwo = new User(EMAIL, PASSWORD, Collections.singletonMap("customKey", 1)); assertEquals(userOne.hashCode(), userTwo.hashCode()); }
@Test public void getData_returnsTheDateFromTheBackingCrime_whenCalled() { Crime crime = new Crime(); StandardCrimeModel model = new StandardCrimeModel(crime); assertThat(model.getDate(), is(equalTo(crime.getDate()))); }
@Test public void whenRegisteringBindable_thenRegistersBindable() { Bindable bindable = mock(Bindable.class); merlin.registerBindable(bindable); verify(registrar).registerBindable(bindable); }
@Test public void assertGetDataMap() throws SchedulerException { assertThat((CloudJobConfigurationService) registeredJobStatisticJob.getDataMap().get("configurationService"), is(configurationService)); assertThat((StatisticRdbRepository) registeredJobStatisticJob.getDataMap().get("repository"), is(repository)); }
@SuppressWarnings("static-access") @Test public void testMissingColQual() { Key key = new Key(new Text("row1\0row2and3"), new Text("fi"), new Text("red\0truck\0t-uid001")); byte[] vals = new byte[4]; Value value = new Value(vals); thrown.expect(IllegalArgumentException.class); thrown.expectMessage("Atom entry is missing column qualifier parts: "); try { kv.parse(key, value); } catch (IOException e) { } }
@Test public void does_not_support_JUnit_tests_if_JUnit_not_on_test_classpath() { BlacklistClassLoader noJUnitInThisClassLoader = new BlacklistClassLoader("org.junit.", getClass().getClassLoader()); CompositeDriverFinder finder = DriverFinderFactory.createDriverFinder(noJUnitInThisClassLoader, new PrintStream(logOutput)); Driver driver = finder.findTestClassDriver(JUnitTest.class); assertThat(driver, is(instanceOf(IgnoreSilentlyDriver.class))); assertThat(logOutput.toString(), containsString("JUnit not found on classpath; disabling JUnit compatibility")); }
@Test public void testLongCounter() { LongCounterSdk longCounter = testSdk .longCounterBuilder("testLongCounter") .setConstantLabels(Labels.of("sk1", "sv1")) .setDescription("My very own counter") .setUnit("metric tonnes") .build(); assertThat(longCounter).isNotNull(); assertThat( testSdk .longCounterBuilder("testLongCounter") .setConstantLabels(Labels.of("sk1", "sv1")) .setDescription("My very own counter") .setUnit("metric tonnes") .build()) .isSameInstanceAs(longCounter); thrown.expect(IllegalArgumentException.class); thrown.expectMessage("Instrument with same name and different descriptor already created."); testSdk.longCounterBuilder("testLongCounter").build(); }
@Test public void grabDataFromTheGivenContextTest() { StepVerifier.create( grabDataFromTheGivenContext("Test") .subscriberContext(Context.of("Test", "Test")) ) .expectSubscription() .expectNext("Test") .verifyComplete(); }
@Test public void testEquals() { ExtendedCommunity ec = ExtendedCommunity.of(0, 2L, 123L); new EqualsTester() .addEqualityGroup(ec, ec, ExtendedCommunity.of(0, 2L, 123L)) .addEqualityGroup( ExtendedCommunity.of(1 << 8, 2L, 123L), ExtendedCommunity.of(1 << 8, Ip.parse("0.0.0.2"), 123L)) .addEqualityGroup(ExtendedCommunity.of(0, 3L, 123L)) .addEqualityGroup(ExtendedCommunity.of(0, 2L, 124L)) .addEqualityGroup(new Object()) .testEquals(); }
@Test public void testDifferentTypesCantBeEqual() throws IOException { byte[] data = "some bytes".getBytes(StandardCharsets.UTF_8); XdrOpaque opaque = new XdrOpaque(data); assertFalse("opaques with equal values must be equal", opaque.equals(data)); }
@Test public void testGetTooltip() { assertEquals(TOOLTIP, tested.getTooltip()); }
@Test public void test() throws Exception { InputStream is = new ByteArrayInputStream("abc".getBytes()); ByteArrayOutputStream baos = new ByteArrayOutputStream(); InputStreamEntity i = new InputStreamEntity(is); i.write(baos); baos.close(); assertEquals(new String(baos.toByteArray()), "abc"); is = new ByteArrayInputStream("abc".getBytes()); baos = new ByteArrayOutputStream(); i = new InputStreamEntity(is, 1, 1); i.write(baos); baos.close(); assertEquals(baos.toByteArray()[0], 'b'); }
@Test public void testLegacyLocalizationUnknownLocale() throws Exception { SchemaMeta schemaMeta = loadLegacyMetadataModel("Steel Wheels", "src/test/resources/samples/steel-wheels.xmi"); LegacyLocalizationUtil localeUtil = new LegacyLocalizationUtil(); String locale = "abc_XYZ"; Properties props = localeUtil.exportLocalizedProperties(schemaMeta, locale); Assert.assertEquals(279, props.size()); Assert.assertEquals("Customer", props.get("[LogicalModel-BV_ORDERS].[Category-BC_CUSTOMER_W_TER_].[name]")); }
@Test public void testParse() throws Exception { RangeHeader expected = RangeHeader.builder() .field("id") .fromId("1") .fromInclusive(true) .toId("26") .toInclusive(true) .max(1) .build(); RangeHeader actual = RangeHeader.parse("id 1..26; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId().get()).isEqualTo("1"); assertThat(actual.getFromInclusive().get()).isEqualTo(true); assertThat(actual.getToId().get()).isEqualTo("26"); assertThat(actual.getToInclusive().get()).isEqualTo(true); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder() .field("id") .fromId("1") .fromInclusive(true) .toId("26") .toInclusive(true) .build(); actual = RangeHeader.parse("id 1..26"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId().get()).isEqualTo("1"); assertThat(actual.getFromInclusive().get()).isEqualTo(true); assertThat(actual.getToId().get()).isEqualTo("26"); assertThat(actual.getToInclusive().get()).isEqualTo(true); assertThat(actual.getMax()).isEqualTo(Optional.empty()); expected = RangeHeader.builder() .field("id") .fromId("1") .fromInclusive(true) .toId("26") .toInclusive(true) .build(); actual = RangeHeader.parse("id 1..26;"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId().get()).isEqualTo("1"); assertThat(actual.getFromInclusive().get()).isEqualTo(true); assertThat(actual.getToId().get()).isEqualTo("26"); assertThat(actual.getToInclusive().get()).isEqualTo(true); assertThat(actual.getMax()).isEqualTo(Optional.empty()); expected = RangeHeader.builder() .field("id") .fromId("1") .fromInclusive(true) .toId("26") .toInclusive(true) .max(1) .build(); actual = RangeHeader.parse("id 1..26 ; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId().get()).isEqualTo("1"); assertThat(actual.getFromInclusive().get()).isEqualTo(true); assertThat(actual.getToId().get()).isEqualTo("26"); assertThat(actual.getToInclusive().get()).isEqualTo(true); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder().field("id").fromId("1").fromInclusive(true).max(1).build(); actual = RangeHeader.parse("id 1..; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId().get()).isEqualTo("1"); assertThat(actual.getFromInclusive().get()).isEqualTo(true); assertThat(actual.getToId()).isEqualTo(Optional.empty()); assertThat(actual.getToInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder().field("id").fromId("1").fromInclusive(false).max(1).build(); actual = RangeHeader.parse("id ]1..; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId().get()).isEqualTo("1"); assertThat(actual.getFromInclusive().get()).isEqualTo(false); assertThat(actual.getToId()).isEqualTo(Optional.empty()); assertThat(actual.getToInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder().field("id").toId("26").toInclusive(true).max(1).build(); actual = RangeHeader.parse("id ..26; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId()).isEqualTo(Optional.empty()); assertThat(actual.getFromInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getToId().get()).isEqualTo("26"); assertThat(actual.getToInclusive().get()).isEqualTo(true); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder().field("id").toId("26").toInclusive(false).max(1).build(); actual = RangeHeader.parse("id ..26[; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField().get()).isEqualTo("id"); assertThat(actual.getFromId()).isEqualTo(Optional.empty()); assertThat(actual.getFromInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getToId().get()).isEqualTo("26"); assertThat(actual.getToInclusive().get()).isEqualTo(false); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder().max(1).build(); actual = RangeHeader.parse("id; max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField()).isEqualTo(Optional.empty()); assertThat(actual.getFromId()).isEqualTo(Optional.empty()); assertThat(actual.getFromInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getToId()).isEqualTo(Optional.empty()); assertThat(actual.getToInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.builder().max(1).build(); actual = RangeHeader.parse("id;max=1"); assertThat(actual).isEqualTo(expected); assertThat(actual.getField()).isEqualTo(Optional.empty()); assertThat(actual.getFromId()).isEqualTo(Optional.empty()); assertThat(actual.getFromInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getToId()).isEqualTo(Optional.empty()); assertThat(actual.getToInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getMax().get()).isEqualTo(1); expected = RangeHeader.create(); actual = RangeHeader.parse(null); assertThat(actual).isEqualTo(expected); assertThat(actual.getField()).isEqualTo(Optional.empty()); assertThat(actual.getFromId()).isEqualTo(Optional.empty()); assertThat(actual.getFromInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getToId()).isEqualTo(Optional.empty()); assertThat(actual.getToInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getMax()).isEqualTo(Optional.empty()); expected = RangeHeader.create(); actual = RangeHeader.parse(""); assertThat(actual).isEqualTo(expected); assertThat(actual.getField()).isEqualTo(Optional.empty()); assertThat(actual.getFromId()).isEqualTo(Optional.empty()); assertThat(actual.getFromInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getToId()).isEqualTo(Optional.empty()); assertThat(actual.getToInclusive()).isEqualTo(Optional.empty()); assertThat(actual.getMax()).isEqualTo(Optional.empty()); }
@Test void evaluateWithSecureUberspectorActiveByDefault() throws Exception { this.engine.initialize(new Properties()); String content = "#set($foo = 'test')#set($object = $foo.class.forName('java.util.ArrayList')" + ".newInstance())$object.size()"; assertEvaluate("$object.size()", content, DEFAULT_TEMPLATE_NAME); assertEquals( "Cannot retrieve method forName from object of class java.lang.Class due to security restrictions.", logCapture.getMessage(0)); }
@Test public void testDecode () { final String sEncoded = "616263\n" + "414243>"; assertEquals ("abcABC", new ASCIIHexCodec ().getDecodedAsString (sEncoded, StandardCharsets.US_ASCII)); }
@Test public void testOnRemoveGroupNoMembership() throws Exception { action.onRemove(gr, root, NamePathMapper.DEFAULT); }
@Test public void testValidateConfigurationOption() throws Exception { final ConfigurationOption<Boolean> configurationOption = ConfigurationOption.booleanOption() .key("foo") .addValidator((value) -> { if (!value) { throw new IllegalArgumentException("Validation failed"); } }) .buildWithDefault(true); final ConfigurationOptionProvider optionProvider = TestConfigurationOptionProvider.of(configurationOption); final SimpleSource configurationSource = new SimpleSource("test"); final ConfigurationRegistry config = ConfigurationRegistry.builder() .addOptionProvider(optionProvider) .addConfigSource(configurationSource) .build(); try { config.save("foo", "false", "test"); fail(); } catch (IllegalArgumentException e) { assertEquals("Validation failed", e.getMessage()); } }
@Test public void wrap() throws Exception { ExtendedMimeMessage extendedMimeMessage = new ExtendedMimeMessage(); assertThat(ExtendedMimeMessage.wrap(extendedMimeMessage), sameInstance(extendedMimeMessage)); MimeMessage mimeMessage = new MimeMessage((Session) null); mimeMessage.setText(TEST_CONTENT); assertThat(ExtendedMimeMessage.wrap(mimeMessage).getContent(), equalTo(TEST_CONTENT)); }
@Test(expected = AuthorizableExistsException.class) public void testCreateUserWithExistingPrincipal() throws Exception { User u = getTestUser(); userMgr.createUser("another", null, u.getPrincipal(), null); }
@Test public void assertSupportsGroupBy() { assertFalse(metaData.supportsGroupBy()); }
@Test public void getMaximumCommonHeightDataThreeEntries() { List<String> keys = Arrays.asList("key1", "key2"); BootstrapIndexCandidateSelector indexMCH = new BootstrapIndexCandidateSelector(keys, 2); List<BootstrapDataIndex> indexes = new ArrayList<>(); ArrayList<BootstrapDataEntry> entries = new ArrayList<>(); ArrayList<BootstrapDataEntry> entries2 = new ArrayList<>(); entries.add(new BootstrapDataEntry(1, "", "dbPath", "hash", new BootstrapDataSignature("r", "s"))); entries.add(new BootstrapDataEntry(2, "", "dbPath", "hash", new BootstrapDataSignature("r", "s"))); entries2.add(new BootstrapDataEntry(1, "", "dbPath", "hash", new BootstrapDataSignature("r", "s"))); indexes.add(new BootstrapDataIndex(entries)); indexes.add(new BootstrapDataIndex(entries2)); BootstrapIndexCandidateSelector.HeightCandidate heightCandidate = indexMCH.getHeightData(indexes); assertEquals(1, heightCandidate.getHeight()); }
@Test public void testOrderCustomWebFragments2() throws Exception { List<WebXMLDefinition> webXMLDefinitions = new ArrayList<>(); webXMLDefinitions.add( loadWebXMLDefinition("dependencies/custom-web-fragment-3.xml")); webXMLDefinitions.add( loadWebXMLDefinition("dependencies/custom-web-fragment-2.xml")); webXMLDefinitions.add( loadWebXMLDefinition("dependencies/custom-web-fragment-1.xml")); WebXMLDefinition webXMLDefinition = loadWebXMLDefinition( "dependencies/custom-web-absolute-ordering-2.xml"); List<WebXMLDefinition> orderedWebXMLDefinitions = OrderUtil.getOrderedWebXMLDefinitions( webXMLDefinitions, webXMLDefinition.getAbsoluteOrderingNames()); Assert.assertEquals( orderedWebXMLDefinitions.toString(), 2, orderedWebXMLDefinitions.size()); WebXMLDefinition firstWebXMLDefinition = orderedWebXMLDefinitions.get( 0); Assert.assertEquals( "fragment1", firstWebXMLDefinition.getFragmentName()); WebXMLDefinition secondWebXMLDefinition = orderedWebXMLDefinitions.get( 1); Assert.assertEquals( "fragment2", secondWebXMLDefinition.getFragmentName()); }
@Test public void testgetAllAtomMapping() throws InvalidSmilesException, CDKException { SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer query = sp.parseSmiles("Nc1cccc(NO)c1"); IAtomContainer target = sp.parseSmiles("Nc1ccccc1"); MCSPlusHandler comparison = new MCSPlusHandler(query, target, true, true, false); assertNotNull(comparison.getFirstAtomMapping()); assertEquals(4, comparison.getAllAtomMapping().size()); }
@Test public void testGetVnfInstanceName() { String vnfInstanceName = "vnfInstanceName"; vduInfo.setVnfInstanceName(vnfInstanceName); Assert.assertNotNull(vduInfo.getVnfInstanceName()); Assert.assertEquals("vnfInstanceName", vduInfo.getVnfInstanceName()); }
@Test public void shouldLoadPlayerWithExternalSave_whenNotRegistered_caseSaveNotExists() { when(saver.loadGame("vasia")).thenReturn(NULL); allPlayersNotRegistered(); saveService.load("vasia", "room", "game", "{'save':'data'}"); verify(saver).loadGame("vasia"); verifyNoMoreInteractions(saver); verify(playerService).contains("vasia"); ArgumentCaptor<PlayerSave> captor = ArgumentCaptor.forClass(PlayerSave.class); verify(playerService).register(captor.capture()); PlayerSave actual = captor.getValue(); assertEquals("{'callbackUrl':'" + SaveServiceImpl.DEFAULT_CALLBACK_URL + "'," + "'gameName':'game'," + "'id':'vasia'," + "'roomName':'room'," + "'save':'{'save':'data'}'," + "'score':0}", JsonUtils.cleanSorted(actual)); verifyNoMoreInteractions(playerService); }
@Test public void shouldThrowExceptionForInvalidRetrieveType() { try { httpState.retrieve(request().withQueryStringParameter("type", "invalid")); fail("expected exception to be thrown"); } catch (Throwable throwable) { assertThat(throwable, instanceOf(IllegalArgumentException.class)); assertThat(throwable.getMessage(), is("\"invalid\" is not a valid value for \"type\" parameter, only the following values are supported [logs, requests, request_responses, recorded_expectations, active_expectations]")); } }
@Test public void testOnConstruct() { realCallInterceptor.onConstruct(enhancedInstance, allArguments); assertThat(enhancedInstance.getSkyWalkingDynamicField(), is(allArguments[1])); }
@Test public void directExtract() throws AttributeNotFoundException { Date date = new Date(); Stack stack = new Stack(); Object result = extractor.extractObject(null,date,stack,false); assertEquals(result,date); stack.add("time"); result = extractor.extractObject(null,date,stack,false); assertEquals(result,date); }
@SuppressWarnings("Convert2Diamond") @Test public void shouldSerializeEmptyMap() throws Exception { ClaimsHolder holder = new ClaimsHolder(new HashMap<String, Object>()); serializer.serialize(holder, jsonGenerator, serializerProvider); jsonGenerator.flush(); assertThat(writer.toString(), is(equalTo("{}"))); }
@Test public void unrecoverable() { JSBundleLoader delegates[] = new JSBundleLoader[] { fatalLoader("url1", "error1"), recoverableLoader("url2", "error2") }; FallbackJSBundleLoader fallbackLoader = new FallbackJSBundleLoader(new ArrayList(Arrays.asList(delegates))); try { fallbackLoader.loadScript(null); fail("expect throw"); } catch (Exception e) { assertThat(e.getMessage()).isEqualTo(fatalMsg("error1")); } verify(delegates[0], times(1)).loadScript(null); verify(delegates[1], never()).loadScript(null); assertThat(mLoggingDelegate.logContains( FakeLoggingDelegate.WTF, FallbackJSBundleLoader.TAG, null)) .isFalse(); }
@Test public void testDateWithFormatter1() throws IOException { final boolean header = false; final char delimiter = ','; final boolean useSampling = true; CsvReadOptions options = CsvReadOptions.builder("../data/date_format_test.txt") .header(header) .separator(delimiter) .sample(useSampling) .dateFormat(DateTimeFormatter.ofPattern("yyyy.MM.dd")) .build(); final Table table = Table.read().csv(options); DateColumn date = table.dateColumn(0); assertFalse(date.isEmpty()); }
@Test public void trySamplesWithPermissionTest() { emptyLibraryScreen.trySamples(); verify(libraryPlaces).goToTrySamples(); }
@Test public void shouldShowOrdersWithProductMainIfProductIsSavedAndProductNumberIsntNull() { given(product.getId()).willReturn(L_ID); given(product.getStringField(NUMBER)).willReturn(L_PRODUCT_NUMBER); filters.put("productNumber", "[" + L_PRODUCT_NUMBER + "]"); gridOptions.put(L_FILTERS, filters); parameters.put(L_GRID_OPTIONS, gridOptions); parameters.put(L_WINDOW_ACTIVE_MENU, "orders.productionOrders"); String url = "../page/orders/ordersList.html"; productDetailsListenersO.showOrdersWithProductMain(view, null, null); verify(view).redirectTo(url, false, true, parameters); }
@Test public void testEthGetTransactionByBlockNumberAndIndex() throws Exception { web3j.ethGetTransactionByBlockNumberAndIndex( DefaultBlockParameter.valueOf(Numeric.toBigInt("0x29c")), BigInteger.ZERO).send(); verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByBlockNumberAndIndex\"," + "\"params\":[\"0x29c\",\"0x0\"],\"id\":1}"); }
@Test() public void testNullChildren() { String path = PropertyPathBuilder.instanceConfig(clusterName, "id6"); ZKUtil.createChildren(_gZkClient, path, (List<ZNRecord>) null); }
@Test public void testSpliceAndDrop() { Edge edge1 = new Edge(STATE1, STATE2, constraint(BDD0)); Edge edge2 = new Edge(STATE2, STATE3, constraint(BDD0.not())); assertThat( optimize(ImmutableSet.of(edge1, edge2), ImmutableSet.of(STATE1, STATE3), false), empty()); }
@Test public void testGetBids() { assertNotNull(orderbook.getBids()); assertEquals(1, orderbook.getBids().size()); PriceLevel level = orderbook.getAsks().get(0); assertNotNull(level.getPrice()); assertNotNull(level.getAmount()); }
@Test public void decrypt() throws Exception { String encryptedStr = SecurityUtils.encrypt(getSource(), properties); String decrypt = SecurityUtils.decrypt(encryptedStr, properties); System.out.println(decrypt); }
@Test public void testCreateLabel() { String degree = NonSI.DEGREE_ANGLE.toString(); assertEquals( "100000 m", GridUtils.createLabel(100000, "m", null)); assertEquals( "100000 m", GridUtils.createLabel(100000.12345, "m", null)); assertEquals( "49.123457 " + degree, GridUtils.createLabel(49.12345678, degree, null)); assertEquals( "100,000 m", GridUtils.createLabel(100000, "m", new GridLabelFormat.Simple("%,1.0f %s"))); assertEquals( "100,000 m", GridUtils .createLabel(100000, "m", new GridLabelFormat.Detailed("###,###", null, null, null))); assertEquals( "100'000 m", GridUtils.createLabel(100000, "m", new GridLabelFormat.Detailed("###,###", null, null, "'"))); assertEquals( "100,000 m", GridUtils.createLabel(100000.123, "m", new GridLabelFormat.Detailed("###,###", null, null, null))); assertEquals( "100'000,12 m", GridUtils.createLabel(100000.123, "m", new GridLabelFormat.Detailed("###,###.##", null, ",", "'"))); }
@Test public void updateProfileAgreement_userDoesNotHaveProfileYet() { ZonedDateTime expectedAgreementSignedDate = ZonedDateTime.of(2016, 10, 11, 12, 13, 14, 0, ZoneId.systemDefault()); User existingUser = newUser() .withId(1L) .build(); when(userRepositoryMock.findById(existingUser.getId())).thenReturn(Optional.of(existingUser)); Agreement currentAgreement = newAgreement() .build(); when(agreementRepositoryMock.findByCurrentTrue()).thenReturn(currentAgreement); Profile newProfile = newProfile() .with(id(null)) .build(); Long profileId = 23L; Profile savedProfile = newProfile() .withId(profileId) .build(); Profile profileWithAgreement = newProfile() .withId(profileId) .withAgreement(currentAgreement) .withAgreementSignedDate(expectedAgreementSignedDate) .build(); when(profileRepositoryMock.save(newProfile)).thenReturn(savedProfile); when(profileRepositoryMock.findById(profileId)).thenReturn(Optional.of(savedProfile), Optional.of(profileWithAgreement)); ServiceResult<Void> result = service.updateProfileAgreement(existingUser.getId()); assertTrue(result.isSuccess()); InOrder inOrder = inOrder(userRepositoryMock, agreementRepositoryMock, profileRepositoryMock); inOrder.verify(userRepositoryMock).findById(existingUser.getId()); inOrder.verify(agreementRepositoryMock).findByCurrentTrue(); inOrder.verify(profileRepositoryMock).findById(profileId); inOrder.verify(profileRepositoryMock).save(any(Profile.class)); inOrder.verifyNoMoreInteractions(); }
@Test public void unicodeCharacters() { assertEquals("%E2%82%AC", Encoder.encode("€")); assertEquals("%EF%B7%BC", Encoder.encode("\uFDFC")); }
@Test public void setViewVisibilityGone() { Views.gone(mockView); verify(mockView, times(1)).setVisibility(View.GONE); }
@Test public void testInShard( ) { Table table = new Table("t"); table.inShard("1"); assertEquals("1", table.getShardId()); }
@Test public void testGetBootWarTask_bootWarProject() { Project project = ProjectBuilder.builder().build(); project.getPlugins().apply(WarPlugin.class); project.getPlugins().apply(SpringBootPlugin.class); TaskProvider<Task> bootWarTask = TaskCommon.getBootWarTaskProvider(project); Assert.assertNotNull(bootWarTask); Assert.assertNotNull(bootWarTask instanceof BootWar); }
@Test public void getCerticatesExpiryByApplicationTest() throws Exception { when(certificateRepository.getCertificatesExpiryByApplication(anyString())).thenReturn(new HashMap<>()); assertThat(certificateService.getCerticatesExpiryByApplication("ag"), is(notNullValue())); }
@Test public void invalidLongProperty() { Long longProperty = ConfigBuilder.getLongProperty("long", Collections.singletonMap("long", "45.6")); assertThat(longProperty).isNull(); }
@Test public void test_getAllComponentsByNamespaceCode_with_derived() throws Exception{ setupDataObjectServiceFetchComponent(); setupDataObjectServiceFetchDerivedComponent(); List<Component> components = getComponentService().getAllComponentsByNamespaceCode(NAMESPACE_CODE); assertTrue("getAllComponentsByNamespaceCode retrieved correctly", components != null && components.size() == 2); assertTrue("Component was returned", StringUtils.equals(component.getCode(), components.get(0).getCode())); assertTrue("Component was returned", StringUtils.equals(derivedComponent.getCode(), components.get(1).getCode())); assertImmutableList(components); }
@Test public void testApplicationPathAnnotation_None_And_ChangeThePath() throws Exception { String applicationPath = "/api"; JAXRSArchive archive = ShrinkWrap.create(JAXRSArchive.class); DefaultApplicationDeploymentProcessor processor = new DefaultApplicationDeploymentProcessor(archive); processor.applicationPath.set(applicationPath); processor.process(); try (InputStream in = archive.get(PATH).getAsset().openStream()) { ClassReader reader = new ClassReader(in); ClassNode node = new ClassNode(); reader.accept(node, 0); List<AnnotationNode> visibleAnnotations = node.visibleAnnotations; assertThat(visibleAnnotations.size()).isEqualTo(1); assertThat(visibleAnnotations.get(0).values).contains(applicationPath); } catch (IOException ignored) { } }
@Test public void testSave() throws Exception { File base = StoreLocation.LOCATION; try (Store store = new Store(base)) { store.load(); Storage storage = store.getStorage(); Index index = store.getIndex(IndexType.INTERFACES); Archive archive = index.getArchive(31); byte[] archiveData = storage.loadArchive(archive); ArchiveFiles files = archive.getFiles(archiveData); FSFile file = files.findFile(76); byte[] contents = file.getContents(); InterfaceDefinition def = new InterfaceLoader().load(0, contents); byte[] b = new InterfaceSaver().save(def); assertArrayEquals(contents, b); } }
@Test public void assertGetValueListCountWithValues() { InsertStatement insertStatement = new InsertStatement(); insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(0, 0, 1)))); insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(0, 0, 2)))); assertThat(insertStatement.getValueListCount(), is(2)); }
@Test public void testCreateTable() throws Exception { Assert.assertNotNull(provider.createTable("newtable1")); Assert.assertNotNull(provider.createTable("newtable2")); Assert.assertNull(provider.createTable("table1")); Assert.assertNull(provider.createTable("table2")); provider.removeTable("newtable1"); provider.removeTable("newtable2"); }
@Test public void deserializeBlobOfMapReturnsCopyOfMap() throws Exception { final Object object = deserializeBlob(this.bytesOfMap); assertThat(object).isNotNull(); assertThat(object).isExactlyInstanceOf(HashMap.class); assertThat(object).isNotSameAs(this.mapWithTwoEntries); assertThat(object).isEqualTo(this.mapWithTwoEntries); }
@Test public void shouldReturnPublishedEvents() { final InMemoryMessagePublisher<TypedMessage> inMemoryMessagePublisher = mock(InMemoryMessagePublisher.class); final List<TypedMessage> mockPublishedMessages = new ArrayList<>(); final StubEvent stubEvent = new StubEvent(); stubEvent.setEventField(randomString()); addSerializedEventMessage(mockPublishedMessages, stubEvent); final StubOtherEvent stubOtherEvent = new StubOtherEvent(); addSerializedEventMessage(mockPublishedMessages, stubOtherEvent); when(inMemoryMessagePublisher.getPublishedMessages()).thenReturn(mockPublishedMessages); final List<Event> publishedEvents = InMemoryMessageVerifier.publishedEvents(inMemoryMessagePublisher, StubEvent.class, StubOtherEvent.class); final List<Event> expectedEvents = Arrays.asList(stubEvent, stubOtherEvent); assertEquals(expectedEvents, publishedEvents); }
@Test public void hash_input1234_givenAIs4_3_2_1_returns193() { addA(4, 3, 2, 1); Assert.assertEquals(193, test.hash("1234")); }
@Test(expected = IabException.class) public void shouldConsumeInAppItemRemoteException() throws Exception { shouldStartSetup_SuccessCase(); Purchase purchase = mock(Purchase.class); when(service.consumePurchase(API_VERSION, Robolectric.application.getPackageName(), "foo")).thenThrow(new RemoteException()); helper.consume(purchase); }
@Test public void testFindPrincipalsWithLimitExceedsResultSize() throws Exception { Set<Principal> all = getExpectedAllSearchResult(USER_ID); Set<? extends Principal> result = ImmutableSet.copyOf(principalProvider.findPrincipals(null, false, PrincipalManager.SEARCH_TYPE_GROUP, 0, all.size()+1)); assertEquals(all, result); }
@Test public void testGetHostnameVerifier() { HostnameVerifier verifier = SSLUtils.getHostnameVerifier(config); assertTrue(verifier instanceof DefaultHostnameVerifier); config.setOverrideHostnameVerifier(new TestHostnameVerifier()); verifier = SSLUtils.getHostnameVerifier(config); assertTrue(verifier instanceof TestHostnameVerifier); config.setDisableSSLValidation(true); verifier = SSLUtils.getHostnameVerifier(config); assertTrue(verifier instanceof NoopHostnameVerifier); }
@Test public void testExceptionInFinishAbortsAllOperations() throws Exception { Operation o1 = Mockito.mock(Operation.class); Operation o2 = Mockito.mock(Operation.class); Operation o3 = Mockito.mock(Operation.class); Mockito.doThrow(new Exception("in finish")).when(o2).finish(); ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest(); try (IntrinsicMapTaskExecutor executor = IntrinsicMapTaskExecutor.withSharedCounterSet( Arrays.<Operation>asList(o1, o2, o3), counterSet, stateTracker)) { executor.execute(); fail("Should have thrown"); } catch (Exception e) { InOrder inOrder = Mockito.inOrder(o1, o2, o3); inOrder.verify(o3).start(); inOrder.verify(o2).start(); inOrder.verify(o1).start(); inOrder.verify(o1).finish(); inOrder.verify(o2).finish(); Mockito.verify(o1).abort(); Mockito.verify(o2).abort(); Mockito.verify(o3).abort(); Mockito.verifyNoMoreInteractions(o1, o2, o3); } }
@Test public final void testGetRFDataValidData() { XBee16BitAddress source16Addr = new XBee16BitAddress("D817"); int rssi = 75; int options = 0x84; byte[] receivedData = new byte[]{0x68, 0x6F, 0x6C, 0x61, (byte)0x98, 0x11, 0x32}; RX16IOPacket packet = new RX16IOPacket(source16Addr, rssi, options, receivedData); byte[] result = packet.getRFData(); assertThat("RF Data must be the same", result, is(equalTo(receivedData))); assertThat("RF Data must not be the same object", result.hashCode(), is(not(equalTo(receivedData.hashCode())))); }
@Test(expected = NullPointerException.class) public void testCombine_nullVarargs_exception() { Styles.combine(null, null); }
@Test public void testSetLayers() { final Cake cake = new Cake(); assertNotNull(cake.getLayers()); assertTrue(cake.getLayers().isEmpty()); final Set<CakeLayer> expectedLayers = new HashSet<>(); expectedLayers.add(new CakeLayer("layer1", 1000)); expectedLayers.add(new CakeLayer("layer2", 2000)); expectedLayers.add(new CakeLayer("layer3", 3000)); cake.setLayers(expectedLayers); assertEquals(expectedLayers, cake.getLayers()); }
@Test public void equals_same() { final VersionNumber version = new VersionNumber(Arrays.asList("0", "0", "0")); assertThat(version.equals(version)).isTrue(); }
@Test public void shouldFailRSA384VerificationWhenProvidedPublicKeyIsNull() throws Exception { exception.expect(SignatureVerificationException.class); exception.expectMessage("The Token's Signature resulted invalid when verified using the Algorithm: SHA384withRSA"); exception.expectCause(isA(IllegalStateException.class)); exception.expectCause(hasMessage(is("The given Public Key is null."))); RSAKeyProvider provider = mock(RSAKeyProvider.class); when(provider.getPublicKeyById("my-key-id")).thenReturn(null); String jwt = "eyJhbGciOiJSUzM4NCIsImtpZCI6Im15LWtleS1pZCJ9.eyJpc3MiOiJhdXRoMCJ9.ITNTVCT7ercumZKHV4-BXGkJwwa7fyF3CnSfEvm09fDFSkaseDxNo_75WLDmK9WM8RMHTPvkpHcTKm4guYEbC_la7RzFIKpU72bppzQojggSmWWXt_6zq50QP2t5HFMebote1zxhp8ccEdSCX5pyY6J2sm9kJ__HKK32KxIVCTjVCz-bFBS60oG35aYEySdKsxuUdWbD5FQ9I16Ony2x0EPvmlL3GPiAPmgjSFp3LtcBIbCDaoonM7iuDRGIQiDN_n2FKKb1Bt4_38uWPtTkwRpNalt6l53Y3JDdzGI5fMrMo3RQnQlAJxUJKD0eL6dRAA645IVIIXucHwuhgGGIVw"; Algorithm algorithm = Algorithm.RSA384(provider); algorithm.verify(JWT.decode(jwt)); }
@Test public void resultToPlainText() throws Exception { final List<HealthCheckExecutionResult> successResults = new ArrayList<>(); successResults.add(successExecutionResult); final String actual = healthCheckStatusEmailer.resultToPlainText("HC Test", successResults); Matcher titleMatcher = Pattern.compile("^HC Test$", Pattern.MULTILINE).matcher(actual); Matcher entryMatcher = Pattern.compile("^\\[ OK \\]\\s+hc success$", Pattern.MULTILINE).matcher(actual); Matcher negativeMatcher = Pattern.compile("^\\[ CRTICAL \\]\\s+hc failure", Pattern.MULTILINE).matcher(actual); assertTrue(titleMatcher.find()); assertTrue(entryMatcher.find()); assertFalse(negativeMatcher.find()); }
@Test public void testModelEnrichment() { final Optional<Context> oModel = definition.getModelClass(); definition.enrich(Optional.empty(), hasExpression, oModel); final Context model = oModel.get(); assertEquals(2, model.getContextEntry().size()); assertEquals(JavaFunctionEditorDefinition.VARIABLE_CLASS, model.getContextEntry().get(0).getVariable().getName().getValue()); assertTrue(model.getContextEntry().get(0).getExpression() instanceof LiteralExpression); assertEquals(model, model.getContextEntry().get(0).getParent()); assertEquals(JavaFunctionEditorDefinition.VARIABLE_METHOD_SIGNATURE, model.getContextEntry().get(1).getVariable().getName().getValue()); assertTrue(model.getContextEntry().get(1).getExpression() instanceof LiteralExpression); assertEquals(model, model.getContextEntry().get(1).getParent()); }
@Test public void shouldRejectNetworkItemIdOnAccessListPutOrPost() { AccessList al = new AccessList(); al.getNetworkItems().add(initNetworkItem("192.168.3.51/32", "DENY", null)); al.getNetworkItems().add(initNetworkItem("192.168.3.24/32", "ALLOW", "31")); al.getNetworkItems().add(initNetworkItem("192.168.3.54/32", "DENY", null)); ValidatorResult result = alValidator.validate(al, POST); assertFalse(resultMessage(result, POST), result.passedValidation()); result = alValidator.validate(al, PUT); assertFalse(resultMessage(result, PUT), result.passedValidation()); }
@Test public void testSampleCodingRemovedInSubset() throws IOException { final ProductSubsetDef subsetDef = new ProductSubsetDef(); subsetDef.setNodeNames(new String[]{COLORED_BAND_NAME}); final Product subset = ProductSubsetBuilder.createProductSubset(product, subsetDef, "subset", ""); assertFalse(subset.getBandGroup().contains(INDEX_CODED_BAND_NAME)); assertTrue(subset.getBandGroup().contains(COLORED_BAND_NAME)); assertFalse(subset.getIndexCodingGroup().contains(INDEX_CODING_NAME)); }
@Test public void testDeepCopy() { Person person = new Person(); person.age = 42; person.name = "John Smith"; person.siblingnames = Lists.<CharSequence> newArrayList(); Collection<Person> personCollection = Lists.newArrayList(person); CollectionDeepCopier<Person> collectionDeepCopier = new CollectionDeepCopier<Person>( Avros.records(Person.class)); collectionDeepCopier.initialize(new Configuration()); Collection<Person> deepCopyCollection = collectionDeepCopier.deepCopy(personCollection); assertEquals(personCollection, deepCopyCollection); assertNotSame(personCollection.iterator().next(), deepCopyCollection.iterator().next()); }
@Test void shouldFallbackToNodeHostnameIfNotInNodesExt() { CouchbaseBucketConfig config = readConfig("nodes_ext_without_hostname.json"); String expected = "1.2.3.4"; assertEquals(1, config.nodes().size()); assertEquals(expected, config.nodes().get(0).hostname()); assertEquals(BucketNodeLocator.VBUCKET, config.locator()); assertFalse(config.ephemeral()); }
@Test public void retryKeySet_writesTransactionException_ifIsInTransactionAndIsPartitionedRegion() throws Exception { long startTime = 0; TestableKeySet keySet = new TestableKeySet(); keySet.setIsInTransaction(true); when(message.isRetry()).thenReturn(true); when(region.getPartitionAttributes()).thenReturn(mock(PartitionAttributes.class)); keySet.cmdExecute(message, serverConnection, securityService, startTime); assertThat(keySet.exceptionSentToClient).isInstanceOf(TransactionException.class).hasMessage( "Failover on a set operation of a partitioned region is not allowed in a transaction."); }
@Ignore @Test(expected=IllegalArgumentException.class) public void testHasPermission_3args_createOrUpdate_nonBasicEntityModel() { ravePermissionEvaluator.hasPermission(authentication, nonBasicEntityModel, CREATE_OR_UPDATE_PERMISSION); }
@Test public void testDateOnlyWithHours() { String input = "3h"; assertEquals("PT3H", Utils.durationTranslator(input)); }
@Test public void testModifyTestElement() { System.out.println("modifyTestElement"); TestElement element = new JSONFormatter(); JSONFormatterGui instance = new JSONFormatterGui(); instance.modifyTestElement(element); }
@Test public void eip1559GasPool() { assertThat(eip1559.eip1559GasPool(FORK_BLOCK + 1)) .isEqualTo((feeMarket.getMaxGas() / 2) + feeMarket.getGasIncrementAmount()); assertThat(eip1559.eip1559GasPool(FORK_BLOCK + 1) + eip1559.legacyGasPool(FORK_BLOCK + 1)) .isEqualTo(feeMarket.getMaxGas()); }
@Test public void testR0PT1H() { NotificationRow notification = new NotificationRow(); notification.setExpiresAt("R0/PT1H"); boolean result = validator.isValid(notification, context); assertFalse(result); assertEquals(NotificationValueValidator.WRONG_EXPIRES_AT_EXPRESSION, errorMessages.get(0)); }
@Test public void testToLoggingForm() { AuthScopeExpression expression = new SingleAuthScopeExpression("scopeValue"); assertThat(expression.toLoggingForm()).isEqualTo("scopeValue"); }
@Test(dependsOnMethods = "testNewJobId") public void testNewMultiTaskId() { Assert.assertEquals(JobLauncherUtils.newMultiTaskId(this.jobId, 0), this.jobId.replace("job", "multitask") + "_0"); Assert.assertEquals(JobLauncherUtils.newMultiTaskId(this.jobId, 1), this.jobId.replace("job", "multitask") + "_1"); }
@Test void shouldMergeInnerClassReportInExtraFile() throws URISyntaxException { SensorContextTester context = mockContext(); parser.collect(context, getDirs("innerClassExtraFile"), true); assertThat(context.measure(":com.example.project.CalculatorTests", CoreMetrics.TESTS).value()).isEqualTo(6); }
@Test public void testPrivateField() { System.out.println("=============获取类中自定义的private类型的属性=============="); String[] field = ClassUtil.getPrivateField("com.opslab.temp.model.BusinessLog"); for (String f : field) { System.out.println(f); } }
@Test public void createSingleExports() { Exports exports = new Exports(StringResult.class); Collection<Export> exportTypes = exports.getExports(); assertFalse(exportTypes.isEmpty()); assertEquals(exportTypes.iterator().next().getType(), StringResult.class); }
@Test public void testFlushAndSync() throws Exception { writer.flushAndSync(); verify(underlying, times(1)).commit(); }
@Test void decodeCpcPracticeSiteAddressTest() { Element clinicalDocument = makeClinicalDocument(ClinicalDocumentDecoder.CPCPLUS_PROGRAM_NAME); clinicalDocument.addContent( prepareParticipant( clinicalDocument.getNamespace()) ); Node testParentNode = new Node(); ClinicalDocumentDecoder objectUnderTest = new ClinicalDocumentDecoder(new Context()); objectUnderTest.setNamespace(clinicalDocument.getNamespace()); objectUnderTest.decode(clinicalDocument, testParentNode); assertWithMessage("Clinical Document contains the Entity Id") .that(testParentNode.getValue(ClinicalDocumentDecoder.PRACTICE_SITE_ADDR)) .isEqualTo("testing123"); }
@Test public void testGetConstraintsNoLocale() throws ClassNotFoundException { this.validationController.getConstraintsForClassName("knownClassName", null); verify(this.validationService).getConstraintsForClassName(eq("knownClassName"), isNull(Locale.class)); }
@Test(dataProvider="canSetTests") public void testCanSetValue(TableType type, int rowIndex, int columnIndex, boolean isInsertRow, boolean isInsertColumn, boolean expected) { TableStructure structure = getTableStructure(type); assertEquals(structure.canSetValue(rowIndex, columnIndex, isInsertRow, isInsertColumn), expected); }
@Test public void testForStatement() { Parser<Statement> parser = StatementParser.forStatement(ExpressionParser.IDENTIFIER, SIMPLE_STATEMENT); TerminalParserTest.assertResult(parser, "for(;;)foo;", ForStatement.class, "for (;;) foo;"); TerminalParserTest.assertResult(parser, "for(int i=m;;)foo;", ForStatement.class, "for (int i = m;;) foo;"); TerminalParserTest.assertResult(parser, "for(init;;)foo;", ForStatement.class, "for (init;;) foo;"); TerminalParserTest.assertResult(parser, "for(init1,init2;;)foo;", ForStatement.class, "for (init1, init2;;) foo;"); TerminalParserTest.assertResult(parser, "for(;cond;)foo;", ForStatement.class, "for (;cond;) foo;"); TerminalParserTest.assertResult(parser, "for(;;a)foo;", ForStatement.class, "for (;;a) foo;"); TerminalParserTest.assertResult(parser, "for(;;a,b)foo;", ForStatement.class, "for (;;a, b) foo;"); TerminalParserTest.assertResult(parser, "for(int i=m, j=n;cond;a,b)foo;", ForStatement.class, "for (int i = m, j = n;cond;a, b) foo;"); }
@Test public void contentTest() { SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader(); messageRequestHeader.setTopic("topicA"); RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, messageRequestHeader); aclClient.doBeforeRequest("", remotingCommand); ByteBuffer buf = remotingCommand.encodeHeader(); buf.getInt(); buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf); buf.position(0); PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), "127.0.0.1"); String signature = AclUtils.calSignature(accessResource.getContent(), sessionCredentials.getSecretKey()); Assert.assertEquals(accessResource.getSignature(), signature); }
@Test public void testGetIdForFlowContinuableMediatorAnonymous() { cleanUp(); Assert.assertNull("must return null for anonymous sequence", StatisticIdentityGenerator .getIdForFlowContinuableMediator("AnonymousSequence", ComponentType.SEQUENCE, artifactHolder)); }
@Test public void testGetClone() throws Exception { TestEntity from = getTestEntity(5); KryoCloneUtils<TestEntity> cloneUtils = KryoCloneUtils.createCloneUtils(from); TestEntity to = cloneUtils.getClone(); assertFalse(from == to); assertEquals(from, to); assertFalse(from.transientProp.equals(to.transientProp)); }
@Test public void getEntityClassificationByName_throwsInvalidParameterException() throws InvalidParameterException, PropertyServerException, UserNotAuthorizedException, RepositoryErrorException { String methodName = "getEntityClassificationByName"; mockMetadataCollection(); mockEntityDetails(FIRST_GUID); doThrow(new org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException(AssetCatalogErrorCode.SERVICE_NOT_INITIALIZED.getMessageDefinition(), this.getClass().getName(), "", "")) .when(invalidParameterHandler).validateUserId(USER, methodName); assertThrows(InvalidParameterException.class, () -> assetCatalogHandler.getEntityClassificationByName(USER, FIRST_GUID, ASSET_TYPE, CLASSIFICATION_NAME)); }
@Test public void testGetLastIndexOfString () { assertEquals (-1, StringHelper.getLastIndexOf (null, null)); assertEquals (-1, StringHelper.getLastIndexOf (null, "a")); assertEquals (-1, StringHelper.getLastIndexOf ("b", null)); assertEquals (-1, StringHelper.getLastIndexOf ("b", "cd")); assertEquals (-1, StringHelper.getLastIndexOf ("bla fob", "z")); assertEquals (6, StringHelper.getLastIndexOf ("bla fob", "b")); assertEquals (2, StringHelper.getLastIndexOf ("bla fob", "a")); }
@Test public void shouldGetJobMetaAsString() { when(metaRepository.getValue("someJob", "key")).thenReturn("42"); final String value = testee.getMetaAsString("key"); assertThat(value, is("42")); }
@Test public void testPatchOneShouldReturn404() throws Exception { Banana b = newBanana(2,true,LocalDateTime.now()); given(this.bananaRepository.findOne(2L)).willReturn(null); this.mvc.perform(patch("/bananas/2") .contentType(MediaType.APPLICATION_JSON) .content(convertObjectToJsonBytes(b)) .accept(MediaType.APPLICATION_JSON)) .andExpect(status().isNotFound()); }
@Test public void find_givenKeyInChildMiddle_returnsTrue() throws Exception { ABTree.ABTreeNode[] children = {buildNode(-5), buildNode(5), buildNode(15)}; setField("root", buildNode(children, 0, 10)); Assert.assertTrue(getString(test), test.find(5)); }
@Test(timeout=20000) public void testGetDefaultDrainTimeout() throws Exception { provider = new AmqpProviderFactory().createProvider(getDefaultURI()); assertEquals(TimeUnit.MINUTES.toMillis(1), provider.getDrainTimeout()); }
@Test public void testLocalAddressesNetwork() throws UnknownHostException { assertFalse(IPTools.isIpAddressLocalNetwork(InetAddress.getByName("8.8.8.8"))); }
@Test public void getLine() { assertTrue(instance.getLine().contains(historyRevision)); assertTrue(instance.getLine().contains(historyAuthor)); }
@Override @Test public void convertNullSDKToAPI() { sdkSupportConfiguration = null; converter = new SupportConfigurationConverter(sdkSupportConfiguration); assertThat("Converter didn't return a null api object for a null sdk object", converter.toAPISupportConfiguration(), nullValue()); }
@Test public void doubleLongUnsignedComparison() { assertThat(compare( 0, 0, 0, 0), is(0)); assertThat(compare( 0, 0, 0, -1), is(-1)); assertThat(compare( 0, 0, 0, 1), is(-1)); assertThat(compare( 0, 0, -1, 0), is(-1)); assertThat(compare( 0, 0, -1, -1), is(-1)); assertThat(compare( 0, 0, -1, 1), is(-1)); assertThat(compare( 0, 0, 1, 0), is(-1)); assertThat(compare( 0, 0, 1, -1), is(-1)); assertThat(compare( 0, 0, 1, 1), is(-1)); assertThat(compare( 0, -1, 0, 0), is(1)); assertThat(compare( 0, -1, 0, -1), is(0)); assertThat(compare( 0, -1, 0, 1), is(1)); assertThat(compare( 0, -1, -1, 0), is(-1)); assertThat(compare( 0, -1, -1, -1), is(-1)); assertThat(compare( 0, -1, -1, 1), is(-1)); assertThat(compare( 0, -1, 1, 0), is(-1)); assertThat(compare( 0, -1, 1, -1), is(-1)); assertThat(compare( 0, -1, 1, 1), is(-1)); assertThat(compare( 0, 1, 0, 0), is(1)); assertThat(compare( 0, 1, 0, -1), is(-1)); assertThat(compare( 0, 1, 0, 1), is(0)); assertThat(compare( 0, 1, -1, 0), is(-1)); assertThat(compare( 0, 1, -1, -1), is(-1)); assertThat(compare( 0, 1, -1, 1), is(-1)); assertThat(compare( 0, 1, 1, 0), is(-1)); assertThat(compare( 0, 1, 1, -1), is(-1)); assertThat(compare( 0, 1, 1, 1), is(-1)); assertThat(compare(-1, 0, 0, 0), is(1)); assertThat(compare(-1, 0, 0, -1), is(1)); assertThat(compare(-1, 0, 0, 1), is(1)); assertThat(compare(-1, 0, -1, 0), is(0)); assertThat(compare(-1, 0, -1, -1), is(-1)); assertThat(compare(-1, 0, -1, 1), is(-1)); assertThat(compare(-1, 0, 1, 0), is(1)); assertThat(compare(-1, 0, 1, -1), is(1)); assertThat(compare(-1, 0, 1, 1), is(1)); assertThat(compare(-1, -1, 0, 0), is(1)); assertThat(compare(-1, -1, 0, -1), is(1)); assertThat(compare(-1, -1, 0, 1), is(1)); assertThat(compare(-1, -1, -1, 0), is(1)); assertThat(compare(-1, -1, -1, -1), is(0)); assertThat(compare(-1, -1, -1, 1), is(1)); assertThat(compare(-1, -1, 1, 0), is(1)); assertThat(compare(-1, -1, 1, -1), is(1)); assertThat(compare(-1, -1, 1, 1), is(1)); assertThat(compare(-1, 1, 0, 0), is(1)); assertThat(compare(-1, 1, 0, -1), is(1)); assertThat(compare(-1, 1, 0, 1), is(1)); assertThat(compare(-1, 1, -1, 0), is(1)); assertThat(compare(-1, 1, -1, -1), is(-1)); assertThat(compare(-1, 1, -1, 1), is(0)); assertThat(compare(-1, 1, 1, 0), is(1)); assertThat(compare(-1, 1, 1, -1), is(1)); assertThat(compare(-1, 1, 1, 1), is(1)); assertThat(compare( 1, 0, 0, 0), is(1)); assertThat(compare( 1, 0, 0, -1), is(1)); assertThat(compare( 1, 0, 0, 1), is(1)); assertThat(compare( 1, 0, -1, 0), is(-1)); assertThat(compare( 1, 0, -1, -1), is(-1)); assertThat(compare( 1, 0, -1, 1), is(-1)); assertThat(compare( 1, 0, 1, 0), is(0)); assertThat(compare( 1, 0, 1, -1), is(-1)); assertThat(compare( 1, 0, 1, 1), is(-1)); assertThat(compare( 1, -1, 0, 0), is(1)); assertThat(compare( 1, -1, 0, -1), is(1)); assertThat(compare( 1, -1, 0, 1), is(1)); assertThat(compare( 1, -1, -1, 0), is(-1)); assertThat(compare( 1, -1, -1, -1), is(-1)); assertThat(compare( 1, -1, -1, 1), is(-1)); assertThat(compare( 1, -1, 1, 0), is(1)); assertThat(compare( 1, -1, 1, -1), is(0)); assertThat(compare( 1, -1, 1, 1), is(1)); assertThat(compare( 1, 1, 0, 0), is(1)); assertThat(compare( 1, 1, 0, -1), is(1)); assertThat(compare( 1, 1, 0, 1), is(1)); assertThat(compare( 1, 1, -1, 0), is(-1)); assertThat(compare( 1, 1, -1, -1), is(-1)); assertThat(compare( 1, 1, -1, 1), is(-1)); assertThat(compare( 1, 1, 1, 0), is(1)); assertThat(compare( 1, 1, 1, -1), is(-1)); assertThat(compare( 1, 1, 1, 1), is(0)); }
@Test public void testEmptyJavascriptIncomingMapping() { final String correlationId = UUID.randomUUID().toString(); final Map<String, String> headers = new HashMap<>(); headers.put(HEADER_CORRELATION_ID, correlationId); headers.put(ExternalMessage.CONTENT_TYPE_HEADER, CONTENT_TYPE_PLAIN); final ExternalMessage message = ExternalMessageFactory.newExternalMessageBuilder(headers).build(); final long startTs = System.nanoTime(); final List<Adaptable> adaptables = javaScriptRhinoMapperEmpty.map(message); System.out.println( "testEmptyJavascriptIncomingMapping Duration: " + (System.nanoTime() - startTs) / 1_000_000.0 + "ms"); assertThat(adaptables).isEmpty(); }
@Test public void testGetSystemStatus() throws IOException { SystemStatus systemStatus = new SystemStatus(); systemStatus.setStatus(StatusType.READY); ObjectMapper mapper = new ObjectMapper(); String serialized = mapper.writeValueAsString(systemStatus); setupMocks(serialized, HttpStatus.SC_OK); SystemStatusApi systemStatusApi = new SystemStatusRestApi(restClient); SystemStatus response = systemStatusApi.getSystemStatus(); assertEquals(response, systemStatus); }
@Test public void testJobSchedulingDoesNotScheduleJobsNotOnWhitelist() { this.config.setProperty( ConfigProperties.jobConfig(TestJob.JOB_KEY, ConfigProperties.ASYNC_JOBS_JOB_SCHEDULE), "5 * * * * ?"); this.config.setProperty(ConfigProperties.ASYNC_JOBS_WHITELIST, "a,b,c,d,e"); JobManager manager = this.createJobManager(); manager.initialize(); this.verifyNotScheduled(TestJob.JOB_KEY); }
@Test public void testGetRoleTokenUnauthorizedProxy() { SignedDomain signedDomain = createSignedDomain("coretech-proxy1", "weather-proxy1", "storage", true); store.processDomain(signedDomain, false); Principal principal = SimplePrincipal.create("user_domain", "user", "v=U1;d=user_domain;n=user;s=sig", 0, null); ResourceContext context = createResourceContext(principal); try { zts.getRoleToken(context, "coretech-proxy1", null, 600, 1200, "user_domain.unknown-proxy-user"); fail(); } catch (ResourceException ex) { assertEquals(ex.getCode(), 403); assertTrue(ex.getMessage().contains("not authorized for proxy role token request")); } }
@Test public void testDefaultConversion() throws Exception { Schema input = SchemaBuilder.record("Input") .namespace("com.cloudera.edh").fields() .nullableString("s1", "").requiredString("s2") .requiredString("s3").optionalLong("l1").requiredLong("l2") .endRecord(); Schema output = SchemaBuilder.record("Output") .namespace("com.cloudera.edh").fields().optionalLong("s1") .optionalString("l1").requiredLong("l2").requiredDouble("s3") .endRecord(); AvroRecordConverter converter = new AvroRecordConverter(input, output, EMPTY_MAPPING, LocaleUtils.toLocale("en_US")); Record inputRecord = new Record(input); inputRecord.put("s1", null); inputRecord.put("s2", "blah"); inputRecord.put("s3", "5.5"); inputRecord.put("l1", null); inputRecord.put("l2", 5L); Record outputRecord = converter.convert(inputRecord); assertNull(outputRecord.get("s1")); assertNull(outputRecord.get("l1")); assertEquals(5L, outputRecord.get("l2")); assertEquals(5.5, outputRecord.get("s3")); inputRecord.put("s1", "500"); inputRecord.put("s2", "blah"); inputRecord.put("s3", "5.5e-5"); inputRecord.put("l1", 100L); inputRecord.put("l2", 2L); outputRecord = converter.convert(inputRecord); assertEquals(500L, outputRecord.get("s1")); assertEquals("100", outputRecord.get("l1")); assertEquals(2L, outputRecord.get("l2")); assertEquals(5.5e-5, outputRecord.get("s3")); }
@Test public void testEquals() { OspfExternalType2Route.Builder b = OspfExternalRoute.builder() .setNetwork(Ip.parse("1.1.1.1").toPrefix()) .setNextHopIp(Ip.ZERO) .setAdmin(1) .setMetric(1) .setLsaMetric(1) .setArea(1) .setCostToAdvertiser(1) .setAdvertiser("") .setOspfMetricType(OspfMetricType.E1); OspfExternalRoute r1 = b.build(); OspfExternalRoute r1DiffObj = b.build(); OspfExternalRoute r2 = b.setCostToAdvertiser(2).build(); OspfExternalRoute r2t2 = b.setOspfMetricType(OspfMetricType.E2).build(); new EqualsTester() .addEqualityGroup(r1, r1DiffObj) .addEqualityGroup(r2) .addEqualityGroup(r2t2) .testEquals(); }
@Test public void proxyEndsWithSlash() { final RequestContext ctx = RequestContext.getCurrentContext(); ctx.set(PROXY_KEY, "api/v2/service/"); this.filter.run(); assertEquals("/service/v2/path", ctx.get(REQUEST_URI_KEY)); }
@Test void tryAdvanceIntConsumerAfterAdvance() { instance.tryAdvance((IntConsumer) i -> {}); assertFalse(instance.tryAdvance((IntConsumer) i -> cnt.incrementAndGet())); assertEquals(0, cnt.get()); }
@Test public void testEventOnServerRemoved() { String id = instanceSet0.get(0).getId(); instanceSet0.remove(0); when(agentCache.getAgentInstances(instanceGroups.get(0).getId())).thenReturn(new HashSet<>(instanceSet0)); agentCacheEventSubject.onNext(new CacheUpdateEvent(CacheUpdateType.Instance, id)); AgentEvent event = eventSubscriber.takeNext(); assertThat(event).isInstanceOf(AgentInstanceRemovedEvent.class); }
@Test public void evaluate_shouldDetermineWhetherPatientsHasDeclinedCD4() throws Exception { Program hivProgram = MetadataUtils.existing(Program.class, HivMetadata._Program.HIV); TestUtils.enrollInProgram(TestUtils.getPatient(6), hivProgram, new Date()); TestUtils.enrollInProgram(TestUtils.getPatient(7), hivProgram, new Date()); TestUtils.enrollInProgram(TestUtils.getPatient(8), hivProgram, new Date()); Concept cd4 = Dictionary.getConcept(Dictionary.CD4_COUNT); Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DATE, -180); TestUtils.saveObs(TestUtils.getPatient(7), cd4, 123d, calendar.getTime()); TestUtils.saveObs(TestUtils.getPatient(8), cd4, 123d, calendar.getTime()); TestUtils.saveObs(TestUtils.getPatient(7), cd4, 120d, new Date()); TestUtils.saveObs(TestUtils.getPatient(8), cd4, 126d, new Date()); List<Integer> ptIds = Arrays.asList(6, 7, 8, 999); CalculationResultMap resultMap = new DecliningCd4Calculation().evaluate(ptIds, null, Context.getService(PatientCalculationService.class).createCalculationContext()); Assert.assertFalse((Boolean) resultMap.get(6).getValue()); Assert.assertTrue((Boolean) resultMap.get(7).getValue()); Assert.assertFalse((Boolean) resultMap.get(8).getValue()); Assert.assertFalse((Boolean) resultMap.get(999).getValue()); }
@Test public void testAcceptValidParameter2() { final ConsoleState state = new ConsoleState(null); state.setInput("display properties "); assertThat(command.accept(state), is(true)); }
@Test public void testCustomConvertShouldByDefaultReturnObjectNoConversion() { String data = "2016-03-11"; Class<?> parameterType = Date.class; Object result = underTest.customConvertValue(data, parameterType, dataProvider); assertThat(result).isEqualTo(StringConverter.OBJECT_NO_CONVERSION); }
@Test public void testBuildLocalPathDependenciesCommand() throws GenieException { final String localPath = this.genieBaseTask.buildLocalFilePath( "dirpath", "id", "filepath/filename", FileType.DEPENDENCIES, AdminResources.COMMAND ); Assert.assertEquals("dirpath/genie/command/id/dependencies/filename", localPath); }
@Test public void cancelPayment_WithoutAuthorisation_Fail_FinalisedStatus() { ResponseObject<CancelPaymentResponse> cancelPaymentResponse = getErrorOnPaymentCancellation404(); ResponseEntity<?> expectedResult = ResponseEntity.status(NOT_FOUND).build(); when(responseErrorMapper.generateErrorResponse(cancelPaymentResponse.getError())).thenReturn(expectedResult); ResponseEntity<?> actualResult = paymentController.cancelPayment(CORRECT_PAYMENT_SERVICE, PRODUCT, CORRECT_PAYMENT_ID, REQUEST_ID, null, null, null, null, null, null, EXPLICIT_PREFERRED_FALSE, null, null, null, null, null, null, null, null, null, null); assertThat(actualResult.getStatusCode()).isEqualTo(expectedResult.getStatusCode()); }
@Test public void countAll() { assertThat(H.request("select count(u) from User u").count()).isEqualTo(2); }
@Test(expected = IllegalArgumentException.class) public void assertBuildWhenCronIsNull() { JobCoreConfiguration.newBuilder("test_job", null, 3).build(); }
@Test public void testSentinel2L1BMetadataInspector20m() throws IOException { File file = TestUtil.getTestFile(SENTINEL2_DIR + File.separator + L1B_PRODUCT_NAME); assertNotNull(file); Sentinel2L1BMetadataInspector metadataInspector = new Sentinel2L1BMetadataInspector(Sentinel2L1BProductReader.ProductInterpretation.RESOLUTION_20M); MetadataInspector.Metadata metadata = metadataInspector.getMetadata(file.toPath()); assertNotNull(metadata); assertEquals(1276, metadata.getProductWidth()); assertEquals(2304, metadata.getProductHeight()); assertNull(metadata.getGeoCoding()); assertNotNull(metadata.getBandList()); assertEquals(14, metadata.getBandList().size()); assertTrue(metadata.getBandList().contains("D11B11")); assertTrue(metadata.getBandList().contains("D12B8A")); assertTrue(metadata.getBandList().contains("D11_tile_id_20m")); assertTrue(metadata.getBandList().contains("D12_tile_id_20m")); assertNotNull(metadata.getMaskList()); assertEquals(4, metadata.getMaskList().size()); assertTrue(metadata.getMaskList().contains("tile_20m_d11_20160403t182500")); assertTrue(metadata.getMaskList().contains("tile_20m_d12_20160403t182456")); }
@Test public void testGetAlternates() { final Collection<ActorSelection> alternates = OBJECT.getAlternates(); Assert.assertArrayEquals(ALTERNATES.toArray(), alternates.toArray()); }
@Test public void testLogonWithoutHeartBtInt() throws Exception { EventHandlingStrategy mockEventHandlingStrategy = mock(EventHandlingStrategy.class); IoSession mockIoSession = mock(IoSession.class); final SessionID sessionID = new SessionID(FixVersions.BEGINSTRING_FIXT11, "SENDER", "TARGET"); try (Session session = SessionFactoryTestSupport.createSession(sessionID, new UnitTestApplication(), false)) { stub(mockIoSession.getAttribute("QF_SESSION")).toReturn(null); final HashMap<SessionID, Session> acceptorSessions = new HashMap<>(); acceptorSessions.put(sessionID, session); final StaticAcceptorSessionProvider sessionProvider = createSessionProvider(acceptorSessions); final AcceptorIoHandler handler = new AcceptorIoHandler(sessionProvider, new NetworkingOptions(new Properties()), mockEventHandlingStrategy); final DefaultApplVerID defaultApplVerID = new DefaultApplVerID(ApplVerID.FIX50SP2); final Logon message = new Logon(new EncryptMethod(EncryptMethod.NONE_OTHER), new HeartBtInt(30), defaultApplVerID); message.getHeader().setString(TargetCompID.FIELD, sessionID.getSenderCompID()); message.getHeader().setString(SenderCompID.FIELD, sessionID.getTargetCompID()); message.getHeader().setField(new SendingTime(LocalDateTime.now())); message.getHeader().setInt(MsgSeqNum.FIELD, 1); message.removeField(HeartBtInt.FIELD); handler.processMessage(mockIoSession, message); } }
@Test public void testOutputPath() throws IOException { Configuration conf = new Configuration(); String outputParent = "target/" + getClass().getSimpleName(); conf.set(LensConfConstants.RESULT_SET_PARENT_DIR, outputParent); setConf(conf); testFormatter(conf, "UTF8", outputParent, ".csv", getMockedResultSet()); Assert.assertEquals(readFinalOutputFile(new Path(formatter.getFinalOutputPath()), conf, "UTF-8"), getExpectedCSVRows()); }
@Test public void tfidfLogPlusOne() throws Exception { Map<String,Double> idfScores = new HashMap<String,Double>(); idfScores.put("test", 1.0 / 2.0); idfScores.put("String1", 1.0 / 2.0); String[] a1 = "test String1".split(" "); String[] a2 = "test String2".split(" "); String[] b1 = "test String1 test".split(" "); String[] b2 = "String2 test".split(" "); TextSimilarityMeasure comparator1 = new CosineSimilarity( CosineSimilarity.WeightingModeTf.FREQUENCY, CosineSimilarity.WeightingModeIdf.LOG, CosineSimilarity.NormalizationMode.L2, idfScores ); TextSimilarityMeasure comparator2 = new CosineSimilarity( CosineSimilarity.WeightingModeTf.FREQUENCY, CosineSimilarity.WeightingModeIdf.LOGPLUSONE, CosineSimilarity.NormalizationMode.L2, idfScores ); assertEquals(0.499999, comparator1.getSimilarity(a1, a2), epsilon); assertEquals(0.499999, comparator2.getSimilarity(a1, a2), epsilon); assertEquals(0.632455, comparator1.getSimilarity(b1, b2), epsilon); assertEquals(0.632455, comparator2.getSimilarity(b1, b2), epsilon); idfScores.put("String2", 1.0/2.0); assertEquals(0.499999, comparator1.getSimilarity(a1, a2), epsilon); assertEquals(0.499999, comparator2.getSimilarity(a1, a2), epsilon); assertEquals(0.632455, comparator1.getSimilarity(b1, b2), epsilon); assertEquals(0.632455, comparator2.getSimilarity(b1, b2), epsilon); }
@Test public void testEquals() throws Exception { DataProviderConnection dpc1 = createDPC(); DataProviderConnection dpc2 = createDPC(); assertTrue( dpc1.equals( dpc2 ) ); List<NameValueProperty> aList = Collections.singletonList( new NameValueProperty( "name2", "value2" ) ); dpc1.setAttributeList( aList ); assertFalse( dpc1.equals( dpc2 ) ); dpc2.setAttributeList( aList ); assertTrue( dpc1.equals( dpc2 ) ); dpc2.setName( "other" ); assertFalse( dpc2.equals( dpc1 ) ); }
@Test public void runnerShouldNotBeAddedIfWidgetForThisRunningIsAlreadyCreated() { historyPresenter.addRunner(runner); reset(selectionManager, widgetFactory, view, runnerWidget); historyPresenter.addRunner(runner); verifyNoMoreInteractions(selectionManager, widgetFactory, view, runnerWidget); }
@Test public void shouldSaveCompleteWhenMethodCalled() { mmiaRequisitionFragment.completeSuccess(); String successMessage = mmiaRequisitionFragment.getString(R.string.msg_mmia_submit_tip); assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo(successMessage); assertThat(mmiaRequisitionFragment.getActivity().isFinishing()).isTrue(); }
@Test public void fillTest() { String descriptor = "description1"; String context = "context1"; String key = "Key1"; String configId = "Id1"; String createdAt = "2020-01-22-14-11-20-124"; String lastUpdated = "2020-01-1"; FieldValueModel testFieldValueModel = Mockito.mock(FieldValueModel.class); Map<String, FieldValueModel> keyToValues = new HashMap<>(); keyToValues.put(key, testFieldValueModel); FieldModel testFieldModel = new FieldModel(configId, descriptor, context, createdAt, lastUpdated, keyToValues); FieldModel newTestFieldModel = testFieldModel.fill(testFieldModel); assertEquals(testFieldModel, newTestFieldModel); assertFalse(testFieldModel == newTestFieldModel); assertEquals(descriptor, newTestFieldModel.getDescriptorName()); assertEquals(context, newTestFieldModel.getContext()); assertTrue(newTestFieldModel.getKeyToValues().containsKey(key)); assertEquals(configId, newTestFieldModel.getId()); assertEquals(createdAt, newTestFieldModel.getCreatedAt()); assertEquals(lastUpdated, newTestFieldModel.getLastUpdated()); }
@Test public void groupToRoleMappingShouldBeAbleToHaveMultipleRoles() { when( config.get( SecuritySettings.ldap_authorization_group_to_role_mapping ) ) .thenReturn( "group=role1,role2,role3" ); LdapRealm realm = new LdapRealm( config, securityLog, secureHasher ); assertThat( realm.getGroupToRoleMapping().get( "group" ), equalTo( asList( "role1", "role2", "role3" ) ) ); assertThat( realm.getGroupToRoleMapping().size(), equalTo( 1 ) ); }
@Test public void testBuildWithDisabledSecurityConstraintWithOrderBy() throws Exception { unit.setSecurity(false); DepartmentSpecialty context = new DepartmentSpecialty(); OrderBy orderBy1 = new OrderBy("department", OrderByType.ASC); OrderBy orderBy2 = new OrderBy("specialty", OrderByType.DESC); List<OrderBy> orders = Arrays.asList(orderBy1, orderBy2); String expectedQuery = "SELECT e FROM DepartmentSpecialty e WHERE e.status=:status ORDER BY e.department ASC, e.specialty DESC"; MultiplePagedSearch<DepartmentSpecialty> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); pagedSearch.setOrders(orders); String actualQuery = unit.build(pagedSearch); assertEquals(expectedQuery, actualQuery); }
@Test public void findTransitionalVersion_givenExistingTransitionalCa_returnsTheTransitionalCa() { final CertificateReader certificateReader = mock(CertificateReader.class); when(transitionalCertificateCredential.getParsedCertificate()).thenReturn(certificateReader); when(certificateReader.isCa()).thenReturn(true); when(certificateVersionDataService.findBothActiveCertAndTransitionalCert(CREDENTIAL_NAME)).thenReturn(Arrays.asList(certificateCredential, transitionalCertificateCredential)); when(transitionalCertificateCredential.getCertificate()).thenReturn(SELF_SIGNED_CA_CERT); assertThat(certificateAuthorityService.findTransitionalVersion(CREDENTIAL_NAME).getCertificate(), equalTo(transitionalCertificateCredential.getCertificate())); }
@Test @Description("Verifies that an exception is thrown on opening an InputStream when file does not exists") public void getInputStreamOfNonExistingFileThrowsException() { final File file = new File("fileWhichTotalDoesNotExists"); final ArtifactFilesystem underTest = new ArtifactFilesystem(file, "fileWhichTotalDoesNotExists", new DbArtifactHash("1", "2", "3"), 0L, null); try { underTest.getFileInputStream(); Assertions.fail("Expected a FileNotFoundException because file does not exists"); } catch (final RuntimeException e) { assertThat(e.getCause()).isInstanceOf(FileNotFoundException.class); } }
@Test public void searchShouldWildcardIndices() throws Exception { setup(RestStatus.OK, 25); SortField[] expectedSortFields = { sortBy("sortByStringDesc", SortOrder.DESC), sortBy("sortByIntAsc", SortOrder.ASC), sortBy("sortByUndefinedDesc", SortOrder.DESC) }; final List<String> indices = Arrays.asList("bro", "snort"); SearchRequest searchRequest = new SearchRequest(); searchRequest.setSize(2); searchRequest.setIndices(indices); searchRequest.setFrom(5); searchRequest.setSort(Arrays.asList(expectedSortFields)); searchRequest.setQuery("some query"); SearchResponse searchResponse = dao.search(searchRequest); assertNotNull(searchResponse); ArgumentCaptor<org.elasticsearch.action.search.SearchRequest> argument = ArgumentCaptor .forClass(org.elasticsearch.action.search.SearchRequest.class); verify(requestSubmitter).submitSearch(argument.capture()); org.elasticsearch.action.search.SearchRequest request = argument.getValue(); JSONParser parser = new JSONParser(); JSONObject json = (JSONObject) parser.parse(ElasticsearchUtils.toJSON(request).orElse("???")); String[] expected = {"bro_index*", "snort_index*"}; assertArrayEquals(expected, request.indices()); }
@Test public void toUnixTime() { Assert.assertEquals(1, Utils.toUnixTime(1000)); }
@Test public void setAllSetsAllSpecifiedFieldsWithoutDuplicates() { final Collection<JsonField> fieldsToBeSet = new ArrayList<>(); Collections.addAll(fieldsToBeSet, eddard, cersei, robert, john, cersei, hodor, hodor); underTest.setAll(fieldsToBeSet); assertThat(underTest).containsExactly(eddard, cersei, robert, john, hodor); }
@Test public void when_key_name_empty_expect_correct_getBeanName() { when(annotation.keyName()).thenReturn(""); assertEquals(CDI_BEAN_NAME, ClusterScopeContext.getBeanName(bean, annotation)); }
@Test public void testSetRole_1() throws Exception { AgentStatusReporter fixture = new AgentStatusReporter("", "", "", "", "", "", "", "", "", "", "", ""); String role = ""; fixture.setRole(role); }
@Test public void testFormatMessage_ThrowableNullMessage() { CompactFormatter cf = new CompactFormatter(); String result = cf.formatMessage(new Throwable()); String expect = Throwable.class.getSimpleName(); assertEquals(expect, result); }
@Test public void should_configure_value_property_of_container_with_$item_when_generating_a_multiple_string_in_a_multiple_node_contract_input() throws Exception { ContractInputToWidgetMapper contractInputToWidgetMapper = makeContractInputToWidgetMapper(); ContractInput contractInput = aContractInput("names").mulitple().withType(String.class.getName()).build(); aNodeContractInput("employee").mulitple() .withInput(contractInput).build(); Element container = contractInputToWidgetMapper.toElement(contractInput, new ArrayList<List<Element>>()); assertThat(container).isInstanceOf(Container.class); PropertyValue repeatedCollectionPropetyValue = container.getPropertyValues().get("repeatedCollection"); assertThat(repeatedCollectionPropetyValue.getType()).isEqualTo("variable"); assertThat(repeatedCollectionPropetyValue.getValue()).isEqualTo("$item.names"); }
@Test public void testHasPermission_3args_read() { EasyMock.<Collection<? extends GrantedAuthority>>expect(mockAuthentication.getAuthorities()).andReturn(grantedAuthorities); replay(mockAuthentication, mockCategoryRepository); assertThat(defaultCategoryPermissionEvaluator.hasPermission(mockAuthentication, category, ModelPermissionEvaluator.Permission.READ), is(true)); verify(mockAuthentication, mockCategoryRepository); }
@Test public void shouldAllowNextToBeCalledWithoutHavingCalledHasNext() throws Exception { Range<Integer> range = new IntegerRange(0, 3); Iterator<Integer> iterator = range.iterator(); assertThat(iterator.next(), is(0)); assertThat(iterator.next(), is(1)); assertThat(iterator.next(), is(2)); }
@Test public void testExecuteMelee() { DiamondFist gun = newGun(true, false); mockMelee(gun); gun.execute(); verify(gunDataManager).execute(anyInt(), anyLong(), anyDouble(), anyDouble(), (Point2D.Double) any(), anyBoolean(), anyBoolean()); verify(diamond).setTurnGunRightRadians(anyDouble()); }
@Test public void test3() throws Exception { FakeSocket fake = new FakeSocket(k.toXML()); KVMessage q = new KVMessage(fake, 100); assertEquals( q.toXML(), "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<KVMessage type=\"putreq\">\n<Key>I like pie</Key>\n<Value>I like cake</Value>\n</KVMessage>\n"); }
@Test public void testName() throws Exception { DbColumnMeta columnMeta = new DbColumnMeta(); columnMeta.setName("HOGE"); columnMeta.setTypeName("varchar"); AttributeDesc attributeDesc = factory.getAttributeDesc( new DbTableMeta(), columnMeta); assertEquals("hoge", attributeDesc.getName()); }
@Test(expectedExceptions = IllegalArgumentException.class) public void testRangeNegative2() { range(0, -1); }
@Test public void mergeAddAddEmptyInternalDoc() throws Exception { final DocumentNodeStore store = builderProvider.newBuilder().getNodeStore(); store.setEnableConcurrentAddRemove(true); SingleInstanceConflictUtility.generateConflict(store, new String[]{":1", ":a"}, new String[]{}, new String[]{":2", ":b"}, new String[]{}, new String[]{":3", ":a", ":b"}, new String[]{}, true, "Add-add merge conflicts for internal docs should be resolvable"); }
@Test public void testNMAuditLoggerWithIP() throws Exception { Configuration conf = new Configuration(); RPC.setProtocolEngine(conf, TestRpcService.class, ProtobufRpcEngine2.class); MyTestRPCServer serverImpl = new MyTestRPCServer(); BlockingService service = TestRpcServiceProtos.TestProtobufRpcProto .newReflectiveBlockingService(serverImpl); Server server = new RPC.Builder(conf) .setProtocol(TestRpcBase.TestRpcService.class) .setInstance(service).setBindAddress("0.0.0.0") .setPort(0).setNumHandlers(5).setVerbose(true).build(); server.start(); InetSocketAddress addr = NetUtils.getConnectAddress(server); TestRpcService proxy = RPC.getProxy(TestRpcService.class, TestProtocol.versionID, addr, conf); TestProtos.EmptyRequestProto pingRequest = TestProtos.EmptyRequestProto.newBuilder().build(); proxy.ping(null, pingRequest); server.stop(); RPC.stopProxy(proxy); }
@Test public void testGetMissingNetwork() { String network = "network1"; String key = "foo/bar"; try (Response response = getTarget(network, key).get()) { assertThat(response.getStatus(), equalTo(NOT_FOUND.getStatusCode())); } }
@Test public void setXClassReference() { BaseObject baseObject = new BaseObject(); DocumentReference documentReference = new DocumentReference("wiki", "space", "page"); baseObject.setDocumentReference(documentReference); DocumentReference classReference = new DocumentReference("otherwiki", "space", "class"); baseObject.setXClassReference(classReference); assertEquals(new DocumentReference("wiki", "space", "class"), baseObject.getXClassReference()); assertEquals(new EntityReference("class", EntityType.DOCUMENT, new EntityReference("space", EntityType.SPACE)), baseObject.getRelativeXClassReference()); }
@Test public void testNoPasswordConfigured() { try { new AdminServerCredentialVerifier(new AdminServerConfig(), HTTP_SERVER_CONFIG) .authenticate(SECURITY_CONTEXT_DENY, null); fail("Expected WebApplicationException"); } catch (WebApplicationException e) { assertEquals(e.getResponse().getStatus(), 403); } }
@Test public void testGetStroke() { StrokeMap m1 = new StrokeMap(); assertEquals(null, m1.getStroke("A")); m1.put("A", new BasicStroke(1.1f)); assertEquals(new BasicStroke(1.1f), m1.getStroke("A")); m1.put("A", null); assertEquals(null, m1.getStroke("A")); try { m1.getStroke(null); fail("IllegalArgumentException should have been thrown on null argument"); } catch (IllegalArgumentException e) { assertEquals("Null 'key' argument.", e.getMessage()); } }
@Test public final void testEvaluate() { String outGroup = "outgroup"; MCRGroupClause groupClause = new MCRGroupClause(INGROUP_NAME, false); assertTrue("Did not accept " + INGROUP_NAME, groupClause.evaluate(null)); groupClause = new MCRGroupClause(outGroup, true); assertTrue("Did not accept " + outGroup, groupClause.evaluate(null)); }
@Test public void testIfModifiedSince() { Date ifModifiedSince = new Date(999999l); org.jclouds.blobstore.options.GetOptions in = new org.jclouds.blobstore.options.GetOptions(); in.ifModifiedSince(ifModifiedSince); GetOptions expected = new GetOptions(); expected.ifModifiedSince(ifModifiedSince); assertEquals(fn.apply(in), expected); }
@Test public void publishNoPublishToInactiveSession() { ISubscriptionsDirectory mockedSubscriptions = mock(ISubscriptionsDirectory.class); Subscription inactiveSub = new Subscription("Subscriber", new Topic("/topic"), MqttQoS.AT_LEAST_ONCE); List<Subscription> inactiveSubscriptions = Collections.singletonList(inactiveSub); when(mockedSubscriptions.matches(eq(new Topic("/topic")))).thenReturn(inactiveSubscriptions); m_processor = new ProtocolProcessor(); m_processor.init(mockedSubscriptions, m_messagesStore, m_sessionStore, null, true, new PermitAllAuthorizator(), NO_OBSERVERS_INTERCEPTOR, this.sessionsRepository); m_processor.sessionsRepository.createNewSession("Subscriber", false); connectAsClient("Publisher"); publishToAs("Publisher", "/topic", AT_MOST_ONCE, true); verifyNoPublishIsReceived(); }
@Test public void testEmptySelector() { final ClassType studentType = provider.getClassType("Student"); final SemanticSelector selector = generateEmptySelectorMap(); final Map<Type, SelectorQueryPlan> queryPlan = defaultSelectorQueryEngine.assembleQueryPlan(selector); assertNotNull(queryPlan); SelectorQueryPlan plan = queryPlan.get(studentType); assertTrue("should be true", plan.getIncludeFields().isEmpty()); assertTrue("should be true", plan.getExcludeFields().isEmpty()); assertTrue("should be true", plan.getChildQueryPlans().isEmpty()); assertNotNull("Should not be null", plan.getQuery()); }
@Test public void testSetCommandHandlingAdapterInstanceWithLifespanSucceeds(final VertxTestContext ctx) { final String deviceId = "testDevice"; final String adapterInstance = "adapterInstance"; info.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstance, Duration.ofSeconds(10), span) .onComplete(ctx.succeeding(result -> ctx.completeNow())); }
@Test public void createBackground() throws Exception { Background backgroundRetrieved = scenarioSimulationBuilder.createBackground(contextMock, ScenarioSimulationModel.Type.RULE, VALUE); assertNotNull(backgroundRetrieved); assertEquals(ruleBackgroundMock, backgroundRetrieved); backgroundRetrieved = scenarioSimulationBuilder.createBackground(contextMock, ScenarioSimulationModel.Type.DMN, VALUE); assertNotNull(backgroundRetrieved); assertEquals(dmnBackgroundMock, backgroundRetrieved); }
@Test public void parseCacheHeaders_serverRelative() { long now = System.currentTimeMillis(); headers.put("Date", rfc1123Date(now + ONE_HOUR_MILLIS)); headers.put("Expires", rfc1123Date(now + 4 * ONE_HOUR_MILLIS)); Cache.Entry entry = HttpHeaderParser.parseCacheHeaders(response); assertEqualsWithin(now + 3 * ONE_HOUR_MILLIS, entry.ttl, ONE_MINUTE_MILLIS); assertEquals(entry.softTtl, entry.ttl); }
@Test(expected = IllegalArgumentException.class) public void fileNameToTimeEmptyFileName() { HDFSOffsetWriter.fileNameToPersistenceTime(""); }
@Test public void set_intersection_1() { Set<Integer> x1 = set(1,2,3) ; Set<Integer> x2 = set(1,2,3) ; Set<Integer> x3 = SetUtils.intersection(x1, x2) ; test(x3, 1,2,3) ; x3 = SetUtils.intersection(x2, x1) ; test(x3, 1,2,3) ; }
@Test void can_parse_classpath_form() { URI uri = GluePath.parse("classpath:com/example/app"); assertAll( () -> assertThat(uri.getScheme(), is("classpath")), () -> assertThat(uri.getSchemeSpecificPart(), is("com/example/app"))); }
@Test public void testFindByTypeLanguage() { Collection<MessageTemplate> coll = dao.findByTypeAndLanguage(MessageTemplate.TYPE_SYSTEM,"en", 1L); Assert.assertEquals(4, coll.size()); coll = dao.findByTypeAndLanguage("xxx","en", 1L); Assert.assertEquals(0, coll.size()); }
@Test public void shouldToReturnDateDecoratorWhenDateDelimitedField(){ Class<?> decorator = annotationFieldManager.getClassDecorator(DateDelimitedField.class); Truth.assert_().that(decorator).isEqualTo(InternalDateDecorator.class); }
@Test public void testClear() { ViewModelStore store = new ViewModelStore(); TestViewModel viewModel1 = new TestViewModel(); TestViewModel viewModel2 = new TestViewModel(); store.put("a", viewModel1); store.put("b", viewModel2); assertThat(viewModel1.mCleared, is(false)); assertThat(viewModel2.mCleared, is(false)); store.clear(); assertThat(viewModel1.mCleared, is(true)); assertThat(viewModel2.mCleared, is(true)); assertThat(store.get("a"), nullValue()); assertThat(store.get("b"), nullValue()); }
@Test public void checkCheckedException() throws IOException { HttpAdapterResponse response = Mockito.mock(HttpAdapterResponse.class); Mockito.when(response.body()).thenReturn(""); Mockito.when(response.code()).thenReturn(599); RuntimeException exception = stub.handleError(null, response); Assert.assertTrue(exception instanceof ClientException); Assert.assertTrue(exception.getCause() instanceof IOException); }
@Test public void testGetDataFile_ById() { final String sql = "select f from DataFile f where f.id = ?1"; final int id = 23; final DataFile dataFile = createDataFile(id); when(persistenceManager.pick(sql, id)).thenReturn(dataFile); final DataFile toolStorageDatafile = jpaStorage.getDatafile(id); assertNotNull(toolStorageDatafile); assertEquals(id, toolStorageDatafile.getId()); assertEquals("something", toolStorageDatafile.getPath()); verify(persistenceManager, times(1)).pick(sql, id); verifyNoMoreInteractions(persistenceManager); }
@Test void isEndpointAccessible_Unconfirmed_true() { when(aspspProfileService.isAuthorisationConfirmationRequestMandated()) .thenReturn(true); when(authorisationService.getAuthorisationById(AUTHORISATION_ID)) .thenReturn(Optional.of(buildAccountConsentAuthorization(ScaStatus.UNCONFIRMED, ScaApproach.REDIRECT))); boolean actual = aisEndpointAccessCheckerService.isEndpointAccessible(AUTHORISATION_ID, true); assertTrue(actual); }
@Test public void testgetContentAsString_StringNull() throws FileSystemException, IOException { Assert.assertEquals("This is a test file.", FileObjectUtils.getContentAsString( VFS.getManager().toFileObject(new File("src/test/resources/test-data/read-tests/file1.txt")), (String) null)); }
@Test public void testReduceMonoidOfT() { assertThat(just.foldLeft(Monoid.of(1, Semigroups.intMult)),equalTo(10)); }
@Test public void generateBucketValueForNegativeHashCodes() throws Exception { int actual = algorithm.generateBucketValue(-1); assertTrue("generated bucket value is not in range: " + actual, actual > 0 && actual < Bucketer.MAX_TRAFFIC_VALUE); }
@Test public void doTest() { final TraversalStrategies strategies = new DefaultTraversalStrategies(); strategies.addStrategies(RepeatUnrollStrategy.instance()); for (final TraversalStrategy strategy : this.otherStrategies) { strategies.addStrategies(strategy); } this.original.asAdmin().setStrategies(strategies); this.original.asAdmin().applyStrategies(); assertEquals(this.optimized, this.original); }
@Test public void checkSetTitleWithoutHasName() { final HasName mockHasName = new MockHasName("name"); hasName = Optional.empty(); header.setTitle("new-name"); assertEquals("name", mockHasName.getName().getValue()); }
@Test public void testConvert() throws Exception { String name = "first blood"; Long subjectTypeId = 1L; SubjectType subjectType = new SubjectType(); subjectType.setId(subjectTypeId); Subject expected = new Subject(); expected.setName(name); expected.setSubjectType(subjectType); SubjectResource source = new SubjectResource(); source.setName(name); source.setSubjectTypeId(subjectTypeId); Subject actual = unit.convert(source); assertEquals(expected, actual); }
@Test public void convertCcJudgmentKeywords() { int idOne = 5; int idTwo = 15; JudgmentKeyword keywordOne = new JudgmentKeyword(CourtType.COMMON, "słowo kluczowe"); Whitebox.setInternalState(keywordOne, "id", idOne); JudgmentKeyword keywordTwo = new JudgmentKeyword(CourtType.COMMON, "fajne słowo kluczowe"); Whitebox.setInternalState(keywordTwo, "id", idTwo); List<JudgmentKeyword> judgmentKeywords = Arrays.asList(keywordOne, keywordTwo); List<SimpleKeyword> convertedSimpleKeywords = simpleKeywordConverter.convertJudgmentKeywords(judgmentKeywords); assertEquals(2, convertedSimpleKeywords.size()); assertEquals(idOne, convertedSimpleKeywords.get(0).getId()); assertEquals(judgmentKeywords.get(0).getPhrase(), convertedSimpleKeywords.get(0).getPhrase()); assertEquals(idTwo, convertedSimpleKeywords.get(1).getId()); assertEquals(judgmentKeywords.get(1).getPhrase(), convertedSimpleKeywords.get(1).getPhrase()); }
@Test public void filterEvent() { assertEquals(NotificationFilter.FilterPolicy.NO_EFFECT, tagNotificationFilter.filterEvent(null, null, null, null)); }
@Test public void testSharedPackageNameSingleClass() throws Exception { String packageName = PackageUtils.getSharedPackageName( Collections.singletonList(this.getClass())); assertEquals(this.getClass().getPackage().getName(), packageName); }
@Test public void addFriendTest() { assertTrue(String.format("expected id to be %d but it was %d instead", TEST_ID, friendApi.addFriend(TEST_FROM, friend).getId()), friendApi.addFriend(TEST_FROM, friend).getId() == TEST_ID); }
@Test public void duplicate_set_is_invalid() { IamRolePermission a = new IamRolePermission(); a.setAccountId("123"); a.setIamRoleName("abc"); IamRolePermission b = new IamRolePermission(); b.setAccountId("123"); b.setIamRoleName("ABC"); Assert.assertFalse(subject.isValid(Sets.newSet(a, b), mockConstraintValidatorContext)); }
@Test public void Should_stopSequenceWhenClosed() throws Exception { Should_startDebugging(); session.close(); verify(debuggerSequenceMock).stop(); }
@Test public void testStopServiceTaskDag() { Service s1 = Service.builder() .setName("s1") .setProvisionerActions(ImmutableMap.<ProvisionerAction, ServiceAction>of( ProvisionerAction.START, CHEF_ACTION, ProvisionerAction.STOP, CHEF_ACTION)) .build(); Service s2 = Service.builder() .setName("s2") .setDependencies(ServiceDependencies.runtimeRequires("s1")) .setProvisionerActions(ImmutableMap.<ProvisionerAction, ServiceAction>of( ProvisionerAction.START, CHEF_ACTION, ProvisionerAction.STOP, CHEF_ACTION)) .build(); Service s3 = Service.builder() .setName("s3") .setDependencies(ServiceDependencies.runtimeRequires("s1", "s2")) .setProvisionerActions(ImmutableMap.<ProvisionerAction, ServiceAction>of( ProvisionerAction.START, CHEF_ACTION, ProvisionerAction.STOP, CHEF_ACTION)) .build(); Node node1 = new Node("node1", "1", ImmutableSet.<Service>of(s1), NodeProperties.builder().setHostname("host1").addIPAddress("access_v4", "ip1").build()); Node node2 = new Node("node2", "1", ImmutableSet.<Service>of(s1, s2, s3), NodeProperties.builder().setHostname("host2").addIPAddress("access_v4", "ip2").build()); Set<Node> clusterNodes = ImmutableSet.of(node1, node2); ClusterJob job = new ClusterJob(JobId.fromString("123-001"), ClusterAction.STOP_SERVICES); JobPlanner planner = new JobPlanner(job, clusterNodes); TaskDag expected = new TaskDag(); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName()), new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s1.getName())); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s3.getName()), new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName())); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName()), new TaskNode(node1.getId(), ProvisionerAction.STOP.name(), s1.getName())); Assert.assertEquals(expected, planner.createTaskDag()); job = new ClusterJob(JobId.fromString("123-002"), ClusterAction.STOP_SERVICES, ImmutableSet.of(s2.getName()), null); planner = new JobPlanner(job, clusterNodes); expected = new TaskDag(); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s3.getName()), new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName())); Assert.assertEquals(expected, planner.createTaskDag()); job = new ClusterJob(JobId.fromString("123-002"), ClusterAction.STOP_SERVICES, ImmutableSet.of(s1.getName()), null); planner = new JobPlanner(job, clusterNodes); expected = new TaskDag(); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s3.getName()), new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName())); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName()), new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s1.getName())); expected.addDependency(new TaskNode(node2.getId(), ProvisionerAction.STOP.name(), s2.getName()), new TaskNode(node1.getId(), ProvisionerAction.STOP.name(), s1.getName())); Assert.assertEquals(expected, planner.createTaskDag()); }
@Test public void buildShouldThrowOnEmptyHumanReadableText() { expectedException.expect(IllegalStateException.class); MDN.builder() .humanReadableText("") .report(MINIMAL_REPORT) .build(); }
@Test public void testCompareTo_Greater() { LdapRdnComponent component1 = new LdapRdnComponent("sn", "doe"); LdapRdnComponent component2 = new LdapRdnComponent("cn", "john doe"); int result = component1.compareTo(component2); assertThat(result > 0).isTrue(); }
@Test public void testMultipleRequestedServedAfterBlocked() throws Exception { final int n = 3; final int smallSize = 1024; final int largeSize = n * smallSize; final long capacity = n * smallSize; final long maxBlockTimeInMs = 200; SimpleByteBufferPool pool = new SimpleByteBufferPool(capacity); CountDownLatch largeAllocated = new CountDownLatch(1); CountDownLatch largeUsed = new CountDownLatch(1); CountDownLatch smallAllocated = new CountDownLatch(n); CountDownLatch smallUsed = new CountDownLatch(n); BufferConsumer largeConsumer = new BufferConsumer(largeSize, maxBlockTimeInMs, pool, largeAllocated, largeUsed); new Thread(largeConsumer).start(); if (!largeAllocated.await(100, TimeUnit.MILLISECONDS)) { fail("SimpleByteBufferPool takes too long time to allocate a buffer to largeConsumer."); } assertEquals(0, pool.availableMemory()); BufferConsumer[] smallConsumers = new BufferConsumer[n]; Thread[] smallConsumerThreads = new Thread[n]; for (int i = 0; i < n; i++) { smallConsumers[i] = new BufferConsumer(smallSize, maxBlockTimeInMs, pool, smallAllocated, smallUsed); smallConsumerThreads[i] = new Thread(smallConsumers[i]); smallConsumerThreads[i].start(); } largeUsed.countDown(); if (!smallAllocated.await(100, TimeUnit.MILLISECONDS)) { fail("SimpleByteBufferPool takes too long time to allocate a buffer to smallConsumer."); } assertEquals(0, pool.availableMemory()); for (int i = 0; i < n; i++) { smallUsed.countDown(); } for (int i = 0; i < n; i++) { smallConsumerThreads[i].join(); } assertEquals(capacity, pool.availableMemory()); if (largeConsumer.exception != null) { throw largeConsumer.exception; } for (int i = 0; i < n; i++) { if (smallConsumers[i].exception != null) { throw smallConsumers[i].exception; } } }
@Test public void get_apps_directory() { AppGlobalContext context = new AppGlobalContext("c:/blocklang"); assertThat(context.getAppsDirectory().compareTo(Paths.get("c:/blocklang/apps"))).isEqualTo(0); }
@Test public void testWithEmitterWithSharedState() { AtomicInteger shared = new AtomicInteger(); Multi<Integer> multi = Multi.createBy().repeating() .<AtomicInteger, Integer> uni(() -> shared, (state, emitter) -> emitter.complete(state.incrementAndGet())) .atMost(2); assertThat(shared).hasValue(0); MultiAssertSubscriber<Integer> subscriber = multi.subscribe() .withSubscriber(MultiAssertSubscriber.create(1)); subscriber.assertReceived(1); assertThat(shared).hasValue(1); subscriber.request(1); subscriber.assertCompletedSuccessfully().assertReceived(1, 2); }
@Test(expected = Test.None.class) public void testBatchMultinomial() throws Exception { System.out.println("---Batch Multinomial---"); MathEx.setSeed(19650218); int[] prediction = CrossValidation.classification(10, Movie.x, Movie.y, (x, y) -> { DiscreteNaiveBayes bayes = new DiscreteNaiveBayes(DiscreteNaiveBayes.Model.MULTINOMIAL, 2, Movie.feature.length); bayes.update(x, y); return bayes; }); int nulls = (int) Arrays.stream(prediction).filter(y -> y == Integer.MIN_VALUE).count(); int error = Error.of(Movie.y, prediction) - nulls; System.out.format("Error = %d out of %d%n", error, Movie.x.length - nulls); assertEquals(316, error); DiscreteNaiveBayes model = new DiscreteNaiveBayes(DiscreteNaiveBayes.Model.MULTINOMIAL, 2, Movie.feature.length); model.update(Movie.x, Movie.y); java.nio.file.Path temp = smile.data.Serialize.write(model); smile.data.Serialize.read(temp); }
@Test public void twoTasksWithSubtasksRelatedWithStartStart() { givenTwoTasksWithSubtasksRelatedWithStartStart(4, 3, 5, 6); List<ITaskFundamentalProperties> criticalPath = buildCalculator().calculateCriticalPath(diagramGraphExample); assertThat(criticalPath.size(), equalTo(2)); for (ITaskFundamentalProperties task : criticalPath) { assertThat(daysBetweenStartAndEnd(task), anyOf(equalTo(5), equalTo(6))); } }
@Test public void testNotNull_trueValue() { notNull("foo", "The param must be null"); }
@Test public void test() { assertAll( () -> assertThrows(IllegalArgumentException.class, () -> NonEmptyList.of(null)), () -> assertThrows(IllegalArgumentException.class, () -> NonEmptyList.of(ImmutableList.empty())), () -> assertDoesNotThrow(() -> NonEmptyList.of(1)) ); }
@Test public void copyFilesFromJar_nullOutputDirectory() { expectedException.expect(NullPointerException.class); jarContentsManager.copyFilesFromJarTrimmingBasePath(testJar, null, null); }
@Test public void shouldObtainCollectionSize() throws Exception { final String size = this.reader.getCollectionSize(); Assert.assertEquals("42", size); }
@Test public void testGetId() { assertNotNull(trade.getId()); }
@Test public void shouldAcceptStrongPassword() { for (int i = 0; i < 1000; i++) { final char[] pw = generatedPassword( TokenPinPolicy.MIN_PASSWORD_LENGTH + i / 10, UPPERCASE_LETTERS, LOWERCASE_LETTERS, DIGITS, SPECIAL_CHARS); assertTrue(TokenPinPolicy.validate(pw)); } }
@Test public void shuffleAndDealHands() { var jdkHands = this.jdkDeck.shuffleAndDeal(new Random(1), 5, 5); var acHands = this.acDeck.shuffleAndDeal(new Random(1), 5, 5); Assert.assertEquals(jdkHands, acHands); }
@Test void testConvertObjectToMetaDataValueUsesSerializer() { TestObject testObject = new TestObject("some-text"); MetaDataValue result = testSubject.convertToMetaDataValue(testObject); verify(serializer).serialize(testObject, byte[].class); SerializedObject resultBytes = result.getBytesValue(); assertEquals(TestObject.class.getName(), resultBytes.getType()); assertNotNull(resultBytes.getData()); assertEquals("", resultBytes.getRevision()); }
@Test public void testGetConfigFile() throws Exception { String someNamespace = "someName"; ConfigFileFormat someConfigFileFormat = ConfigFileFormat.Properties; ConfigFile configFile = defaultConfigManager.getOrCreateConfigFile(someNamespace, someConfigFileFormat); assertEquals(someConfigFileFormat, configFile.getConfigFileFormat()); assertEquals(someConfigContent, configFile.getContent()); }
@Test public void testExecuteSnapshotDefaultDevelopmentVersion_MapDevelopment() throws Exception { MapVersionsPhase phase = (MapVersionsPhase) lookup( ReleasePhase.class, TEST_MAP_DEVELOPMENT_VERSIONS ); List<MavenProject> reactorProjects = Collections.singletonList( createProject( "artifactId", "1.2-SNAPSHOT" ) ); ReleaseDescriptorBuilder builder = new ReleaseDescriptorBuilder(); builder.setDefaultDevelopmentVersion( "1.1.1-SNAPSHOT" ); phase.execute( ReleaseUtils.buildReleaseDescriptor( builder ), new DefaultReleaseEnvironment(), reactorProjects ); assertNull( "Check release versions", ReleaseUtils.buildReleaseDescriptor( builder ).getProjectReleaseVersion( "groupId:artifactId" ) ); assertEquals( "Check development versions", "1.1.1-SNAPSHOT" , ReleaseUtils.buildReleaseDescriptor( builder ).getProjectDevelopmentVersion("groupId:artifactId") ); }
@Test public void shouldThrowCorrectExceptionIfClobIsLargerThanMaximum() throws SQLException { CLOB clob = mock(CLOB.class); when(clob.length()).thenReturn(10001l); expectedEx.expect(UnsupportedOperationException.class); expectedEx.expectMessage("Clobs larger than 10000 bytes are not supported by DBFIT"); new OracleClobNormaliser().transform(clob); }
@Test public void testIntersectionExpressionInfix() throws IOException { Optional<ASTExpression> a = parser.parse_StringExpression("a"); Optional<ASTExpression> b = parser.parse_StringExpression("b"); assertFalse(parser.hasErrors()); assertTrue(a.isPresent()); assertTrue(b.isPresent()); ASTIntersectionExpressionInfix result = SetExpressionsMill.intersectionExpressionInfixBuilder() .setLeft(a.get()) .setOperator("intersect") .setRight(b.get()) .build(); String output = prettyPrinter.prettyprint(result); assertEquals("a intersect b", output); }
@Test public void testThatInstancesCanBeCreatedFromFormParametersAndFileItems() { FakeContext context = new FakeContext() .setFormField("name", "wisdom") .setFormField("id", "0") .setFormField("time", "1000") .setFormField("flavors", "a", "b") .setFormField("item", new File("src/test/resources/a_file.txt")) .setFormField("content", new File("src/test/resources/a_file.txt")) .setFormField("stream", new File("src/test/resources/a_file.txt")) .setFormField("file_not_bound", new File("src/test/resources/a_file.txt")); context.route(route); context.getFakeRequest().uri("/post/2"); BodyWithFiles body = parser.invoke(context, BodyWithFiles.class); assertThat(body.name).isEqualToIgnoringCase("wisdom"); assertThat(body.id).isEqualTo(0); assertThat(body.time).isEqualTo(1000l); assertThat(body.flavors).containsExactly("a", "b"); assertThat(body.item).isNotNull(); assertThat(body.item.name()).isEqualTo("a_file.txt"); assertThat(body.item.size()).isEqualTo(29); assertThat(body.content).isNotEmpty().hasSize(29); assertThat(body.stream).isNotNull(); }
@Test public void testConvertCloudResponseNullResponse() { ParseHttpClient restClient = mock(ParseHttpClient.class); ParseCloudCodeController controller = new ParseCloudCodeController(restClient); Object result = controller.convertCloudResponse(null); assertNull(result); }
@Test public void analyze06() throws Exception { final JavaAnalyzer analyzer = getAnalyzer(); final String cp = getClasspath(); List<File> files = new ArrayList<>(); final File file = new File(project.getProjectRootPath(), "./src/test/java/meghanada/Gen6.java"); assertTrue(file.exists()); files.add(file); final String tmp = System.getProperty("java.io.tmpdir"); timeIt( () -> { final CompileResult compileResult = analyzer.analyzeAndCompile(files, cp, tmp); compileResult.getSources().values().forEach(Source::dump); return compileResult; }); timeIt( () -> { return analyzer.analyzeAndCompile(files, cp, tmp); }); }
@Test public void testReadValidPacketWithGarbage() { String data = "00180123456789ABCDEF\tdevice\ngarbage"; String result = AdbMonitor.readPacket(toByteBuffer(data)); Assert.assertEquals("0123456789ABCDEF\tdevice\n", result); }
@Test public void testQuotesAndParam() { Locale.setDefault(Locale.GERMANY); Assert.assertEquals("Hallo 'Test'", I18N.tr("helloQuotesParam", "Test")); }
@Test public void comment() throws FormatterException { assertThat(ModifierOrderer.reorderModifiers("staticabstractpublic").getText()) .isEqualTo("publicabstractstatic"); }
@Test public void testPing() { Map<UUID, List<UUID>> procIds = Collections.emptyMap(); wrapper.ping(procIds); verify(delegate).ping(eq(procIds)); }
@Test public void wrong_keyword() throws Exception { UastNode caseNode = node(Sets.newHashSet(UastNode.Kind.DEFAULT_CASE, UastNode.Kind.CASE), keyword("case"), token(":")); UastNode node = node(UastNode.Kind.SWITCH, caseNode); Validator.ValidationException exception = assertThrows(Validator.ValidationException.class, () -> validate(node)); assertThat(exception.getMessage()).isEqualTo("DefaultCaseValidator at line 1: Expected 'default' as keyword but got 'case'."); }
@Test public void testProxies() { String oldSettingsXmlPath = System.getProperty( CUSTOM_SETTINGS_PROPERTY ); try { if (oldSettingsXmlPath != null) { System.clearProperty( CUSTOM_SETTINGS_PROPERTY ); } MavenSettings.reinitSettingsFromString(EMPTY_SETTINGS); final MavenRequest mavenRequest = createMavenRequest(null); final MavenEmbedder embedder = new MavenEmbedderWithProxyMock( mavenRequest ); final MavenExecutionRequest request = embedder.getMavenExecutionRequest(); assertNotNull( request ); final List<Proxy> proxies = request.getProxies(); assertEquals( 1, proxies.size() ); assertEquals( "MyProxy", proxies.get(0).getId() ); } catch ( MavenEmbedderException mee ) { fail( mee.getMessage() ); } finally { if (oldSettingsXmlPath != null) { System.setProperty( CUSTOM_SETTINGS_PROPERTY, oldSettingsXmlPath ); } MavenSettings.reinitSettings(); } }
@Test public void shouldEncodeUtf8ToAscii() { assertThat(udf.encode("Example!", "utf8", "ascii"), is("Example!")); assertThat(udf.encode("Plant trees", "utf8", "ascii"), is("Plant trees")); assertThat(udf.encode("1 + 1 = 1", "utf8", "ascii"), is("1 + 1 = 1")); assertThat(udf.encode("Ελλάδα", "utf8", "ascii"), is("������������")); assertThat(udf.encode("Übermensch", "utf8", "ascii"), is("��bermensch")); }
@Test @RunWithCustomExecutor public void testOptimisticLockOK() throws InvalidParseOperationException, BadRequestException, DatabaseException, InvalidCreateOperationException, VitamDBException, SchemaValidationException { VitamConfiguration.setOptimisticLockSleepTime(10); VitamConfiguration.setOptimisticLockRetryNumber(5); VitamThreadUtils.getVitamSession().setTenantId(TENANT_ID); assertEquals(0, vitamCollection.getCollection().countDocuments()); final ArrayNode datas = JsonHandler.createArrayNode(); datas.add(getNewDocument(GUIDFactory.newGUID().toString(), "Optimistic lock test", 3)); final Insert insert = new Insert(); insert.setData(datas); final DbRequestResult insertResult = new DbRequestSingle(vitamCollection, Collections::emptyList).execute(insert, 0, mock(DocumentValidator.class)); assertEquals(1, insertResult.getCount()); assertEquals(1, vitamCollection.getCollection().countDocuments()); insertResult.close(); CountDownLatch countDownLatch = new CountDownLatch(5); VitamThreadFactory.getInstance().newThread(() -> update(countDownLatch, 1)).start(); VitamThreadFactory.getInstance().newThread(() -> update(countDownLatch, 2)).start(); VitamThreadFactory.getInstance().newThread(() -> update(countDownLatch, 3)).start(); VitamThreadFactory.getInstance().newThread(() -> update(countDownLatch, 4)).start(); VitamThreadFactory.getInstance().newThread(() -> update(countDownLatch, 5)).start(); try { countDownLatch.await(30, TimeUnit.SECONDS); } catch (InterruptedException e) { fail("OptimisticLock KO : " + e.getMessage()); } Document document = (Document) vitamCollection.getCollection().find(new Document("Numero", 3)).first(); assertThat(document.getString("Title")).contains("thread_"); assertThat(document.getInteger("_v")).isEqualTo(5); }
@Test public void testColSums() { System.out.println("colSums"); double[][] A = { {0.7220180, 0.07121225, 0.6881997}, {-0.2648886, -0.89044952, 0.3700456}, {-0.6391588, 0.44947578, 0.6240573} }; double[] r = {-0.1820294, -0.3697615, 1.6823026}; double[] result = MathEx.colSums(A); for (int i = 0; i < r.length; i++) { assertEquals(result[i], r[i], 1E-7); } }
@Test public void testUaaAuthFalseLdapFalse() { managers[0].setAuthenticationManager(authenticateFalse); managers[1].setAuthenticationManager(authenticateFalse); Authentication result = authMgr.authenticate(failure); assertNull(result); verify(authenticateFalse, times(2)).authenticate(any(Authentication.class)); verify(loginAuthenticationManager, times(0)).authenticate(any(Authentication.class)); }
@Test public void subtract() { ArrayList<String> l0 = CollectionUtils.newArrayList("00", "01", "02"); ArrayList<String> l1 = CollectionUtils.newArrayList("00", "11", "12"); Collection subtractNullNull = CollectionUtils.subtract(null, null); Collection subtractL0Null = CollectionUtils.subtract(l0, null); Collection subtractNullL1 = CollectionUtils.subtract(null, l1); Collection subtractL0L1 = CollectionUtils.subtract(l0, l1); System.out.println(subtractNullNull); System.out.println(subtractL0Null); System.out.println(subtractNullL1); System.out.println(subtractL0L1); Assert.assertNotSame(l0, subtractL0Null); }
@Test public void testCorsFilterOnApiPath() throws Exception { props.getCors().setAllowedOrigins(Collections.singletonList("*")); props.getCors().setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE")); props.getCors().setAllowedHeaders(Collections.singletonList("*")); props.getCors().setMaxAge(1800L); props.getCors().setAllowCredentials(true); MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new WebConfigurerTestController()) .addFilters(webConfigurer.corsFilter()) .build(); mockMvc.perform( options("/api/test-cors") .header(HttpHeaders.ORIGIN, "other.domain.com") .header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "POST")) .andExpect(status().isOk()) .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, "other.domain.com")) .andExpect(header().string(HttpHeaders.VARY, "Origin")) .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, "GET,POST,PUT,DELETE")) .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, "true")) .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_MAX_AGE, "1800")); mockMvc.perform( get("/api/test-cors") .header(HttpHeaders.ORIGIN, "other.domain.com")) .andExpect(status().isOk()) .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, "other.domain.com")); }
@Test void testIsPrunedForMessageWithPrunableEncryptedDataAndWithoutPublicData() { boolean pruned = table.isPruned(data.MESSAGE_11.getId(), false, true); assertTrue(pruned); }
@Test public void shouldMarkAllActionsAsInactiveWhenPNCIsClosed() { when(allMothers.findByCaseId("entity id 1")).thenReturn(new Mother("entity id 1", "ec entity id 1", "thayi 1")); service.close(create().build()); verify(actionService).markAllAlertsAsInactive("entity id 1"); }
@Test public void doNotPruneEmptyLogs() throws IOException { logPruner.truncate( LogPosition.start( 0 ) ); assertTrue( FileUtils.isEmptyDirectory( databaseDirectory ) ); }
@Test public void getSuggestions() { final MonacoFEELVariableSuggestions variableSuggestions = new MonacoFEELVariableSuggestions(dmnGraphUtils); final Node node1 = mock(Node.class); final Node node2 = mock(Node.class); final Node node3 = mock(Node.class); final Node node4 = mock(Node.class); final Node node5 = mock(Node.class); final Node node6 = mock(Node.class); final Definition definition1 = mock(Definition.class); final Definition definition2 = mock(Definition.class); final Definition definition3 = mock(Definition.class); final Definition definition4 = mock(Definition.class); final Definition definition5 = mock(Definition.class); final Definition definition6 = mock(Definition.class); final NamedElement namedElement1 = mock(NamedElement.class); final NamedElement namedElement2 = mock(NamedElement.class); final NamedElement namedElement3 = mock(NamedElement.class); final DMNDiagram dmnDiagram4 = mock(DMNDiagram.class); final DMNDiagram dmnDiagram5 = mock(DMNDiagram.class); final Definitions dmnDiagram4Definitions = mock(Definitions.class); final Definitions dmnDiagram5Definitions = mock(Definitions.class); final ItemDefinition itemDefinition41 = mock(ItemDefinition.class); final ItemDefinition itemDefinition42 = mock(ItemDefinition.class); final ItemDefinition itemDefinition43 = mock(ItemDefinition.class); final ItemDefinition itemDefinition51 = mock(ItemDefinition.class); final ItemDefinition itemDefinition52 = mock(ItemDefinition.class); final Name name1 = mock(Name.class); final Name name2 = mock(Name.class); final Name name3 = mock(Name.class); final Name name4 = mock(Name.class); final Name name5 = mock(Name.class); final Name name6 = mock(Name.class); final Name name7 = mock(Name.class); final Name name8 = mock(Name.class); final String expectedNameValue1 = "Decision-1"; final String expectedNameValue2 = "Decision-2"; final String expectedNameValue3 = "Decision-3"; final String expectedNameValue4 = "Decision-4"; final String expectedNameValue5 = "Decision-5"; final String expectedNameValue6 = ""; final String expectedNameValue7 = "Decision-6"; final String expectedNameValue8 = "Decision-6"; when(node1.getContent()).thenReturn(definition1); when(node2.getContent()).thenReturn(definition2); when(node3.getContent()).thenReturn(definition3); when(node4.getContent()).thenReturn(definition4); when(node5.getContent()).thenReturn(definition5); when(node6.getContent()).thenReturn(definition6); when(definition1.getDefinition()).thenReturn(namedElement1); when(definition2.getDefinition()).thenReturn(namedElement2); when(definition3.getDefinition()).thenReturn(namedElement3); when(definition4.getDefinition()).thenReturn(dmnDiagram4); when(definition5.getDefinition()).thenReturn(dmnDiagram5); when(definition6.getDefinition()).thenReturn(new Object()); when(dmnDiagram4.getDefinitions()).thenReturn(dmnDiagram4Definitions); when(dmnDiagram5.getDefinitions()).thenReturn(dmnDiagram5Definitions); when(dmnDiagram4Definitions.getItemDefinition()).thenReturn(asList(itemDefinition41, itemDefinition42, itemDefinition43)); when(dmnDiagram5Definitions.getItemDefinition()).thenReturn(asList(itemDefinition51, itemDefinition52)); when(namedElement1.getName()).thenReturn(name1); when(namedElement2.getName()).thenReturn(name2); when(namedElement3.getName()).thenReturn(name3); when(itemDefinition41.getName()).thenReturn(name4); when(itemDefinition42.getName()).thenReturn(name5); when(itemDefinition43.getName()).thenReturn(name6); when(itemDefinition51.getName()).thenReturn(name7); when(itemDefinition52.getName()).thenReturn(name8); when(name1.getValue()).thenReturn(expectedNameValue1); when(name2.getValue()).thenReturn(expectedNameValue2); when(name3.getValue()).thenReturn(expectedNameValue3); when(name4.getValue()).thenReturn(expectedNameValue4); when(name5.getValue()).thenReturn(expectedNameValue5); when(name6.getValue()).thenReturn(expectedNameValue6); when(name7.getValue()).thenReturn(expectedNameValue7); when(name8.getValue()).thenReturn(expectedNameValue8); when(dmnGraphUtils.getNodeStream()).thenReturn(Stream.of(node1, node2, node3, node4, node5, node6)); when(node1.getContent()).thenReturn(definition1); when(node2.getContent()).thenReturn(definition2); when(node3.getContent()).thenReturn(definition3); when(node4.getContent()).thenReturn(definition4); when(node5.getContent()).thenReturn(definition5); final List<String> suggestions = variableSuggestions.getSuggestions(); assertEquals(6, suggestions.size()); assertEquals(expectedNameValue1, suggestions.get(0)); assertEquals(expectedNameValue2, suggestions.get(1)); assertEquals(expectedNameValue3, suggestions.get(2)); assertEquals(expectedNameValue4, suggestions.get(3)); assertEquals(expectedNameValue5, suggestions.get(4)); assertEquals(expectedNameValue7, suggestions.get(5)); }
@Test public void testTransitionOpenSentOnConnectedChannelTcpConnectionConfirmedByBgpOpenHigherBgpIdentifier() throws Exception { initializeFSMToOpenSentState(connectedBundle, "peer9"); fsm.handleEvent(FSMEvent.tcpConnectionConfirmed(activeBundle.getChannel())); fsm.handleEvent(FSMEvent.bgpOpen(activeBundle.getChannel())); assertMachineInOpenConfirmState(connectedBundle, true); verify(callbacks).fireSendCeaseNotification(activeBundle.getMatcherArg()); verify(callbacks).fireDisconnectRemotePeer(activeBundle.getMatcherArg()); }
@Test public void testGetResponseFields() { assertEquals(new Integer(200), execute("exchange.response.status")); assertEquals("application/json", execute("exchange.response.getHeader('content-type')")); assertEquals("response body", execute("exchange.response.body")); }
@Test public void testCustomConvertedCollectionIsOneColumn() { MyConvertedCollectionBean b1 = new MyConvertedCollectionBean(); int first = 111; int second = 0; int third = -1; b1.addToList(first).addToList(second).addToList(third); Map<String, HColumn<String, byte[]>> colMap = new HectorObjectMapper(cacheMgr).createColumnMap(b1); CFMappingDef<MyConvertedCollectionBean> cfMapping = cacheMgr.getCfMapDef( MyConvertedCollectionBean.class, false); assertEquals( "collections with custom converters should be skipped by default collection mapping", colMap.size(), cfMapping.getAllProperties().size()); }
@Test public void testCreateSafeDeleteNodeCommand() { final Node<?, Edge> node = mock(Node.class); when(node.getUUID()).thenReturn("uuid"); final SafeDeleteNodeCommand.Options options = SafeDeleteNodeCommand.Options.defaults(); final DeleteElementsCommand.DeleteCallback callback = mock(DeleteElementsCommand.DeleteCallback.class); final DMNDeleteElementsGraphCommand command = mock(DMNDeleteElementsGraphCommand.class); when(command.createSafeDeleteNodeCommand(node, options, callback)).thenCallRealMethod(); final SafeDeleteNodeCommand actual = command.createSafeDeleteNodeCommand(node, options, callback); assertTrue(actual instanceof DMNSafeDeleteNodeCommand); final DMNSafeDeleteNodeCommand dmnCommand = (DMNSafeDeleteNodeCommand) actual; assertEquals(dmnCommand.getNode(), node); assertEquals(dmnCommand.getOptions(), options); }
@Test public void testPublishTopicNotExist() { try { String topicNotExists = "fsgdsggdgerer"; this.iProducer.publish(new WeEvent(topicNotExists, "中文消息.".getBytes()), this.groupId); Assert.fail(); } catch (BrokerException e) { Assert.assertEquals(ErrorCode.TOPIC_NOT_EXIST.getCode(), e.getCode()); } }
@Test public void testLoginWithWikiPrefix() throws Exception { XWikiDocument userDoc = new XWikiDocument(new DocumentReference(this.oldcore.getXWikiContext().getWikiId(), "XWiki", "SomeUser")); BaseObject mockUserObj = userDoc.newXObject(new LocalDocumentReference("XWiki", "XWikiUsers"), this.oldcore.getXWikiContext()); mockUserObj.setStringValue("password", "pass"); this.oldcore.getSpyXWiki().saveDocument(userDoc, this.oldcore.getXWikiContext()); Principal principal = this.authService.authenticate("xwiki:SomeUser", "pass", this.oldcore.getXWikiContext()); assertNotNull(principal); assertEquals("xwiki:XWiki.SomeUser", principal.getName()); }
@Test public void shouldGetScoreForOperationChainWithNestedOperationChain() throws OperationException { final DefaultScoreResolver scoreResolver = new DefaultScoreResolver(); final OperationChain opChain = new OperationChain.Builder() .first(new OperationChain.Builder() .first(mock(GetAdjacentIds.class)) .then(mock(GetElements.class)) .build()) .then(mock(Limit.class)) .build(); final Object result = scoreResolver.getScore(opChain); assertSame(3, result); }
@Test void testGetValue_Void() throws NoSuchMethodException, SecurityException { TestObject testObject = new TestObject(); Member fieldOrMethod = TestObject.class.getDeclaredMethod("getVoid"); Assertions.assertThrows(IllegalArgumentException.class, () -> MemberAccessors.getValue(testObject, fieldOrMethod)); }
@Test public void testFallbackUser() { FallbackResult r = scorer.score(15, 30); assertThat(r, notNullValue()); assertThat(r.getScore(), equalTo(5.0)); assertThat(r.isFromPrimary(), equalTo(false)); }
@Test public void testSome_throwsForNegativeMax() { try { Patterns.ALWAYS.atMost(-1); fail(); } catch (IllegalArgumentException e) { assertEquals("max < 0", e.getMessage()); } }
@Test public void invokeRoundingUp() { FunctionTestUtil.assertResult(decimalFunction.invoke(BigDecimal.valueOf(10.27), BigDecimal.ONE), BigDecimal.valueOf(10.3)); }
@Test public void testUnwantedDataBug1612933() { Map<String, String> attributes = ImmutableMap.<String, String>builder() .put(Attribute.DOCUMENT_NAMESPACE, "com-turkcell-yaani") .put(Attribute.DOCUMENT_TYPE, "baseline").build(); assertThrows(UnwantedDataException.class, () -> MessageScrubber.scrub(attributes, Json.createObjectNode())); }
@Test public void getChangelistFiles() throws P4JavaException { when(server.execMapCmdList(eq(DESCRIBE.toString()), argThat(new CommandLineArgumentMatcher( new String[] { "-s", String.valueOf(mockChangelistId) })), eq((Map<String,Object>)null))).thenReturn(resultMaps); when(resultMap.get("id")).thenReturn(String.valueOf(mockChangelistId)); when(resultMap.get("rev0")).thenReturn("present"); List<IFileSpec> changelistFiles = describeDelegator.getChangelistFiles(mockChangelistId); assertEquals(mockChangelistId, changelistFiles.get(0).getChangelistId()); }
@Test public void isSidebarCalendarLinkVisible_shouldReturnCorrectValue() throws Exception { Assert.assertEquals(false, DataManager.getInstance().getConfiguration().isSidebarCalendarViewLinkVisible()); }
@Test public void encodeExtHash() throws Exception { String str = "RIPEMD消息摘要"; System.out.println("原文：" + str); String data1hex = ""; data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.RipeMD128, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.RipeMD160, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.RipeMD256, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.RipeMD320, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.Tiger, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.Whirlpool, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); data1hex = BcExtHashUtil.encodeExtHashHex(BcExtHashUtil.Gost3411, str.getBytes()); System.out.println("十六进制消息摘要算法值：" + data1hex); }
@Test public void testParse9() { String input = " -10h49m789 , -8h "; long expected1 = -( 10 * 3600000 + 49 * 60000 + 789 ); long expected2 = -( 8 * 3600000 ); long[] result = TimeIntervalParser.parse( input ); assertEquals( 2, result.length ); assertEquals( expected1, result[0] ); assertEquals( expected2, result[1] ); }
@Test public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() { final StreamsBuilder builder = new StreamsBuilder(); final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>( (KTableImpl<String, String, String>) builder.table("left", Consumed.with(stringSerde, stringSerde)), (KTableImpl<String, String, String>) builder.table("right", Consumed.with(stringSerde, stringSerde)), null ).get(); final MockProcessorContext context = new MockProcessorContext(); context.setRecordMetadata("left", -1, -2, -3); join.init(context); final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(); join.process(null, new Change<>("new", "old")); LogCaptureAppender.unregister(appender); assertEquals(1.0, getMetricByName(context.metrics().metrics(), "skipped-records-total", "stream-metrics").metricValue()); assertThat(appender.getMessages(), hasItem("Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]")); }
@Test public void testConnectionCreation() { HttpClient httpClient = mock(HttpClient.class); ObjectMapper mapper = mock(ObjectMapper.class); SW360ConnectionFactory connectionFactory = mock(SW360ConnectionFactory.class); SW360Connection connection = mock(SW360Connection.class); when(connectionFactory.newConnection(any())).thenReturn(connection); SW360ConnectionConfigurationFactory factory = new SW360ConnectionConfigurationFactory(connectionFactory); SW360Connection actualConnection = factory.createConnection(stringConfigGetter(), httpClient, mapper); assertThat(actualConnection).isEqualTo(connection); ArgumentCaptor<SW360ClientConfig> captSW360Config = ArgumentCaptor.forClass(SW360ClientConfig.class); verify(connectionFactory).newConnection(captSW360Config.capture()); SW360ClientConfig sw360ClientConfig = captSW360Config.getValue(); assertThat(sw360ClientConfig.getRestURL()).isEqualTo(REST_URL); assertThat(sw360ClientConfig.getAuthURL()).isEqualTo(AUTH_URL); assertThat(sw360ClientConfig.getUser()).isEqualTo(USER); assertThat(sw360ClientConfig.getPassword()).isEqualTo(PASSWORD); assertThat(sw360ClientConfig.getClientId()).isEqualTo(CLIENT_ID); assertThat(sw360ClientConfig.getClientPassword()).isEqualTo(CLIENT_SECRET); assertThat(sw360ClientConfig.getHttpClient()).isEqualTo(httpClient); assertThat(sw360ClientConfig.getObjectMapper()).isEqualTo(mapper); }
@Test public void publicKeysImmutable() { boolean exception = false; try { federation.getPublicKeys().add(UldECKey.fromPrivate(BigInteger.valueOf(1000))); } catch (Exception e) { exception = true; } Assert.assertTrue(exception); exception = false; try { federation.getPublicKeys().remove(0); } catch (Exception e) { exception = true; } Assert.assertTrue(exception); }
@Test public void testOnPasswordChangeValidPw() throws Exception { List<String> valid = new ArrayList<>(); valid.add("abCDefGH"); valid.add("Abbbbbbbbbbbb"); valid.add("cDDDDDDDDDDDDDDDDD"); valid.add("gH%%%%%%%%%%%%%%%%^^"); valid.add("&)(*&^%23qW"); for (String pw : valid) { pwAction.onPasswordChange(user, pw, root, namePathMapper); } }
@Test public void test_getEmailToken() throws Exception { final String hash = "ffce0dbb58bd7780cba3a6c64a666d7d3481604722c55400fd5356195407144259de4c9ec75f8edb"; final Token expected = new Token(VERIFY_EMAIL_ADDRESS, User.class.getName(), 1L, hash, recentTokenDate(), JsonNodeFactory.instance.objectNode()); when(tokenRepositoryMock.findByHashAndTypeAndClassName(hash, VERIFY_EMAIL_ADDRESS, User.class.getName())).thenReturn(of(expected)); final Token token = tokenService.getEmailToken(hash).getSuccess(); assertEquals(expected, token); verify(tokenRepositoryMock, only()).findByHashAndTypeAndClassName(hash, VERIFY_EMAIL_ADDRESS, User.class.getName()); }
@Test public void creationTimeShouldHaveCorrectFormat() { assertEquals("20140513211530", HL7DbParser201306.buildCreationTimeString()); }
@Test public void testMergeValuesDelete() { List<String> merged = ConfigUtils.mergeValues(ThreadPool.class, "-fixed,aaa", asList("fixed", "default.limited", "cached")); assertEquals(asList("cached", "aaa"), merged); }
@Test public void testListField() { TableSchema flinkSchema = TableSchema.builder() .field("list_struct_fields", DataTypes.ARRAY( DataTypes.ROW( DataTypes.FIELD("field_int", DataTypes.INT()) ) ).notNull()) .field("list_optional_struct_fields", DataTypes.ARRAY( DataTypes.ROW( DataTypes.FIELD( "field_timestamp_with_local_time_zone", DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE() ) ) ).nullable()) .field("list_map_fields", DataTypes.ARRAY( DataTypes.MAP( DataTypes.ARRAY(DataTypes.INT().notNull()), DataTypes.ROW( DataTypes.FIELD("field_0", DataTypes.INT(), "doc - int") ) ).notNull() ).notNull()) .build(); Schema actualSchema = FlinkSchemaUtil.convert(flinkSchema); Schema expectedSchema = new Schema( Types.NestedField.required(0, "list_struct_fields", Types.ListType.ofOptional(4, Types.StructType.of( Types.NestedField.optional(3, "field_int", Types.IntegerType.get()) ))), Types.NestedField.optional(1, "list_optional_struct_fields", Types.ListType.ofOptional(6, Types.StructType.of( Types.NestedField.optional(5, "field_timestamp_with_local_time_zone", Types.TimestampType.withZone()) ))), Types.NestedField.required(2, "list_map_fields", Types.ListType.ofRequired(11, Types.MapType.ofOptional(9, 10, Types.ListType.ofRequired(7, Types.IntegerType.get()), Types.StructType.of( Types.NestedField.optional(8, "field_0", Types.IntegerType.get(), "doc - int") ) ) )) ); Assert.assertEquals(expectedSchema.asStruct(), actualSchema.asStruct()); }
@Test public void getTotalAsseCountByTargetTypeTest() throws Exception { when(repository.getTotalAssetCountByTargetType(anyString())) .thenReturn(5000l); assertThat(projectionServiceImpl.getTotalAsseCountByTargetType("onpremserver"), is(notNullValue())); }
@Test(expected = ValidationException.class) public void isDeployableMuleDomainTemplateLightPackageFromArtifact() throws ValidationException { projectInformationBuilder .withPackaging("fake-packaging") .withClassifier("fake-classifier") .isDeployment(true) .withDeployments(singletonList(deploymentConfigurationMock)); String artifactName = "my-project-" + MULE_DOMAIN + "-" + LIGHT_PACKAGE + ".jar"; when(deploymentConfigurationMock.getArtifact()).thenReturn(new File(artifactName)); validator = new ProjectDeploymentValidator(projectInformationBuilder.build()); validator.isDeployable(); }
@Test public void testSubtract() { assertFunction("37.7E0 - 37.7E0", DOUBLE, 37.7 - 37.7); assertFunction("37.7E0 - 17.1E0", DOUBLE, 37.7 - 17.1); assertFunction("17.1E0 - 37.7E0", DOUBLE, 17.1 - 37.7); assertFunction("17.1E0 - 17.1E0", DOUBLE, 17.1 - 17.1); assertFunction("DOUBLE 'NaN' - 37.7E0", DOUBLE, Double.NaN); assertFunction("37.7E0 - DOUBLE 'NaN'", DOUBLE, Double.NaN); assertFunction("DOUBLE 'NaN' - DOUBLE 'NaN'", DOUBLE, Double.NaN); }
@Test public void partitionSubPath() throws Exception { StorageDescriptor sd = new StorageDescriptor(); sd.setLocation(PARTITION_BASE_LOCATION + "/partition1"); partition1.setSd(sd); HdfsSnapshotLocationManager manager = new HdfsSnapshotLocationManager(hiveConf, EVENT_ID, sourceTable, Arrays.asList(partition1), false, PARTITION_BASE_LOCATION, fileSystemFactory, sourceCatalogListener); assertThat(manager.getPartitionSubPath(new Path(partition1.getSd().getLocation())), is(new Path("partition1"))); }
@Test(expected = IllegalArgumentException.class) public void testEmptyServiceUriString() { ServiceURI.create(""); }
@Test public void checkAnimationIdle() { when(player.getAnimation()).thenReturn(AnimationID.WOODCUTTING_BRONZE); AnimationChanged animationChanged = new AnimationChanged(); animationChanged.setActor(player); plugin.onAnimationChanged(animationChanged); plugin.onGameTick(new GameTick()); when(player.getAnimation()).thenReturn(AnimationID.IDLE); plugin.onAnimationChanged(animationChanged); plugin.onGameTick(new GameTick()); verify(notifier).notify("[" + PLAYER_NAME + "] is now idle!"); }
@Test(expected = NotAuthorizedException.class) public void testAnonymousRequireLogin() { final SecurityDao dao = mock(SecurityDao.class); final Configuration config = mock(Configuration.class); final Security<User> security = new Security<>(dao, config, null, null); security.requireLogin(); }
@Test public void canMapFromBooleanTrue() throws LdapException { final LdapMapper<SocialPerson> mapper = new LdapMapper<>(); final Entry existing = new DefaultEntry("uid=hendy,ou=users,dc=aksimata,dc=com"); existing.put("objectClass", "organizationalPerson", "extensibleObject", "inetOrgPerson", "uidObject"); existing.put("uid", "hendy"); existing.put("cn", "Hendy Irawan"); existing.put("newsletterSubscriptionEnabled", "TRUE"); log.info("Input Entry: {}", existing); final SocialPerson person = mapper.fromEntry(existing, SocialPerson.class); assertEquals(true, person.getNewsletterSubscriptionEnabled()); }
@Test public void testGetGain() throws Exception { assertEquals(0, metadata.getGain(0), 0.001); assertEquals(0, metadata.getGain(1), 0.001); assertEquals(0, metadata.getGain(2), 0.001); assertEquals(0, metadata.getGain(3), 0.001); }
@Test public void testDigestBuilderBase64() throws IOException, FlumeSpecException, InterruptedException { EventSink snk = new CompositeSink(new Context(), "{ digest(\"MD5\", \"digest\", base64=\"true\") => counter(\"count\") }"); snk.open(); Event e = new EventImpl("content".getBytes()); snk.append(e); snk.close(); }
@Test public void getBlocking_hasNoCachedValueAndFileReadFails_returnsNull() throws Exception { when(mockStorageClient.read()).thenThrow(IO_EXCEPTION); ConfigContainer container = cacheClient.getBlocking(); assertThat(container).isNull(); }
@Test public void shouldReturnSongsOfChannel() throws Exception { songsGateway.querySongsByChannelId(ReportType.NEXT_QUEUE, "1", 10, ChannelConstantIds.PRIVATE_CHANNEL,BitRate.HIGH, new Callback()); apiGateway.simulateTextResponse(200, TestResponses.ROCK_CHANNELS_SONGS_JSON, null); assertNotNull(Douban.songs); assertThat(Douban.songs.size(), equalTo(2)); assertThat(Douban.songs.get(0).aid, equalTo("25779410")); }
@Test public void serialization() { SerializableTester.reserializeAndAssert( UIf.create( UFreeIdent.create("cond"), UBlock.create( UExpressionStatement.create( UAssign.create(UFreeIdent.create("x"), UFreeIdent.create("y")))), UBlock.create( UExpressionStatement.create( UAssign.create(UFreeIdent.create("x"), UFreeIdent.create("z")))))); }
@Test public void testObjectIdType() throws IOException { BsonDocument bsonDoc = new BsonDocument(); BsonObjectId value = new BsonObjectId(new ObjectId()); bsonDoc.append("_idKey", value); writer.reset(); bsonReader.write(writer, new BsonDocumentReader(bsonDoc)); SingleMapReaderImpl mapReader = (SingleMapReaderImpl) writer.getMapVector().getReader(); byte[] readByteArray = mapReader.reader("_idKey").readByteArray(); assertTrue(Arrays.equals(value.getValue().toByteArray(), readByteArray)); }
@Test public void testCompareToNull() { final RoleMapping mapping1 = new RoleMapping(); assertThat(mapping1.compareTo(null) < 0, is(true)); }
@Test public void testUndefinedRange17() { assertTrue(DataUtilities.isUndefinedRange(program, addr(0xfb), addr(0xff))); }
@Test(expected = WebSocketServiceException.class) public void testConnectionOnNonExistentServer() throws WebSocketServiceException, InterruptedException { final int port = randomPort(); WebSocketServiceImpl.create(createURI(port)); }
@Test public void testReplaceFirst() { assertEquals( "green;red;blue,orange", TextUtils.replaceFirst( "green,red,blue,orange", ",", ";", 2 ) ); assertEquals( "green.red.blue-orange", TextUtils.replaceFirst( "green-red-blue-orange", "-", ".", 2 ) ); assertEquals( "llland", TextUtils.replaceFirst( "lalaland", "a", "", 2 ) ); assertEquals( "mamamand", TextUtils.replaceFirst( "lalaland", "la", "ma", 3 ) ); assertEquals( "lalaland", TextUtils.replaceFirst( "lalaland", "la", "ma", 0 ) ); }
@Test public void testFormatWithPlaceholdersAndSpecialChars() { assertEquals( "(cn=\\28\\5C\\2A\\00\\29)", FilterEncoder.format( "(cn={0})", SPECIAL_CHARS ) ); }
@Test public void testDouble() { Double s1 = 123.45; Double s2 = 678.901; FunctionArgumentAttributeValue attr1 = null; FunctionArgumentAttributeValue attr2 = null; try { attr1 = new FunctionArgumentAttributeValue(DataTypes.DT_DOUBLE.createAttributeValue(s1)); attr2 = new FunctionArgumentAttributeValue(DataTypes.DT_DOUBLE.createAttributeValue(s2)); } catch (Exception e) { fail("creating attributes e="+e); } FunctionDefinitionBag<?> fd = (FunctionDefinitionBag<?>) StdFunctions.FD_DOUBLE_BAG; assertEquals(XACML3.ID_FUNCTION_DOUBLE_BAG, fd.getId()); assertEquals(DataTypes.DT_DOUBLE.getId(), fd.getDataTypeId()); assertTrue(fd.returnsBag()); arguments.clear(); arguments.add(attr1); ExpressionResult res = fd.evaluate(null, arguments); assertTrue(res.isOk()); Bag bag = res.getBag(); assertNotNull(bag); Iterator<AttributeValue<?>> it = bag.getAttributeValues(); assertEquals(1, bag.size()); AttributeValue<?> attrValueObject = it.next(); assertEquals(DataTypes.DT_DOUBLE.getId(), attrValueObject.getDataTypeId()); assertEquals(s1, attrValueObject.getValue()); arguments.clear(); res = fd.evaluate(null, arguments); assertTrue(res.isOk()); bag = res.getBag(); assertNotNull(bag); assertEquals(0, bag.size()); arguments.clear(); arguments.add(null); res = fd.evaluate(null, arguments); assertFalse(res.isOk()); assertEquals("function:double-bag Got null argument", res.getStatus().getStatusMessage()); assertEquals("urn:oasis:names:tc:xacml:1.0:status:processing-error", res.getStatus().getStatusCode().getStatusCodeValue().stringValue()); arguments.clear(); arguments.add(attrInteger); res = fd.evaluate(null, arguments); assertFalse(res.isOk()); assertEquals("function:double-bag Expected data type 'double' saw 'integer'", res.getStatus().getStatusMessage()); assertEquals("urn:oasis:names:tc:xacml:1.0:status:processing-error", res.getStatus().getStatusCode().getStatusCodeValue().stringValue()); arguments.clear(); arguments.add(attr1); arguments.add(attr2); res = fd.evaluate(null, arguments); assertTrue(res.isOk()); bag = res.getBag(); assertNotNull(bag); it = bag.getAttributeValues(); assertEquals(2, bag.size()); attrValueObject = it.next(); assertEquals(DataTypes.DT_DOUBLE.getId(), attrValueObject.getDataTypeId()); assertEquals(s1, attrValueObject.getValue()); attrValueObject = it.next(); assertEquals(DataTypes.DT_DOUBLE.getId(), attrValueObject.getDataTypeId()); assertEquals(s2, attrValueObject.getValue()); arguments.clear(); arguments.add(attr1); arguments.add(attr2); arguments.add(attr1); res = fd.evaluate(null, arguments); assertTrue(res.isOk()); bag = res.getBag(); assertNotNull(bag); it = bag.getAttributeValues(); assertEquals(3, bag.size()); attrValueObject = it.next(); assertEquals(DataTypes.DT_DOUBLE.getId(), attrValueObject.getDataTypeId()); assertEquals(s1, attrValueObject.getValue()); attrValueObject = it.next(); assertEquals(DataTypes.DT_DOUBLE.getId(), attrValueObject.getDataTypeId()); assertEquals(s2, attrValueObject.getValue()); attrValueObject = it.next(); assertEquals(DataTypes.DT_DOUBLE.getId(), attrValueObject.getDataTypeId()); assertEquals(s1, attrValueObject.getValue()); arguments.clear(); for (int i = 0; i < 1000; i++) { arguments.add(attr1); } res = fd.evaluate(null, arguments); assertTrue(res.isOk()); bag = res.getBag(); assertNotNull(bag); it = bag.getAttributeValues(); assertEquals(1000, bag.size()); }
@Test public void testStartSelectByFlavor() throws Exception { operation.setConfiguration(StartTranscriptionOperationHandler.SOURCE_FLAVOR, "audio/ogg"); WorkflowOperationResult result = operationHandler.start(workflowInstance, null); Assert.assertEquals(Action.CONTINUE, result.getAction()); Assert.assertEquals("audioTrack1", capturedTrack.getValue().getIdentifier()); }
@Test public void stableAliasNoWarning() throws Exception { TestShell shell = new TestShell(); assertEquals(0, shell.run("stableAlias")); assertFalse(mOutput.toString().contains("WARNING: stableAlias")); }
@Test public void testStronglyConnectedComponentSingle() throws Exception { Map<String, Set<String>> graph = graph(successors("a")); Set<Set<String>> partitioned = stronglyConnectedComponent(graph); Assert.assertEquals(set(set("a")), partitioned); }
@Test public void testResponseFilter() throws Exception { Span span = new FakeSpan(SpanContext.INVALID, null); TagContext tagContext = mock(TagContext.class); HttpRequestContext context = createHttpRequestContext(span, tagContext); ClientRequestContext requestContext = mock(ClientRequestContext.class); when(requestContext.getProperty("opencensus.context")).thenReturn(context); ClientResponseContext responseContext = mock(ClientResponseContext.class); filter.filter(requestContext, responseContext); verify(requestContext).getProperty("opencensus.context"); verify(responseContext, times(1)).getStatus(); }
@Test public void testExistingFlowNotFound() { BDDMockito.<FlowConfiguration<?>>given(flowConfigurationMap.get(any())).willReturn(flowConfig); dummyEvent.setKey("KEY"); underTest.accept(dummyEvent); verify(flowLogService, never()).save(any(FlowParameters.class), anyString(), anyString(), any(Payload.class), anyMap(), any(), any(FlowState.class)); verify(flow, never()).sendEvent(anyString(), anyString(), any(), any()); }
@Test public void testCompareTenantIdGroupNamePairs() { final IpPermission tcp = builder().ipProtocol(IpProtocol.TCP).build(); final IpPermission g1 = builder().fromPermission(tcp) .tenantIdGroupNamePair("tenant1", "group1").build(); final IpPermission g2 = builder().fromPermission(tcp) .tenantIdGroupNamePair("tenant1", "group2").build(); final IpPermission g12 = builder().fromPermission(tcp) .tenantIdGroupNamePair("tenant1", "group1") .tenantIdGroupNamePair("tenant1", "group2").build(); final IpPermission g21 = builder().fromPermission(tcp) .tenantIdGroupNamePair("tenant1", "group2") .tenantIdGroupNamePair("tenant1", "group1").build(); final IpPermission t2g1 = builder().fromPermission(tcp) .tenantIdGroupNamePair("tenant2", "group1").build(); assertTotalOrder(ImmutableList.of(tcp, g1, g12, g2, g21, t2g1)); final IpPermission g12b = builder().fromPermission(tcp) .tenantIdGroupNamePair("tenant1", "group1") .tenantIdGroupNamePair("tenant1", "group2").build(); assertEqualAndComparable(g12, g12b); }
@Test void testLcmLong() { long a = 30; long b = 50; long c = 77; Assertions.assertEquals(0, ArithmeticUtils.lcm(0, b)); Assertions.assertEquals(0, ArithmeticUtils.lcm(a, 0)); Assertions.assertEquals(b, ArithmeticUtils.lcm(1, b)); Assertions.assertEquals(a, ArithmeticUtils.lcm(a, 1)); Assertions.assertEquals(150, ArithmeticUtils.lcm(a, b)); Assertions.assertEquals(150, ArithmeticUtils.lcm(-a, b)); Assertions.assertEquals(150, ArithmeticUtils.lcm(a, -b)); Assertions.assertEquals(150, ArithmeticUtils.lcm(-a, -b)); Assertions.assertEquals(2310, ArithmeticUtils.lcm(a, c)); Assertions.assertEquals(Long.MAX_VALUE, ArithmeticUtils.lcm(60247241209L, 153092023L)); Assertions.assertEquals((1L << 50) * 15, ArithmeticUtils.lcm((1L << 45) * 3, (1L << 50) * 5)); Assertions.assertEquals(0L, ArithmeticUtils.lcm(0L, 0L)); try { ArithmeticUtils.lcm(Long.MIN_VALUE, 1); Assertions.fail("Expecting ArithmeticException"); } catch (ArithmeticException expected) { } try { ArithmeticUtils.lcm(Long.MIN_VALUE, 1 << 20); Assertions.fail("Expecting ArithmeticException"); } catch (ArithmeticException expected) { } Assertions.assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1), ArithmeticUtils.lcm((long)Integer.MAX_VALUE, Integer.MAX_VALUE - 1)); try { ArithmeticUtils.lcm(Long.MAX_VALUE, Long.MAX_VALUE - 1); Assertions.fail("Expecting ArithmeticException"); } catch (ArithmeticException expected) { } }
@Test public void noCert() throws Exception { assertNull(this.auth.getPrincipal(httpRequest)); }
@Test public void testPartialGlobMatch() { Map<String, String> ruleAttributes = new HashMap<>(); ruleAttributes.put("ip", "127.*.1"); ruleAttributes.put("compression", "*"); Map<String, String> reqAttributes = new HashMap<>(); reqAttributes.put("ip", "127.0.0.1"); reqAttributes.put("compression", "gzip"); reqAttributes.put("encoding", "json"); SamplingRule rule = new SamplingRule() .withAttributes(ruleAttributes) .withHost("*") .withServiceName("*.foo.*") .withHTTPMethod("*") .withResourceARN("*") .withURLPath("/bar/*") .withServiceType("AWS::EC2::Instance"); SamplingRequest req = new SamplingRequest( "role-arn", "arn:aws:service:us-east-1:111111111111:resource", "www.foo.com", "192.168.1.1", "GET", "/bar/baz", "AWS::EC2::Instance", reqAttributes ); Matchers m = new Matchers(rule); Assert.assertTrue(m.match(req)); }
@Test void testIncompatibleReuseNoTags() { Metadata metadata1 = Metadata.builder() .withName("counter3") .withDisplayName("display name") .withDescription("description") .withType(MetricType.COUNTER) .withUnit(MetricUnits.NONE) .reusable(true) .build(); Metadata metadata2 = Metadata.builder() .withName("counter3") .withDisplayName("display name") .withDescription("description") .withType(MetricType.COUNTER) .withUnit(MetricUnits.NONE) .reusable(false) .build(); registry.counter(metadata1); IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> registry.counter(metadata2)); assertThat(ex.getMessage(), containsString("already registered")); }
@Test public void shouldReturnTrueIfTypeIsPrimitiveOrWrapper() throws SecurityException, NoSuchFieldException { assertTrue(PropertyUtil.isPrimitiveOrWrapper(DummyClass.class.getField("primitiveInt").getType())); }
@Test public void testEmptyKeyValueElement() throws Exception { SorterTestUtils.testEmptyKeyValueElement( ExternalSorter.create( new ExternalSorter.Options() .setTempLocation(tmpLocation.toString()) .setSorterType(sorterType))); }
@Test public void createFromAssetsSavesNodesWithComponents() { setFormat(repository, MAVEN_2); List<Component> components = asList( createComponent("componentName1", "componentGroup1", "componentVersion1"), createComponent("componentName2", "componentGroup2", "componentVersion2") ); List<Asset> assets = asList( createAsset("assetName1", components.get(0)), createAsset("assetName2", components.get(1)) ); for (int i = 0; i < assets.size(); i++) { Asset asset = assets.get(i); Component component = components.get(i); List<BrowsePath> componentsPaths = componentPaths(component); List<BrowsePath> assetPaths = assetPaths(component, asset); when(maven2Generator.computeComponentPaths(asset, component)).thenReturn(componentsPaths); when(maven2Generator.computeAssetPaths(asset, of(component))).thenReturn(assetPaths); } browseNodeManager.createFromAssets(repository, assets); for (int i = 0; i < assets.size(); i++) { Asset asset = assets.get(i); Component component = components.get(i); List<BrowsePath> componentsPaths = componentPaths(component); List<BrowsePath> assetPaths = assetPaths(component, asset); verify(browseNodeStore).createComponentNode(REPOSITORY_NAME, MAVEN_2, componentsPaths, component); verify(browseNodeStore).createAssetNode(REPOSITORY_NAME, MAVEN_2, assetPaths, asset); } verifyNoMoreInteractions(browseNodeStore); }
@Test void deserializeShouldWork() throws MailboxIdDeserialisationException { assertThat(mailboxIdDeserializer.deserialize(SERIALIZED_ID)).isEqualTo(IN_MEMORY_ID); }
@Test public void testDelete() { write(0, 0, "foo\nbar\nzoo\n"); delete(0, 2, 2, 1); assertEquals("fooo\n", textBuffer.getString()); delete(0, 4, 1, 0); assertEquals("fooo", textBuffer.getString()); delete(0, 0, 0, 4); assertEquals("", textBuffer.getString()); delete(0, 0, 0, 0); assertEquals("", textBuffer.getString()); }
@Test public void testTriggerEntriesAndRecover() { double workFactor1 = 0.5f; double workFactor2 = 0.25f; List<WatermarkDiskQuotaPolicy.Entry> entries = Arrays.asList( new WatermarkDiskQuotaPolicy.Entry(0.5, 1.0, workFactor1), new WatermarkDiskQuotaPolicy.Entry(0.2, 0.4, workFactor2)); WatermarkDiskQuotaPolicy policy = new WatermarkDiskQuotaPolicy(entries); assertEquals(workFactor2, policy.apply(0.1)); assertEquals(workFactor1, policy.apply(0.4)); assertEquals(1.0, policy.apply(1.0)); }
@Test public void testPassesVariantWithPassFilterField() { VariantEvaluation variant = variantEvaluationWithFilterField("PASS"); FilterResult result = instance.runFilter(variant); System.out.println(result); assertThat(result.passed(), is(true)); }
@Test(expected=NullPointerException.class) public void testSamplesNullURL() throws Exception { samples((URL) null); }
@Test public void test_that_listKeys_appends_a_slash_to_the_partial_path_if_not_present() { when(secureDataDao.getPathsByPartialPathAndType( sdbId, partialPathWithoutTrailingSlash + "/", SecureDataType.OBJECT)) .thenReturn(keysRes); secureDataService.listKeys(sdbId, partialPathWithoutTrailingSlash); verify(secureDataDao) .getPathsByPartialPathAndType( sdbId, partialPathWithoutTrailingSlash + "/", SecureDataType.OBJECT); }
@Test public void testUpdate() throws SQLException, DuplicateException { final Customer customer1 = new Customer(1, "First customer name"); final Customer customer2 = new Customer(1, "Second customer name"); customerDAO.insert(customer1); customerDAO.update(customer2); Assert.assertEquals(customer2, customerDAO.get(1)); }
@Test(expected = AuthenticationException.class) public void testVerifyBadTokenWithTamperedPassword() throws Exception { LoginToken token = defaultAuthentication.verifyToken("Basic amFiYmFfYWRtaW46YmFkX3Bhc3N3b3Jk"); LoginToken expected = LoginToken.withAccessToken("amFiYmFfYWRtaW46YmFkX3Bhc3N3b3Jk").withTokenType("Basic").build(); assertThat(token, is(expected)); }
@Test public void shouldReportNoInconsistenciesIfTxIdSequenceIsStrictlyIncreasingAndHasNoGaps() throws Exception { LongFunction<Command.NodeCommand> newNodeCommandFunction = i -> new Command.NodeCommand( new NodeRecord( i, false, false, -1, -1, -1 ), new NodeRecord( i, true, false, -1, -1, -1 ) ); writeTxContent( logFile( 1 ), 40L, newNodeCommandFunction.apply( 1L ) ); writeTxContent( logFile( 1 ), 41L, newNodeCommandFunction.apply( 2L ) ); writeTxContent( logFile( 1 ), 42L, newNodeCommandFunction.apply( 3L ) ); writeTxContent( logFile( 2 ), 43L, newNodeCommandFunction.apply( 4L ) ); writeTxContent( logFile( 2 ), 44L, newNodeCommandFunction.apply( 5L ) ); writeTxContent( logFile( 2 ), 45L, newNodeCommandFunction.apply( 6L ) ); CapturingInconsistenciesHandler handler = new CapturingInconsistenciesHandler(); CheckTxLogs checker = new CheckTxLogs( System.out, fsRule.get() ); checker.scan( getLogFiles(), handler, CHECK_TYPES ); assertTrue( handler.txIdSequenceInconsistencies.isEmpty() ); }
@Test @Ignore public void testGetTeams() throws SourceConnectorException, BitbucketException { Collection<BitbucketTeam> teams = service.getTeams(); Assert.assertNotNull(teams); Assert.assertFalse(teams.isEmpty()); teams.forEach(team -> { System.out.println("Found team: " + team.getDisplayName() + " -- " + team.getUsername()); }); }
@Test public void testValueType() throws Exception { ValueType valueType = new StringValueType(); typeManager.getValueType("STRING"); expectLastCall().andReturn(valueType); control.replay(); converter = new AvroConverter(); AvroValueType avroValueType = new AvroValueType(); avroValueType.valueType = "STRING"; assertEquals(valueType, converter.convert(avroValueType, typeManager)); assertEquals(avroValueType, converter.convert(valueType)); control.verify(); }
@Test public void testNegativePrimitivePropertyMatch() { EventPropertyPrimitive offer = EpProperties.integerEp(Labels.empty(), "timestamp", Geo.lat); EventPropertyPrimitive requirement = EpRequirements.stringReq(); List<MatchingResultMessage> errorLog = new ArrayList<>(); boolean matches = new PropertyMatch().match(offer, requirement, errorLog); assertFalse(matches); }
@Test(expected = UnsupportedOperationException.class) public void testSetControlBits(){ WaksmanUtils util = new WaksmanUtils(); int[] controlBits = new int[]{2,3,0,1}; Matrix<BigInteger> permutationMatrix = util.setControlBits(controlBits); assertThat(permutationMatrix.getHeight(), is(2)); assertThat(permutationMatrix.getWidth(), is(controlBits.length-1)); util.setControlBits(new int[]{2,1,0}); }
@Test public void testFaultRaised() { assertFalse(invoker.faultRaised()); invoker.setFault(new ProtocolException("test exception")); assertTrue(invoker.faultRaised()); invoker.setFault(null); assertFalse(invoker.faultRaised()); invoker.setFault(true); assertTrue(invoker.faultRaised()); invoker.setFault(false); invoker.setFault(null); assertFalse(invoker.faultRaised()); invoker.setFault(true); invoker.setFault(new ProtocolException("test exception")); }
@Test public void shouldLoadFeatureState() { final FeatureState featureState = new FeatureState(TestFeatures.TEST_FEATURE_1); featureState.setEnabled(true); featureState.setStrategyId("someStrategy"); featureState.setParameter("someKey1", "someValue1"); featureState.setParameter("someKey2", "someValue2"); testee.create(featureState); final FeatureState loadedFeatureState = testee.getFeatureState(TestFeatures.TEST_FEATURE_1); assertThat(loadedFeatureState.getFeature(), is(TestFeatures.TEST_FEATURE_1)); assertThat(loadedFeatureState.getStrategyId(), is("someStrategy")); assertThat(loadedFeatureState.isEnabled(), is(true)); assertThat(loadedFeatureState.getParameter("someKey1"), is("someValue1")); assertThat(loadedFeatureState.getParameter("someKey2"), is("someValue2")); }
@Test public void comparisonLessThan() throws Exception { Address a = Address.fromBase58(mainParams, "1Dorian4RoXcnBv9hnQ4Y2C1an6NJ4UrjX"); Address b = Address.fromBase58(mainParams, "1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P"); int result = a.compareTo(b); assertTrue(result < 0); }
@Test public void testNewMessageToSendDoesNotContainMessageTypeAnnotation() throws Exception { AmqpJmsObjectMessageFacade amqpObjectMessageFacade = createNewObjectMessageFacade(false); MessageAnnotations annotations = amqpObjectMessageFacade.getMessageAnnotations(); assertNull("MessageAnnotations section was present", annotations); assertEquals(JMS_OBJECT_MESSAGE, amqpObjectMessageFacade.getJmsMsgType()); }
@Test public void testAppendLong() { try (Graph g = new Graph(); Session session = new Session(g)) { Scope scope = new Scope(g); Operand operand = Constant.arrayOf(scope, new float[] {1, 2, 3, 4, 5, 6, 7, 8}); Operand actual = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[] {4, 2})); Shape<TInt64> tfshape = Shape.create(scope, actual, TInt64.DTYPE); Operand<TInt64> append = Shapes.append(scope, tfshape, 2L); AtomicInteger index = new AtomicInteger(); long[] expected = {4L, 2L, 2L}; try (Tensor<TInt64> result = session.runner().fetch(append.asOutput()).run().get(0).expect(TInt64.DTYPE)) { result .data() .scalars() .forEach( s -> { assertEquals(expected[index.getAndIncrement()], s.getLong()); }); } assertEquals(expected.length, index.get()); } }
@Test public void testListStatusNestedNonRecursive() throws IOException { Configuration conf = new Configuration(); conf.setInt(FileInputFormat.LIST_STATUS_NUM_THREADS, numThreads); List<Path> expectedPaths = configureTestNestedNonRecursive(conf, localFs); Job job = Job.getInstance(conf); FileInputFormat<?, ?> fif = new TextInputFormat(); List<FileStatus> statuses = fif.listStatus(job); verifyFileStatuses(expectedPaths, statuses, localFs); }
@Test public void shouldOnlyAcceptInOrderIndexes() { long prevIndex = 3; long term = 3; terms = new Terms( prevIndex, term ); try { terms.append( prevIndex, term ); fail(); } catch ( IllegalStateException e ) { } terms.append( prevIndex + 1, term ); terms.append( prevIndex + 2, term ); terms.append( prevIndex + 3, term ); try { terms.append( prevIndex + 5, term ); fail(); } catch ( IllegalStateException e ) { } terms.append( prevIndex + 4, term ); terms.append( prevIndex + 5, term ); terms.append( prevIndex + 6, term ); }
@Test public void testRegisterService() { dsm.startup(); String name = "myNewService"; dsm.registerService(name, "AZ"); String service = dsm.getServiceByName(name, String.class); assertNotNull(service); assertEquals("AZ", service); try { dsm.registerService("fakey", (Object) null); fail("should have thrown exception"); } catch (IllegalArgumentException e) { assertNotNull(e.getMessage()); } }
@Test public void testGetResourceViaFileWithPrefix() throws Exception { InputStream stream = utils.getResourceFromUrl(tempFile.toURI().toURL().toString()); assertEquals(Streams.readFullyStringAndClose(stream), tempFileContents); }
@Test public void testMessageFormat2() { assertEquals( "msg. Error at offset 1 : [0xC1^C2]", FromHostPrimitiveResult.formatMessage("msg", HexUtils.decodeHex("C1C2"), 0, 1, 2)); }
@Test public void testTrim() { final Object[][] testParameters = new Object[][] {{"", ""}, {" hello, world ", "hello, world"}}; assertEquals("", StringUtils.trim(null)); for (final Object[] testParameter : testParameters) { String expected = (String) testParameter[1]; String str = (String) testParameter[0]; assertEquals(expected, StringUtils.trim(str)); } }
@Test(expected = Http2Exception.class) public void testLiteralHuffmanEncodedWithDecodingEOSThrows() throws Http2Exception { byte[] input = {0, (byte) 0x84, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}; ByteBuf in = Unpooled.wrappedBuffer(input); try { hpackDecoder.decode(0, in, mockHeaders, true); } finally { in.release(); } }
@Test public void testGetDerivativesIgnoreNonDerivatives() throws Exception { File originalDerivFile1 = createDerivative(pid, THUMBNAIL_SMALL); createDerivative(pid, ORIGINAL_FILE); List<Derivative> derivs = derivativeService.getDerivatives(pid); assertEquals(1, derivs.size()); Derivative thumbDeriv = findDerivative(derivs, THUMBNAIL_SMALL); assertEquals(originalDerivFile1, thumbDeriv.getFile()); }
@SuppressWarnings("static-method") @Test @Ignore public void pruebaFirmaXAdESDetached() throws Exception { final byte[] data = AOUtil.getDataFromInputStream( ClassLoader.getSystemResourceAsStream("TEST_PDF_Certified.pdf") ); final KeyStore ks = KeyStore.getInstance("PKCS12"); ks.load(ClassLoader.getSystemResourceAsStream(CERT_PATH), CERT_PASS.toCharArray()); final PrivateKeyEntry pke = (PrivateKeyEntry) ks.getEntry(CERT_ALIAS, new KeyStore.PasswordProtection(CERT_PASS.toCharArray())); final AOXAdESTriPhaseSigner signer = new AOXAdESTriPhaseSigner(); final Properties config = new Properties(); config.put("format", "XAdES Detached"); config.setProperty("serverUrl", SERVER_URL); final byte[] result = signer.sign( data, AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, pke.getPrivateKey(), pke.getCertificateChain(), config ); final File tempFile = File.createTempFile("xades-", ".xml"); try ( final OutputStream fos = new FileOutputStream(tempFile); ) { fos.write(result); } System.out.println("El resultado de la firma se ha guardado en: " + tempFile.getAbsolutePath()); }
@Test public void testDecorator() { Template template = new Template(); template.setInstanceType(VM_TYPE); template.setCloudPlatform(PLATFORM_1); VolumeTemplate volumeTemplate = new VolumeTemplate(); volumeTemplate.setVolumeType(VOLUME_TYPE); template.setVolumeTemplates(Sets.newHashSet(volumeTemplate)); Platform platform = Platform.platform(PLATFORM_1); int minimumSize = 10; int maximumSize = 100; int minimumNumber = 1; int maximumNumber = 5; VolumeParameterConfig config = new VolumeParameterConfig(VolumeParameterType.MAGNETIC, minimumSize, maximumSize, minimumNumber, maximumNumber); VmTypeMeta vmTypeMeta = new VmTypeMeta(); vmTypeMeta.setMagneticConfig(config); Map<Platform, Map<String, VolumeParameterType>> diskMappings = newHashMap(); diskMappings.put(platform, singletonMap(VOLUME_TYPE, VolumeParameterType.MAGNETIC)); PlatformDisks platformDisk = new PlatformDisks(emptyMap(), emptyMap(), diskMappings, emptyMap()); CloudVmTypes cloudVmTypes = new CloudVmTypes(); Map<String, Set<VmType>> region1 = singletonMap(REGION, Collections.singleton(VmType.vmTypeWithMeta(VM_TYPE, vmTypeMeta, true))); cloudVmTypes.setCloudVmResponses(region1); when(cloudParameterService.getDiskTypes()).thenReturn(platformDisk); when(cloudParameterService.getVmTypesV2(eq(extendedCloudCredential), eq(REGION), eq(VARIANT), eq(CdpResourceType.DATAHUB), anyMap())).thenReturn(cloudVmTypes); when(locationService.location(REGION, AVAILABILITY_ZONE)).thenReturn(REGION); Template actual = underTest.decorate(cloudCredential, template, REGION, AVAILABILITY_ZONE, VARIANT, CdpResourceType.DATAHUB); VolumeTemplate next = actual.getVolumeTemplates().iterator().next(); assertEquals(maximumNumber, next.getVolumeCount().longValue()); assertEquals(maximumSize, next.getVolumeSize().longValue()); }
@Test public void safeGetString() { assertEquals( ArezUtil.safeGetString( () -> "My String" ), "My String" ); }
@Test public void shouldRestoreStateFromChangeLogReader() { EasyMock.expect(changeLogReader.restore(active)).andReturn(taskId0Partitions); active.updateRestored(taskId0Partitions); EasyMock.expectLastCall(); replay(); taskManager.updateNewAndRestoringTasks(); verify(changeLogReader, active); }
@Test public void testReferentialConstraint_true() throws Exception { EntityMeta entityMeta = entityMetaFactory.getEntityMeta(Eee.class); foreignKeyDescFactory = new ForeignKeyDescFactoryImpl( new StandardGenDialect(), entityMetaFactory, false); ForeignKeyDesc foreignKeyDesc = foreignKeyDescFactory .getForeignKeyDesc(entityMeta, entityMeta .getPropertyMeta("bbb")); assertNotNull(foreignKeyDesc); }
@Test public void test61ReverseRenameSimpleCompositeNotOverlappingKeepOldRdnDontExistInEntry() throws LdapException { Dn dn = new Dn( "cn=test,ou=system" ); Rdn oldRdn = new Rdn( "cn=test" ); Rdn newRdn = new Rdn( "cn=joe+sn=plumber" ); Entry entry = new DefaultEntry( dn, "objectClass: top", "objectClass: person", "cn: test", "cn: small", "sn: this is a test" ); List<LdifEntry> reverseds = LdifRevertor.reverseRename( entry, newRdn, LdifRevertor.KEEP_OLD_RDN ); assertNotNull( reverseds ); assertEquals( 1, reverseds.size() ); LdifEntry reversed = reverseds.get( 0 ); assertEquals( "cn=joe+sn=plumber,ou=system", reversed.getDn().getName() ); assertEquals( ChangeType.ModRdn, reversed.getChangeType() ); assertTrue( reversed.isDeleteOldRdn() ); assertEquals( oldRdn.getName(), reversed.getNewRdn() ); assertNull( reversed.getNewSuperior() ); }
@Test public void patternsMustNotContainFragments() { Throwable thrown = Assertions.assertThrows(InvalidUriPatternException.class, () -> UriPattern.parse("/foo#bam")); assertThat(thrown.getMessage(), containsString("URI pattern must not contain a fragment")); }
@Test public void unescapeChars() throws Exception { assertEquals(StringEscapeUtilities.unescapeChars("\\a\\b\\c\\d\\e\\a\\a\\a\\c\\a\\a\\a\\a", "abcde".toCharArray()), "abcdeaaacaaaa"); }
@Test public void testDecodeASPath4ASSeqeunceOneASNumberASSetTwoASNumberPacket() throws Exception { UpdatePacket packet = safeDowncast(decoder.decodeUpdatePacket(buildProtocolPacket(new byte[] { (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x14, (byte)0x50, (byte)0x11, (byte)0x00, (byte)0x10, 0x02, 0x01, 0x00, 0x00, 0x12, 0x34, 0x01, 0x02, 0x00, 0x00, 0x56, 0x78, 0x00, 0x00, (byte)0xcd, (byte)0xef })), UpdatePacket.class); Assert.assertEquals(2, packet.getType()); Assert.assertEquals(0, packet.getWithdrawnRoutes().size()); Assert.assertEquals(1, packet.getPathAttributes().size()); Assert.assertEquals(0, packet.getNlris().size()); ASPathAttribute asPath = (ASPathAttribute)packet.getPathAttributes().remove(0); PathSegment segment; Assert.assertEquals(BGPv4Constants.BGP_PATH_ATTRIBUTE_TYPE_AS4_PATH, PathAttributeCodec.typeCode(asPath)); Assert.assertEquals(ASType.AS_NUMBER_4OCTETS, asPath.getAsType()); Assert.assertEquals(2, asPath.getPathSegments().size()); segment = asPath.getPathSegments().remove(0); Assert.assertEquals(PathSegmentType.AS_SEQUENCE, segment.getPathSegmentType()); Assert.assertEquals(1, segment.getAses().size()); Assert.assertEquals((Integer)0x1234, segment.getAses().remove(0)); segment = asPath.getPathSegments().remove(0); Assert.assertEquals(PathSegmentType.AS_SET, segment.getPathSegmentType()); Assert.assertEquals(2, segment.getAses().size()); Assert.assertEquals((Integer)0x5678, segment.getAses().remove(0)); Assert.assertEquals((Integer)0xcdef, segment.getAses().remove(0)); }
@Test public void yearMonthSlashMontFirstTest() { Temporal expectedFirst = YearMonth.of(2000, 12); Integer startDayOfYear = 336; Integer endDayOfYear = 366; String eventDate = "12/2000"; String year = null; String month = null; String day = null; ParsedTemporal result = TemporalParser.parse(year, month, day, eventDate); assertEquals(expectedFirst, result.getFromDate()); assertFalse(result.getToOpt().isPresent()); assertEquals(Year.from(expectedFirst), result.getYear()); assertEquals(Month.from(expectedFirst), result.getMonth()); assertFalse(result.getDayOpt().isPresent()); assertTrue(result.getIssues().isEmpty()); assertEquals(startDayOfYear, result.getStartDayOfYear().get()); assertEquals(endDayOfYear, result.getEndDayOfYear().get()); }
@Test public void testCustom00() throws Exception { Main.main(getFileAsArgs("custom00")); assertEquals(getResult("ElevenMillionElevenThousandElevenDollars", "TwoHundredElevenMillionTwoHundredTwelveThousandTwoHundredThirteenDollars", "NineHundredEightySevenMillionSixHundredFiftyFourThousandThreeHundredTwentyOneDollars", "ElevenDollars", "FourHundredThirteenDollars", "ZeroDollars", "OneDollars"), this.output.toString()); }
@Test public void testBuiltParagonsOneAndSurvived() { instance.builtParagons(1, true, achievementUpdates, player.getId()); assertThat(achievementUpdates, hasItem(new AchievementUpdate(42, AchievementId.ACH_SO_MUCH_RESOURCES, AchievementUpdate.UpdateType.UNLOCK, 0))); verifyZeroInteractions(eventService); }
@Test(expected = JsonParseException.class) public void testUnparsableAccessibility() { JsonObject jsonObject = new JsonObject(); jsonObject.addProperty("accessibility", "Public"); adapter.deserialize(jsonObject, Accessibility.class, null); }
@Test public void shutdownHookTaskShouldCallShutdown() { ShutdownHook shutdownHook = mockApplication.new ShutdownHook(); shutdownHook.run(); verify(mockApplication).shutdown(any()); }
@Test public void testQuantileBreaksHistogramsPercentagesMoreClassesThaIntervals(){ RenderedImage image2 = ImageUtilities.createImageFromArray( new Number[] {1,1,1,1,1,1,1,1,8,8,8,8,11,11,11,16}, 4, 4); ParameterBlockJAI pb2 = new ParameterBlockJAI(new ClassBreaksDescriptor()); pb2.addSource(image2); pb2.setParameter("method", ClassificationMethod.QUANTILE); pb2.setParameter("numClasses", 5); pb2.setParameter("extrema", getExtrema(image2)); pb2.setParameter("histogram", true); pb2.setParameter("histogramBins", 100); pb2.setParameter("percentages",true); RenderedImage op2 = JAI.create("ClassBreaks", pb2, null); Classification classification2 = (Classification) op2.getProperty(ClassBreaksDescriptor.CLASSIFICATION_PROPERTY); assertNotNull(classification2); double[] percentages2 = classification2.getPercentages(); assertEquals(percentages2.length, 3); assertTrue(percentages2[0]==50.0); assertTrue(percentages2[1]==25.0); assertTrue(percentages2[2]==25.0); }
@Test public void getSearchMode_shouldIdentifySearchByIdentifierTypeList() { List<PatientIdentifierType> patientIdentifierTypeList = new ArrayList<>(); patientIdentifierTypeList.add(new PatientIdentifierType()); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode(null, null, patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode("", null, patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode(" \n\t", null, patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode(null, "", patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode(null, " \n\t", patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode("", "", patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode(" \n\t", "", patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode("", "\n\t", patientIdentifierTypeList, false)); Assert.assertEquals(PatientSearchMode.PATIENT_SEARCH_BY_IDENTIFIER, patientSearchCriteria.getSearchMode(" \n\t", " \n\t", patientIdentifierTypeList, false)); }
@Test public void returnOnCompleteUsingObservable() throws InterruptedException { RetryConfig config = retryConfig(); Retry retry = Retry.of("testName", config); RetryTransformer<Object> retryTransformer = RetryTransformer.of(retry); given(helloWorldService.returnHelloWorld()) .willThrow(new HelloWorldException()); Observable.fromCallable(helloWorldService::returnHelloWorld) .compose(retryTransformer) .test() .await() .assertError(HelloWorldException.class) .assertNotComplete() .assertSubscribed(); Observable.fromCallable(helloWorldService::returnHelloWorld) .compose(retryTransformer) .test() .await() .assertError(HelloWorldException.class) .assertNotComplete() .assertSubscribed(); then(helloWorldService).should(times(6)).returnHelloWorld(); Retry.Metrics metrics = retry.getMetrics(); assertThat(metrics.getNumberOfFailedCallsWithRetryAttempt()).isEqualTo(2); assertThat(metrics.getNumberOfFailedCallsWithoutRetryAttempt()).isEqualTo(0); }
@Test public void testInsertAllSpans() throws Exception { String java7Expected = "Sentence about <span class=\"mock\" data-entity=\"SMA,1,|muscular atrophy,1,\">Spinal muscular atrophy</span>" + " <span class=\"mock\" data-entity=\"SMA,1,\">(SMA).</span>"; String java8Expected = "Sentence about <span class=\"mock\" data-entity=\"muscular atrophy,1,|SMA,1,\">Spinal muscular atrophy</span>" + " <span class=\"mock\" data-entity=\"SMA,1,\">(SMA).</span>"; assertThat(processor.insertSpans(expectedAnnotations, text, config), isOneOf(java7Expected, java8Expected)); }
@Test public void testPauseTask(){ ProcessService processService = Mockito.mock(ProcessService.class); ApplicationContext applicationContext = Mockito.mock(ApplicationContext.class); SpringApplicationContext springApplicationContext = new SpringApplicationContext(); springApplicationContext.setApplicationContext(applicationContext); Mockito.when(applicationContext.getBean(ProcessService.class)).thenReturn(processService); TaskInstance taskInstance = getTaskInstance(); Mockito.when(processService.findTaskInstanceById(252612)) .thenReturn(taskInstance); Mockito.when(processService.updateTaskInstance(taskInstance)) .thenReturn(true); MasterTaskExecThread masterTaskExecThread = new MasterTaskExecThread(taskInstance); masterTaskExecThread.pauseTask(); org.junit.Assert.assertEquals(ExecutionStatus.PAUSE, taskInstance.getState()); }
@Test public void shouldLoadBeanWithMapOfStrings() { Map<String, Object> data = new HashMap<String, Object>(); Map<String, Object> map = new HashMap<String, Object>(); data.put("stringValue", "string"); data.put("integerValue", "1234"); map.put("map", data); DummyModel2 model2 = new DummyModel2(); BeanUtil.load(model2, map); assertTrue(model2.getMap().containsKey("stringValue")); }
@Test void nameThreads() { NamedThreadFactory threadFactory = new NamedThreadFactory("name"); Runnable body = () -> { }; assertThat(threadFactory.newThread(body).getName()).isEqualTo("name"); assertThat(threadFactory.newThread(body).getName()).isEqualTo("name-2"); }
@Test public void testFarFuture() { Row ff = tm.setFarFutureTime(first); assertTrue(ff.<Timestamp>getAs(field.name()).after(new Timestamp(4102444800000L))); }
@Test(groups = "unit") public void validateDefaultHeaders() { HttpClientResponse<ByteBuf> mockedResponse = new HttpClientMockWrapper.HttpClientBehaviourBuilder() .withContent("").withStatus(200) .withHeaders(EmptyHttpHeaders.INSTANCE) .asHttpClientResponse(); HttpClientMockWrapper httpClientMockWrapper = new HttpClientMockWrapper(mockedResponse); UserAgentContainer userAgentContainer = new UserAgentContainer(); userAgentContainer.setSuffix("i am suffix"); HttpTransportClient transportClient = getHttpTransportClientUnderTest(100, userAgentContainer, httpClientMockWrapper.getClient()); RxDocumentServiceRequest request = RxDocumentServiceRequest.createFromName( OperationType.Create, "dbs/db/colls/col", ResourceType.Document); request.setContentBytes(new byte[0]); transportClient.invokeStoreAsync(Uri.create(physicalAddress), new ResourceOperation(OperationType.Create, ResourceType.Document), request).toBlocking().value(); assertThat(httpClientMockWrapper.getCapturedInvocation()).asList().hasSize(1); ImmutablePair<HttpClientRequest<ByteBuf>, RxClient.ServerInfo> httpClientInvocation = httpClientMockWrapper.getCapturedInvocation().get(0); assertThat(httpClientInvocation.left.getHeaders().get(HttpConstants.HttpHeaders.USER_AGENT)).endsWith("i am suffix"); assertThat(httpClientInvocation.left.getHeaders().get(HttpConstants.HttpHeaders.CACHE_CONTROL)).isEqualTo("no-cache"); assertThat(httpClientInvocation.left.getHeaders().get(HttpConstants.HttpHeaders.ACCEPT)).isEqualTo("application/json"); assertThat(httpClientInvocation.left.getHeaders().get(HttpConstants.HttpHeaders.VERSION)).isEqualTo(HttpConstants.Versions.CURRENT_VERSION); }
@Test() public void testCheckKeyUniquenessWhenEmailValueIsNotUnique() { try { Response response = new Response(); List<Map<String, Object>> userMapList = new ArrayList<>(); Map<String, Object> map = new HashMap<>(); map.put(JsonKey.NAME, "NAME"); userMapList.add(map); response.put(JsonKey.RESPONSE, userMapList); when(cassandraOperation.getRecordsByIndexedProperty( userDb.getKeySpace(), userDb.getTableName(), "email", "valueNotUnique")) .thenReturn(response); userService.checkKeyUniqueness("email", "valueNotUnique", false); } catch (Exception e) { Assert.assertEquals("Email already exists.", e.getMessage()); } }
@Test public void testHasPassword() throws IOException { userConfig.setPassword(""); assertFalse(userConfig.hasPassword()); userConfig.setPassword(" "); assertTrue(userConfig.hasPassword()); userConfig.setPassword("mySecretPassword"); assertTrue(userConfig.hasPassword()); userConfig.setPassword(null); assertFalse(userConfig.hasPassword()); }
@Test public void testGetParametersWithDefaultEntityAndDisabledDefaults() throws Exception { unit.setActive(false); unit.setSecurity(false); HonorType entity = new HonorType(); Map<String, Object> expected = new HashMap<String, Object>(); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void deleteTask() { mTaskDetailPresenter.deleteTask(); verify(mTasksRepository).deleteTask(mTask.getId()); }
@Test public void differentEventDoesntEqual() { NamedVehicleMessage anotherMessage = new EventedSimpleVehicleMessage( name, Double.valueOf(24), Double.valueOf(444.1)); assertFalse(message.equals(anotherMessage)); }
@Test public void testNonTemporalOrganizationSetSimple() { List<ShardIndexInfo> inputShards = ImmutableList.of( shardWithSize(10, 10), shardWithSize(10, 10), shardWithSize(10, 10)); Set<OrganizationSet> compactionSets = compactionSetCreator.createCompactionSets(tableInfo, inputShards); assertEquals(compactionSets.size(), 1); assertEquals(getOnlyElement(compactionSets).getShards(), extractIndexes(inputShards, 0, 1, 2)); }
@Test public void testNistVector() throws Exception { byte[] rawCiphertext = TestUtil.hexDecode(NIST_CIPHERTEXT); byte[] iv = TestUtil.hexDecode(NIST_IV); byte[] ciphertext = new byte[iv.length + rawCiphertext.length]; System.arraycopy(iv, 0, ciphertext, 0, iv.length); System.arraycopy(rawCiphertext, 0, ciphertext, iv.length, rawCiphertext.length); AesCtrJceCipher cipher = new AesCtrJceCipher(TestUtil.hexDecode(NIST_KEY), iv.length); assertArrayEquals(TestUtil.hexDecode(NIST_PLAINTEXT), cipher.decrypt(ciphertext)); }
@Test @RunWithCustomExecutor public void givenClientMockWhenWhenImportAgenciesThenReturnOK() throws ReferentialException, DatabaseConflictException, FileNotFoundException { stream = PropertiesUtils.getResourceAsStream("jeu_donnees_OK_regles_CSV.csv"); VitamThreadUtils.getVitamSession().setTenantId(TENANT_ID); client.importAgenciesFile(stream, "agencies.csv"); }
@Test public void test() { BlockEntryImpl block = UnitTestingSupport.block("block"); TripEntryImpl tripA = UnitTestingSupport.trip("tripA"); TripEntryImpl tripB = UnitTestingSupport.trip("tripB"); UnitTestingSupport.stopTime(0, null, tripA, 0, 0); UnitTestingSupport.stopTime(0, null, tripB, 0, 0); ServiceIdActivation serviceIds = UnitTestingSupport.serviceIds("sid"); BlockConfigurationEntry blockConfig = UnitTestingSupport.blockConfiguration( block, serviceIds, tripA, tripB); BlockInstance blockInstanceA = new BlockInstance(blockConfig, 123L); BlockTripInstance blockTripInstance = BlockTripInstanceLibrary.getBlockTripInstance( blockInstanceA, UnitTestingSupport.aid("tripA")); assertSame(tripA, blockTripInstance.getBlockTrip().getTrip()); assertEquals(123L, blockTripInstance.getServiceDate()); blockTripInstance = BlockTripInstanceLibrary.getBlockTripInstance( blockInstanceA, UnitTestingSupport.aid("tripB")); assertSame(tripB, blockTripInstance.getBlockTrip().getTrip()); assertEquals(123L, blockTripInstance.getServiceDate()); blockTripInstance = BlockTripInstanceLibrary.getBlockTripInstance( blockInstanceA, UnitTestingSupport.aid("tripC")); assertNull(blockTripInstance); }
@Test(expected = ProcessingStorageWorkspaceException.class) public void persistProcessWorkflowTestException() throws Exception { doThrow(new ContentAddressableStorageServerException("fail")) .when(workspaceClient) .putObject(anyString(), anyString(), any(Object.class)); ProcessWorkflow processWorkflow = new ProcessWorkflow(); processDataManagement.persistProcessWorkflow("folder", processWorkflow); }
@Test public void shouldBeApplicationResourceType(){ ResourceTypeEntity r = new ResourceTypeEntity(); r.setName("APPLICATION"); assertTrue(r.isApplicationResourceType()); assertTrue("APPLICATION".equals(DefaultResourceTypeDefinition.APPLICATION.name())); }
@Test public void split() { byte[] bytes1 = new byte[12781]; for (int i = 0; i < bytes1.length; i++) { bytes1[i] = (byte) (256 * Math.random()); } byte[][] parts1 = ByteKit.split(bytes1, 1); assertEquals(parts1.length, bytes1.length); Byte[] combine1 = Arrays.stream(parts1).map(it -> it[0]).toArray(Byte[]::new); for (int i = 0; i < combine1.length; i++) { assertEquals((byte) combine1[i], bytes1[i]); } byte[][] parts2 = ByteKit.split(bytes1, 11); assertEquals( parts2.length, bytes1.length % 11 == 0 ? bytes1.length / 11 : bytes1.length / 11 + 1); Byte[] combine2 = Arrays.stream(parts2) .flatMap( part -> { List<Byte> bytes = new ArrayList<>(); for (byte b : part) { bytes.add(b); } return bytes.stream(); }) .toArray(Byte[]::new); for (int i = 0; i < combine2.length; i++) { assertEquals((byte) combine2[i], bytes1[i]); } }
@Test public void testClearSnapshot() throws InterruptedException, ReaperException, ClassNotFoundException, IOException { JmxProxy proxy = (JmxProxy) mock(Class.forName("io.cassandrareaper.jmx.JmxProxyImpl")); StorageServiceMBean storageMBean = Mockito.mock(StorageServiceMBean.class); JmxProxyTest.mockGetStorageServiceMBean(proxy, storageMBean); AppContext cxt = new AppContext(); cxt.config = TestRepairConfiguration.defaultConfig(); cxt.jmxConnectionFactory = mock(JmxConnectionFactory.class); when(cxt.jmxConnectionFactory.connectAny(any(Collection.class))).thenReturn(proxy); SnapshotService .create(cxt, SNAPSHOT_MANAGER_EXECUTOR) .clearSnapshot("test", Node.builder().withHostname("127.0.0.1").build()); verify(storageMBean, times(1)).clearSnapshot("test"); }
@Test(expected = U2fBadConfigurationException.class) public void defaultConstructedU2FstartRegistrationShouldRefuseInvalidAppId() throws U2fBadInputException, U2fBadConfigurationException { DeviceRegistration deviceRegistration = new DeviceRegistration(KEY_HANDLE_BASE64, USER_PUBLIC_KEY_SIGN_HEX, ATTESTATION_CERTIFICATE, 0); deviceRegistration.markCompromised(); new U2F().startRegistration("example.com", ImmutableList.of(deviceRegistration)); fail("startRegistration did not refuse an invalid app ID."); }
@Test public void testHasCustomRealm() { OAuth2Authentication authentication = tokenInfoService.loadAuthentication("123456789"); boolean result = RealmOAuth2ExpressionUtils.hasAnyRealm(authentication, new String[] { "customrealm" }); Assertions.assertThat(result).isFalse(); }
@Test public void testAddContextGroupMenuItem() { final String menuItemId = "menuItemId"; final String menuId = RandomStringUtils.random(10); final String label = RandomStringUtils.random(10); final MenuPosition position = MenuPosition.RIGHT; workbenchMenuCompactNavBarView.addContextGroupMenuItem(menuItemId, menuId, label, position); verify(anchorButton).setText(label); verify(listDropDown).add(anchorButton); assertEquals(dropDownMenu, workbenchMenuCompactNavBarView.getMenuItemContextWidgetMap().get(menuId)); assertTrue(workbenchMenuCompactNavBarView.getMenuItemContextMenus().containsValue(listDropDown)); }
@Test public void test_check_withNonVoidReturnType() { ExecutableElement element = Mockito.mock(ExecutableElement.class); TypeMirror typeMirror = Mockito.mock(TypeMirror.class); Mockito.when(element.getReturnType()).thenReturn(typeMirror); Mockito.when(typeMirror.getKind()).thenReturn(TypeKind.ARRAY); MatcherAssert.assertThat(CoreMatchers.HAS_VOID_RETURN_TYPE.getMatcher().check(element), Matchers.is(false)); }
@Test public void testRejectedByRegulationsPaymentResult() { when (context.getString(R.string.px_change_payment)).thenReturn(LABEL_CHANGE); final PaymentResult paymentResult = PaymentResults.getStatusRejectedByRegulations(); final FooterPaymentResult footerPaymentResult = new FooterPaymentResult(paymentResult, actionDispatcher); final Footer.Props props = footerPaymentResult.getFooterProps(context); assertNotNull(props); assertNull(props.linkAction); assertNotNull(props.buttonAction); assertEquals(LABEL_CHANGE, props.buttonAction.label); assertNotNull(props.buttonAction.action); assertTrue(props.buttonAction.action instanceof ChangePaymentMethodAction); }
@Test public void testJoinCollectionString() throws Exception { List<String> list = new ArrayList<String>(); assertEquals("", StringUtils.join(list, ",")); list.add("v1"); assertEquals("v1", StringUtils.join(list, "-")); list.add("v2"); list.add("v3"); String out = StringUtils.join(list, ":"); assertEquals("v1:v2:v3", out); }
@Test public void resendInternalUserInvite() { setupPutWithRestResultExpectations(inviteRestBaseUrl + "/internal/pending/123/resend", OK); RestResult<Void> result = service.resendInternalUserInvite(123L); assertTrue(result.isSuccess()); setupPutWithRestResultVerifications(inviteRestBaseUrl + "/internal/pending/123/resend"); }
@Test public void testParseByteSize() throws Exception { Assert.assertEquals(ConfigHelper.parseByteSize("999"), 999L); Assert.assertEquals(ConfigHelper.parseByteSize("123k"), 123000L); Assert.assertEquals(ConfigHelper.parseByteSize("345K"), 345L * 1024); Assert.assertEquals(ConfigHelper.parseByteSize("666m"), 666000000L); Assert.assertEquals(ConfigHelper.parseByteSize(" 1000 M "), 1024L * 1024000L); Assert.assertEquals(ConfigHelper.parseByteSize("4g"), 4000000000L); Assert.assertEquals(ConfigHelper.parseByteSize("8G"), 8L * 1024L * 1024L * 1024L); Assert.assertEquals(ConfigHelper.parseByteSize("1t"), 1000000000000L); Assert.assertEquals(ConfigHelper.parseByteSize("10 T"), 10L * 1024L * 1024L * 1024L * 1024L); Assert.assertEquals(ConfigHelper.parseByteSize("10p"), 10000000000000000L); Assert.assertEquals(ConfigHelper.parseByteSize("9P"), 9L * 1024L * 1024L * 1024L * 1024L * 1024); Assert.assertEquals(ConfigHelper.parseByteSize(" 1e "), 1000000000000000000L); Assert.assertEquals(ConfigHelper.parseByteSize(" 1E"), 1L * 1024L * 1024L * 1024L * 1024L * 1024L * 1024L); }
@Test public void assertItemHasParent() throws Exception { Reader reader = new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><changelog>" + "<changeset version=\"1122\">" + "<date>2009-01-12T00:00:00Z</date>" + "<user>snd\\user</user>" + "<comment>comment</comment>" + "<items>" + "<item action=\"add\">path</item>" + "<item action=\"delete\">path2</item>" + "</items>" + "</changeset>" + "</changelog>"); ChangeSetReader changesetReader = new ChangeSetReader(); ChangeLogSet logset = changesetReader.parse(null, null, reader); ChangeSet changeset = logset.iterator().next(); Item item = changeset.getItems().get(0); assertNotNull("The item's parent change set cant be null", item.getParent()); assertSame("The item's parent is not the same as the change set it belongs to", changeset, item.getParent()); }
@Test public void testProjectNumber() throws IOException { DataflowPipelineOptions options = buildPipelineOptions(); options.setProject("12345"); thrown.expect(IllegalArgumentException.class); thrown.expectMessage("Project ID"); thrown.expectMessage("project number"); DataflowRunner.fromOptions(options); }
@Test public void shouldReturnNullForOutOfRangeDecimal() { final String result = udf.chr(1_114_112); assertThat(result, is(nullValue())); }
@Test void testGetShowAnnotationTools() { PdfViewer dcv = getDcvUnderTest(PATH_DCV_1); assertEquals(true, dcv.isShowAnnotationTools()); }
@Test public void evaluateExpression_withModel_testVariationOfWhitespaces() { Map<String, Object> model = new HashMap<String, Object>(); model.put("value1", 5L); model.put("value2", 6L); model.put("value3", null); Expression expression = ExpressionParser.parseExpression(" (value1==5 +6 -2*3) ||value3 !=null && ( value2 *3 ==18.0 ) ", model); MatcherAssert.assertThat((Boolean) expression.evaluateExpression().value(), Matchers.is(true)); }
@Test public void testCreateInteractionId() { InteractionIdHelper helper = new InteractionIdHelper(); String extension ="D123401"; II ii = new II(); ii = helper.createInteractionId(extension); assertEquals(ii.getRoot(), "2.16.840.1.113883.1.6"); assertEquals(ii.getExtension(), "D123401"); }
@Test public void test_serialization() { TenorDateParameterMetadata test = TenorDateParameterMetadata.of(DATE, TENOR_10Y); assertSerialization(test); }
@Test public void testCommonPrefixActionString() { EnumSet<ActionSetTwo> set; set = PermissionActions.parseActionStringToSet(ActionSetTwo.class, ""); assertEquals(0, set.size()); set = PermissionActions.parseActionStringToSet(ActionSetTwo.class, "foobar,fooba"); assertEquals(2, set.size()); assertTrue(set.contains(ActionSetTwo.fooba)); assertTrue(set.contains(ActionSetTwo.foobar)); set = PermissionActions.parseActionStringToSet(ActionSetTwo.class, "foobar,fooba,foobazz"); assertEquals(3, set.size()); assertTrue(set.contains(ActionSetTwo.fooba)); assertTrue(set.contains(ActionSetTwo.foobar)); assertTrue(set.contains(ActionSetTwo.foobazz)); set = PermissionActions.parseActionStringToSet(ActionSetTwo.class, "foobar,fooba,foobazz,foobaz"); assertEquals(4, set.size()); assertTrue(set.contains(ActionSetTwo.fooba)); assertTrue(set.contains(ActionSetTwo.foobar)); assertTrue(set.contains(ActionSetTwo.foobaz)); assertTrue(set.contains(ActionSetTwo.foobazz)); }
@Test public void checkConfigurationLoaderServer () { AbstractServerConfiguration server = conf.getServerConfiguration (); Assert.assertNotNull (server, "server configuration is null."); }
@Test public void testValidateMandatoryFrameworkFieldsSuccess() { Request request = initailizeRequest(); request.getRequest().put(JsonKey.FRAMEWORK, createFrameWork()); boolean response = false; try { new UserRequestValidator() .validateMandatoryFrameworkFields( request.getRequest(), getSupportedFileds(), getMandatoryFields()); response = true; } catch (Exception e) { Assert.assertTrue(response); } Assert.assertTrue(response); }
@Test public void testShouldUpdateFee() { doNothing().when(feeRepository).updateFee(any(FeeRequest.class)); feeService.updateFee(FeeRequest.builder().fees(getFees()).build()); }
@Test public void shouldReturnExpectedValueWhenMiningCoordinatorExists() { final JsonRpcRequestContext request = requestWithParams(); final String expectedAddressString = "fe3b557e8fb62b89f4916b721be55ceb828dbd73"; final Address expectedAddress = Address.fromHexString(expectedAddressString); final JsonRpcResponse expectedResponse = new JsonRpcSuccessResponse(request.getRequest().getId(), "0x" + expectedAddressString); when(miningCoordinator.getCoinbase()).thenReturn(Optional.of(expectedAddress)); final JsonRpcResponse actualResponse = method.response(request); assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse); verify(miningCoordinator).getCoinbase(); verifyNoMoreInteractions(miningCoordinator); }
@Test public void testIdeal() throws ScoreException { assertEquals(0.0, subject.score(irisCorrect), DELTA); }
@Test public void testSMOD_2() { VM vm = getSubject(); program = getProgram("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE2" + "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF56" + "07"); String s_expected_1 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC"; vm.step(program); vm.step(program); vm.step(program); DataWord item1 = program.stackPop(); assertEquals(s_expected_1, Hex.toHexString(item1.getData()).toUpperCase()); }
@Test public void revokeTokenFailure() throws InterruptedException { mEndPoint.enqueueReturnInvalidClient(); final CountDownLatch latch = new CountDownLatch(1); MockRequestCallback<Boolean, AuthorizationException> cb = new MockRequestCallback<>(latch); mSessionClient.revokeToken("access_token", cb); RecordedRequest recordedRequest = mEndPoint.takeRequest(); latch.await(); assertNull(cb.getResult()); assertNotNull(cb.getException()); assertEquals(TYPE_OAUTH_TOKEN_ERROR, cb.getException().type); assertThat(recordedRequest.getPath(), equalTo("/revoke?client_id=CLIENT_ID&token=access_token")); }
@Test public void testRingSizeMatch() throws InvalidSmilesException { SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer target = sp.parseSmiles("C1=CC2=C3C(C=CC4=CC=CC(C=C2)=C34)=C1"); IAtomContainer query = sp.parseSmiles("C1\\C=C/C=C/C=C\\C2=CC=CC(=C2)\\C=C/1"); Isomorphism smsd = new Isomorphism(query, target, Algorithm.VFLibMCS, true, true, false); assertEquals(15, query.getAtomCount()); assertEquals(16, target.getAtomCount()); assertNotNull(smsd.getFirstAtomMapping()); assertEquals(6, smsd.getFirstAtomMapping().getCount()); }
@Test public void testNoFormatting() throws Exception { assertEquals("10", _resolver.resolve(POSITIVE_VALUE_STAT_NAME, null)); assertEquals("0", _resolver.resolve(ZERO_VALUE_STAT_NAME, null)); assertEquals("-1", _resolver.resolve(NEGATIVE_VALUE_STAT_NAME, null)); }
@Test public void testReplaceLineBreaksWithClass() throws Exception { MultilineAnnotatedTestClass2 c = new MultilineAnnotatedTestClass2(); JSONAnnotationEncoder encoder = new JSONAnnotationEncoder(); String json = encoder.encode(c); TestCase.assertEquals("{\"mys\":\"bla\\ntest\"}", json); }
@Test public void should_throw_an_illegal_state_exception_as_the_format_parameter_is_not_valid() { try { check.setFormat("("); CssCheckVerifier.issuesOnScssFile(check, CheckTestUtils.getScssTestFile("variable-naming-convention/scssVariableNamingConvention.scss")).noMore(); } catch (IllegalStateException e) { assertThat(e.getMessage()).isEqualTo("Check scss:scss-variable-naming-convention (SCSS variables should follow a naming convention): " + "format parameter \"(\" is not a valid regular expression."); } }
@Test void storeEncryptedPrivateKeyToFile() throws Exception { store.store(SINGLE_STORE_REF, keyPair, PASSWORD); assertThat(FileUtils.readFileToString(FILE), equalTo(ENCRYPTED_FILE_CONTENT)); }
@Test public void lineShouldBeReplaced() throws IOException { ALLOWLIST_TYPE key = ALLOWLIST_TYPE.NODES; String newValue = "node5"; assertThat(countLines()).isEqualTo(2); assertThat(hasKeyAndExactLineContent(key, nodesAllowlist)).isTrue(); allowlistPersistor.updateConfig(key, Collections.singleton(newValue)); assertThat(countLines()).isEqualTo(2); assertThat(hasKeyAndContainsValue(key, newValue)).isTrue(); assertThat(hasKeyAndExactLineContent(key, nodesAllowlist)).isFalse(); }
@Test public void shouldFailToConfigureWithInvalidSerializerClass() throws Exception { parameters.put(SERIALIZER, "java.lang.String"); try { Configurables.configure(fixture, new Context(parameters)); } catch (ClassCastException e) { } parameters.put(SERIALIZER, FakeConfigurable.class.getName()); try { Configurables.configure(fixture, new Context(parameters)); } catch (IllegalArgumentException e) { } }
@Test public void testStringToSoapCorrect() throws Exception { String msg = new String( MESSAGE ); stringToSoap( msg ); }
@Test public final void testWriteDataCompleteNullData() throws IOException { TestAbstractSerialPort port = Mockito.spy(new TestAbstractSerialPort("COM1", 9600)); byte[] data = null; int offset = 0; int length = 0; exception.expect(NullPointerException.class); exception.expectMessage(is(equalTo("Data to be sent cannot be null."))); port.writeData(data, offset, length); }
@Test public void injectDispatcherWorks() throws Exception { BaseActionCreator ac = new BaseActionCreator(); mFluxxan.inject(ac); ac.dispatch(new Action("EMPTY_ACTION")); }
@Test(expected = IllegalArgumentException.class) public void testSubtractWithException() { double[] vals1 = {1, 2, 3, 4, 5, 6, 7, 8}; double[] vals2 = {8, 7, 6, 5, 4, 3, 2, 1, 0}; DoubleVector vec1 = new DenseDoubleVector(vals1); DoubleVector vec2 = new DenseDoubleVector(vals2); vec1.subtract(vec2); }
@Test public void testSimpleConfig() { Map<String, String> properties = new TreeMap<>(); properties.put("string-value", "some value"); properties.put("boolean-value", "true"); inspect(properties, null, null, null, binder -> bindConfig(binder).bind(AnnotatedSetter.class)) .component("ConfigurationFactoryTest$AnnotatedSetter") .value("BooleanValue", "boolean-value", "false", "true", "") .value("StringValue", "string-value", "null", "some value", "") .end(); }
@Test public void testGetSuffix() { ResourceResolver resourceResolver = context.resourceResolver(); MockSlingHttpServletRequest request = context.request(); request.setResource(resourceResolver.getResource("/apple/macbookair")); MockRequestPathInfo requestPathInfo = (MockRequestPathInfo)request.getRequestPathInfo(); requestPathInfo.setSelectorString("show.test"); requestPathInfo.setExtension("html"); requestPathInfo.setSuffix("super/simple"); request.setQueryString("cpu=i7&ghz=2.4"); String expResult = "super/simple"; String result = PathInfoUtil.getSuffix(request); assertEquals(expResult, result); }
@Test public void properMessageIsConstructed_forInterruptExecutionMessage() { assertThat(new InterruptExecution().toMessage()).isEqualTo("{\"interrupt\":[]}"); }
@Test public void testReceiveWithUnknownClassThrowsException() throws Exception { HashMap<Class, Responder> classResponderHashMap = generateRespondersMap(); JgroupsMessageReceiver jgroupsMessageReceiver = new JgroupsMessageReceiver(classResponderHashMap, new RemoteServiceHandlesStore()); assertThatThrownBy(() -> jgroupsMessageReceiver.receive(UUID_MSG)).isInstanceOf(SilverWareClusteringException.class).hasMessageContaining(UUID.class.getName()); new Verifications() {{ responder1.processMessage((Message) any); times = 0; responder2.processMessage((Message) any); times = 0; }}; }
@Test public void transform(){ assertThat(lazyT1.transform((a,b,c,d,e,f)->a+b+c+d+e+f),equalTo("hello12348")); }
@Test public void twoExpressionArrays_getArgs() { assertEquals(Arrays.asList(str1, str2, str3, str4), new QMap(exprs1, exprs2).getArgs()); }
@Test(expected = CDKException.class) public void testOccurrenceNumericValues() throws CDKException { RGroupList rgrLst = new RGroupList(1); rgrLst.setOccurrence("a,3,10"); }
@Test public void isPrettyFalseForFalse() { HttpHeaders headers = createHeaders(); headers.getRequestHeaders().putSingle(FHIRConfiguration.DEFAULT_PRETTY_RESPONSE_HEADER_NAME, "false"); assertFalse(FHIRProvider.isPretty(headers, generatePrettyParameterUriInfo("false"))); }
@Test public void testEquals() { assertFalse(getTestObject().equals(null)); assertFalse(getTestObject().equals("DummyString")); assertTrue(getTestObject().equals(getTestObject())); ConnectionProperties sameObject = getTestObject(); assertTrue(sameObject.equals(sameObject)); assertFalse(getTestObject().equals(getDifferentObject())); assertFalse(getTestObject().equals(getAnotherDifferentObject())); }
@Test public void simpleLongListBoundaryCase_4() { final BytesValueRLPOutput out = new BytesValueRLPOutput(); out.startList(); for (int i = 0; i < 65536; i++) { out.writeByte((byte) 0x3c); } out.endList(); assertThat(out.encoded()).isEqualTo(h("0xfa010000" + times("3c", 65536))); }
@Test @SuppressWarnings("unchecked") public void executeCommandTestDealingWithIoException() throws IOException, InterruptedException { spy.logger = Mockito.mock(Logger.class); Runtime runtimeMock = configureAndGetRuntimeMock(); Mockito.when(runtimeMock.exec(command)).thenThrow(IOException.class); String commandOutput = spy.executeCommand(command); executeChecksForExceptionTests(commandOutput, IOException.class); }
@Test public void testParse() throws Exception { final ByteArrayInputStream bais = new ByteArrayInputStream(TEST_CONTENT.getBytes("US-ASCII")); final XWikiAttachment attach = this.serializer.parse(bais); bais.close(); Assert.assertEquals("Attachment1 had wrong name", "file1", attach.getFilename()); Assert.assertEquals("Attachment1 had wrong author", "me", attach.getAuthor()); Assert.assertEquals("Attachment1 had wrong version", "1.1", attach.getVersion()); Assert.assertEquals("Attachment1 had wrong comment", attach.getComment(), "something whitty"); Assert.assertEquals("Attachment1 had wrong date.", attach.getDate().getTime() + "", "1293045632000"); }
@Test public void testBuildQuery_empty() { String expectedQuery = ""; String query = new QueryBuilder<Object>() .buildQuery(); assertEquals(expectedQuery, query); }
@Test public void testCopyPropertiesToWithExcludes() { Item item1 = new Item(12, "abc", true); ConcreteItem item2 = new ConcreteItem(20, "xyz", false); item2.setPrice(15.5); instance = new BeanUtils(item2); instance.copyPropertiesTo(item1, "id"); assertEquals(20, item2.getId()); assertEquals("xyz", item1.getName()); }
@Test public void testReduceKeySize() throws NoSuchKeyException { final Versification v = Versifications.instance().getVersification("KJV"); final Book b = Books.installed().getBook("ESV_th"); assertEquals("Gen.2", reduceKeySize(v, b, "Gen.2-Rev.1").getOsisRef()); assertEquals("Gen.2", reduceKeySize(v, b, "Gen.2").getOsisRef()); assertEquals("Gen.0", reduceKeySize(v, b, "Gen.0").getOsisRef()); assertEquals("Gen.0", reduceKeySize(v, b, "Gen.0").getOsisRef()); assertEquals("Gen.1.1", reduceKeySize(v, b, "Gen.1.1").getOsisRef()); assertEquals("Judg.1", reduceKeySize(v, b, "Judg").getOsisRef()); assertEquals("Jude", reduceKeySize(v, b, "Jude").getOsisRef()); assertEquals("Ruth.1", reduceKeySize(v, b, "Rut").getOsisRef()); }
@Test public void testCalculateNoneOf() throws Exception { final CarrierSlaService carrierSlaService = context.mock(CarrierSlaService.class, "carrierSlaService"); final MutableShoppingCart cart = context.mock(MutableShoppingCart.class, "cart"); context.checking(new Expectations() {{ allowing(cart).getCarrierSlaId(); will(returnValue(Collections.emptyMap())); }}); final Total delTotal = new PriceListDeliveryCostCalculationStrategy(carrierSlaService, null, null).calculate(cart); assertNull(delTotal); context.assertIsSatisfied(); }
@Test(expected = IllegalArgumentException.class) public void unknownKey() { var key = new Entity.Key<>() {}; underTest.convert(Event.of(key, specification)); }
@Test(expected = PropertyTypeException.class) public void get_unknownPrefixKey_throw() { xmpMeta.get( "unknown:key" ); }
@Test public void testOr() { Filter result = filters.or(ff, a, b); assertEquals(ff.or(a, b), result); }
@Test public void testReturnsCompileError() throws ApiException { ExecuteAnonResult result = conn.executeAnonymous("System.Debug("); assertFalse(result.isSuccess()); assertFalse(result.isCompiled()); assertEquals("expecting a right parentheses, found '<EOF>'", result.getCompileProblem()); assertEquals("", result.getDebugLog()); }
@Test(expected = CircusTrainException.class) public void tryToReplaceExistingUnpartitionedReplicaTableWithView() throws TException { convertSourceTableToView(); existingReplicaTable.getParameters().put(REPLICATION_EVENT.parameterName(), "previousEventId"); replica.updateMetadata(EVENT_ID, tableAndStatistics, DB_NAME, TABLE_NAME, mockReplicaLocationManager); }
@Test void should_interrupt_analysis_when_InterruptedIOException_is_thrown() { InputFile inputFile = TestUtils.inputFile("src/test/files/metrics/NoSonar.java"); VisitorsBridge visitorsBridge = new VisitorsBridge(new CheckThrowingException(new RecognitionException(42, "interrupted", new InterruptedIOException()))); AnalysisException e = assertThrows(AnalysisException.class, () -> JavaAstScanner.scanSingleFileForTests(inputFile, visitorsBridge)); assertThat(e.getMessage()).isEqualTo("Analysis cancelled"); assertThat(e.getCause().getClass()).isEqualTo(RecognitionException.class); }
@Test public void updateJarJobTest() throws ApiException { String xProjectId = null; Long jobId = null; Integer managerSpu = null; String name = null; String desc = null; Integer clusterId = null; Integer spuNumber = null; Integer parallelNumber = null; Integer executorNumber = null; Integer executorSpu = null; Boolean logEnabled = null; String obsBucket = null; String smnTopic = null; File jar = null; String jarUrl = null; File config = null; String configUrl = null; String mainClass = null; String args = null; JobUpdateResponse response = api.updateJarJob(xProjectId, jobId, managerSpu, name, desc, clusterId, spuNumber, parallelNumber, executorNumber, executorSpu, logEnabled, obsBucket, smnTopic, jar, jarUrl, config, configUrl, mainClass, args); }
@Test(expected = IllegalArgumentException.class) public void testOpacitizeColorFloatBadInput12() { ColorUtilities.opacitizeColor(Color.RED, 1.0000001f); }
@Test public void unwrapShouldThrowException() throws SQLException { expectedEx.expect(SQLException.class); Neo4jDatabaseMetaData databaseMetaData = mock(Neo4jDatabaseMetaData.class, Mockito.CALLS_REAL_METHODS); databaseMetaData.unwrap(Neo4jResultSet.class); }
@Test public void testCreateNodePointerNodePointer03() throws Exception { DynamicPointerFactoryEx factory = new DynamicPointerFactoryEx(); QName qName = new QName("name"); Object bean = new Object(); Locale locale = new Locale("ja"); NodePointer nodePointer = NodePointer.newNodePointer(qName, bean, locale); assertNull(factory.createNodePointer(nodePointer, qName, bean)); }
@Test public void testLocalizedKey() throws IOException { final Map<String, Object> container = new LinkedHashMap<>(); final Map<String, Object> messageObject = new LinkedHashMap<>(); final Map<String, Object> apnsObject = new LinkedHashMap<>(); apnsObject.put("localized-key", "myLocalizedKey"); messageObject.put("alert", "Howdy"); messageObject.put("apns",apnsObject); container.put("message", messageObject); final UnifiedPushMessage unifiedPushMessage = parsePushMessage(container); assertEquals("myLocalizedKey", unifiedPushMessage.getMessage().getApns().getLocalizedKey()); }
@Test public void setTextFont() { delegateNativeContext2D.setTextFont("arial"); verify(context, times(1)).setFont("arial"); }
@Test public void testgetModTimestampEmtpy() { ZMSImpl zmsImpl = zmsInit(); assertEquals(zmsImpl.getModTimestamp(null), 0); assertEquals(zmsImpl.getModTimestamp("\"\""), 0); assertEquals(zmsImpl.getModTimestamp(""), 0); }
@Test public void ローテートされたADS書き込み失敗ログが論理削除モードで削除できること() throws AdsWriteFailureLogException { final String fileName = String.format("adsWriteFailure_%s.log.%d", PIO_VERSION_DUMMY, CREATED_TIME_DUMMY); File srcFile = new File("./", fileName); File dstFile = new File("./", fileName + ".done"); RollingAdsWriteFailureLog rolling = new RollingAdsWriteFailureLog(srcFile, null, PIO_VERSION_DUMMY, true); try { if (!srcFile.createNewFile()) { fail("Failed to create temporary file. " + srcFile.getAbsolutePath()); } } catch (IOException e) { e.printStackTrace(); fail(e.getMessage()); } Boolean isPhysicalDeleteDefault = true; Field isPhysicalDelete = null; try { Class<?> clazz = AbstractAdsWriteFailureLog.class; isPhysicalDelete = clazz.getDeclaredField("isPhysicalDelete"); isPhysicalDelete.setAccessible(true); isPhysicalDeleteDefault = (Boolean) isPhysicalDelete.get(rolling); isPhysicalDelete.set(rolling, false); rolling.deleteRotatedLog(); assertFalse(srcFile.exists()); assertTrue(dstFile.exists()); } catch (Exception e) { e.printStackTrace(); fail("configuration failed."); } finally { if (null != srcFile) { srcFile.delete(); } if (null != dstFile) { dstFile.delete(); } if (null != isPhysicalDelete) { try { isPhysicalDelete.set(rolling, isPhysicalDeleteDefault); } catch (Exception e) { e.printStackTrace(); } } } }
@Test public void testCreatePrivilege_repositoryAdmin() { when(authorizationManager.getPrivilege("name")).thenThrow(new NoSuchPrivilegeException("name")); ApiPrivilegeRepositoryAdminRequest apiPrivilege = new ApiPrivilegeRepositoryAdminRequest("name", "description", "format1", "repository1", Arrays .asList(PrivilegeAction.BROWSE, PrivilegeAction.READ, PrivilegeAction.DELETE, PrivilegeAction.EDIT, PrivilegeAction.ADD)); underTest.createPrivilege(apiPrivilege); ArgumentCaptor<Privilege> argument = ArgumentCaptor.forClass(Privilege.class); verify(authorizationManager).addPrivilege(argument.capture()); assertPrivilege(argument.getValue(), "name", "description", FORMAT_KEY, "format1", REPOSITORY_KEY, "repository1", ACTIONS_KEY, "browse,read,delete,edit,add"); }
@Test public void shouldMemoizeConsumer() { final LongConsumer consumer = Mockito.mock(LongConsumer.class); final LongFunction<String> keyFunction = a -> "key"; try (final Cache<String, Long> cache = JCacheMemoize.createCache(LongConsumer.class)) { final JCacheBasedLongConsumerMemoizer<String> loader = new JCacheBasedLongConsumerMemoizer<>(cache, keyFunction, consumer); loader.accept(123); Mockito.verify(consumer).accept(123); } }
@Test public void testAcceptUnknownKeyspace() { assertThat(myReplicatedTableProviderImpl.accept("nonexistingkeyspace")).isFalse(); }
@Test(expected = WorkLogStartDateException.class) public void editWorkLog_StartDateFromFuture() throws BaseException { WorkLog editedWorkLog = WorkLogRepositoryStub.workLogWithExistingWorker(2l, LocalDate.MAX); WorkLog result = workLogService.editWorkLog(1l, editedWorkLog); assertEquals(editedWorkLog.getWorkLogId(), result.getWorkLogId()); assertEquals(editedWorkLog.getDescription(), result.getDescription()); assertEquals(editedWorkLog.getStartDate(), result.getStartDate()); assertEquals(editedWorkLog.getTimeSpentInSeconds(), result.getTimeSpentInSeconds()); assertEquals(editedWorkLog.getAssociatedWorker().getLogin(), result.getAssociatedWorker().getLogin()); assertEquals(2, getWorkLogRepositoryStub().getWorkLogList().size()); }
@Test public void testPrimingQueryReadFailure() { stubFor(post(urlEqualTo(PRIME_QUERY_PATH)).willReturn(aResponse().withStatus(200))); ReadFailureConfig readFailureConfig = new ReadFailureConfig(0, 2, 1, false); PrimingRequest pr = PrimingRequest.queryBuilder() .withQuery("select * from people") .withResult(Result.read_failure) .withConfig(readFailureConfig) .build(); underTest.primeQuery(pr); verify(postRequestedFor(urlEqualTo(PRIME_QUERY_PATH)) .withHeader("Content-Type", equalTo("application/json; charset=UTF-8")) .withRequestBody(equalToJson("{\"when\":{\"query\":\"select * from people\"},\"then\":{\"result\":\"read_failure\", \"config\": {\n" + " \"error.required_responses\":\"2\",\n" + " \"error.received_responses\":\"0\",\n" + " \"error.num_failures\":\"1\",\n" + " \"error.data_present\":\"false\"}}}"))); }
@Test public void testUnique() { int[] arr; int[] expected; int[] result; String msg = "Arrays are not equal."; arr = new int[0]; expected = new int[0]; result = Utilities.unique(arr); Assert.assertTrue(msg, Arrays.equals(result, expected)); arr = new int[] { 0 }; expected = new int[] { 0 }; result = Utilities.unique(arr); Assert.assertTrue(msg, Arrays.equals(result, expected)); arr = new int[] { 1, 1, 1 }; expected = new int[] { 1 }; result = Utilities.unique(arr); Assert.assertTrue(msg, Arrays.equals(result, expected)); arr = new int[] { -5, -5, -3, -2, 0, 1, 1, 2, 2 }; expected = new int[] { -5, -3, -2, 0, 1, 2 }; result = Utilities.unique(arr); Assert.assertTrue(msg, Arrays.equals(result, expected)); }
@Test public void testTransformPatternExclusionsFilter() { PatternExclusionsFilter filter = new PatternExclusionsFilter( Collections.singletonList( "x:*" ) ); PatternExclusionsDependencyFilter dependencyFilter = (PatternExclusionsDependencyFilter) filter.transform( transformer ); assertTrue( dependencyFilter.accept( newDependencyNode( "g:a:v", "runtime" ), null ) ); assertFalse( dependencyFilter.accept( newDependencyNode( "x:a:v", "runtime" ), null ) ); }
@Test public void testListAttachByTopic() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { List<Attachment> as = attachmentDao.listAttachByTopic(1); Assert.assertEquals(as.size(), 2); List<Attachment> ls = Arrays.asList(new Attachment(1,"bb1","aa1","txt","txt",123,1,0,1), new Attachment(6,"bb6","aa6","ppt","ppt",123,0,0,1)); TestUtil.assertListByClz(ls, as, Attachment.class, new String[]{"createDate","topic"}); }
@Test public void testLogEmrClusterCreationImpl() throws Exception { NamespaceEntity namespaceEntity = new NamespaceEntity(); namespaceEntity.setCode(NAMESPACE); EmrClusterAlternateKeyDto emrClusterAlternateKeyDto = new EmrClusterAlternateKeyDto(NAMESPACE, EMR_CLUSTER_DEFINITION_NAME, EMR_CLUSTER_NAME); EmrClusterDefinition emrClusterDefinition = new EmrClusterDefinition(); when(namespaceDaoHelper.getNamespaceEntity(NAMESPACE)).thenReturn(namespaceEntity); when(xmlHelper.objectToXml(emrClusterDefinition)).thenReturn(EMR_CLUSTER_DEFINITION_XML_FILE_MINIMAL_CLASSPATH); emrHelperServiceImpl.logEmrClusterCreation(emrClusterAlternateKeyDto, emrClusterDefinition, EMR_CLUSTER_ID); verify(namespaceDaoHelper).getNamespaceEntity(NAMESPACE); verify(xmlHelper).objectToXml(emrClusterDefinition); verify(herdDao).saveAndRefresh(any(EmrClusterCreationLogEntity.class)); verifyNoMoreInteractionsHelper(); }
@Test public void testGetExtraCalculationFields() { String[] expected = new String[] { "item" }; doReturn( expected ).when( reportPreProcessorCore ).getExtraCalculationFields( metaData ); String[] result = metaData.getExtraCalculationFields(); assertThat( result, is( equalTo( expected ) ) ); }
@Test public void format_RangeYearPeriod() { YearPeriod value = new YearPeriod(2009, 2017); assertEquals("2009-2017", formatter.format(value)); }
@Test void shouldFailOnUnsupportedTimeSpanFormat() { assertThrows(IllegalArgumentException.class, () -> TimeSpan.valueOf("forever")); }
@Test public void testAfterInjection() throws Exception { DestroyableInjectionListener.DestroyableRegistry registry = createMock(DestroyableInjectionListener.DestroyableRegistry.class); Destroyable destroyable = createMock(Destroyable.class); registry.add(destroyable); replay(registry, destroyable); DestroyableInjectionListener underTest = new DestroyableInjectionListener(registry); underTest.afterInjection(destroyable); verify(registry, destroyable); }
@Test public void test012() { unquote("", ""); }
@Test public void testTrueRandom() { final Set<String> gen = new HashSet<>(); for (int i = 0; i < 20; i++) { final String value = RandomValueGenerator.generate("alphanum:80"); assertThat(value).matches("[A-Za-z0-9]{80}"); gen.add(value); } assertThat(gen.size()).isGreaterThan(10); }
@Test public void service() { when(invoker.getUrl()).thenReturn(url); when(url.getServiceInterface()).thenReturn("brave.dubbo.GreeterService"); assertThat(DubboParser.service(invoker)) .isEqualTo("brave.dubbo.GreeterService"); }
@Test public void getBookmarkedCourses() { when(remote.getAllCourses()).thenReturn(courseResponses); ArrayList<CourseEntity> courseEntities = academyRepository.getBookmarkedCourses(); verify(remote).getAllCourses(); assertNotNull(courseEntities); assertEquals(courseResponses.size(), courseEntities.size()); }
@Test public void testWithMissingStreamName() { thrown.expect(NullPointerException.class); thrown.expectMessage("Stream name is required"); String test = StringUtils.join(new String[] { "applicationName = b", "AWSCredentialsProvider = " + credentialName1, "workerId = 123", "failoverTimeMillis = 100" }, '\n'); InputStream input = new ByteArrayInputStream(test.getBytes()); configurator.getConfiguration(input); }
@Test public void testPassesVariantWithUnFilteredFilterField() { VariantEvaluation variant = variantEvaluationWithFilterField("."); FilterResult result = instance.runFilter(variant); System.out.println(result); assertThat(result.passed(), is(true)); }
@Test public void testMultipleRuleTables() { final ConversionResult result = new ConversionResult(); final List<DataListener> listeners = new ArrayList<DataListener>(); final GuidedDecisionTableGeneratorListener listener = new GuidedDecisionTableGeneratorListener(result, dmo); listeners.add(listener); final ExcelParser parser = new ExcelParser(listeners); final InputStream is = this.getClass().getResourceAsStream("MultipleRuleTables.xls"); try { parser.parseFile(is); } finally { try { is.close(); } catch (IOException ioe) { fail(ioe.getMessage()); } } assertEquals(0, result.getMessages().size()); List<GuidedDecisionTable52> dtables = listener.getGuidedDecisionTables(); assertNotNull(dtables); assertEquals(2, dtables.size()); GuidedDecisionTable52 dtable0 = dtables.get(0); assertEquals("Table1", dtable0.getTableName()); assertEquals(GuidedDecisionTable52.TableFormat.EXTENDED_ENTRY, dtable0.getTableFormat()); GuidedDecisionTable52 dtable1 = dtables.get(1); assertEquals("Table2", dtable1.getTableName()); assertEquals(GuidedDecisionTable52.TableFormat.EXTENDED_ENTRY, dtable1.getTableFormat()); List<BaseColumn> columns0 = dtable0.getExpandedColumns(); assertNotNull(columns0); assertEquals(6, columns0.size()); assertTrue(columns0.get(0) instanceof RowNumberCol52); assertTrue(columns0.get(1) instanceof RuleNameColumn); assertTrue(columns0.get(2) instanceof DescriptionCol52); assertTrue(columns0.get(3) instanceof AttributeCol52); assertTrue(columns0.get(4) instanceof BRLConditionVariableColumn); assertTrue(columns0.get(5) instanceof BRLActionVariableColumn); AttributeCol52 attrCol0_2 = ((AttributeCol52) columns0.get(3)); assertEquals(Attribute.AGENDA_GROUP.getAttributeName(), attrCol0_2.getAttribute()); assertEquals(1, dtable0.getConditions().size()); assertTrue(dtable0.getConditions().get(0) instanceof BRLConditionColumn); BRLConditionColumn conditionCol0_0 = ((BRLConditionColumn) dtable0.getConditions().get(0)); assertEquals("Converted from ['Person's name']", conditionCol0_0.getHeader()); assertEquals(1, conditionCol0_0.getChildColumns().size()); List<IPattern> conditionCol0_0definition = conditionCol0_0.getDefinition(); assertEquals(1, conditionCol0_0definition.size()); assertTrue(conditionCol0_0definition.get(0) instanceof FactPattern); FactPattern conditionCol0_0fp = (FactPattern) conditionCol0_0definition.get(0); assertEquals("Person", conditionCol0_0fp.getFactType()); assertEquals(1, conditionCol0_0fp.getNumberOfConstraints()); assertTrue(conditionCol0_0fp.getConstraint(0) instanceof SingleFieldConstraint); final SingleFieldConstraint conditionCol0_0fpsfc0 = (SingleFieldConstraint) conditionCol0_0fp.getConstraint(0); assertEquals("name", conditionCol0_0fpsfc0.getFieldName()); assertEquals("==", conditionCol0_0fpsfc0.getOperator()); assertEquals("param1", conditionCol0_0fpsfc0.getValue()); assertEquals(SingleFieldConstraint.TYPE_TEMPLATE, conditionCol0_0fpsfc0.getConstraintValueType()); BRLConditionVariableColumn conditionCol0_0param0 = conditionCol0_0.getChildColumns().get(0); assertEquals("param1", conditionCol0_0param0.getVarName()); assertEquals("Person's name", conditionCol0_0param0.getHeader()); assertEquals(DataType.TYPE_STRING, conditionCol0_0param0.getFieldType()); assertEquals("Person", conditionCol0_0param0.getFactType()); assertEquals("name", conditionCol0_0param0.getFactField()); BRLActionColumn actionCol0_0 = ((BRLActionColumn) dtable0.getActionCols().get(0)); assertEquals("Converted from ['Salutation']", actionCol0_0.getHeader()); assertEquals(1, actionCol0_0.getChildColumns().size()); List<IAction> actionCol0_0definition = actionCol0_0.getDefinition(); assertEquals(1, actionCol0_0definition.size()); assertTrue(actionCol0_0definition.get(0) instanceof FreeFormLine); FreeFormLine actionCol0_0ffl = (FreeFormLine) actionCol0_0definition.get(0); assertEquals("System.out.println(\"@{param2}\");", actionCol0_0ffl.getText()); BRLActionVariableColumn actionCol0_0param0 = actionCol0_0.getChildColumns().get(0); assertEquals("param2", actionCol0_0param0.getVarName()); assertEquals("Salutation", actionCol0_0param0.getHeader()); assertEquals(DataType.TYPE_OBJECT, actionCol0_0param0.getFieldType()); assertNull(actionCol0_0param0.getFactType()); assertNull(actionCol0_0param0.getFactField()); assertEquals(2, dtable0.getData().size()); assertTrue(isRowEquivalent(new Object[]{1, "", "Created from row 7", "AG1", "John", "Hello Sir"}, dtable0.getData().get(0))); assertTrue(isRowEquivalent(new Object[]{2, "", "Row 2", "AG2", "Jane", "Hello Madam"}, dtable0.getData().get(1))); List<BaseColumn> columns1 = dtable1.getExpandedColumns(); assertNotNull(columns1); assertEquals(5, columns1.size()); assertTrue(columns1.get(0) instanceof RowNumberCol52); assertTrue(columns1.get(1) instanceof RuleNameColumn); assertTrue(columns1.get(2) instanceof DescriptionCol52); assertTrue(columns1.get(3) instanceof BRLConditionVariableColumn); assertTrue(columns1.get(4) instanceof BRLConditionVariableColumn); assertEquals(1, dtable0.getConditions().size()); assertTrue(dtable0.getConditions().get(0) instanceof BRLConditionColumn); BRLConditionColumn conditionCol1_0 = ((BRLConditionColumn) dtable1.getConditions().get(0)); assertEquals("Converted from ['Person’s name', 'Person’s age']", conditionCol1_0.getHeader()); assertEquals(2, conditionCol1_0.getChildColumns().size()); List<IPattern> conditionCol1_0definition = conditionCol1_0.getDefinition(); assertEquals(1, conditionCol1_0definition.size()); assertTrue(conditionCol1_0definition.get(0) instanceof FactPattern); FactPattern conditionCol1_0fp = (FactPattern) conditionCol1_0definition.get(0); assertEquals("Person", conditionCol1_0fp.getFactType()); assertEquals(2, conditionCol1_0fp.getNumberOfConstraints()); assertTrue(conditionCol1_0fp.getConstraint(0) instanceof SingleFieldConstraint); final SingleFieldConstraint conditionCol1_0fpsfc0 = (SingleFieldConstraint) conditionCol1_0fp.getConstraint(0); assertEquals("name", conditionCol1_0fpsfc0.getFieldName()); assertEquals("==", conditionCol1_0fpsfc0.getOperator()); assertEquals("param1", conditionCol1_0fpsfc0.getValue()); assertEquals(SingleFieldConstraint.TYPE_TEMPLATE, conditionCol1_0fpsfc0.getConstraintValueType()); assertTrue(conditionCol1_0fp.getConstraint(1) instanceof SingleFieldConstraint); final SingleFieldConstraint conditionCol1_0fpsfc1 = (SingleFieldConstraint) conditionCol1_0fp.getConstraint(1); assertEquals("age", conditionCol1_0fpsfc1.getFieldName()); assertEquals("==", conditionCol1_0fpsfc1.getOperator()); assertEquals("param2", conditionCol1_0fpsfc1.getValue()); assertEquals(SingleFieldConstraint.TYPE_TEMPLATE, conditionCol1_0fpsfc1.getConstraintValueType()); BRLConditionVariableColumn conditionCol1_0param0 = conditionCol1_0.getChildColumns().get(0); assertEquals("param1", conditionCol1_0param0.getVarName()); assertEquals("Person’s name", conditionCol1_0param0.getHeader()); assertEquals(DataType.TYPE_STRING, conditionCol1_0param0.getFieldType()); assertEquals("Person", conditionCol1_0param0.getFactType()); assertEquals("name", conditionCol1_0param0.getFactField()); BRLConditionVariableColumn conditionCol1_0param1 = conditionCol1_0.getChildColumns().get(1); assertEquals("param2", conditionCol1_0param1.getVarName()); assertEquals("Person’s age", conditionCol1_0param1.getHeader()); assertEquals(DataType.TYPE_STRING, conditionCol1_0param1.getFieldType()); assertEquals("Person", conditionCol1_0param1.getFactType()); assertEquals("age", conditionCol1_0param1.getFactField()); assertEquals(2, dtable1.getData().size()); assertTrue(isRowEquivalent(new Object[]{1, "", "Row 1", "John", "25"}, dtable1.getData().get(0))); assertTrue(isRowEquivalent(new Object[]{2, "", "Created from row 16", "Jane", "29"}, dtable1.getData().get(1))); }
@Test public void testMethodLegacyApiCurrentJava() throws Exception { ClassReader cr = new ClassReader(StringGetBytesString.class.getName()); Collection<ViolationOccurrence> occurrences = createModernizer("1.6").check(cr); assertThat(occurrences).hasSize(1); assertThat(occurrences.iterator().next().getViolation().getName()) .isEqualTo("java/lang/String.getBytes:(Ljava/lang/String;)[B"); }
@Test public void testParseLocation() throws Exception { JsonFactory jfactory = new JsonFactory(); JsonParser jParser = jfactory.createJsonParser(new StringReader("{\n" + " \"timestampMs\" : \"1376053800229\",\n" + " \"latitudeE7\" : 508261000,\n" + " \"longitudeE7\" : 43543660,\n" + " \"accuracy\" : 10\n" + " }")); while (jParser.nextToken()!= JsonToken.START_OBJECT); while (jParser.getCurrentName()==null) jParser.nextToken(); GoogleLatitudeUpdater updater = new GoogleLatitudeUpdater(); final ArrayList<LocationFacet> locations = new ArrayList<LocationFacet>(); updater.parseLocation(null, jParser, locations); assertTrue(locations.size()==1); final LocationFacet locationFacet = locations.get(0); assertTrue(locationFacet.timestampMs==1376053800229l); assertTrue(locationFacet.latitude==50.8261000f); assertTrue(locationFacet.longitude==4.3543660f); assertTrue(locationFacet.accuracy==10); }
@Test public void sourceFilesFromZipWithFolder() throws IOException { try (ZipFile whalesayZipFile = new ZipFile(new File(WHALESAY_ZIP_PATH))) { final ZipSourceFileHelper.SourceFiles sourceFiles = ZipSourceFileHelper.sourceFilesFromZip(whalesayZipFile, DescriptorLanguage.FileType.DOCKSTORE_WDL); Assert.assertEquals("subdir/Dockstore.wdl", sourceFiles.getPrimaryDescriptor().getPath()); Assert.assertEquals("/subdir/Dockstore.wdl", sourceFiles.getPrimaryDescriptor().getAbsolutePath()); Assert.assertEquals(2, sourceFiles.getAllDescriptors().size()); } }
@Test public void editProperties() { propertyEditorPresenter.editProperties(ITEM_ID); verify(spanElementMock, times(1)).getStyle(); verify(styleMock, times(1)).setDisplay(Style.Display.NONE); verify(propertyValueInputMock, times(1)).setValue(anyString()); verify(propertyValueInputMock, times(1)).getStyle(); verify(styleMock, times(1)).setDisplay(Style.Display.INLINE); verify(propertyValueInputMock, times(1)).setDisabled(eq(false)); }
@Test public void testLoadTopLevelDependenciesWhenIncompleteDependenciesInPOM() throws Exception { POM pom = new POM( new GAV( "artifactID", "groupID", "version" ) ); pom.getDependencies().add( getDependency( "drools-core", "org.drools", null ) ); pom.getDependencies().add( getDependency( null, null, null ) ); HashMap<Dependency, Set<String>> map = setUpDependencyService( pom ); map.put( getGAV( "drools-core", "org.drools", "6.3.0" ), toSet( "org.drools.a", "org.drools.b", "org.drools.c" ) ); Set<String> packageNames = packageNameSearchProvider.newTopLevelPackageNamesSearch( pom ).search(); assertEquals( 3, packageNames.size() ); assertTrue( packageNames.contains( "org.drools.a" ) ); assertTrue( packageNames.contains( "org.drools.b" ) ); assertTrue( packageNames.contains( "org.drools.c" ) ); }
@Test public void testFindByDocumentHeaderId_Legacy() throws Exception { enableLegacy(); lda.findByDocumentHeaderId(LegacyDocument.class, "1234"); verify(knsLegacyDataAdapter).findByDocumentHeaderId(eq(LegacyDocument.class), eq("1234")); verifyZeroInteractions(kradLegacyDataAdapter); }
@Test public void testReadAll(){ final List<SoapEvent> soapEvents = new ArrayList<SoapEvent>(); for(int index = 0; index < 3; index++){ final SoapEvent soapEvent = SoapEventTestBuilder.builder().build(); soapEvents.add(soapEvent); } final ReadAllSoapEventOutput output = ReadAllSoapEventOutput.builder().soapEvents(soapEvents).build(); Mockito.when(serviceProcessor.process(Mockito.any(ReadAllSoapEventInput.class))).thenReturn(output); final List<SoapEvent> returnedSoapEvents = serviceAdapter.readAll(); for(int index = 0; index < 3; index++){ final SoapEvent soapEvent = soapEvents.get(index); final SoapEvent returnedSoapEvent = returnedSoapEvents.get(index); Assert.assertEquals(soapEvent.getId(), returnedSoapEvent.getId()); Assert.assertEquals(soapEvent.getOperationId(), returnedSoapEvent.getOperationId()); Assert.assertEquals(soapEvent.getPortId(), returnedSoapEvent.getPortId()); Assert.assertEquals(soapEvent.getProjectId(), returnedSoapEvent.getProjectId()); } }
@Test public void shouldNotAlterStringConfigIfMatchingConfigOverrideExists() { givenTopicConfigs( "peter", overriddenConfigEntry(CLEANUP_POLICY_CONFIG, CLEANUP_POLICY_COMPACT), defaultConfigEntry(TopicConfig.COMPRESSION_TYPE_CONFIG, "snappy") ); final Map<String, ?> overrides = ImmutableMap.of( CLEANUP_POLICY_CONFIG, CLEANUP_POLICY_COMPACT ); final boolean result = kafkaTopicClient.addTopicConfig("peter", overrides); assertThat("should return false", !result); verify(adminClient, never()).incrementalAlterConfigs(any()); }
@Test public void shouldGetLastLocation() { String name = "Gary"; Player player = mockPlayerWithName(name); PlayerAuth auth = PlayerAuth.builder().name(name) .locWorld("world") .locX(12.4) .locY(24.6) .locZ(-438.2) .locYaw(3.41f) .locPitch(0.29f) .build(); given(playerCache.getAuth(name)).willReturn(auth); Server server = mock(Server.class); ReflectionTestUtils.setField(Bukkit.class, null, "server", server); World world = mock(World.class); given(server.getWorld(auth.getWorld())).willReturn(world); Location result = api.getLastLocation(player); assertThat(result, not(nullValue())); assertThat(result.getX(), equalTo(auth.getQuitLocX())); assertThat(result.getY(), equalTo(auth.getQuitLocY())); assertThat(result.getZ(), equalTo(auth.getQuitLocZ())); assertThat(result.getWorld(), equalTo(world)); }
@Test public void testNotifyLoadingFinishedWithoutRegisteredListener() { final WebFragment fragment = new WebFragment(); fragment.notifyLoadingFinished("test_url"); }
@Test public void testNoConf() throws Exception { HadoopUserOverlay overlay = new HadoopUserOverlay(null); ContainerSpecification containerSpecification = new ContainerSpecification(); overlay.configure(containerSpecification); }
@Test public void testEventLoggerWrittenProperly() throws Exception { final JsonOutputStreamParser jsonOutputStreamParser = newJsonOutputStream(); when(mockEvent.getLogger()).thenReturn("logger"); jsonMarshaller.marshall(mockEvent, jsonOutputStreamParser.outputStream()); assertThat(jsonOutputStreamParser.value(), is(jsonResource("/io/sentry/marshaller/json/jsonmarshallertest/testLogger.json"))); }
@Test public void enableSendStompMessage() { MockitoAnnotations.initMocks(this); CliLogger logger = new TaskLogger(logFile); SimpMessagingTemplate messagingTemplate = mock(SimpMessagingTemplate.class); logger.enableSendStompMessage(1, messagingTemplate, "/topic/publish/"); String message = "abc"; logger.log(message); verify(messagingTemplate).convertAndSend(eq("/topic/publish/1"), messageCaptor.capture()); }
@Test public void testDateTimesForStartOfMonthBetweenDatesSameMonth() { final DateTime start = new DateTime(2015, 10, 13, 1, 1); final DateTime end = new DateTime(2015, 10, 14, 1, 1); final List<DateTime> results = DateTimeUtil.dateTimesForStartOfMonthBetweenDates(start, end); assertThat(results.size(), is(1)); assertThat(results.get(0), is(new DateTime(2015, 10, 1, 0, 0))); }
@Test public void testJsonInt() throws Exception { assertThat("123", isJsonStringMatching(jsonInt(123))); }
@Test public void testNegativeBitEncoding() { thrown.expect(IllegalArgumentException.class); new BitStream( 2).write(-1, 10); }
@Test public void testDeprecatedKeys_throwsExceptionWhenDeprecatedKeyIsUsed() { HadoopConfigurationProperty<String> gcsProxyAddress = new HadoopConfigurationProperty<>( GCS_CONFIG_PREFIX + PROXY_ADDRESS_SUFFIX.getKey(), "proxy-address", "fs.gs.proxy.deprecated.address"); HadoopConfigurationProperty<Integer> gcsProxyUsername = new HadoopConfigurationProperty<>( GCS_CONFIG_PREFIX + PROXY_USERNAME_SUFFIX.getKey(), 1234, "fs.gs.proxy.deprecated.user"); HadoopConfigurationProperty<String> gcsProxyPassword = new HadoopConfigurationProperty<>( GCS_CONFIG_PREFIX + PROXY_PASSWORD_SUFFIX.getKey(), "proxy-pass", "fs.gs.proxy.deprecated.pass"); Configuration config = new Configuration(); config.set(gcsProxyAddress.getKey(), gcsProxyAddress.getDefault()); config.setInt(gcsProxyUsername.getKey(), gcsProxyUsername.getDefault()); config.set("fs.gs.proxy.deprecated.pass", gcsProxyPassword.getDefault()); String userPass = gcsProxyPassword.getPassword(config); assertThat(userPass).isEqualTo("proxy-pass"); GoogleCloudStorageOptions.Builder optionsBuilder = GoogleHadoopFileSystemConfiguration.getGcsOptionsBuilder(config); assertThrows(IllegalArgumentException.class, optionsBuilder::build); }
@Test @Override public void builderShouldCreatePopulatedOperation() { final SplitStoreFromFile splitTable = new SplitStoreFromFile.Builder().inputPath(INPUT_DIRECTORY).option(TEST_OPTION_KEY, "true").build(); assertEquals(INPUT_DIRECTORY, splitTable.getInputPath()); assertEquals("true", splitTable.getOption(TEST_OPTION_KEY)); }
@Test public void shouldSetAndReadForwardProxyAuthenticationUsername() { System.clearProperty("mockserver.forwardProxyAuthenticationUsername"); assertNull(forwardProxyAuthenticationUsername()); forwardProxyAuthenticationUsername("foo_bar"); assertEquals("foo_bar", forwardProxyAuthenticationUsername()); assertEquals("foo_bar", System.getProperty("mockserver.forwardProxyAuthenticationUsername")); }
@Test public void testDetectStreamReadProblems() throws Exception { byte[] data = "abcdefghijklmnopqrstuvwxyz0123456789".getBytes(US_ASCII); MediaType testMT = new MediaType("application", "test"); Detector detector = new MagicDetector(testMT, data, null, false, 0, 0); InputStream stream = new RestrictiveInputStream(data); assertEquals(testMT, detector.detect(stream, new Metadata())); }
@Test public void testDelete() { MongoEntity entity = new MongoEntity("studentSectionAssociation", studentSectionAssociation); boolean result = denormalizer.denormalization("studentSectionAssociation").delete(entity, entity.getEntityId()); assertTrue(result); result = denormalizer.denormalization("studentSectionAssociation").delete(null, SSAID); assertTrue(result); result = denormalizer.denormalization("studentSectionAssociation").delete(null, "invalidID"); assertFalse(result); }
@Test(expected = IllegalArgumentException.class) public void shouldThrowIllegalArgumentExceptionWhenICCIDIsEmpty() { deleteProfileWorker.run(buildLpadWorkerExchange(buildDeleteProfileInputParams(""))); }
@Test public void shouldGetMaxRate() { final long SOLUTION = 4L; given(rateWindow.getMaxRate()).willReturn(SOLUTION); long rate = operationMonitor.getMaxRate(); assertEquals(rate, SOLUTION); }
@Test void getCountryCodes() { Map<CountryCode, String> codes = generationService.getCountryCodes(); assertFalse(codes.isEmpty()); }
@Test void migrateIfNeeded() { ConsentEntity consentEntity = new ConsentEntity(); consentEntity.setExternalId(EXTERNAL_ID); AisConsent obsoleteAisConsent = jsonReader.getObjectFromFile("json/service/migration/ais-consent.json", AisConsent.class); when(obsoleteAisConsentJpaRepository.findByExternalId(EXTERNAL_ID)) .thenReturn(Optional.of(obsoleteAisConsent)); aisConsentLazyMigrationService.migrateIfNeeded(consentEntity); verify(obsoleteAisConsentJpaRepository, times(1)).findByExternalId(EXTERNAL_ID); verify(consentJpaRepository, times(1)).save(consentEntity); assertNotNull(consentEntity.getData()); AisConsentData actual = consentDataMapper.mapToAisConsentData(consentEntity.getData()); assertEquals(AccountAccessType.ALL_ACCOUNTS, actual.getAllPsd2()); assertEquals(AccountAccessType.ALL_ACCOUNTS, actual.getAvailableAccounts()); assertEquals(AccountAccessType.ALL_ACCOUNTS_WITH_OWNER_NAME, actual.getAvailableAccountsWithBalance()); assertTrue(actual.isCombinedServiceIndicator()); }
@Test public void testDelegatedTask() { TaskEventSummary model = new TaskEventSummary( 1L, 3L, "DELEGATED", "Jan", 3L, createDate(2017, 12, 15, 15, 0), "Jan delegated this task" ); view.setValue(model); verify(logSummary).setModel(model); verify(logTime).setAttribute("data-original-title", "15/12/2017 15:00"); verify(logIcon).setAttribute("data-original-title", "Task delegated"); verify(logIcon).setClassName("list-view-pf-icon-sm kie-timeline-list-view-pf-icon-sm fa fa-cogs"); verify(logInfo).setTextContent("by user Jan"); verify(logTypeDesc).setTextContent("Task delegated"); }
@Test public void testRegisterUserWithoutCert() { User createUser = new User(); createUser.setUsername("Testing111"); createUser.setComment("Access needed for testing"); RegisterUserWithCertificate rpcUserWithCert = new RegisterUserWithCertificate(); rpcUserWithCert.setUser(createUser); boolean registerUserWithCertificate = client.registerUserWithCertificate(rpcUserWithCert); log.debug("Status of user registration is {}.", registerUserWithCertificate); }
@Test public void testSimplePrivilegesAcesAdditive() throws Exception { aceBeanInstallerIncremental.installAcl( asSet(bean1, bean2, bean3), testPath, asSet(testPrincipal1, testPrincipal2, testPrincipal3), session, installLog); verify(jackrabbitAccessControlList, never()).removeAccessControlEntry(any(JackrabbitAccessControlEntry.class)); verify(aceBeanInstallerIncremental).installPrivileges(eq(bean1), eq(new PrincipalImpl(testPrincipal1)), eq(jackrabbitAccessControlList), eq(session), eq(accessControlManager)); verify(aceBeanInstallerIncremental).installPrivileges(eq(bean2), eq(new PrincipalImpl(testPrincipal2)), eq(jackrabbitAccessControlList), eq(session), eq(accessControlManager)); verify(aceBeanInstallerIncremental).installPrivileges(eq(bean3), eq(new PrincipalImpl(testPrincipal3)), eq(jackrabbitAccessControlList), eq(session), eq(accessControlManager)); }
@Test public void shouldReturnNullIfKeyDoesntExist() { assertNull(theStore.get("whatever")); }
@Test public void testOnPhaseExit() { TorrentClient torrentClientMock = mock(TorrentClient.class); Torrent torrentMock = mock(Torrent.class); ITracker trackerOne = createTrackerExpectingSetCompleted(torrentMock); ITracker trackerTwo = createTrackerExpectingSetCompleted(torrentMock); when(torrentClientMock.getTrackersFor(same(torrentMock))).thenReturn(Arrays.asList(trackerOne, trackerTwo)); PhaseData cut = new PhaseData(torrentClientMock, torrentMock); cut.onPhaseExit(); }
@Test public void testNextBackOffNoJitterFirstCall() { BoundedExponentialBackoff backoff = new BoundedExponentialBackoff(INITIAL_BACKOFF_MS, MAX_BACKOFF_MS, 0); assertThat(backoff.nextBackoff()).isEqualTo(INITIAL_BACKOFF_MS); }
@Test public void shouldNotAddConnectionFactoryWithEmptyKey() { exception.expect(IllegalArgumentException.class); exception.expectMessage("Key may not be null or empty"); wrapper().addConnectionFactory("", connectionFactory, containerFactory, rabbitAdmin); }
@Test public void testIntersects() { final List<String> empty = Collections.emptyList(); final List<String> listA = Collections.singletonList("a"); final List<String> listC = Collections.singletonList("c"); final List<String> listD = Collections.singletonList("d"); final List<String> listAbc = Arrays.asList("a", "b", "c"); assertThat(Util.intersects(empty, listA), is(false)); assertThat(Util.intersects(empty, empty), is(false)); assertThat(Util.intersects(listA, listAbc), is(true)); assertThat(Util.intersects(listAbc, listAbc), is(true)); assertThat(Util.intersects(listAbc, listC), is(true)); assertThat(Util.intersects(listAbc, listD), is(false)); assertThat(Util.intersects(listC, listD), is(false)); }
@Test public void testIntrinsicLastUpdateAt() { Intrinsics intrinsics = mock(Intrinsics.class); when(intrinsics.getLastUpdateAt()).thenReturn("2012-07-08T22:21:36.866Z"); assertTrue(eval(Conditions.intrinsic(Intrinsic.LAST_UPDATE_AT, "2012-07-08T22:21:36.866Z"), null, intrinsics)); assertFalse(eval(Conditions.intrinsic(Intrinsic.LAST_UPDATE_AT, "2012-07-08T22:29:31.588Z"), null, intrinsics)); assertFalse(eval(Conditions.intrinsic(Intrinsic.LAST_UPDATE_AT, (Object) null), null, intrinsics)); }
@Test(expected = AssertionError.class) public void testTranslate() throws Exception { new UnitOfMeasureTranslator("Not.A.Unit.Of.Measure").translate(); }
@Test public void testIsStandalone_1() throws Exception { boolean result = tankSettings.isStandalone(); assertFalse(result); }
@Test public void singleEmptyString() { setup(""); assertFalse(segmenter.acceptable(0, 1)); assertFalse(segmenter.acceptable(0, 1)); }
@Test public void shouldDelegateStop() throws Throwable { BatchingMessageHandler batchHandler = new BatchingMessageHandler( downstreamHandler, IN_QUEUE_CONFIG, BATCH_CONFIG, jobSchedulerFactory, NullLogProvider.getInstance() ); batchHandler.stop(); Mockito.verify( downstreamHandler ).stop(); }
@Test public void testTitusAttributesAreResetIfProvidedByUser() { JobDescriptor<BatchJobExt> jobDescriptor = newBatchJob().getValue().toBuilder() .withAttributes(ImmutableMap.<String, String>builder() .put("myApp.a", "b") .put(TITUS_NON_COMPLIANT_FEATURES + "a", "b") .build() ) .build(); ExtendedJobSanitizer sanitizer = new ExtendedJobSanitizer(configuration, jobAssertions, entitySanitizer, disruptionBudgetSanitizer, jd -> false, jd -> false, titusRuntime); Optional<JobDescriptor<BatchJobExt>> sanitized = sanitizer.sanitize(jobDescriptor); assertThat(sanitized).isNotEmpty(); assertThat(sanitized.get().getAttributes()).containsOnlyKeys("myApp.a"); }
@Test public void testToQueryString() { assertEquals("rootEntity.name is not null", instance.toQueryString()); }
@Test public void testReadingDisplayDataFromRuntimeParameters() { ReadOptions options = PipelineOptionsFactory.fromArgs().withValidation().as(ReadOptions.class); BigtableIO.Read read = BigtableIO.read() .withBigtableOptions(BIGTABLE_OPTIONS) .withProjectId(options.getBigtableProject()) .withInstanceId(options.getBigtableInstanceId()) .withTableId(options.getBigtableTableId()); DisplayData displayData = DisplayData.from(read); assertThat( displayData, hasDisplayItem( allOf( hasKey("projectId"), hasLabel("Bigtable Project Id"), hasValue("RuntimeValueProvider{propertyName=bigtableProject, default=null}")))); assertThat( displayData, hasDisplayItem( allOf( hasKey("instanceId"), hasLabel("Bigtable Instance Id"), hasValue("RuntimeValueProvider{propertyName=bigtableInstanceId, default=null}")))); assertThat( displayData, hasDisplayItem( allOf( hasKey("tableId"), hasLabel("Bigtable Table Id"), hasValue("RuntimeValueProvider{propertyName=bigtableTableId, default=null}")))); }
@Test public void simpleToLinkedMapWhenInputListIsEmpty() { Map<Integer, Integer> toLinkedMap = CollectionFunctions.simpleToLinkedMap(emptyList(), identity(), identity()); assertTrue(toLinkedMap.isEmpty()); }
@Test public void getRequestDetailsNullTest() throws IOException { assertNull(bbInputSetupUtils.getRequestDetails("")); }
@Test public void getTypeParameter() { assertThat(Types.getTypeParameter(STRING_COLLECTION, 0)).isEqualTo(STRING); }
@Test public void testMapping() { assertEquals("joseph stalin", cleaner.clean("Joe Stalin")); }
@Test(expected = IllegalArgumentException.class) public void testResolveDataPolicyWhenPersistentUnspecifiedAndInvalidDataPolicyType() { RegionFactory mockRegionFactory = createMockRegionFactory(); try { factoryBean.resolveDataPolicy(mockRegionFactory, null, "PARTITION"); } catch (IllegalArgumentException e) { assertEquals("Data Policy [PARTITION] is not supported in Replicated Regions.", e.getMessage()); throw e; } finally { verify(mockRegionFactory, never()).setDataPolicy(null); verify(mockRegionFactory, never()).setDataPolicy(eq(DataPolicy.PARTITION)); } }
@Test public final void queryExample1Test() throws Exception { String query = "SELECT COLL_ID,COLL_NAME,META_COLL_ATTR_NAME,META_COLL_ATTR_VALUE,META_COLL_ATTR_UNITS WHERE META_COLL_ATTR_NAME = 'PolicyDrivenService:PolicyRepository' AND META_COLL_ATTR_VALUE = 'My first policy'"; IRODSServerProperties props = IRODSServerProperties.instance(IRODSServerProperties.IcatEnabled.ICAT_ENABLED, 100, "rods2.2", "d", "zone"); IRODSGenQueryTranslator translator = new IRODSGenQueryTranslator(props); IRODSGenQuery irodsQuery = IRODSGenQuery.instance(query, 10); translator.getTranslatedQuery(irodsQuery); }
@Test public void judgeEvaluationTypeTest(){ Params params = new Params() .set(HasPredictionDetailCol.PREDICTION_DETAIL_COL, "detail"); ClassificationEvaluationUtil.Type type = ClassificationEvaluationUtil.judgeEvaluationType(params); Assert.assertEquals(type, ClassificationEvaluationUtil.Type.PRED_DETAIL); params.set(HasPredictionCol.PREDICTION_COL, "pred"); type = ClassificationEvaluationUtil.judgeEvaluationType(params); Assert.assertEquals(type, ClassificationEvaluationUtil.Type.PRED_DETAIL); params.remove(HasPredictionDetailCol.PREDICTION_DETAIL_COL); type = ClassificationEvaluationUtil.judgeEvaluationType(params); Assert.assertEquals(type, ClassificationEvaluationUtil.Type.PRED_RESULT); params.remove(HasPredictionCol.PREDICTION_COL); thrown.expect(RuntimeException.class); thrown.expectMessage("Error Input, must give either predictionCol or predictionDetailCol!"); ClassificationEvaluationUtil.judgeEvaluationType(params); }
@Test public void testFindActionByRoute() { testActor.tell(new ActionRegistry.Messages.UpdateActions(Lists.newArrayList(buckets), Collections.emptyList()), ActorRef.noSender()); final Map<String, String> rpcByRoute = mxBean.findActionByRoute(""); Assert.assertNotNull(rpcByRoute); Assert.assertEquals(1, rpcByRoute.size()); Assert.assertTrue(rpcByRoute.containsValue(LOCAL_QNAME.getLocalName())); }
@Test public void testAuthEnabledBASIC() { assertTrue(Application.enableBasicAuth(RestConfig.AUTHENTICATION_METHOD_BASIC)); }
@DataProvider(value = { "null", "", "[whitespace]" }, splitBy = "\\|") @Test public void doDetermineAndSetFinalSpanName_delegates_to_adapter_getFinalSpanName_and_does_NOT_change_span_name_if_result_IS_blank( String blankAdapterResult ) { if ("[whitespace]".equals(blankAdapterResult)) { blankAdapterResult = " \n\r\t "; } doReturn(blankAdapterResult).when(adapterMock).getFinalSpanName(anyObject(), anyObject()); String originalSpanName = "originalSpanName"; Span span = Span.newBuilder(originalSpanName, SpanPurpose.SERVER).build(); implSpy.doDetermineAndSetFinalSpanName(span, requestObjectMock, responseObjectMock, errorMock, adapterMock); assertThat(span.getSpanName()).isEqualTo(originalSpanName); verify(adapterMock).getFinalSpanName(requestObjectMock, responseObjectMock); }
@Test public void shouldReturnNullForNullLength() { final String result = udf.rpad("foo", null, "bar"); assertThat(result, is(nullValue())); }
@Test void succeedsWhenDeserializingAPointOnCurveButNotInG1ThrowsIllegalArgumentException() { String xInput = "0x8123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"; assertThrows( IllegalArgumentException.class, () -> G1Point.fromBytesCompressed(Bytes.fromHexString(xInput))); }
@Test public void testsFindPassengerByFirstNameAndLastName2() { ReflectionTestUtils.setField(serviceUtil, "allowLoosenResolution", true); PassengerVo pvo = createPassengerVo("gtas", "awesome", null, "F"); list = createFlightPassengerSet(null, null, null); list.iterator().next().getPassengerDetails().setGender(null); Mockito.when(flightPassengerRepository.returnAPassengerFromParameters(flightId, pvo.getFirstName(), pvo.getLastName())).thenReturn(list); Passenger passenger = serviceUtil.findPassengerOnFlight(flight, pvo); assertNotNull(passenger); assertTrue(passenger.getId().equals(1L)); }
@SuppressFBWarnings("NP_NONNULL_PARAM_VIOLATION") @Test public void getFeatureVariableIntegerReturnsNullWhenFeatureKeyIsNull() throws Exception { String variableKey = ""; Optimizely spyOptimizely = spy(optimizelyBuilder.build()); assertNull(spyOptimizely.getFeatureVariableInteger(null, variableKey, genericUserId)); logbackVerifier.expectMessage(Level.WARN, "The featureKey parameter must be nonnull."); verify(spyOptimizely, times(1)).getFeatureVariableInteger( isNull(String.class), any(String.class), any(String.class), anyMapOf(String.class, String.class) ); }
@Test void fallsbackProblemWithoutStatus() { ResponseEntity<Problem> result = AdviceTraits.fallback( Problem.builder().withTitle("Some title").build(), new HttpHeaders() ); assertThat(result.getStatusCode(), is(HttpStatus.INTERNAL_SERVER_ERROR)); HttpHeaders expectedHeaders = new HttpHeaders(); expectedHeaders.setContentType(MediaType.valueOf("application/problem+json")); assertThat(result.getHeaders(), is(expectedHeaders)); assertThat(result.getBody().getTitle(), is("Some title")); }
@Test public void getRestMethodNameReturnsStaticVariable() { BufferedIndex bufferedIndex = new BufferedIndex.Builder(mock(ByteBufItemSource.class)).build(); String restMethodName = bufferedIndex.getRestMethodName(); Assert.assertEquals(BufferedIndex.HTTP_METHOD_NAME, restMethodName); }
@Test public void testExecute01() throws Exception { FixedFileQueryDAO fileQueryDAO = new FixedFileQueryDAO(); URL url = FixedFileLineIteratorTest.class.getResource("/aaa.txt"); String fileName = url.getPath(); Class<FixedFileQueryDAO_Stub01> clazz = FixedFileQueryDAO_Stub01.class; Map<String, ColumnParser> columnParser = new HashMap<String, ColumnParser>(); ColumnParser parser = new FixedFileQueryDAO_ColumnParserStub01(); columnParser.put("java.lang.String", parser); ReflectionTestUtils.setField(fileQueryDAO, "columnParserMap", columnParser); FileLineIterator<FixedFileQueryDAO_Stub01> fileLineiterator = fileQueryDAO .execute(fileName, clazz); assertEquals(FixedFileLineIterator.class, fileLineiterator.getClass()); assertEquals(fileName, ReflectionTestUtils.getField(fileLineiterator, "fileName")); assertEquals(clazz, ReflectionTestUtils.getField(fileLineiterator, "clazz")); assertSame(columnParser, ReflectionTestUtils.getField(fileLineiterator, "columnParserMap")); }
@Test public void emptyCollector() { assertNotNull(myCollector.getChanges()); }
@Test public void refreshWhenNoParams() { mPresenter.refresh(); verify(mSearchView).hideSwipeRefresh(); }
@Test public void test() { String[] args = {"src/test/resources/example/PingPong.aut"}; SM2Tool.main(args); assertTrue(Log.getFindings().isEmpty()); List<String> p = LogStub.getPrints(); assertEquals(9, p.size()); Assert.assertTrue(p.get(0), p.get(0).matches(".*.INFO. SM2Tool SM2 DSL Tool.*\n")); Assert.assertTrue(p.get(3), p.get(3).matches(".*.INFO. .* StateSymbol defined for NoGame.*\n")); Assert.assertTrue(p.get(6), p.get(6).matches(".*.INFO. .* The model contains 3 states.*\n")); String res = p.get(p.size()-1).replaceAll("[\r\n]", " "); assertEquals(231, res.length()); Assert.assertTrue(res, res.matches(".*state NoGame <<initial>>.*")); Assert.assertTrue(res, res.matches(".*Pong - returnBall > Ping;.*")); }
@Test public void testSplitAtOffsetFailsIfUnstarted() throws Exception { OffsetRangeTracker tracker = new OffsetRangeTracker(100, 200); assertFalse(tracker.trySplitAtPosition(150)); }
@Test(expected = IllegalMoveException.class) public void playingCardWithInsufficientManaShouldFail() { player = aPlayer().withMana(3).withCardsInHand(4, 4, 4).build(); player.playCard(aCardWithValue(4), anyPlayer(), DAMAGE); }
@Test(expected = IllegalArgumentException.class) public void emptyEventIdParamTest() { avroDestination("", null, "location"); }
@Test public void distanceItselfSquareTest() { Point first = new Point(1, 1); Assert.assertEquals(0, first.distanceSq(first), EPSILON_COMPARISON); }
@Ignore @Test(expected = GadgetException.class) public void testEmptyDocument() throws Exception { boolean exceptionCaught = false; parser.parseDom(""); }
@Test public void testPermittedTopology_linestring_linestring() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_LINESTRING; DimensionInfo targetDimensionInfo = DimensionInfo.XY_LINESTRING; RccPartiallyOverlappingFF instance = new RccPartiallyOverlappingFF(); boolean expResult = false; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }
@Test public void testSpaceAroundNonLetter3() { String sentence = " - Je - li ? - "; List<WordChunk> chunks = WordChunkUtils.getWordChunks(sentence); Assert.assertEquals(2, chunks.size()); Assert.assertEquals("Je", chunks.get(0).word); Assert.assertEquals(" - Je -", chunks.get(0).chunk); Assert.assertEquals("li", chunks.get(1).word); Assert.assertEquals("li? -", chunks.get(1).chunk); }
@Test public void testStopAtOnceFailByNoExecutor() throws SaturnJobConsoleException { JobConfig4DB jobConfig4DB = new JobConfig4DB(); jobConfig4DB.setJobName(jobName); jobConfig4DB.setEnabled(false); when(currentJobConfigService.findConfigByNamespaceAndJobName(namespace, jobName)).thenReturn(jobConfig4DB); when(curatorFrameworkOp.getChildren(JobNodePath.getExecutionNodePath(jobName))) .thenReturn(Lists.newArrayList("1")); when(registryCenterService.getCuratorFrameworkOp(namespace)).thenReturn(curatorFrameworkOp); when(curatorFrameworkOp.checkExists(JobNodePath.getExecutionNodePath(jobName, "1", "running"))) .thenReturn(true); expectedException.expect(SaturnJobConsoleException.class); expectedException.expectMessage(String.format("没有executor接管该作业(%s)，不能立即终止", jobName)); jobService.stopAtOnce(namespace, jobName); }
@Test public void markNotificationAsProcessedWhenContainsTokenReplyContainsNonMatchingAuthenticatedShopperId() throws WorldpayConfigurationException { when(worldpayPaymentTransactionServiceMock.isPreviousTransactionCompleted(WORLDPAY_ORDER_CODE, AUTHORIZATION, orderModelMock)).thenReturn(Boolean.TRUE); when(orderModificationSerialiserMock.deserialise(orderModificationModelMock.getOrderNotificationMessage())).thenReturn(orderNotificationMessageMock); when(orderNotificationMessageMock.getTokenReply()).thenReturn(tokenReplyMock); when(tokenReplyMock.getAuthenticatedShopperID()).thenReturn(AUTHENTICATED_SHOPPER_ID); testObj.processOrderModificationMessages(AUTHORIZATION); verify(orderNotificationServiceMock).processOrderNotificationMessage(any(OrderNotificationMessage.class)); verify(businessProcessServiceMock).triggerEvent(endsWith(AUTHORIZATION.getCode())); verify(worldpayOrderNotificationHandlerMock).setNonDefectiveAndProcessed(orderModificationModelMock); }
@Test public void testUniquenessWithTwoGroupsAndSeparateGroups() { Document d = new Document(); d.put("Attr0.0.0.0", new DiacriticContent(values.get(0), d.getMetadata(), true), true, false); d.put("Attr1.0.1.0", new DiacriticContent(values.get(1), d.getMetadata(), true), true, false); d.put("Attr0.0.0.1", new DiacriticContent(values.get(2), d.getMetadata(), true), true, false); d.put("Attr1.0.1.1", new DiacriticContent(values.get(3), d.getMetadata(), true), true, false); d.put("Attr3.1.0.0", new DiacriticContent(values.get(4), d.getMetadata(), true), true, false); d.put("Attr3.1.0.1", new DiacriticContent(values.get(0), d.getMetadata(), true), true, false); List<UniqueTransform.FieldSet> expected = new ArrayList<>(); UniqueTransform.FieldSet set1 = new UniqueTransform.FieldSet(); set1.put("Attr0", values.get(0)); set1.put("Attr1", values.get(1)); set1.put("Attr3", values.get(4)); UniqueTransform.FieldSet set2 = new UniqueTransform.FieldSet(); set2.put("Attr0", values.get(2)); set2.put("Attr1", values.get(3)); set2.put("Attr3", values.get(4)); UniqueTransform.FieldSet set3 = new UniqueTransform.FieldSet(); set3.put("Attr0", values.get(0)); set3.put("Attr1", values.get(1)); set3.put("Attr3", values.get(0)); UniqueTransform.FieldSet set4 = new UniqueTransform.FieldSet(); set4.put("Attr0", values.get(2)); set4.put("Attr1", values.get(3)); set4.put("Attr3", values.get(0)); expected.add(set1); expected.add(set2); expected.add(set3); expected.add(set4); Collections.sort(expected); UniqueTransform transform = new UniqueTransform(Sets.newHashSet("Attr0", "Attr1", "Attr3")); List<UniqueTransform.FieldSet> fieldSets = transform.getOrderedFieldSets(d); Assert.assertEquals(expected, fieldSets); }
@Test public void testNakaguroSplit() { Tokenizer defaultTokenizer = new Tokenizer(); Tokenizer nakakuroSplittingTokenizer = new Tokenizer.Builder().isSplitOnNakaguro(true).build(); String input = "ラレ・プールカリムの音楽が好き。"; assertTokenSurfacesEquals(Arrays.asList("ラレ・プールカリム", "の", "音楽", "が", "好き", "。"), defaultTokenizer.tokenize(input)); assertTokenSurfacesEquals(Arrays.asList("ラレ", "・", "プールカリム", "の", "音楽", "が", "好き", "。"), nakakuroSplittingTokenizer.tokenize(input)); }
@Test @Disabled void noFalsePositiveForbiddenType() throws InvalidFormatException { ContentType ct; for (String contentType : NOT_DYNAMIC_TYPES) { ct = new ContentType(contentType); assertFalse(instance.isForbiddenType(ct), contentType + " should not be a forbidden type"); } }
@Test public void testDelegationToHasRowDragRestrictionsWhenNotPermitted() { final ContextGrid view = mock(ContextGrid.class); doReturn(rendererHelper).when(view).getRendererHelper(); doReturn(false).when(view).isRowDragPermitted(eq(state)); doReturn(Style.Cursor.DEFAULT).when(state).getCursor(); doReturn(viewport).when(gridLayer).getViewport(); doReturn(element).when(viewport).getElement(); doReturn(style).when(element).getStyle(); handler.findMovableRows(view, rendererHelper.getRenderingInformation(), 0, 0); verify(state).reset(); verify(style).setCursor(eq(Style.Cursor.DEFAULT)); }
@Test public void testUpdateManualFetchFabStatus_FavoriteDetail() { mMainPresenter.updateManualFetchFabStatus(false, true); verify(mView).updateManualFetchFabStatus(false); }
@Test(expected = IllegalArgumentException.class) public void testMaxIntContentToByteArray() throws Exception { final byte[] content = "Message content".getBytes(StandardCharsets.ISO_8859_1); final BasicHttpEntity entity = new BasicHttpEntity(new ByteArrayInputStream(content), Integer.MAX_VALUE + 100L, ContentType.TEXT_PLAIN.withCharset(StandardCharsets.ISO_8859_1)); EntityUtils.toByteArray(entity); }
@Test public void evictionEntryCountHappy() { config.setName("test"); config.setType(RegionType.REPLICATE); config.setEviction(eviction); eviction.setEntryCount(10); validator.validate(CacheElementOperation.CREATE, config); }
@Test( expected = SQLException.class ) public void shouldThrowExceptionForDeleteRow() throws SQLException { resultSet.deleteRow(); }
@Test @DisplayName("size of a color bag should match") void size() { int bagSize = colorBag.size(); assertEquals(6, bagSize, "failure - size of bag does not match"); }
@Test public void testUpdateRepositoryExecutesPost() throws Exception { RepositoryConfig config = new RepositoryConfig("test"); stubFor(post(urlEqualTo("/rdf4j-server/repositories/test/config")).willReturn(aResponse().withStatus(200))); subject.updateRepository(config); verify(postRequestedFor(urlEqualTo("/rdf4j-server/repositories/test/config"))); verifyHeader("/rdf4j-server/repositories/test/config"); }
@Test public void getMillisForTimestampReturnsLastTimeKnownToOccurBeforeQueriedTimestamp() { PUNCHER_HISTORY.forEach((key, value) -> assertThat(puncherStore.getMillisForTimestamp(key + 1)) .isEqualTo(value)); }
@Test public void throwsIfAttemptingToGetAtNegativeSequenceNumber() { assertThatThrownBy(() -> coordinationStore.getValue(-1)) .isInstanceOf(IllegalStateException.class) .hasMessageContaining("Only positive sequence numbers are supported"); }
@Test public void sergeantReady() throws Exception { final Sergeant sergeant = new Sergeant(new SergeantUnit("SergeantUnitTest")); sergeant.sergeantReady(); }
@Test public void testGetUserByUsernameMixedCase() throws Exception { assertNotNull(provider.getUserByUsername(realmModel, FEDERATED_USER_KNOWN_USERNAME.toUpperCase())); verify(federatedUserService).getUserDetails(eq(FEDERATED_USER_KNOWN_USERNAME)); }
@Test public void testReplaceVariable() { assertEquals("foo\\$foo\\$", replaceVariable("foo\\$foo\\$")); }
@Test public void testBorderInsets() throws Exception { JButton btn = new JButton("hey"); int left = blab.getBorderInsets(textField).left; int btnWidth = btn.getPreferredSize().width; BuddySupport.addLeft(btn, textField); assertSame(btn, BuddySupport.getLeft(textField).get(0)); assertSame(left + btnWidth, blab.getBorderInsets(textField).left); btn.setVisible(false); assertSame(left, blab.getBorderInsets(textField).left); }
@Test public void noLoginIntentProvided() throws NetworkErrorException { Mockito.doAnswer(invocation -> null).when(authCallback).getLoginIntent(); Bundle result = authenticator.addAccount(response, account.type, tokenType, null, null); }
@Test public void testPublishTopicIsBlank() { try { this.iProducer.publish(new WeEvent(" ", "中文消息.".getBytes()), this.groupId); Assert.fail(); } catch (BrokerException e) { Assert.assertEquals(ErrorCode.TOPIC_IS_BLANK.getCode(), e.getCode()); } }
@Test public void testPermitWithMethodRoles() { SimpleAuthorizingInterceptor in = createSimpleAuthorizingInterceptor(); in.setMethodRolesMap(Collections.singletonMap("echo", "role1 testRole")); in.handleMessage(message); }
@Test public void testUpdate() { Node node = RevObjectFactory.defaultInstance().createNode("Points.1", ObjectId.valueOf("abc123000000000000001234567890abcdef0000"), ObjectId.NULL, TYPE.FEATURE, null, null); NodeRef nodeRef = new NodeRef(node, "Points", ObjectId.NULL); NodeRef updated = nodeRef.update( ObjectId.valueOf("abc123000000000000001234567890abcdef0001"), new Envelope(0, 1, 2, 3)); assertNotSame(nodeRef, updated); assertEquals(ObjectId.valueOf("abc123000000000000001234567890abcdef0001"), updated.getObjectId()); assertEquals(new Envelope(0, 1, 2, 3), updated.bounds().get()); }
@Test public void test_threadPool() { int total = 4; ThreadPoolExecutor executor = new ThreadPoolExecutor(total, total, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<>(100)); for (int i = 0; i < total; i++) { executor.submit(new Task(i)); } try { executor.awaitTermination(1, TimeUnit.SECONDS); } catch (Exception e) { } stopped = true; executor.shutdown(); }
@Test(dataProvider = "badAdvancedFactoryUrlProvider", expectedExceptions = ApiException.class) public void shouldNotValidateIfVcsOrVcsUrlIsInvalid(Factory factory) throws ApiException { validator.validateSource(factory); }
@Test @Ignore public void testDoChooseFile() { System.out.println("doChooseFile"); String extension = ""; String directory = ""; String type = ""; File expResult = null; File result = FileTools.doChooseFile(extension, directory, type); assertEquals(expResult, result); fail("The test case is a prototype."); }
@Test public void getShortClassName() throws Exception { String str; str = Resources.getShortClassName(Foobar.class); assertEquals("Foobar", str); str = Resources.getShortClassName(Foobar.Internal.class); assertEquals("Foobar$Internal", str); }
@Test public void builderWorksAsExpected() { int customRequestTimeoutVal = 4242; int customConnectionTtl = 42; boolean performSubspan = true; int customMaxRetry = 4; NameResolver customNameResolver = mock(NameResolver.class); AsyncHttpClientHelper instance = AsyncHttpClientHelper.builder() .setPerformSubSpanAroundDownstreamCalls(performSubspan) .setConnectionTtl(customConnectionTtl) .setRequestTimeout(customRequestTimeoutVal) .setMaxRequestRetry(customMaxRetry) .setNameResolver(customNameResolver) .build(); assertThat(instance.performSubSpanAroundDownstreamCalls).isEqualTo(performSubspan); assertThat(instance.asyncHttpClient.getConfig().getRequestTimeout()).isEqualTo(customRequestTimeoutVal); assertThat(instance.asyncHttpClient.getConfig().getConnectionTtl()).isEqualTo(customConnectionTtl); assertThat(instance.asyncHttpClient.getConfig().getMaxRequestRetry()).isEqualTo(customMaxRetry); assertThat(instance.nameResolver).isSameAs(customNameResolver); assertThat(instance.performSubSpanAroundDownstreamCalls).isTrue(); }
@Test void isPsuDataNew_PsuIsNotExistInList() { boolean actualResult = cmsPsuService.isPsuDataNew(PSU_DATA_3, PSU_DATA_LIST); assertTrue(actualResult); }
@Test public void toStringTest() { FieldElement element = MersennePrimeFieldElement.create(BigInteger.valueOf(7854), bigModulus); assertThat(element.toString(), StringContains.containsString("7854")); }
@Test @Category(UnitTests.class) public void testGetTopRated() { List<Location> ll = lm.getTopRated(new LatLng(0.0,0.0), 1, 1, null); assertEquals(1, ll.size()); }
@Test public void testLOBDescriptorCholesterol() throws Exception { String filename = "data/mdl/lobtest.sdf"; InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename); ISimpleChemObjectReader reader = new MDLV2000Reader(ins); ChemFile content = (ChemFile) reader.read(new ChemFile()); List cList = ChemFileManipulator.getAllAtomContainers(content); IAtomContainer ac = (IAtomContainer) cList.get(0); Isotopes.getInstance().configureAtoms(ac); DoubleArrayResult result = (DoubleArrayResult) descriptor.calculate(ac).getValue(); Assert.assertEquals(3.5029, result.get(0), 0.001); Assert.assertEquals(3.5029, result.get(1), 0.001); }
@Test(expected = IOException.class) public void testJunkVersionSerDe() throws Exception { byte[] junkVersion = "BookieMetadataFormatVersion\tfoobar\nblahblah".getBytes(UTF_8); LedgerMetadataSerDe serDe = new LedgerMetadataSerDe(); serDe.parseConfig(junkVersion, Optional.empty()); }
@Test public void testGetString() { NodeValueSortKey nv = new NodeValueSortKey("Casa", "pt-BR"); assertEquals("Casa", nv.asString()); assertEquals("Casa", nv.getString()); }
@Test public void testGetLocalValues() { final String varName = "foo"; final String varValue = "clearLocal"; EnvFunction.setLocalValue(varName, varValue); Map<String, Object> localValues = EnvFunction.getLocalValues(); assertEquals(localValues, Collections.singletonMap(varName.toUpperCase(), varValue)); try { localValues.put(varName, "fooBar"); fail("Should have been read only"); } catch (UnsupportedOperationException e) { } }
@Test( expected = NullPointerException.class ) public void testDifference_NPE() { StringUtils.difference( null, null ); }
@Test public void saveChangeRequestCommentTest() { final ChangeRequestComment changeRequestComment = mock(ChangeRequestComment.class); doReturn(1L).when(changeRequestComment).getId(); spaceConfigStorage.saveChangeRequestComment("MyProject", 1L, changeRequestComment); verify(objectStorage).write(eq("/MyProject/change_requests/1/comments/1.comment"), same(changeRequestComment)); }
@Test public void invokeNull() { FunctionTestUtil.assertResult(stringFunction.invoke(null), null); }
@Test void validateHostsConfigurationOptionsShouldThrowWhenMonoAndMultiHostSpecified() { assertThatThrownBy(() -> ElasticSearchConfiguration.validateHostsConfigurationOptions( Optional.of("localhost"), Optional.of(9200), ImmutableList.of("localhost:9200"))) .isInstanceOf(ConfigurationException.class) .hasMessage("You should choose between mono host set up and " + ElasticSearchConfiguration.ELASTICSEARCH_HOSTS); }
@Test public void testNoConversion() { Item item = new NumberItem("number"); State originalState = new DecimalType(12.34); State state = itemStateConverter.convertToAcceptedState(originalState, item); assertTrue(originalState == state); }
@Test public void testEquals() { QuarterDateFormat qf1 = new QuarterDateFormat(TimeZone.getTimeZone( "GMT"), new String[] {"1", "2", "3", "4"}); QuarterDateFormat qf2 = new QuarterDateFormat(TimeZone.getTimeZone( "GMT"), new String[] {"1", "2", "3", "4"}); assertEquals(qf1, qf2); assertEquals(qf2, qf1); qf1 = new QuarterDateFormat(TimeZone.getTimeZone("PST"), new String[] {"1", "2", "3", "4"}); assertFalse(qf1.equals(qf2)); qf2 = new QuarterDateFormat(TimeZone.getTimeZone("PST"), new String[] {"1", "2", "3", "4"}); assertEquals(qf1, qf2); qf1 = new QuarterDateFormat(TimeZone.getTimeZone("PST"), new String[] {"A", "2", "3", "4"}); assertFalse(qf1.equals(qf2)); qf2 = new QuarterDateFormat(TimeZone.getTimeZone("PST"), new String[] {"A", "2", "3", "4"}); assertEquals(qf1, qf2); qf1 = new QuarterDateFormat(TimeZone.getTimeZone("PST"), new String[] {"A", "2", "3", "4"}, true); assertFalse(qf1.equals(qf2)); qf2 = new QuarterDateFormat(TimeZone.getTimeZone("PST"), new String[] {"A", "2", "3", "4"}, true); assertEquals(qf1, qf2); }
@Test @SneakyThrows public void assertGetValueByClob() { Clob clob = mock(Clob.class); when(resultSetMetaData.getColumnType(1)).thenReturn(Types.CLOB); when(resultSet.getClob(1)).thenReturn(clob); assertThat((Clob) QueryResultUtil.getValue(resultSet, 1), is(clob)); }
@Test public void shouldThrowExceptionIfContentFolderDoesNotExist() throws Exception { String contentFolderName = "content"; String templateFolderName = "template"; File templateFolder = TestUtils.newFolder(folder.toFile(), templateFolderName); File contentFolder = new File(folder.toFile(), contentFolderName); JBakeConfiguration configuration = mock(JBakeConfiguration.class); when(configuration.getSourceFolder()).thenReturn(folder.toFile()); when(configuration.getTemplateFolder()).thenReturn(templateFolder); when(configuration.getTemplateFolderName()).thenReturn(templateFolderName); when(configuration.getContentFolder()).thenReturn(contentFolder); when(configuration.getContentFolderName()).thenReturn(contentFolderName); JBakeConfigurationInspector inspector = new JBakeConfigurationInspector(configuration); try { inspector.inspect(); fail("should throw a JBakeException"); } catch (JBakeException e) { assertThat(e.getMessage()).isEqualTo("Error: Required folder cannot be found! Expected to find [" + contentFolderName + "] at: " + contentFolder.getAbsolutePath()); } }
@Test public void nonPooledWithPoolFactoryIsError() { when(parseResult.getParamValueAsString(CreateDataSourceCommand.POOLED)).thenReturn("false"); when( parseResult.getParamValueAsString(CreateDataSourceCommand.POOLED_DATA_SOURCE_FACTORY_CLASS)) .thenReturn("pool factory value"); ResultModel result = interceptor.preExecution(parseResult); assertThat(result.getStatus()).isEqualTo(Status.ERROR); assertThat(result.getInfoSection("info").getContent().get(0)) .contains( CreateDataSourceInterceptor.POOLED_DATA_SOURCE_FACTORY_CLASS_ONLY_VALID_ON_POOLED_DATA_SOURCE); }
@Test public void testSyncAfterClose() throws IOException { Path objectPath = new Path(ghfs.getFileSystemRoot(), "dir/object.txt"); FSDataOutputStream fout = ghfs.create(objectPath); fout.close(); assertThrows(ClosedChannelException.class, fout::hsync); }
@Test public void setProtocol() { NetworkProxy proxy = new NetworkProxy(); proxy.setProtocol("https"); assertEquals("https", proxy.getProtocol()); proxy = new NetworkProxy("test-proxy", "https", "test.apache.org", 80, "testuser", "xxxx".toCharArray()); proxy.setProtocol("http"); assertEquals("http", proxy.getProtocol()); }
@Test public void coverage() { ResolvedOvernightFutureTrade test1 = ResolvedOvernightFutureTrade.builder() .info(TRADE_INFO) .product(PRODUCT) .quantity(QUANTITY) .tradedPrice(TradedPrice.of(TRADE_DATE, PRICE)) .build(); coverImmutableBean(test1); ResolvedOvernightFutureTrade test2 = ResolvedOvernightFutureTrade.builder() .info(TradeInfo.empty()) .product(PRODUCT2) .quantity(QUANTITY2) .tradedPrice(TradedPrice.of(TRADE_DATE, PRICE2)) .build(); coverBeanEquals(test1, test2); }
@Test public void testImpossibleCases() { final String[] BASE64_IMPOSSIBLE_CASES = { "ZE==", "ZmC=", "Zm9vYE==", "Zm9vYmC=", }; for (String s : BASE64_IMPOSSIBLE_CASES) { try { Base64.decode(s); Assert.fail(); } catch (IllegalArgumentException ex) { } } }
@Test public void setVehicleType() { RouteSearchParameters routeSearchParameters = new RouteSearchParameters(); routeSearchParameters.setVehicleType(HeavyVehicleAttributes.AGRICULTURE); Assert.assertEquals(HeavyVehicleAttributes.AGRICULTURE, routeSearchParameters.getVehicleType()); }
@Test public void shouldReturnAnEmptyMapBuilder() throws Exception { MapBuilder<String, Integer> expected = new MapBuilder<String, Integer>(); MapBuilder<String, Integer> actual = mapBuilder(); assertThat(actual, is(expected)); }
@Test public void testIsViewPermittedMultipleRepositories_notPermitted() throws Exception { assertThat(impl.isViewPermitted(Sets.newLinkedHashSet(Arrays.asList("repoName", "repoName2")), "repoFormat", BreadActions.READ), is(false)); verify(securityHelper) .anyPermitted( eq(new RepositoryViewPermission("repoFormat", "repoName", Arrays.asList(BreadActions.READ))), eq(new RepositoryViewPermission("repoFormat", "repoName2", Arrays.asList(BreadActions.READ)))); }
@Test public void testDeleteGroupUsers() { reset(groupDao); int gid = 1; groupDao.deleteGroupUsers(gid); expectLastCall(); replay(groupDao); groupService.deleteGroupUsers(gid); verify(groupDao); }
@Test public void createThread() { final Runnable runnable = mock(Runnable.class); scheduler.createThread(runnable); verify(delegate).createThread(runnable); }
@Test public void testDecodeInvalidData() { try { YBase64.decode(null); fail(); } catch (NullPointerException ignored) { } try { YBase64.decode("abcde\0".getBytes()); fail(); } catch (CryptoException ignored) { } try { YBase64.decode("a-aa".getBytes()); fail(); } catch (CryptoException ignored) { } try { byte[] a = new byte[] {(byte)0xff,(byte)0x97,(byte)0x97,(byte)0x97}; YBase64.decode(a); fail(); } catch (CryptoException ignored) { } try { byte[] b = new byte[] {(byte)0x97,(byte)0xff,(byte)0x97,(byte)0x97}; YBase64.decode(b); fail(); } catch (CryptoException ignored) { } try { byte[] c = new byte[] {(byte)0x97,(byte)0x97,(byte)0xff,(byte)0x97}; YBase64.decode(c); fail(); } catch (CryptoException ignored) { } try { byte[] d = new byte[] {(byte)0x97,(byte)0x97,(byte)0x97,(byte)0xff}; YBase64.decode(d); fail(); } catch (CryptoException ignored) { } try { YBase64.decode("aaa-".getBytes()); fail(); } catch (CryptoException ignored) { } try { YBase64.decode("aa--".getBytes()); fail(); } catch (CryptoException ignored) { } }
@Test public void testReplacementKeepBoostAndFilterQueries() { SequenceLookup<ReplaceInstruction> sequenceLookup = new SequenceLookup<>(); sequenceLookup.put(tokenListFromString("a"), getTermsReplaceInstruction(Collections.singletonList("b"))); ReplaceRewriter replaceRewriter = new ReplaceRewriter(sequenceLookup); ExpandedQuery expandedQuery = getQuery(Collections.singletonList("a")); expandedQuery.addBoostDownQuery(new BoostQuery(null, 1.0f)); expandedQuery.addBoostUpQuery(new BoostQuery(null, 1.0f)); expandedQuery.addFilterQuery(null); ExpandedQuery newExpandedQuery = replaceRewriter.rewrite(expandedQuery); assertEquals(1, newExpandedQuery.getBoostDownQueries().size()); assertEquals(1, newExpandedQuery.getBoostUpQueries().size()); assertEquals(1, newExpandedQuery.getFilterQueries().size()); }
@Test public void testGetValidators() throws Exception { neow3j.getValidators().send(); verifyResult( "{\"jsonrpc\":\"2.0\",\"method\":\"getvalidators\"," + "\"params\":[],\"id\":1}"); }
@Test public void getEmployeeTest() throws Exception { when(mockService.getEmployee(1)).thenReturn(employee); Employee emp = mockService.getEmployee(1); System.out.println("EmpId:" + emp.getEmpId()); System.out.println("Emp Name:" + emp.getfName() + " " + emp.getlName()); verify(mockService).getEmployee(1); assertEquals("John",emp.getfName()); }
@Test public void testClone() throws CloneNotSupportedException { IndexDesc copy = (IndexDesc) desc1.clone(); assertEquals(desc1, copy); assertEquals(desc3, copy); }
@Test(expected = RuntimeException.class) public void testInvalidResponse() throws Exception { Utils.setupHttpResponse("sample-graphql-generic-response.json", httpClient, HttpStatus.SC_OK); dataService.getProductBySku(SKU, null); }
@Test public void testLeadDefaults() throws Exception { Over func = new Over(); DataBag inbag = BagFactory.getInstance().newDefaultBag(); for (int i = 0; i < 10; i++) { Tuple t = TupleFactory.getInstance().newTuple(1); t.set(0, i); inbag.add(t); } Tuple t = TupleFactory.getInstance().newTuple(4); t.set(0, inbag); t.set(1, "lead"); t.set(2, -1); t.set(3, -1); DataBag outbag = func.exec(t); assertEquals(10, outbag.size()); int count = 1; for (Tuple to : outbag) { assertEquals(1, to.size()); if (count < 10) assertEquals(new Integer(count++), to.get(0)); else assertNull(to.get(0)); } }
@Test public void testCloneWithUnsupportedClass() { RuleModel model = new RuleModel(); model.addLhsItem( new TestFactPattern() ); RuleModelCloneVisitor visitor = new RuleModelCloneVisitor(); thrown.expect( RuntimeException.class ); thrown.expectMessage( TestFactPattern.class.getSimpleName() ); visitor.visitRuleModel( model ); }
@Test public void testParcelable() { NoteListModel model = new NoteListModel(); model.loadedData(Arrays.asList(TestData.note1())); ParcelableTester.check(model, NoteListModel.CREATOR); }
@Test public void testValidWhenPathHasValue() { Validation v = new IfPathHasValueValidation("hello", 2, Validations.single().allowedValues("hello", 1, 2, 3)); ValidationResult vr = v.validate(ConfigFactory.parseString("hello = 2")); assertEquals(vr.getValidity(), Validity.VALID); }
@Test public void testReadFromISO() throws Exception { String eWithAcute = "\u00E9"; String nameStringUTF16 = "F" + eWithAcute + "lix"; String bookStringUTF16 = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>" + "<Book><name>" + nameStringUTF16 + "</name></Book>"; byte[] iso88591bytes = bookStringUTF16.getBytes("ISO-8859-1"); JAXBElementProvider<Book> p = new JAXBElementProvider<>(); Book book = p.readFrom(Book.class, null, new Annotation[]{}, MediaType.valueOf(MediaType.APPLICATION_XML), null, new ByteArrayInputStream(iso88591bytes)); assertEquals(book.getName(), nameStringUTF16); }
@Test void shouldReturnTransactionIsAggregateBondedWhenHeightIs0AndHashAndMerkHashAreDifferent() { TransactionInfo transactionInfo = TransactionInfo.create(BigInteger.valueOf(0), 1, "ABC", "hash", "hash_2"); FakeTransferTransaction fakeTransaction = new FakeTransferTransactionFactory(networkType) .deadline(new FakeDeadline()).signature("signature").signer(signer).transactionInfo(transactionInfo) .build(); assertTrue(fakeTransaction.hasMissingSignatures()); }
@Test public void disallowNullProjectId() { StackdriverStatsConfiguration.Builder builder = StackdriverStatsConfiguration.builder(); thrown.expect(NullPointerException.class); builder.setProjectId(null); }
@Test public void testConstReferences() throws IOException { assertThat(parse("test", "string", "calculator.bar"), is("value")); assertThat(parse("test", "i32", "calculator.foo"), is(44)); }
@Test public void calculateNetHashRate() { long ts = System.currentTimeMillis() / 1000L; Mockito.when(blockHeader.getTimestamp()).thenReturn(ts); Mockito.when(blockHeader.getCoinbase()) .thenReturn(NOT_MY_COINBASE) .thenReturn(FAKE_COINBASE) .thenReturn(FAKE_COINBASE) .thenReturn(NOT_MY_COINBASE); Mockito.when(block.getCumulativeDifficulty()).thenReturn(TEST_DIFFICULTY); HashRateCalculator hashRateCalculator = new HashRateCalculatorMining(blockStore, new RskCustomCache<>(1000L), FAKE_COINBASE); BigInteger hashRate = hashRateCalculator.calculateNetHashRate(Duration.ofHours(1)); Assert.assertEquals(hashRate, new BigInteger("+4")); }
@Test public void testAddRule() { reset(topology); expect(topology.isAttachmentPointPort(DatapathId.of(1L), OFPort.of(1))).andReturn(true).anyTimes(); expect(topology.isAttachmentPointPort(DatapathId.of(2L), OFPort.of(1))).andReturn(true).anyTimes(); replay(topology); int[] cidr = new int[2]; ACLRule rule1, rule2, rule3, rule4; IResultSet resultSet; Iterator<IResultSet> it; Map<String, Object> row; deviceManager.learnEntity( Ethernet.toLong(Ethernet.toMACAddress("00:00:00:00:00:01")), null, IPv4.toIPv4Address("10.0.0.1"), 1L, 1); deviceManager.learnEntity( Ethernet.toLong(Ethernet.toMACAddress("00:00:00:00:00:03")), null, IPv4.toIPv4Address("10.0.0.3"), 2L, 1); rule1 = new ACLRule(); rule1.setNw_src("10.0.0.0/28"); cidr = IPAddressUtil.parseCIDR("10.0.0.0/28"); rule1.setNw_src_prefix(cidr[0]); rule1.setNw_src_maskbits(cidr[1]); rule1.setNw_dst("10.0.0.254/32"); cidr = IPAddressUtil.parseCIDR("10.0.0.254/32"); rule1.setNw_dst_prefix(cidr[0]); rule1.setNw_dst_maskbits(cidr[1]); rule1.setNw_proto(6); rule1.setTp_dst(80); rule1.setAction(Action.DENY); assertEquals(acl.addRule(rule1), true); assertEquals(acl.getRules().size(), 1); resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, "ACLRule_1_00:00:00:00:00:00:00:01"); it = resultSet.iterator(); while(it.hasNext()){ row = it.next().getRow(); assertEquals(row.get("switch").toString(),"00:00:00:00:00:00:00:01"); assertEquals(row.get("priority").toString(),"30000"); assertEquals(row.get("eth_type").toString(),"2048"); assertEquals(row.get("ipv4_src").toString(),"10.0.0.0/28"); assertEquals(row.get("ipv4_dst").toString(),"10.0.0.254/32"); assertEquals(row.get("ip_proto").toString(),"6"); assertEquals(row.get("tp_dst").toString(),"80"); assertEquals(row.get("actions"), null); } resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, "ACLRule_1_00:00:00:00:00:00:00:02"); it = resultSet.iterator(); while(it.hasNext()){ row = it.next().getRow(); assertEquals(row.get("switch").toString(),"00:00:00:00:00:00:00:02"); assertEquals(row.get("priority").toString(),"30000"); assertEquals(row.get("eth_type").toString(),"2048"); assertEquals(row.get("ipv4_src").toString(),"10.0.0.0/28"); assertEquals(row.get("ipv4_dst").toString(),"10.0.0.254/32"); assertEquals(row.get("ip_proto").toString(),"6"); assertEquals(row.get("tp_dst").toString(),"80"); assertEquals(row.get("actions"), null); } rule2 = new ACLRule(); rule2.setNw_src("10.0.0.1/32"); cidr = IPAddressUtil.parseCIDR("10.0.0.1/32"); rule2.setNw_src_prefix(cidr[0]); rule2.setNw_src_maskbits(cidr[1]); rule2.setNw_dst("10.0.0.254/32"); cidr = IPAddressUtil.parseCIDR("10.0.0.254/32"); rule2.setNw_dst_prefix(cidr[0]); rule2.setNw_dst_maskbits(cidr[1]); rule2.setNw_proto(6); rule2.setTp_dst(80); rule2.setAction(Action.DENY); assertEquals(acl.addRule(rule1), false); assertEquals(acl.getRules().size(), 1); rule3 = new ACLRule(); rule3.setNw_dst("10.0.0.3/32"); cidr = IPAddressUtil.parseCIDR("10.0.0.3/32"); rule3.setNw_dst_prefix(cidr[0]); rule3.setNw_dst_maskbits(cidr[1]); rule3.setNw_proto(1); rule3.setAction(Action.DENY); assertEquals(acl.addRule(rule3), true); assertEquals(acl.getRules().size(), 2); resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, "ACLRule_2_00:00:00:00:00:00:00:02"); it = resultSet.iterator(); while(it.hasNext()){ row = it.next().getRow(); assertEquals(row.get("switch").toString(),"00:00:00:00:00:00:00:02"); assertEquals(row.get("priority").toString(),"29999"); assertEquals(row.get("eth_type").toString(),"2048"); assertEquals(row.get("ipv4_src"), null); assertEquals(row.get("ipv4_dst").toString(),"10.0.0.3/32"); assertEquals(row.get("ip_proto").toString(),"1"); assertEquals(row.get("tp_dst"), null); assertEquals(row.get("actions"), null); } rule4 = new ACLRule(); rule4.setNw_src("10.0.0.1/32"); cidr = IPAddressUtil.parseCIDR("10.0.0.1/32"); rule4.setNw_src_prefix(cidr[0]); rule4.setNw_src_maskbits(cidr[1]); rule4.setNw_dst("10.0.0.3/32"); cidr = IPAddressUtil.parseCIDR("10.0.0.3/32"); rule4.setNw_dst_prefix(cidr[0]); rule4.setNw_dst_maskbits(cidr[1]); rule4.setAction(Action.ALLOW); assertEquals(acl.addRule(rule4), true); assertEquals(acl.getRules().size(), 3); resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, "ACLRule_3_00:00:00:00:00:00:00:01"); it = resultSet.iterator(); while(it.hasNext()){ row = it.next().getRow(); assertEquals(row.get("switch").toString(),"00:00:00:00:00:00:00:01"); assertEquals(row.get("priority").toString(),"29999"); assertEquals(row.get("eth_type").toString(),"2048"); assertEquals(row.get("ipv4_src").toString(), "10.0.0.1/32"); assertEquals(row.get("ipv4_dst").toString(), "10.0.0.3/32"); assertEquals(row.get("ip_proto"), null); assertEquals(row.get("tp_dst"), null); assertEquals(row.get("actions"), "output=controller"); } }
@Test public void processAmountDiscountWithRate() throws Exception { Discount discount = new Discount("discount1", "a discount", ORDER, DISCOUNT_RATE, AMOUNT, null,10.0, 2.0, 1, true,null,null, false); assertThat(discount.processDiscount(10.0,10.0)).isEqualTo(9); }
@Test public void getTypeName_should_return_bigdecimal() { assertThat(bigDecimalType.getTypeName()).isEqualTo("bigdecimal"); }
@Test public void incompatible() throws Exception { config1.setType(RegionType.PARTITION_PROXY); config2.setType(RegionType.REPLICATE); assertThatThrownBy(() -> manager.checkCompatibility(config1, "group", config2)) .isInstanceOf(IllegalArgumentException.class) .hasMessageContaining( "Region 'test' of type 'PARTITION_PROXY' is not compatible with group's existing Region 'test' of type 'REPLICATE'"); }
@Test public void testDifferentApisWithSameApiWideConfig() throws Exception { @Api(name = "testApi", version = "v1", resource = "foo") final class Test1 {} ApiConfig config1 = configLoader.loadConfiguration(ServiceContext.create(), Test1.class); @Api(name = "testApi", version = "v1", resource = "foo") @ApiClass(resource = "bar") final class Test2 {} ApiConfig config2 = configLoader.loadConfiguration(ServiceContext.create(), Test2.class); validator.validate(Lists.newArrayList(config1, config2)); }
@Test public void testGetPostingToResource() { final String params = "{\"key1\" : \"var1\", \"key2\" : \"var2\", \"key3\" : \"var3\"}"; Assert.assertEquals( "POSTing to resource \"foo\": " + params, messages.getPostingToResource( "foo", params ) ); }
@Test public final void testColorimetricColorStringInt() { logger.info("--------------------------------------------------------------------------------------------------------------"); logger.info("Test method ColorimetricColor(String, int)"); logger.info(" Test 1 : setting of all the attributes"); ColorimetricColor cResult = new ColorimetricColor("Rouge", 0); ColorimetricColor cExpected = new ColorimetricColor(); cExpected.idColor = 57; cExpected.hue = "ROUGE"; cExpected.lightness = 1; cExpected.usualName = "ROUGE TRES CLAIR"; cExpected.cleCoul = "R1"; cExpected.redRGB = 254; cExpected.greenRGB = 230; cExpected.blueRGB = 219; cExpected.xScreen = 164; cExpected.yScreen = 164; compareColorimetricColor(cResult, cExpected); logger.info(" Test 2 : with a non existing color : abcdef "); cResult = new ColorimetricColor("abcdef", 1); cExpected = defaultColorimetric; compareColorimetricColor(cResult, cExpected); logger.info(" Test 3 : with a non existing lightness : 2012841"); cResult = new ColorimetricColor("Rouge", 2012841); cExpected = defaultColorimetric; compareColorimetricColor(cResult, cExpected); logger.info(" Test 4 : different existing combination of hue and lightness"); logger.info(" Test 4.1 : Rouge, Lightness = 0 => R1"); cResult = new ColorimetricColor("Rouge", 0); assertEquals("R1", cResult.getCleCoul()); logger.info(" Test 4.2 : Rouge, Lightness = 1 => R1"); cResult = new ColorimetricColor("Rouge", 1); assertEquals("R1", cResult.getCleCoul()); logger.info(" Test 4.3 : Rouge, Lightness = 5 => R5"); cResult = new ColorimetricColor("Rouge", 5); assertEquals("R5", cResult.getCleCoul()); logger.info(" Test 4.4 : Rouge, Lightness = 7 => R7"); cResult = new ColorimetricColor("Rouge", 7); assertEquals("R7", cResult.getCleCoul()); logger.info(" Test 4.5 : Rouge, Lightness = 8 => R8"); cResult = new ColorimetricColor("Rouge", 8); assertEquals("R7", cResult.getCleCoul()); logger.info(" Test 4.6 : Gris, Lightness = 0 => Bl0"); cResult = new ColorimetricColor("Gris", 0); assertEquals("Bl0", cResult.getCleCoul()); compareColorimetricColor(cResult, new ColorimetricColor(85)); logger.info(" Test 4.7 : Gris, Lightness = 1 => G1"); cResult = new ColorimetricColor("Gris", 1); assertEquals("G1", cResult.getCleCoul()); logger.info(" Test 4.8 : Gris, Lightness = 5 => G5"); cResult = new ColorimetricColor("Gris", 5); assertEquals("G5", cResult.getCleCoul()); logger.info(" Test 4.9 : Gris, Lightness = 7 => G7"); cResult = new ColorimetricColor("Gris", 7); assertEquals("G7", cResult.getCleCoul()); logger.info(" Test 4.10 : Gris, Lightness = 8 => N8"); cResult = new ColorimetricColor("Gris", 8); assertEquals("N8", cResult.getCleCoul()); compareColorimetricColor(cResult, new ColorimetricColor(86)); logger.info(" Test 4.11 : Noir, Lightness = 0 => Bl0"); cResult = new ColorimetricColor("Noir", 0); assertEquals("Bl0", cResult.getCleCoul()); compareColorimetricColor(cResult, new ColorimetricColor(85)); logger.info(" Test 4.12 : Noir, Lightness = 1 => G1"); cResult = new ColorimetricColor("Noir", 1); assertEquals("G1", cResult.getCleCoul()); logger.info(" Test 4.13 : Noir, Lightness = 7 => G7"); cResult = new ColorimetricColor("Noir", 7); assertEquals("G7", cResult.getCleCoul()); logger.info(" Test 4.14 : Noir, Lightness = 8 => N8"); cResult = new ColorimetricColor("Noir", 8); assertEquals("N8", cResult.getCleCoul()); logger.info(" Test 4.15 : Blanc, Lightness = 0 => Bl0"); cResult = new ColorimetricColor("Blanc", 0); assertEquals("Bl0", cResult.getCleCoul()); logger.info(" Test 4.16 : Blanc, Lightness = 1 => G1"); cResult = new ColorimetricColor("Blanc", 1); assertEquals("G1", cResult.getCleCoul()); logger.info(" Test 4.17 : Blanc, Lightness = 7 => G7"); cResult = new ColorimetricColor("Blanc", 7); assertEquals("G7", cResult.getCleCoul()); logger.info(" Test 4.18 : Blanc, Lightness = 8 => N8"); cResult = new ColorimetricColor("Blanc", 8); assertEquals("N8", cResult.getCleCoul()); compareColorimetricColor(cResult, new ColorimetricColor(86)); logger.info(" Test 5 : different non existing combination of hue and lightness"); logger.info(" Test 5.1 : Rouge, Lightness = 9 => Default ColorimetricColor"); cResult = new ColorimetricColor("Rouge", 9); compareColorimetricColor(cResult, defaultColorimetric); logger.info(" Test 5.2 : Gris, Lightness = 9 => Default ColorimetricColor"); cResult = new ColorimetricColor("Gris", 9); compareColorimetricColor(cResult, defaultColorimetric); logger.info(" Test 5.3 : Noir, Lightness = 88888 => Default ColorimetricColor"); cResult = new ColorimetricColor("Noir", 88888); compareColorimetricColor(cResult, defaultColorimetric); logger.info(" Test 5.5 : Blanc, Lightness = 9 => Default ColorimetricColor"); cResult = new ColorimetricColor("Blanc", 9); compareColorimetricColor(cResult, defaultColorimetric); logger.info(" Test 5.6 : Mauve, Lightness = 5 => Default ColorimetricColor"); cResult = new ColorimetricColor("Mauve", 5); compareColorimetricColor(cResult, defaultColorimetric); logger.info(" Test 6 : 2 particular combination of hue and lightness (calling constructor twice)"); logger.info(" Test 6.1 : Noir, Lightness = 8 => Default ColorimetricColor"); cResult = new ColorimetricColor("Noir", 8); cExpected = new ColorimetricColor("Gris", 8); compareColorimetricColor(cResult, cExpected); compareColorimetricColor(cResult, new ColorimetricColor(86)); logger.info(" Test 6.2 : Blanc, Lightness = 0 => Default ColorimetricColor"); cResult = new ColorimetricColor("Blanc", 0); cExpected = new ColorimetricColor("Gris", 0); compareColorimetricColor(cResult, cExpected); compareColorimetricColor(cResult, new ColorimetricColor(85)); logger.info(" Test 7 : with a non existing lightness : null"); cResult = new ColorimetricColor(null, 2012841); cExpected = defaultColorimetric; compareColorimetricColor(cResult, cExpected); }
@Test public void buildEmptyWalletTo_insufficientMoneyException() throws InsufficientMoneyException, UTXOProviderException { Context uldContext = new Context(NetworkParameters.fromID(NetworkParameters.ID_REGTEST)); Address to = mockAddress(123); mockCompleteTxWithThrowForEmptying(wallet, to, new InsufficientMoneyException(Coin.valueOf(1234))); Optional<ReleaseTransactionBuilder.BuildResult> result = builder.buildEmptyWalletTo(to); Assert.assertFalse(result.isPresent()); verify(wallet, never()).getWatchedAddresses(); verify(wallet, never()).getUTXOProvider(); }
@Test public void testCompareNotEquals() { LinkKey k1 = LinkKey.linkKey(SRC1, DST1); LinkKey k2 = LinkKey.linkKey(SRC1, DST2); assertThat(k1, is(not(equalTo(k2)))); assertThat(k1, is(not(equalTo(new Object())))); }
@Test public void testValidateAction_noActionDefinition() throws Exception { boolean action = mdxBaseComponent.validateAction(); assertTrue( action ); }
@Override @Test public void convertSDKToSDK() { com.silanis.esl.sdk.AttachmentFile sdkAttachmentFile1 = createSdkAttachmentFile(); com.silanis.esl.sdk.AttachmentFile sdkAttachmentFile2 = new AttachmentFileConverter(sdkAttachmentFile1).toSDKAttachmentFile(); assertThat("Converter returned a null sdk object for a non null sdk object", sdkAttachmentFile2, notNullValue()); assertThat("Converter didn't return the same non-null sdk object it was given", sdkAttachmentFile2, is(sdkAttachmentFile1)); }
@Test(expected = RequiredFieldException.class) public void codeChange_validation_id() throws Exception { getTested().codeChange(null, "code"); }
@Test public void testGetValidationSkipGroups_1() throws Exception { ValidationStatus fixture = new ValidationStatus(1, 1, 1, 1, 1, 1); int result = fixture.getValidationSkipGroups(); assertEquals(1, result); }
@Test public void executeRequestFailure() throws AuthorizationException { mExpectedEx.expect(AuthorizationException.class); mEndPoint.enqueueReturnUnauthorizedRevoked(); mRequest.executeRequest(mHttpClient); }
@Test void create_ldap_provider_removes_password() throws Exception { String zoneId = IdentityZone.getUaaZoneId(); IdentityProvider<LdapIdentityProviderDefinition> ldapDefinition = getLdapDefinition(); assertNotNull(ldapDefinition.getConfig().getBindPassword()); when(mockIdentityProviderProvisioning.create(any(), eq(zoneId))).thenReturn(ldapDefinition); ResponseEntity<IdentityProvider> response = identityProviderEndpoints.createIdentityProvider(ldapDefinition, true); IdentityProvider created = response.getBody(); assertNotNull(created); assertEquals(LDAP, created.getType()); assertNotNull(created.getConfig()); assertTrue(created.getConfig() instanceof LdapIdentityProviderDefinition); assertNull(((LdapIdentityProviderDefinition) created.getConfig()).getBindPassword()); }
@Test public void testHasSameCurrency() { final Money m1 = new Money(100, "pds"); final Money m2 = new Money(200, "pds"); final Money m3 = new Money(200, "usd"); assertTrue(m1.hasSameCurrency(m2)); assertFalse(m1.hasSameCurrency(m3)); }
@Test void testAbsolute() { assertEquals( paths("/", "/a", "/a/b", "/a/b/c"), MorePaths.iterPaths(Paths.get("/a/b/c")).collect(toList()) ); }
@Test public void testCornerCases() throws IOException { File props = new File(root, "/corner-cases.properties"); File hocon = Properties2HoconConverter.convert(props, true); Config config = load(hocon); assertThat(config.isEmpty()).isFalse(); assertThat(config.getString("\":=\"")).isEqualTo("weird"); assertThat(config.getString("with spaces")).isEqualTo("spaces"); assertThat(config.getString("3")).isEqualTo("number"); assertThat(config.getString("multilines")).contains("foo,").contains("bar,").contains("baz"); assertThat(config.getString("multilines_with_empty_blank_line")).isEqualTo("foo, bar, baz"); assertThat(config.getString("truth.1")).isEqualTo("Beauty"); assertThat(config.getString("truth.2")).isEqualTo("Beauty"); assertThat(config.getString("truth.3")).isEqualTo("Beauty"); assertThat(config.getString("cheeses")).isEqualTo(""); assertThat(config.getString("foo.interpolated")).isEqualTo("baz - hello"); }
@Test public void testBeforeJobStart() { compositeJobListener.beforeJob(parameters); InOrder inOrder = inOrder(jobListener1, jobListener2); inOrder.verify(jobListener1).beforeJob(parameters); inOrder.verify(jobListener2).beforeJob(parameters); }
@Test public void testWithLabelInNewLanguage() { MonolingualTextValue newLabel = new MonolingualTextValueImpl( "Item Q42", "fr"); ItemDocument withLabel = ir1.withLabel(newLabel); assertEquals("Item Q42", withLabel.findLabel("fr")); }
@Test public void namespacingAddsClientNameCorrectly() { ServerListConfig namespacedServersList = ServerListConfigs.namespaceUris(SERVERS_LIST_1, CLIENT); assertThat(namespacedServersList.servers()).containsExactly("one/client"); }
@Test public void testToByteArray_lt_OP_PUSHDATA1() { for (byte len = 1; len < OP_PUSHDATA1; len++) { byte[] bytes = new byte[len]; RANDOM.nextBytes(bytes); byte[] expected = Arrays.concatenate(new byte[] { len }, bytes); byte[] actual = new ScriptChunk(len, bytes).toByteArray(); assertArrayEquals(expected, actual); } }
@Test public void testReadFrom() throws Exception { channelBuffer = ChannelBuffers.copiedBuffer(tlv); ipInternalReachabilityTlv.readFrom(channelBuffer); assertThat(ipInternalReachabilityTlv, is(notNullValue())); }
@Test public void testEncryptSHA224() throws Exception { assertThat(encryptSHA224ToString("blankj")).isEqualTo(blankjSHA224); assertThat(encryptSHA224ToString("blankj".getBytes())).isEqualTo(blankjSHA224); assertThat(encryptSHA224("blankj".getBytes())).isEqualTo(hexString2Bytes(blankjSHA224)); }
@Test public void saveAuditWithLocation() throws Exception { AsyncTaskAuditEventWriter writer = new AsyncTaskAuditEventWriter(auditFile, true, false, false, false); writer.writeEvents(getSampleAuditEventsWithLocations()); String expectedAuditContent = FileUtils.readFileToString(auditFile); String expectedData = "event,node,start,end,latitude,longitude,accuracy\n" + "form start,,1548106927319,,,,\n" + "location tracking enabled,,548108908250,,,,\n" + "location permissions granted,,548108908255,,,,\n" + "location providers enabled,,548108908259,,,,\n" + "question,/data/q1,1548106927323,1548106930112,54.4112062,18.5896652,30.716999053955078\n" + "add repeat,/data/g1[1],1548106930118,1548106931611,54.4112062,18.5896652,30.716999053955078\n" + "question,/data/g1[1]/q2,1548106931612,1548106937122,54.4112062,18.5896652,30.716999053955078\n" + "add repeat,/data/g1[2],1548106937123,1548106938276,54.4112062,18.5896652,30.716999053955078\n" + "question,/data/g1[2]/q2,1548106938277,1548106948127,54.4112062,18.5896652,30.716999053955078\n" + "add repeat,/data/g1[3],1548106948128,1548106949446,54.4112062,18.5896652,30.716999053955078\n" + "end screen,,1548106949448,1548106953601,54.4112062,18.5896652,30.716999053955078\n" + "form save,,1548106953600,,54.4112062,18.5896652,30.716999053955078\n" + "form exit,,1548106953601,,54.4112062,18.5896652,30.716999053955078\n" + "form finalize,,1548106953601,,54.4112062,18.5896652,30.716999053955078\n"; assertEquals(expectedData, expectedAuditContent); }
@Test public void selfMerge() throws Exception { File sourceFile1; File sourceFile2; File expectedOutputFile; File actualOutputFile; sourceFile1 = dataUtils.createDataFile("v0_6/merge/merge-in-1.osm"); sourceFile2 = dataUtils.createDataFile("v0_6/merge/merge-in-1.osm"); expectedOutputFile = dataUtils.createDataFile("v0_6/merge/merge-in-1.osm"); actualOutputFile = dataUtils.newFile(); Osmosis.run( new String[] { "-q", "--read-xml-0.6", sourceFile2.getPath(), "--read-xml-0.6", sourceFile1.getPath(), "--merge", "--write-xml-0.6", actualOutputFile.getPath() } ); dataUtils.compareFiles(expectedOutputFile, actualOutputFile); }
@Test public void testSubProcessWithCamundaInputOutput() { modelInstance = Bpmn.createProcess() .startEvent() .subProcess("subProcess") .camundaInputParameter("foo", "bar") .camundaInputParameter("yoo", "hoo") .camundaOutputParameter("one", "two") .camundaOutputParameter("three", "four") .embeddedSubProcess() .startEvent() .endEvent() .subProcessDone() .endEvent() .done(); SubProcess subProcess = modelInstance.getModelElementById("subProcess"); assertCamundaInputOutputParameter(subProcess); }
@Test public void valid_tintTo_setup_properly() { assertValidTint(JamOperationFactory.tintTo(START_TINT)); }
@Test public void testRecovery() throws Exception { Random r = new Random(); long seed = r.nextLong(); r.setSeed(seed); System.out.println("SEED: " + seed); List<Path> baseDirs = buildDirs(r, base, 4); createDirs(new Path("."), baseDirs); List<Path> content = buildDirs(r, new Path("."), 10); for (Path b : baseDirs) { createDirs(b, content); } Configuration conf = new YarnConfiguration(); conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true); conf.setInt(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC, 1); NMMemoryStateStoreService stateStore = new NMMemoryStateStoreService(); stateStore.init(conf); stateStore.start(); DeletionService del = new DeletionService(new FakeDefaultContainerExecutor(), stateStore); try { del.init(conf); del.start(); for (Path p : content) { assertTrue(lfs.util().exists(new Path(baseDirs.get(0), p))); FileDeletionTask deletionTask = new FileDeletionTask(del, (Long.parseLong(p.getName()) % 2) == 0 ? null : "dingo", p, baseDirs); del.delete(deletionTask); } del.stop(); del = new DeletionService(new FakeDefaultContainerExecutor(), stateStore); del.init(conf); del.start(); int msecToWait = 10 * 1000; for (Path p : baseDirs) { System.out.println("TEST Basedir: " + p.getName()); for (Path q : content) { Path fp = new Path(p, q); System.out.println("TEST Path: " + fp.toString()); while (msecToWait > 0 && lfs.util().exists(fp)) { Thread.sleep(100); msecToWait -= 100; } assertFalse(lfs.util().exists(fp)); } } } finally { del.close(); stateStore.close(); } }
@Test public void testGetBasePath01() throws Exception { FileControlImpl fileControl = new FileControlImpl(); String basePath = "aaa"; ReflectionTestUtils.setField(fileControl, "basePath", basePath); String getBasePath = fileControl.getBasePath(); assertEquals(basePath, getBasePath); }
@Test public void multipleEmptyString() { setup("", "", "", ""); assertFalse(segmenter.acceptable(0, 1)); assertFalse(segmenter.acceptable(0, 1)); }
@Test(expected = FileNotFoundException.class) public void shouldThrowFileNotFoundExceptionWhenConfigFileIsNotFound() throws IOException { JobConfig.readConfig("someWorkingDir", "nonexisting.json"); }
@Test public void shouldSaveOrdersWithOrderGroups() throws ParseException { EmrOrderServiceImpl_1_12 emrOrderService = new EmrOrderServiceImpl_1_12(openMRSDrugOrderMapper, encounterService, openMRSOrderMapper, orderSetService, openMRSOrderGroupMapper); EncounterTransaction.Order order1 = new OrderBuilder().withConceptUuid("concept-uuid1").withComment("Comment").withOrderGroup("orderSet-uuid1").build(); EncounterTransaction.Order order2 = new OrderBuilder().withConceptUuid("concept-uuid2").withComment("Comment").withOrderGroup("orderSet-uuid1").build(); EncounterTransaction.Order order3 = new OrderBuilder().withConceptUuid("concept-uuid3").withComment("Comment").withOrderGroup("orderSet-uuid2").build(); Encounter encounter = new Encounter(); Patient patient = new Patient(); OrderGroup mappedOrderGroup1 = new OrderGroup(); mappedOrderGroup1.setEncounter(encounter); mappedOrderGroup1.setPatient(patient); OrderSet orderSet1 = new OrderSet(); mappedOrderGroup1.setOrderSet(orderSet1); OrderGroup mappedOrderGroup2 = new OrderGroup(); mappedOrderGroup2.setEncounter(encounter); mappedOrderGroup2.setPatient(patient); OrderSet orderSet2 = new OrderSet(); mappedOrderGroup2.setOrderSet(orderSet2); Order mappedOrder1 = new Order(); Concept concept = new Concept(); concept.setUuid("concept-uuid1"); mappedOrder1.setConcept(concept); mappedOrder1.setOrderGroup(mappedOrderGroup1); mappedOrder1.setCommentToFulfiller("Comment"); Order mappedOrder2 = new Order(); concept = new Concept(); concept.setUuid("concept-uuid2"); mappedOrder2.setConcept(concept); mappedOrder2.setOrderGroup(mappedOrderGroup1); mappedOrder2.setCommentToFulfiller("Comment"); Order mappedOrder3 = new Order(); concept = new Concept(); concept.setUuid("concept-uuid3"); mappedOrder2.setConcept(concept); mappedOrder3.setOrderGroup(mappedOrderGroup2); mappedOrder2.setCommentToFulfiller("Comment"); when(openMRSOrderMapper.map(order1,encounter)).thenReturn(mappedOrder1); when(openMRSOrderMapper.map(order2,encounter)).thenReturn(mappedOrder2); when(openMRSOrderMapper.map(order3,encounter)).thenReturn(mappedOrder3); when(openMRSOrderGroupMapper.map(order1.getOrderGroup(), encounter)).thenReturn(mappedOrderGroup1); when(openMRSOrderGroupMapper.map(order2.getOrderGroup(), encounter)).thenReturn(mappedOrderGroup1); when(openMRSOrderGroupMapper.map(order3.getOrderGroup(), encounter)).thenReturn(mappedOrderGroup2); when(orderSetService.getOrderSetByUuid(order1.getOrderGroup().getOrderSet().getUuid())).thenReturn(mappedOrder1.getOrderGroup().getOrderSet()); when(orderSetService.getOrderSetByUuid(order2.getOrderGroup().getOrderSet().getUuid())).thenReturn(mappedOrder2.getOrderGroup().getOrderSet()); when(orderSetService.getOrderSetByUuid(order3.getOrderGroup().getOrderSet().getUuid())).thenReturn(mappedOrder3.getOrderGroup().getOrderSet()); emrOrderService.saveOrders(Arrays.asList(order1, order2, order3), encounter); ArgumentCaptor<Encounter> encounterArgumentCaptor = ArgumentCaptor.forClass(Encounter.class); verify(encounterService).saveEncounter(encounterArgumentCaptor.capture()); Encounter savedEncounter = encounterArgumentCaptor.getValue(); ArrayList<Order> savedOrders = new ArrayList<Order>(savedEncounter.getOrders()); assertThat(savedOrders.size(), is(3)); HashMap<String, OrderGroup> orderGroups = new HashMap<String, OrderGroup>(); for (Order savedOrder : savedOrders) { if (savedOrder.getOrderGroup() != null) { orderGroups.put(savedOrder.getOrderGroup().getOrderSet().getUuid(), savedOrder.getOrderGroup()); } } assertEquals(2, orderGroups.size()); }
@Test public void shouldSetAndReadMatchersFailFast() { boolean originalSetting = matchersFailFast(); try { matchersFailFast(true); assertTrue(matchersFailFast()); assertEquals("true", System.getProperty("mockserver.matchersFailFast")); matchersFailFast(false); assertFalse(matchersFailFast()); assertEquals("false", System.getProperty("mockserver.matchersFailFast")); } finally { matchersFailFast(originalSetting); } }
@Test public void testNullQueuePrioritizerNotWritten() throws ConfigurationChangeException, XPathExpressionException { ConfigTransformer.addConnection(config, new ConnectionSchema(Collections.emptyMap()), new ParentGroupIdResolver(new ProcessGroupSchema(Collections.emptyMap(), ConfigSchema.TOP_LEVEL_NAME))); XPath xpath = xPathFactory.newXPath(); String expression = "connection/queuePrioritizerClass"; assertNull(xpath.evaluate(expression, config, XPathConstants.NODE)); }
@Test(expected = StackTooSmallException.class) public void testDUPN_2() { program = getProgram("80"); try { vm.step(program); } finally { assertTrue(program.isStopped()); } }
@Test void testBuildingWithInvalidGroupIdPrefixShouldThrowAxonConfigurationException() { assertThrows( AxonConfigurationException.class, () -> StreamableKafkaMessageSource.builder().groupIdPrefix(null) ); }
@Test(expected = RepositoryException.class) public void testAuthorizableByUnresolvablePath() throws Exception { NamePathMapper mapper = new NamePathMapperImpl(new LocalNameMapper(root, ImmutableMap.of("a","internal"))); UserManagerImpl um = new UserManagerImpl(root, new PartialValueFactory(mapper), getSecurityProvider()); um.getAuthorizableByPath(getTestUser().getPath()); }
@Test public void testBorrowMoney() throws IOException { BorrowResult borrowOrderResult = readValue("borrow_money.json", BorrowResult.class); assertEquals(312L, borrowOrderResult.getBorrowId()); }
@Test public void testIllegalPattern() throws Exception { RegexpSyntaxIdentifier ident = createIdentifier(); ident.addPattern("\\"); try { ident.isThisSyntax(LINE); fail(); } catch (ServiceException e) { } }
@Test public void getAndConsumeShouldHandleForEachRemainingThrowing() throws IOException { doThrow(CAUSE).when(entityIterator).forEachRemaining(any()); doReturn(entityIterator).when(rw).get(key1, key2); exception.expect(IOException.class); exception.expectCause(is((Throwable) CAUSE)); sut.get(List.of(key1, key2), entity -> fail()); }
@Test public void testRemoveWithMissingHiddenNestedCugEntryAtRootNode() throws Exception { createCug("/content", getTestGroupPrincipal()); createCug("/content/subtree", EveryonePrincipal.getInstance()); root.commit(); removeCug("/content", false); NodeBuilder after = new MemoryNodeBuilder(getTreeProvider().asNodeState(root.getTree(PathUtils.ROOT_PATH))); after.setProperty(HIDDEN_NESTED_CUGS, ImmutableList.of(), Type.STRINGS); after.setProperty(HIDDEN_TOP_CUG_CNT, 0); NodeState before = getTreeProvider().asNodeState(adminSession.getLatestRoot().getTree(PathUtils.ROOT_PATH)); NestedCugHook nch = new NestedCugHook(); nch.processCommit(before, after.getNodeState(), new CommitInfo("sid", null)); }
@Test public void testTransactionCreateMatchUrlWithTwoMatch() { String methodName = "testTransactionCreateMatchUrlWithTwoMatch"; Patient p = new Patient(); p.addIdentifier().setSystem("urn:system").setValue(methodName); IIdType id = myPatientDao.create(p, mySrd).getId(); ourLog.info("Created patient, got it: {}", id); p = new Patient(); p.addIdentifier().setSystem("urn:system").setValue(methodName); id = myPatientDao.create(p, mySrd).getId(); ourLog.info("Created patient, got it: {}", id); Bundle request = new Bundle(); p = new Patient(); p.addIdentifier().setSystem("urn:system").setValue(methodName); p.addName().setFamily("Hello"); p.setId("Patient/" + methodName); request.addEntry().setResource(p).getRequest().setMethod(HTTPVerb.POST).setIfNoneExist("Patient?identifier=urn%3Asystem%7C" + methodName); Observation o = new Observation(); o.getCode().setText("Some Observation"); o.getSubject().setReference("Patient/" + methodName); request.addEntry().setResource(o).getRequest().setMethod(HTTPVerb.POST); try { mySystemDao.transaction(mySrd, request); fail(); } catch (PreconditionFailedException e) { assertThat(e.getMessage(), containsString("with match URL \"Patient")); } }
@Test( expected = IOException.class ) public void contentEqualNullNonNull() throws Exception { IOUtil.contentEquals( new DontCloseByteArrayInputStream( emptyByteArray() ), null ); }
@Test public void testShouldThrowExceptionWhenSyncParamsIsNull() throws DhisVersionMismatchException { expectedException.expect( MetadataSyncServiceException.class ); expectedException.expectMessage( "MetadataSyncParams cant be null" ); metadataSyncService.doMetadataSync( null ); }
@Test public void revertToNegativeSnapshot() { Assert.assertFalse(manager.revertToSnapshot(-1)); }
@Test void addAxiomValueConvertsNamedResourceToUriForAttributeOfTypeObject() throws Exception { final EntityType<ClassWithObjectAnnotation> et = mock(EntityType.class); final SingularAttributeImpl<ClassWithObjectAnnotation, Object> att = objectAnnotationAttribute(et); final SingularAnnotationPropertyStrategy<ClassWithObjectAnnotation> sut = new SingularAnnotationPropertyStrategy<>( et, att, descriptor, mapperMock); final URI identifier = Generators.createIndividualIdentifier(); final Axiom<NamedResource> axiom = new AxiomImpl<>(NamedResource.create(PK), annotationWithUriForN(), new Value<>(NamedResource.create(identifier))); sut.addValueFromAxiom(axiom); final ClassWithObjectAnnotation instance = new ClassWithObjectAnnotation(); sut.buildInstanceFieldValue(instance); assertEquals(identifier, instance.singularAnnotation); }
@Test public void testContains() { JexlNode node = JexlNodeFactory.buildEQNode("FOO", "bar"); JexlNodeSet nodeSet = new JexlNodeSet(); nodeSet.add(node); assertTrue(nodeSet.contains(node)); assertFalse(nodeSet.contains("a string?!?!")); }
@Test public void testKeywordDefaultDirtyHack() { { KylinConfig.getInstanceFromEnv().setProperty("kylin.query.escape-default-keyword", "true"); String sql = "select * from DEFAULT.TEST_KYLIN_FACT"; String s = QueryUtil.massageSql(sql, "default", 0, 0, "DEFAULT"); Assert.assertEquals("select * from \"DEFAULT\".TEST_KYLIN_FACT", s); } }
@Test public void getStatus() { change.setStatus(NEW_STATUS); assertEquals(NEW_STATUS, change.getStatus()); }
@Test public void testOneQueuesHasMessages() { final RabbitMQConnectionInfo connectionInfo = new RabbitMQConnectionInfo("username", "password", "nodename", "servicename"); final Queue queue1 = new Queue().withName("queue1").withMessages(0L); final Queue queue2 = new Queue().withName("queue2").withMessages(1L); final Queue queue3 = new Queue().withName("queue1").withMessages(0L); final RabbitManagementApiFacade apiClient = mock(RabbitManagementApiFacade.class); when(apiCache.getApi(connectionInfo)).thenReturn(apiClient); when(apiClient.listQueues()).thenReturn(Lists.newArrayList(queue1, queue2, queue3)); assertFalse(operation.execute(connectionInfo)); }
@Test public void testWriteToOutputStream() throws Exception{ ServletOutputStream sos = response.getOutputStream(); sos.write(TEST_STRING.getBytes()); sos.close(); streamBytes.flip(); Assert.assertEquals("Expected output in GZIP.", TEST_STRING_IN_GZIP, streamBytes); }
@Test public void testParse() { ByteBuf buf = Unpooled.buffer(1); TEST_OBJECT.write(buf); ShortShortInt parsedObject = ShortShortInt.parse(buf); Assert.assertEquals(parsedObject, TEST_OBJECT, "Encoding and decoding should result in the same object"); }
@Test public void checkPower() { assertEquals(0, mTestMoveOne.getPower()); assertEquals(20, mTestMoveTwo.getPower()); assertEquals(10, mTestMoveThree.getPower()); }
@Test public void testSetDataFlavor() { fail("Not yet implemented"); }
@Test public void testContainsGeneIsFalse() { assertThat(instance.containsGene(9999), is(false)); }
@Test public void transfer_NewFile_WithPermissions() throws Exception { when(storageLoc.getPermissions()).thenReturn(new HashSet<>(asList( PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE))); Path sourceFile = createSourceFile(); URI binUri = client.transfer(binPid, sourceFile.toUri()); Path binPath = Paths.get(binUri); assertIsSourceFile(binPath); Set<PosixFilePermission> perms = Files.getPosixFilePermissions(binPath); assertEquals(2, perms.size()); assertTrue(perms.contains(PosixFilePermission.OWNER_READ)); assertTrue(perms.contains(PosixFilePermission.OWNER_WRITE)); }
@Test public void dataStorageFrequency_shouldAcceptNonDefaultValues() { final TekuConfiguration tekuConfiguration = getTekuConfigurationFromArguments("--data-storage-archive-frequency", "1024000"); assertThat(tekuConfiguration.getDataStorageFrequency()).isEqualTo(1024000L); }
@Test(expected = DisabledException.class) public void authenticate_shouldThrowDisabledExceptionIfUserIsInactive() { final String shogunUserName = "user"; final String correctPassword = "correctPassword"; final User userToAuth = createUserMock(shogunUserName, correctPassword); userToAuth.setActive(false); Authentication authRequest = mock(Authentication.class); when(authRequest.getName()).thenReturn(shogunUserName); when(authRequest.getCredentials()).thenReturn(correctPassword); when(userDao.findByAccountName(shogunUserName)).thenReturn(userToAuth); authProvider.authenticate(authRequest); }
@Test public void testStreamConfigOverrides() { final String sysStreamPrefix = String.format("systems.%s.streams.%s.", TEST_SYSTEM, TEST_PHYSICAL_NAME); Config config = addConfigs(buildStreamConfig(STREAM_ID, StreamConfig.PHYSICAL_NAME, TEST_PHYSICAL_NAME, StreamConfig.SYSTEM, TEST_SYSTEM, "systemProperty1", "systemValue1", "systemProperty2", "systemValue2", "systemProperty3", "systemValue3"), sysStreamPrefix + "systemProperty4", "systemValue4", sysStreamPrefix + "systemProperty2", "systemValue8"); StreamSpec spec = StreamUtil.getStreamSpec(STREAM_ID, new StreamConfig(config)); Map<String, String> properties = spec.getConfig(); assertEquals(4, properties.size()); assertEquals("systemValue4", properties.get("systemProperty4")); assertEquals("systemValue2", properties.get("systemProperty2")); }
@Test public void testCompileFileSassVariableWithUnicode() throws Exception { try (SassCompiler sassCompiler = new RubySassCompiler()) { File inputDir = new File( "../sass-compiler-jni/test-classes/unit/com/liferay/sass" + "/compiler/jni/internal/dependencies/"); File inputFile = new File(inputDir, "/unicode/input.scss"); String actualOutput = sassCompiler.compileFile( inputFile.getCanonicalPath(), ""); Assert.assertNotNull(actualOutput); File expectedOutputFile = new File( inputDir, "/unicode/expected_output.css"); String expectedOutput = read(expectedOutputFile.toPath()); Assert.assertEquals( stripNewLines(expectedOutput), stripNewLines(actualOutput)); } }
@Test public void test_removeGroupFromServiceAccount_failure() { String token = "5PDrOhsy4ig8L3EpsJZSLAMg"; ServiceAccountGroup serviceAccountGroup = new ServiceAccountGroup("svc_vault_test7", "group1", "reset"); UserDetails userDetails = getMockUser(true); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("{\"errors\":[\"Failed to remove the group from the Service Account\"]}"); Response response404 = getMockResponse(HttpStatus.NOT_FOUND, true, ""); Response groupResp = getMockResponse(HttpStatus.OK, true, "{\"data\":{\"bound_cidrs\":[],\"max_ttl\":0,\"policies\":[\"default\",\"w_shared_mysafe01\",\"w_shared_mysafe02\"],\"ttl\":0,\"groups\":\"admin\"}}"); when(reqProcessor.process("/auth/ldap/groups","{\"groupname\":\"group1\"}",token)).thenReturn(groupResp); ObjectMapper objMapper = new ObjectMapper(); String responseJson = groupResp.getResponse(); try { List<String> resList = new ArrayList<>(); resList.add("default"); resList.add("w_shared_mysafe01"); resList.add("w_shared_mysafe02"); when(ControllerUtil.getPoliciesAsListFromJson(objMapper, responseJson)).thenReturn(resList); } catch (IOException e) { e.printStackTrace(); } when(ControllerUtil.configureLDAPGroup(any(),any(),any())).thenReturn(response404); String[] latestPolicies = {"o_svcacct_svc_vault_test7"}; when(policyUtils.getCurrentPolicies(userDetails.getSelfSupportToken(), userDetails.getUsername())).thenReturn(latestPolicies); when(reqProcessor.process(eq("/sdb"),Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.OK, true, "{\"data\":{\"initialPasswordReset\":true,\"managedBy\":\"smohan11\",\"name\":\"svc_vault_test5\",\"users\":{\"smohan11\":\"sudo\"}}}")); ResponseEntity<String> responseEntity = serviceAccountsService.removeGroupFromServiceAccount(token, serviceAccountGroup, userDetails); assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }
@Test public void testRemove() { Metadata meta = new Metadata(); meta.remove("name-one"); assertEquals(0, meta.size()); meta.add("name-one", "value-1.1"); meta.add("name-one", "value-1.2"); meta.add("name-two", "value-2.2"); assertEquals(2, meta.size()); assertNotNull(meta.get("name-one")); assertNotNull(meta.get("name-two")); meta.remove("name-one"); assertEquals(1, meta.size()); assertNull(meta.get("name-one")); assertNotNull(meta.get("name-two")); meta.remove("name-two"); assertEquals(0, meta.size()); assertNull(meta.get("name-one")); assertNull(meta.get("name-two")); }
@Test public void pre2014() { assertTrue(getHeight("2013-12-01") == 0); assertTrue(getHeight("1958-12-01") == 0); }
@Test public void testNormalizeConstraintsIntervals() throws IOException { Constraints constraints = new Constraints(DatasetTestUtilities.OLD_VALUE_SCHEMA). toBefore("value", 12L); String normalizedConstraints = SignalManager.getNormalizedConstraints(constraints); Assert.assertEquals("value=(,12)", normalizedConstraints); }
@Test public void recov4ptsMultiTest() { final double[] xValues = new double[] {1., 2., 3., 4}; final double[][] yValues = new double[][] {{6., 1., 8., -2.}, {1., 1. / 3., 2. / 11., 1. / 7.}}; final int nIntervalsExp = 3; final int orderExp = 2; final int dimExp = 2; final double[][] coefsMatExp = new double[][] {{-5., 6.}, {-2. / 3., 1.}, {7., 1.}, {-5. / 33., 1. / 3.}, {-10., 8.}, {-3. / 77., 2. / 11.}}; LinearInterpolator interpMatrix = new LinearInterpolator(); PiecewisePolynomialResult result = interpMatrix.interpolate(xValues, yValues); assertThat(result.getDimensions()).isEqualTo(dimExp); assertThat(result.getNumberOfIntervals()).isEqualTo(nIntervalsExp); assertThat(result.getDimensions()).isEqualTo(dimExp); for (int i = 0; i < nIntervalsExp * dimExp; ++i) { for (int j = 0; j < orderExp; ++j) { final double ref = coefsMatExp[i][j] == 0. ? 1. : Math.abs(coefsMatExp[i][j]); assertThat(result.getCoefMatrix().get(i, j)).isCloseTo(coefsMatExp[i][j], offset(ref * EPS)); } } for (int j = 0; j < nIntervalsExp + 1; ++j) { assertThat(result.getKnots().get(j)).isEqualTo(xValues[j]); } }
@Test public void assertGetAllFailoverTasksWhenJobNodeHasNoChild() { Mockito.when(regCenter.isExisted(FailoverNode.ROOT)).thenReturn(true); Mockito.when(regCenter.getChildrenKeys(FailoverNode.ROOT)).thenReturn(Lists.newArrayList("test_job")); Mockito.when(regCenter.getChildrenKeys(FailoverNode.getFailoverJobNodePath("test_job"))).thenReturn(Collections.<String>emptyList()); Assert.assertTrue(failoverService.getAllFailoverTasks().isEmpty()); Mockito.verify(regCenter).isExisted(FailoverNode.ROOT); Mockito.verify(regCenter).getChildrenKeys(FailoverNode.ROOT); Mockito.verify(regCenter).getChildrenKeys(FailoverNode.getFailoverJobNodePath("test_job")); }
@Test public void testContainsKey() { TableCutList list = new TableCutList( 2, true ); assertThat( list.containsKey( 10 ), is( equalTo( false ) ) ); list.put( 10, Boolean.TRUE ); list.put( 20, Boolean.TRUE ); assertThat( list.containsKey( 10 ), is( equalTo( true ) ) ); assertThat( list.containsKey( 30 ), is( equalTo( false ) ) ); }
@Test public void invalidTaskIsNotShownWhenEditing() { mTaskDetailPresenter = new TaskDetailPresenter( INVALID_TASK_ID, mTasksRepository, mTaskDetailView, mSchedulerProvider); mTaskDetailPresenter.editTask(); verify(mTaskDetailView, never()).showEditTask(INVALID_TASK_ID); verify(mTaskDetailView).showMissingTask(); }
@Test public void resolve_ofNonExistingField_should_returnNull() { final NamedFieldTypeReference reference = new NamedFieldTypeReference("NOT_EXISTING_FIELD"); assertThat(reference.resolve(tableType), nullValue()); }
@Test public void isACollection_false() { final Helper helper = new Helper(elementUtils, typeUtils); when(typeUtils.isAssignable(any(TypeMirror.class), any(TypeMirror.class))).thenReturn(false); ASSERT.that(helper.isACollection(mock(TypeMirror.class))).isFalse(); }
@Test public void testPutAttributeValues() { List<Column> columnList = generateColumnList(); DataSet dataSet = new DataSet(columnList); dataSet.initData(generateInputData()); FrequencyService fs = new FrequencyService(dataSet); fs.putAttributeValues("firstName", false); fs.putAttributeValues("lastName", false); Assert.assertEquals("frequencyMaps size should be 2", 2, fs.frequencyMaps.size()); Assert.assertEquals("maxOccurence size should be 2", 2, fs.maxOccurence.size()); Assert.assertEquals("secondMaxOccurence size should be 2", 2, fs.secondMaxOccurence.size()); Assert.assertEquals("The result of firstName column should be 6", 6, fs.frequencyMaps.get("firstName").size()); Assert.assertEquals("The result of lastName column should be 3", 3, fs.frequencyMaps.get("lastName").size()); Assert.assertEquals("The maxOccurence of firstName column should be 1", 1, fs.maxOccurence.get("firstName").intValue()); Assert.assertEquals("The maxOccurence of lastName column should be 3", 3, fs.maxOccurence.get("lastName").intValue()); Assert.assertEquals("The secondMaxOccurence of firstName column should be 0", 0, fs.secondMaxOccurence .get("firstName") .intValue()); Assert.assertEquals("The secondMaxOccurence of lastName column should be 2", 2, fs.secondMaxOccurence .get("lastName") .intValue()); fs.init(); }
@Test public void cycloHexane() throws Exception { Graph g = new Graph(6); g.addAtom(AtomImpl.AliphaticSubset.Carbon); g.addAtom(AtomImpl.AliphaticSubset.Carbon); g.addAtom(AtomImpl.AliphaticSubset.Carbon); g.addAtom(AtomImpl.AliphaticSubset.Carbon); g.addAtom(AtomImpl.AliphaticSubset.Carbon); g.addAtom(AtomImpl.AliphaticSubset.Carbon); g.addEdge(new Edge(0, 1, IMPLICIT)); g.addEdge(new Edge(1, 2, IMPLICIT)); g.addEdge(new Edge(2, 3, IMPLICIT)); g.addEdge(new Edge(3, 4, IMPLICIT)); g.addEdge(new Edge(4, 5, IMPLICIT)); g.addEdge(new Edge(5, 0, IMPLICIT)); Graph h = new ImplicitToExplicit().apply(g); Assert.assertThat(g, CoreMatchers.is(CoreMatchers.not(CoreMatchers .sameInstance(h)))); for (int u = 0; u < h.order(); u++) { for (Edge e : h.edges(u)) { Assert.assertThat(e.bond(), CoreMatchers.is(SINGLE)); } } }
@Test public void testSafeRemoveAllTags() { logger.info("safeRemoveAllTags"); String text = "<script>hidden</script>some <a href=\"asd\">hyperlink</a> and <br/> some <br> more<br><span>text</span> here"; String expResult = " some hyperlink and some more text here"; String result = HTMLParser.safeRemoveAllTags(text); assertEquals(expResult, result); }
@Test public void shouldGetPunctuateRatioSensor() { final String operation = "punctuate-ratio"; final String ratioDescription = "The fraction of time the thread spent on punctuating active tasks"; expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor); expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap); StreamsMetricsImpl.addValueMetricToSensor( expectedSensor, threadLevelGroup, tagMap, operation, ratioDescription ); replay(StreamsMetricsImpl.class, streamsMetrics); final Sensor sensor = ThreadMetrics.punctuateRatioSensor(THREAD_ID, streamsMetrics); verify(StreamsMetricsImpl.class, streamsMetrics); assertThat(sensor, is(expectedSensor)); }
@Test public void testIterator() throws Exception { PropertyValueList p = PropertyValueList.fromPropertyValues( Lists.newArrayList( PropertyValue.create(GradoopTestUtils.NULL_VAL_0), PropertyValue.create(GradoopTestUtils.BOOL_VAL_1), PropertyValue.create(GradoopTestUtils.INT_VAL_2), PropertyValue.create(GradoopTestUtils.LONG_VAL_3), PropertyValue.create(GradoopTestUtils.FLOAT_VAL_4), PropertyValue.create(GradoopTestUtils.DOUBLE_VAL_5), PropertyValue.create(GradoopTestUtils.STRING_VAL_6), PropertyValue.create(GradoopTestUtils.BIG_DECIMAL_VAL_7) ) ); List<PropertyValue> expected = Lists.newArrayList(p); assertEquals(8, expected.size()); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.NULL_VAL_0))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.BOOL_VAL_1))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.INT_VAL_2))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.LONG_VAL_3))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.FLOAT_VAL_4))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.DOUBLE_VAL_5))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.STRING_VAL_6))); assertTrue( expected.contains(PropertyValue.create(GradoopTestUtils.BIG_DECIMAL_VAL_7))); }
@Test public void remove() throws Exception { final ArrayList<Item> updates = new ArrayList<>(); updates.add(new Item()); final Item removeMe = new Item(); updates.add(removeMe); list.update(updates); assertEquals(2, list.size()); updates.remove(removeMe); list.update(updates); assertEquals(1, list.size()); }
@Test public void headsWithQueryParametersFrom1_0OriginsViaExplicitProxiesCanNotBeCacheableEvenWithExpires() { policy = new ResponseCachingPolicy(0, true, true, true); request = new BasicHttpRequest("HEAD", "/foo?s=bar"); response.setHeader("Date", DateUtils.formatDate(now)); response.setHeader("Expires", DateUtils.formatDate(tenSecondsFromNow)); response.setHeader("Via", "HTTP/1.0 someproxy"); Assert.assertFalse(policy.isResponseCacheable(request, response)); }
@Test public void testInstance() { assertFalse(IsLessThan.instance(Integer.valueOf(7)).test(Integer.valueOf(8))); assertTrue(IsLessThan.instance(Integer.valueOf(7)).test(Integer.valueOf(6))); }
@Test public final void testGetParsedTagsForDeleteNoForce() throws Exception { DataObjInp dataObjInp = DataObjInp.instanceForDeleteWithNoForce( "/test1/home/test1/test-scratch/IrodsCommandsDeleteTest/testDeleteOneFileNoForce.txt"); StringBuilder sb = new StringBuilder(); sb.append( "<DataObjInp_PI><objPath>/test1/home/test1/test-scratch/IrodsCommandsDeleteTest/testDeleteOneFileNoForce.txt</objPath>\n"); sb.append("<createMode>0</createMode>\n"); sb.append("<openFlags>0</openFlags>\n"); sb.append("<offset>0</offset>\n"); sb.append("<dataSize>0</dataSize>\n"); sb.append("<numThreads>0</numThreads>\n"); sb.append("<oprType>0</oprType>\n"); sb.append("<KeyValPair_PI><ssLen>0</ssLen>\n"); sb.append("</KeyValPair_PI>\n"); sb.append("</DataObjInp_PI>\n"); Assert.assertEquals("did not get expected packing instruction", sb.toString(), dataObjInp.getParsedTags()); Assert.assertEquals("did not get expected API number", DataObjInp.DELETE_FILE_API_NBR, dataObjInp.getApiNumber()); }
@Test public void calculateWithBuyAndHold() { series = new MockBarSeries(numFunction, 100d, 99d); Trade trade = new Trade(Order.buyAt(0, series), Order.sellAt(1, series)); AnalysisCriterion varCriterion = getCriterion(); assertNumEquals(numOf(Math.log(99d / 100)), varCriterion.calculate(series, trade)); }
@Test public void bollingerBandsUpperUsingSMAAndStandardDeviation() { BollingerBandsMiddleIndicator bbmSMA = new BollingerBandsMiddleIndicator(sma); StandardDeviationIndicator standardDeviation = new StandardDeviationIndicator(closePrice, barCount); BollingerBandsUpperIndicator bbuSMA = new BollingerBandsUpperIndicator(bbmSMA, standardDeviation); assertNumEquals(2, bbuSMA.getK()); assertNumEquals(1, bbuSMA.getValue(0)); assertNumEquals(2.5, bbuSMA.getValue(1)); assertNumEquals(3.633, bbuSMA.getValue(2)); assertNumEquals(4.633, bbuSMA.getValue(3)); assertNumEquals(4.2761, bbuSMA.getValue(4)); assertNumEquals(4.6094, bbuSMA.getValue(5)); assertNumEquals(5.633, bbuSMA.getValue(6)); assertNumEquals(5.2761, bbuSMA.getValue(7)); assertNumEquals(5.633, bbuSMA.getValue(8)); assertNumEquals(4.2761, bbuSMA.getValue(9)); BollingerBandsUpperIndicator bbuSMAwithK = new BollingerBandsUpperIndicator(bbmSMA, standardDeviation, numFunction.apply(1.5)); assertNumEquals(1.5, bbuSMAwithK.getK()); assertNumEquals(1, bbuSMAwithK.getValue(0)); assertNumEquals(2.25, bbuSMAwithK.getValue(1)); assertNumEquals(3.2247, bbuSMAwithK.getValue(2)); assertNumEquals(4.2247, bbuSMAwithK.getValue(3)); assertNumEquals(4.0404, bbuSMAwithK.getValue(4)); assertNumEquals(4.3737, bbuSMAwithK.getValue(5)); assertNumEquals(5.2247, bbuSMAwithK.getValue(6)); assertNumEquals(5.0404, bbuSMAwithK.getValue(7)); assertNumEquals(5.2247, bbuSMAwithK.getValue(8)); assertNumEquals(4.0404, bbuSMAwithK.getValue(9)); }
@Test public void shouldHaveCredentialsWhenTokenHasExpiredButRefreshTokenIsAvailable() { long expirationTime = CredentialsMock.CURRENT_TIME_MS; when(storage.retrieveLong("com.auth0.expires_at")).thenReturn(expirationTime); when(storage.retrieveLong("com.auth0.cache_expires_at")).thenReturn(expirationTime); when(storage.retrieveString("com.auth0.refresh_token")).thenReturn("refreshToken"); when(storage.retrieveString("com.auth0.id_token")).thenReturn("idToken"); when(storage.retrieveString("com.auth0.access_token")).thenReturn(null); assertThat(manager.hasValidCredentials(), is(true)); when(storage.retrieveString("com.auth0.id_token")).thenReturn(null); when(storage.retrieveString("com.auth0.access_token")).thenReturn("accessToken"); assertThat(manager.hasValidCredentials(), is(true)); }
@Test public void testCamelCaseToUpperSnakeCaseString() throws Exception { Assert.assertEquals("CAMEL_CASE", CaseHelper.camelCaseToUpperSnakeCase("camelCase")); Assert.assertEquals("CAMEL_CASE", CaseHelper.camelCaseToUpperSnakeCase("camel_case")); Assert.assertEquals("CAMEL_CASE", CaseHelper.camelCaseToUpperSnakeCase("Camel_Case")); }
@Test public void importedSessionsStartTimeShouldBeTraceCreationTime() throws IOException { Assume.assumeFalse("Unified pipeline import cannot yet be tested because of dependencies on TransportService.getInstance().", myUnifiedPipeline); myCpuProfiler = new CpuProfiler(myProfilers); File trace = CpuProfilerTestUtils.getTraceFile("valid_trace.trace"); long traceCreationTime = Files.readAttributes(Paths.get(trace.getPath()), BasicFileAttributes.class).creationTime().to(TimeUnit.NANOSECONDS); SessionsManager sessionsManager = myProfilers.getSessionsManager(); sessionsManager.importSessionFromFile(trace); assertThat(sessionsManager.getSelectedSession().getStartTimestamp()).isEqualTo(traceCreationTime); }
@Test public void resolveMobile() throws Exception { request.setAttribute(SitePreferenceHandler.CURRENT_SITE_PREFERENCE_ATTRIBUTE, SitePreference.MOBILE, WebRequest.SCOPE_REQUEST); MethodParameter parameter = new MethodParameter(getClass().getMethod("handlerMethod", SitePreference.class), 0); Object resolved = resolver.resolveArgument(parameter, request); assertEquals(SitePreference.MOBILE, resolved); }
@Test public void testSettingSameReturnTypeDoesNothing() { assertDataChangedCallback(false); model.setFormalReturnType( program.getDataTypeManager().getDataType(CategoryPath.ROOT, "void")); assertDataChangedCallback(false); model.setFormalReturnType(new IntegerDataType()); assertDataChangedCallback(true); }
@Test public void testCheckRetryTask() throws Throwable { transactionManager.checkRetryTask(); transactionManager.checkRetryTask(); assertNotNull(transactionManager.retryTask, "transactionManager.retryTask"); }
@Test public void testUserSort() { when(fireCloudService.isUserMemberOfGroup(any(), any())).thenReturn(true); UserResponse robinsonsAsc = userController.user("Robinson", null, null, "asc").getBody(); UserResponse robinsonsDesc = userController.user("Robinson", null, null, "desc").getBody(); assertThat(robinsonsAsc.getUsers()).containsAllIn(robinsonsDesc.getUsers()); List<User> descendingReversed = Lists.reverse(robinsonsDesc.getUsers()); assertThat(robinsonsAsc.getUsers()).containsAllIn(descendingReversed).inOrder(); List<User> newAscending = Lists.newArrayList(robinsonsAsc.getUsers()); newAscending.sort(Comparator.comparing(User::getUserName)); assertThat(robinsonsAsc.getUsers()).containsAllIn(newAscending).inOrder(); }
@Test public void testloadGenericJobConfigs() throws ConfigurationException, IOException { Properties properties = new Properties(); properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath()); List<Properties> jobConfigs = SchedulerUtils.loadGenericJobConfigs(properties, JobSpecResolver.mock()); Assert.assertEquals(jobConfigs.size(), 4); Properties jobProps1 = getJobConfigForFile(jobConfigs, "test111.pull"); Assert.assertEquals(jobProps1.stringPropertyNames().size(), 7); Assert.assertTrue(jobProps1.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY) || jobProps1.containsKey( ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY)); Assert.assertTrue(jobProps1.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY)); Assert.assertEquals(jobProps1.getProperty("k1"), "d1"); Assert.assertEquals(jobProps1.getProperty("k2"), "a2"); Assert.assertEquals(jobProps1.getProperty("k3"), "a3"); Assert.assertEquals(jobProps1.getProperty("k8"), "a8"); Assert.assertEquals(jobProps1.getProperty("k9"), "a8"); Properties jobProps2 = getJobConfigForFile(jobConfigs, "test11.pull"); Assert.assertEquals(jobProps2.stringPropertyNames().size(), 6); Assert.assertTrue(jobProps2.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY) || jobProps1.containsKey( ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY)); Assert.assertTrue(jobProps2.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY)); Assert.assertEquals(jobProps2.getProperty("k1"), "c1"); Assert.assertEquals(jobProps2.getProperty("k2"), "a2"); Assert.assertEquals(jobProps2.getProperty("k3"), "b3"); Assert.assertEquals(jobProps2.getProperty("k6"), "a6"); Properties jobProps3 = getJobConfigForFile(jobConfigs, "test12.PULL"); Assert.assertEquals(jobProps3.stringPropertyNames().size(), 6); Assert.assertTrue(jobProps3.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY) || jobProps1.containsKey( ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY)); Assert.assertTrue(jobProps3.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY)); Assert.assertEquals(jobProps3.getProperty("k1"), "b1"); Assert.assertEquals(jobProps3.getProperty("k2"), "a2"); Assert.assertEquals(jobProps3.getProperty("k3"), "a3"); Assert.assertEquals(jobProps3.getProperty("k7"), "a7"); Properties jobProps4 = getJobConfigForFile(jobConfigs, "test21.PULL"); Assert.assertEquals(jobProps4.stringPropertyNames().size(), 5); Assert.assertTrue(jobProps4.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY) || jobProps1.containsKey( ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY)); Assert.assertTrue(jobProps4.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY)); Assert.assertEquals(jobProps4.getProperty("k1"), "a1"); Assert.assertEquals(jobProps4.getProperty("k2"), "b2"); Assert.assertEquals(jobProps4.getProperty("k5"), "b5"); }
@Test public void testExecute() throws Exception { IMocksControl c = createControl(); EventDisplayCommand display = new EventDisplayCommand(); display.session = c.createMock(Session.class); expect(display.session.getConsole()).andReturn(System.out); display.collector = new EventCollector(); display.collector.handleEvent(new Event("myTopic", new HashMap<>())); c.replay(); display.execute(); c.verify(); }
@Test public void testWithSystemPropertyTrue() { System.setProperty( ExamplesService.EXAMPLES_SYSTEM_PROPERTY, "true" ); final Map<String, String> results = loader.load(); assertNotNull( results ); assertEquals( 1, results.size() ); assertTrue( Boolean.parseBoolean( results.get( ExamplesService.EXAMPLES_SYSTEM_PROPERTY ) ) ); }
@Test public void testValidateEmail() { Assertions.assertTrue( val.validateNotNull("foo@bar.com", "E-mail", InputValidator.EMAIL) ); Assertions.assertTrue( val.validateNotNull("foo-bar@foo.com", "E-mail", InputValidator.EMAIL) ); Assertions.assertTrue( val.validateNotNull("foo-bar@foo.co.uk", "E-mail", InputValidator.EMAIL) ); Assertions.assertTrue( val.validateNotNull("foo+bar@foo.co.uk", "E-mail", InputValidator.EMAIL) ); Assertions.assertTrue( val.validateNotNull("foo.bar@foo.co.uk", "E-mail", InputValidator.EMAIL) ); Assertions.assertFalse( val.validateNotNull("foobar", "E-mail", InputValidator.EMAIL) ); Assertions.assertFalse( val.validateNotNull("foobar@foo", "E-mail", InputValidator.EMAIL) ); }
@SuppressWarnings("unchecked") @Test public void failed_put3_should_call_error_and_release_connection() throws Exception { RestTemplate template = new RestTemplate(client); ResponseCallback<String> callback = mock(ResponseCallback.class); HttpResponse rsp = mock(HttpResponse.class); when(client.put(anyString(), anyString())).thenReturn(rsp); when(rsp.isSuccessful()).thenReturn(Boolean.FALSE); template.put("some_path", "content", callback); verify(callback).error(any(HttpResponse.class)); verify(rsp).releaseConnection(); }
@Test public void testGetResourceNames() { appResourceHandler.getResourceNames(resourceIdentifier); verify(mockAppPersistence).getResourceTemplateNames(anyString(), anyString()); ResourceIdentifier notMeResourceIdentifier = new ResourceIdentifier.Builder().setResourceName("whats-app-amiright").setGroupName("not-a-web-app").build(); appResourceHandler.getResourceNames(notMeResourceIdentifier); verify(mockSuccessor).getResourceNames(notMeResourceIdentifier); }
@Test public void testMiddleCompress() throws IPStringConversionException { assertTrue("Expected middle compress to work", middle_uncompressed.equals(IPv6.expand(middle_compressed, 8))); }
@Test public void testMinimumQuality() { float minQual = 10f; instance = builder.minimumQuality(minQual).build(); assertThat(instance.getMinimumQuality(), equalTo(minQual)); }
@Test public void quadraticDataReturnsDataOnParabolaWithQuadraticInterpolation() { double[] data = createQuadraticDataArray(); LoessInterpolator loess = new LoessInterpolator.Builder().setWidth(500000).setDegree(2).interpolate(data); for (int i = -100; i < data.length + 100; ++i) { Double y = loess.smoothOnePoint(i, 0, data.length - 1); assertNotNull(y); assertEquals(String.format("Bad value at %d", i), 3.7 - 0.25 * i + 0.7 * i * i, y, 1.0e-10); } }
@Test public void shouldExposeContainerPortAndCreateServiceForServer() throws Exception { ServerConfigImpl httpServerConfig = new ServerConfigImpl("8080/tcp", "http", "/api", ATTRIBUTES_MAP); Map<String, ServerConfigImpl> serversToExpose = ImmutableMap.of("http-server", httpServerConfig); serverExposer.expose(serversToExpose); assertThatExternalServerIsExposed( MACHINE_NAME, "tcp", 8080, "http-server", new ServerConfigImpl(httpServerConfig).withAttributes(ATTRIBUTES_MAP)); }
@Test public void testStopJobStopsJob() { DeviceTestUtils.setCharging(application, true); JobInfo job = JobCreator.create(application, 2000).setRequiresCharging(true).build(); JobStatus jobStatus = JobStatus.createFromJobInfo(job, getSchedulerTag()); jobStore.add(jobStatus); executeService(job.getId()); assertBoundServiceCount(1); service.onStopJob(ShadowJobParameters.newInstance(jobStore.getJob(job.getId()))); assertBoundServiceCount(0); }
@Test public void remembersItsStartTime() { int theStartTime = 374647; StatisticsRegistry registry = new StatisticsRegistry(REGISTRY_NAME, theStartTime); assertThat(registry.getStartTime()) .isEqualTo(theStartTime); }
@Test public void testMultilineFile() throws Exception { final Path impl1 = new MockPath("META-INF/services/java.lang.Number", "# first register Integer\n" + "java.lang.Integer\n" + "# then add Long\n" + "java.lang.Long\n" + "\n\n\n\n" ); Clazzes clazzes = createClazzes(impl1); Clazz interfaceClazz = clazzes.load("java/lang/Number"); Set<Clazz> compiled = new HashSet<>(); Set<Clazz> queue = new LinkedHashSet<>(); AppCompiler.addMetaInfImplementations(clazzes, interfaceClazz, compiled, queue); assertEquals("Two items added to queue: " + queue, 2, queue.size()); assertTrue("Integer in queue" + queue, queue.contains(clazzes.load("java/lang/Integer"))); assertTrue("Long in queue" + queue, queue.contains(clazzes.load("java/lang/Long"))); }
@Test public void testIsEmpty() { DynamicSortedTreeSet<TestElem> queue = new DynamicSortedTreeSet<>(new CostComparator()); assertTrue(queue.isEmpty()); queue.add(new TestElem("1st", 1)); assertFalse(queue.isEmpty()); }
@Test public void validate_shouldFailIfThereIsADuplicateUnretiredConceptNameInTheSameLocaleDifferentThanTheSystemLocale() { Context.setLocale(new Locale("pl")); Locale en = new Locale("en", "GB"); Concept concept = cd4Count; Assert.assertEquals(true, concept.getFullySpecifiedName(en).isFullySpecifiedName()); String duplicateName = concept.getFullySpecifiedName(en).getName(); Concept anotherConcept = weight; anotherConcept.getFullySpecifiedName(en).setName(duplicateName); Errors errors = new BindException(anotherConcept, "concept"); expectedException.expect(DuplicateConceptNameException.class); expectedException .expectMessage("'" + duplicateName + "' is a duplicate name in locale '" + en + "'"); validator.validate(concept, errors); validator.validate(anotherConcept, errors); }
@Test public void setBackOffTime() { container.setBackOffTime(1000L); assertEquals(1000L, container.getBackOffTime()); }
@Test(expected = IllegalArgumentException.class) public void testForecast_nullMetricData() { val forecaster = new PewmaPointForecaster(); forecaster.forecast(null); }
@Test public void test_parseLongLjava_lang_StringI() { assertEquals("Returned incorrect value", 100000000L, Longs.parseLong("100000000", 10)); assertEquals("Returned incorrect value from hex string", 68719476735L, Longs.parseLong( "FFFFFFFFF", 16)); assertTrue("Returned incorrect value from octal string: " + Longs.parseLong("77777777777"), Longs.parseLong("77777777777", 8) == 8589934591L); assertEquals("Returned incorrect value for 0 hex", 0, Longs.parseLong("0", 16)); assertTrue("Returned incorrect value for most negative value hex", Longs.parseLong("-8000000000000000", 16) == 0x8000000000000000L); assertTrue("Returned incorrect value for most positive value hex", Longs.parseLong("7fffffffffffffff", 16) == 0x7fffffffffffffffL); assertEquals("Returned incorrect value for 0 decimal", 0, Longs.parseLong( "0", 10)); assertTrue( "Returned incorrect value for most negative value decimal", Longs.parseLong("-9223372036854775808", 10) == 0x8000000000000000L); assertTrue( "Returned incorrect value for most positive value decimal", Longs.parseLong("9223372036854775807", 10) == 0x7fffffffffffffffL); boolean exception = false; try { Longs.parseLong("999999999999", 8); } catch (InvalidFormatException e) { exception = true; } assertTrue("Failed to throw exception when passed invalid string", exception); exception = false; try { Longs.parseLong("9223372036854775808", 10); } catch (InvalidFormatException e) { exception = true; } assertTrue("Failed to throw exception for MAX_VALUE + 1", exception); exception = false; try { Longs.parseLong("-9223372036854775809", 10); } catch (InvalidFormatException e) { exception = true; } assertTrue("Failed to throw exception for MIN_VALUE - 1", exception); exception = false; try { Longs.parseLong("8000000000000000", 16); } catch (InvalidFormatException e) { exception = true; } assertTrue("Failed to throw exception for hex MAX_VALUE + 1", exception); exception = false; try { Longs.parseLong("-8000000000000001", 16); } catch (InvalidFormatException e) { exception = true; } assertTrue("Failed to throw exception for hex MIN_VALUE + 1", exception); exception = false; try { Longs.parseLong("42325917317067571199", 10); } catch (InvalidFormatException e) { exception = true; } assertTrue("Failed to throw exception for 42325917317067571199", exception); }
@Test public void getRegressionStatisticsTest(){ Row[] rows = new Row[] { Row.of(0.4, 0.5), Row.of(0.3, 0.5), Row.of(0.4, null), Row.of(0.2, 0.6), Row.of(0.6, 0.7), Row.of(0.1, 0.5) }; RegressionMetricsSummary metricsSummary = getRegressionStatistics(Arrays.asList(rows)); Assert.assertEquals(metricsSummary.total, 5); Assert.assertEquals(metricsSummary.ySumLocal, 1.6, 0.001); Assert.assertEquals(metricsSummary.ySum2Local, 0.66, 0.001); Assert.assertEquals(metricsSummary.predSumLocal, 2.8, 0.001); Assert.assertEquals(metricsSummary.predSum2Local, 1.599, 0.001); Assert.assertEquals(metricsSummary.sseLocal, 0.38, 0.001); Assert.assertEquals(metricsSummary.maeLocal, 1.2, 0.001); Assert.assertEquals(metricsSummary.mapeLocal, 7.083, 0.001); }
@Test public void testInteger() { Entity e = new Entity(jCas); e.setBegin(5); e.addToIndexes(); Feature f = e.getType().getFeatureByBaseName("begin"); Object o = FeatureUtils.featureToObject(f, e); assertTrue(o instanceof Integer); assertEquals(new Integer(5), (Integer) o); }
@Test public void teststartCollector_returnIsErrorCode204() { when(filemanager.directoryExist(any(String.class))).thenReturn(true); IDevice mockDevice = mock(IDevice.class); IDevice[] devlist = { mockDevice }; when(mockDevice.getSerialNumber()).thenReturn("abc"); try { when(adbservice.getConnectedDevices()).thenReturn(devlist); } catch (Exception e) { e.printStackTrace(); } StatusResult testResult = rootedAndroidCollectorImpl.startCollector(true, "", VideoOption.NONE, false, "cde", null, null); assertEquals(204, testResult.getError().getCode()); }
@Test public void shouldReturnUdfConfigOnlyIfLowercase() { final String functionName = "BOB"; final String correctConfigName = KsqlConfig.KSQL_FUNCTIONS_PROPERTY_PREFIX + functionName.toLowerCase() + ".some-setting"; final String invalidConfigName = KsqlConfig.KSQL_FUNCTIONS_PROPERTY_PREFIX + functionName + ".some-other-setting"; final KsqlConfig config = new KsqlConfig(ImmutableMap.of( invalidConfigName, "should-not-be-visible", correctConfigName, "should-be-visible" )); final Map<String, ?> udfProps = config.getKsqlFunctionsConfigProps(functionName); assertThat(udfProps.keySet(), contains(correctConfigName)); }
@Test public void testValidSyntax() throws Exception { ContentHandle content = resourceToContentHandle("graphql-valid.graphql"); GraphQLContentValidator validator = new GraphQLContentValidator(); validator.validate(ValidityLevel.SYNTAX_ONLY, content); }
@Test public final void testSetPGN() throws ChessParseError { ChessController ctrl = new ChessController(null); ctrl.newGame(true, 8, false); ctrl.setPGN("[FEN \"k/8/8/8/8/8/KP/8 w\"]\n"); assertEquals(TextIO.getSquare("a2"), ctrl.game.pos.getKingSq(true)); assertEquals(TextIO.getSquare("a8"), ctrl.game.pos.getKingSq(false)); ctrl.setPGN("1.e4 e5 2. Nf3!!! $6 (Nc3 (a3)) Nc6?? Bb5!!? a6?! * Ba4"); assertEquals(Piece.BPAWN, ctrl.game.pos.getPiece(TextIO.getSquare("a6"))); assertEquals(Piece.WBISHOP, ctrl.game.pos.getPiece(TextIO.getSquare("b5"))); assertEquals(Piece.EMPTY, ctrl.game.pos.getPiece(TextIO.getSquare("a4"))); ctrl.setPGN("[FEN \"r1bq1rk1/pp3ppp/2n1pn2/6B1/1bBP4/2N2N2/PPQ2PPP/R3K2R w KQ - 1 10\"]\n"); assertEquals(10, ctrl.game.pos.fullMoveCounter); }
@Test public void highResolutionAdjust() { for (int i = 0; i < 10; i++) { assertEquals(123, ApproximateCounter.adjustOffset(i, 123, 1)); } }
@Test public void testMatchAndNoMatchOnDifferentStrings() throws Exception { assertNotNull(tmpDir); assertNotNull(simpleFile); Properties props = new Properties(); props.setProperty(TestServerDetector.getVersionFile(), simpleFile.getName()); String installPath = simpleFile.getParent(); String badPath = "gibberish"; TestServerDetector tsd; props.setProperty(TestServerDetector.getInstallPathMatch(), installPath); props.setProperty(TestServerDetector.getInstallPathNoMatch(), badPath); tsd = new TestServerDetector(props); assertTrue(tsd.isInstallTypeVersion(installPath)); }
@Test public void testProcessRequest_NotType() throws RemotingCommandException { RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_NOT_TYPE, true); RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request); assertThat(response).isNull(); }
@Test(expected = InvalidObjectException.class) public void testValidateTableObjectInvalidColumnName() throws Exception { testTbl.getSd().getCols().get(0).setType("invalidtype"); MetastoreClientUtils.validateTableObject(testTbl, conf); }
@Test public void testMergeAuthorizations() { HashSet<Authorizations> expected = Sets.newHashSet(new Authorizations("A", "C"), new Authorizations("A")); assertEquals(expected, AuthorizationsUtil.mergeAuthorizations(methodAuths, userAuths)); }
@Test public void testProcessShouldReplacePlaceholderNotRecursivelyForSimpleFormatPatternContainingPlaceholderTwice() { BasePlaceholder underTest = new TestPlaceholder("%s", "1234%s"); String result = underTest.process("%s%s"); assertThat(result).isEqualTo("1234%s1234%s"); }
@Test public void testMerge() { DatasetMetadataMerger datasetMetadataMerger = new DatasetMetadataMerger(); DatasetMetadata providerMetadata = createDatasetMetadata( URL_1 ); DatasetMetadata layerMetadata = createDatasetMetadata( URL_2, URL_3 ); DatasetMetadata mergedMetadata = datasetMetadataMerger.merge( providerMetadata, layerMetadata ); List<MetadataUrl> metadataUrls = mergedMetadata.getMetadataUrls(); assertThat( metadataUrls.size(), is( 3 ) ); }
@Test public void validatesStringValues() { defaults.put("string", "blah"); newValues.put("string", false); assertFalse(validator.isValid(newValues)); }
@Test public void testStartsAndEndsInSameBucketProduceValue() throws InterruptedException { HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey("ThreadPool-Concurrency-B"); HystrixThreadPoolKey threadPoolKey = HystrixThreadPoolKey.Factory.asKey("ThreadPool-Concurrency-B"); HystrixCommandKey key = HystrixCommandKey.Factory.asKey("RollingConcurrency-B"); stream = RollingThreadPoolMaxConcurrencyStream.getInstance(threadPoolKey, 10, 100); stream.startCachingStreamValuesIfUnstarted(); final CountDownLatch latch = new CountDownLatch(1); stream.observe().take(10).subscribe(getSubscriber(latch)); Command cmd1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 50); Command cmd2 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 40); cmd1.observe(); Thread.sleep(1); cmd2.observe(); assertTrue(latch.await(10000, TimeUnit.MILLISECONDS)); assertEquals(2, stream.getLatestRollingMax()); }
@Test public void currentState() { for (State state : State.values()) { tracker.changeState(state, time.milliseconds()); assertEquals(state, tracker.currentState()); } }
@Test public void testSubstitutionDoesMultipleMatches() throws Exception { String simpleType = TestEntity.class.getSimpleName(); String pattern = "simpletype=${simpletype},simpletype=${simpletype}"; BasicDownloadRequirement req = new BasicDownloadRequirement(driver); String result = DownloadSubstituters.substitute(req, pattern); assertEquals(result, String.format("simpletype=%s,simpletype=%s", simpleType, simpleType)); }
@Test public void test_unzip_toPath_withFolders() { ArrayByteSource zipFile = load("TestFolder.zip"); ZipUtils.unzip(zipFile, tmpDir); assertThat(tmpDir.resolve("test/alpha/Alpha.txt")).hasContent("ALPHA"); assertThat(tmpDir.resolve("test/beta/Beta1.txt")).hasContent("BETA1"); assertThat(tmpDir.resolve("test/beta/Beta2.txt")).hasContent("BETA2"); }
@Test public void getGraphHeadsByLabel() throws Exception { GradoopTestUtils.validateElementCollections(Sets.newHashSet(g0), from(asList(g0, g1), asList(v0, v1, v2), asList(e0, e1)).getGraphHeadsByLabel("A").collect()); }
@Test public void testMapsConsumersWithDeserializer() { ArrayList<String> topicList = new ArrayList<>(); topicList.add( "topic" ); inputMeta.setTopics( topicList ); inputMeta.setConsumerGroup( "cg" ); inputMeta.setKeyField( new KafkaConsumerField( KafkaConsumerField.Name.KEY, "key", KafkaConsumerField.Type.Integer ) ); inputMeta.setMessageField( new KafkaConsumerField( KafkaConsumerField.Name.MESSAGE, "msg", KafkaConsumerField.Type.Number ) ); inputMeta.setNamedClusterServiceLocator( namedClusterServiceLocator ); when( jaasConfigService.isKerberos() ).thenReturn( false ); new KafkaFactory( consumerFun, producerFun ).consumer( inputMeta, Function.identity(), inputMeta.getKeyField().getOutputType(), inputMeta.getMessageField().getOutputType() ); Map<String, Object> expectedMap = new HashMap<>(); expectedMap.put( ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "server:1234" ); expectedMap.put( ConsumerConfig.GROUP_ID_CONFIG, "cg" ); expectedMap.put( ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, DoubleDeserializer.class ); expectedMap.put( ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class ); expectedMap.put( ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, true ); Mockito.verify( consumerFun ).apply( expectedMap ); }
@Test public void isNotEmpty_returnsFalse_whenCalled_withNull() throws Exception { assertThat(StringFunctions.isNotEmpty().test(null)).isFalse(); }
@Test(groups="UNIX") public void testStartsWithSymlinkedBrooklynPropertiesPermissionsX00() throws Exception { File dir = Files.createTempDir(); Path globalPropsFile = java.nio.file.Files.createFile(Paths.get(dir.toString(), "globalProps.properties")); Path globalSymlink = java.nio.file.Files.createSymbolicLink(Paths.get(dir.toString(), "globalLink"), globalPropsFile); Path localPropsFile = java.nio.file.Files.createFile(Paths.get(dir.toString(), "localPropsFile.properties")); Path localSymlink = java.nio.file.Files.createSymbolicLink(Paths.get(dir.toString(), "localLink"), localPropsFile); Files.write(getMinimalLauncherPropertiesString() + "key_in_global=1", globalPropsFile.toFile(), Charset.defaultCharset()); Files.write("key_in_local=2", localPropsFile.toFile(), Charset.defaultCharset()); FileUtil.setFilePermissionsTo600(globalPropsFile.toFile()); FileUtil.setFilePermissionsTo600(localPropsFile.toFile()); try { BrooklynProperties props = new BrooklynPropertiesFactoryHelper( globalSymlink.toAbsolutePath().toString(), localSymlink.toAbsolutePath().toString()) .createPropertiesBuilder() .build(); assertEquals(props.getFirst("key_in_global"), "1"); assertEquals(props.getFirst("key_in_local"), "2"); } finally { Os.deleteRecursively(dir); } }
@Test public void getMemberReturnNullIfMemberIdIsEmpty() throws Exception { AbstractLauncher<?> launcher = createAbstractLauncher(null, StringUtils.EMPTY); assertThat(launcher.getMember()).isNull(); }
@Test public void testFlatMapTransformsOnErrorFuncThrows() { Flowable<Integer> onNext = Flowable.fromIterable(Arrays.asList(1, 2, 3)); Flowable<Integer> onComplete = Flowable.fromIterable(Arrays.asList(4)); Flowable<Integer> onError = Flowable.fromIterable(Arrays.asList(5)); Flowable<Integer> source = Flowable.error(new TestException()); Subscriber<Object> o = TestHelper.mockSubscriber(); source.flatMap(just(onNext), funcThrow((Throwable) null, onError), just0(onComplete)).subscribe(o); verify(o).onError(any(CompositeException.class)); verify(o, never()).onNext(any()); verify(o, never()).onComplete(); }
@Test public void shouldReturnWhenOperationIsNull() throws Exception { costNormsForOperationService.copyCostValuesFromOperation(view, state, null); }
@Test public void testLanguageOutput() throws Exception{ String[] params = {"-l", resourcePrefix + "alice.cli.test"}; TikaCLI.main(params); assertTrue(outContent.toString(UTF_8.name()).contains("en")); }
@Test public void queryParameters_getParameterNames_notNull() { HttpServletRequest request = getRequest(REQUEST_QUERY, null, null); List<String> parameterNames = Collections.list(request.getParameterNames()); assertNotNull(request); assertEquals(1, parameterNames.size()); assertTrue(parameterNames.contains(FORM_PARAM_NAME)); }
@Test public void testInitialize() throws Exception { CSVExtractor ex = new CSVExtractor(); ExtractorHandler handler = ExtractorHandler.load(testCSVConfig); ex.initialize(handler.getConfig()); assertEquals(0, (int)ex.getColumnMap().get("host") ); assertEquals(2, (int)ex.getColumnMap().get("meta") ); assertEquals(0, ex.getTypeColumnIndex() ); assertEquals(0, ex.getIndicatorColumn()); assertEquals("threat", ex.getType() ); assertEquals(',', ex.getParser().getSeparator()); }
@Test public void shouldSupportLongFormatString() { final String format = "MsgSeqNum too low, expecting %s but received %s"; final CharFormatter formatter = new CharFormatter(format) .with("0") .with("1"); assertFormatsTo("MsgSeqNum too low, expecting 0 but received 1", formatter); }
@Test public void orderGetOrdersTest() throws ApiException { String orderId = null; String orderLinkId = null; String symbol = null; String order = null; BigDecimal page = null; BigDecimal limit = null; String orderStatus = null; Object response = api.orderGetOrders(orderId, orderLinkId, symbol, order, page, limit, orderStatus); }
@Test public void testSslCiphersOptions() throws Exception { File configFile = null; try { configFile = createTempFileFromResource("org/kaazing/gateway/server/config/parse/data/gateway-config-kg4462.xml"); parser.parse(configFile); } finally { if (configFile != null) { configFile.delete(); } } }
@Test public void testRenderTemplateFileDoesNotModifyWithEmptyPropertiesFromWithinTemplate() throws IOException { File file = composeTemplateXmlToFile(properties0); String result = tr.renderTemplateFile(file); assertThat(result).isEqualTo(composeTemplateXml(properties0)); }
@Test public void shouldCreateFontBuilderWithCourierNew() { FontBuilder fontBuilder = cut.fontCourierNew(); Assert.assertEquals(COURIER_NEW, fontBuilder.getFont().getFontName()); Assert.assertFalse(fontBuilder.getFont().getBold()); Assert.assertFalse(fontBuilder.getFont().getItalic()); }
@Test public void testRemoveNonExistingDeploymentGroup() throws Exception { doThrow(new DeploymentGroupDoesNotExistException("")).when(model) .removeDeploymentGroup(anyString()); final Response response = resource.removeDeploymentGroup("foo"); assertEquals(Response.Status.OK.getStatusCode(), response.getStatus()); assertEquals(new RemoveDeploymentGroupResponse( RemoveDeploymentGroupResponse.Status.DEPLOYMENT_GROUP_NOT_FOUND), response.getEntity()); }
@Test public void testSaveRep_WithClusterName() throws Exception { when( namedCluster.getName() ).thenReturn( SOME_CLUSTER_NAME ); when( namedCluster.getZooKeeperHost() ).thenReturn( ZOOKEPER_HOST ); when( namedCluster.getZooKeeperPort() ).thenReturn( ZOOKEEPER_PORT ); when( ncs.read( SOME_CLUSTER_NAME, metaStore ) ).thenReturn( namedCluster ); util.saveRep( repository, metaStore, transId, stepId, ncs, namedCluster, log ); verify( repository ).saveStepAttribute( eq( transId ), eq( stepId ), anyInt(), eq( ZOOKEEPER_HOSTS_KEY ), eq( ZOOKEPER_HOST ) ); verify( repository ).saveStepAttribute( eq( transId ), eq( stepId ), anyInt(), eq( ZOOKEEPER_PORT_KEY ), eq( ZOOKEEPER_PORT ) ); verify( repository ).saveStepAttribute( eq( transId ), eq( stepId ), eq( CLUSTER_NAME_KEY ), eq( SOME_CLUSTER_NAME ) ); }
@Test public void testDenyOnMedium() { when(preferenceManager.getPreference(SystemPreferences.DOCKER_SECURITY_TOOL_POLICY_MAX_MEDIUM_VULNERABILITIES)) .thenReturn(0); TestUtils.generateScanResult(MAX_CRITICAL_VULNERABILITIES, MAX_HIGH_VULNERABILITIES, 1, toolScanResult); Assert.assertFalse(aggregatingToolScanManager.checkTool(testTool, LATEST_VERSION).isAllowed()); }
@Test public void staleValueBlocksAllCalls() { try (WaitingSupplier waitingSupplier = new WaitingSupplier(past(), future())) { CachedSupplier<String> cachedSupplier = CachedSupplier.builder(waitingSupplier).build(); waitingSupplier.permits.release(1); waitFor(performAsyncGet(cachedSupplier)); performAsyncGets(cachedSupplier, 2); waitingSupplier.waitForGetsToHaveStarted(3); waitingSupplier.permits.release(50); waitForAsyncGetsToFinish(); waitingSupplier.waitForGetsToHaveFinished(3); } }
@Test public void testGetCreationTime_epoch() throws InvalidCreationTimeException { Instant time = PluginConfigurationProcessor.getCreationTime("EPOCH", projectProperties); Assert.assertEquals(Instant.EPOCH, time); }
@Test public void createWithNullStackdriverStatsConfiguration() throws IOException { thrown.expect(NullPointerException.class); thrown.expectMessage("configuration"); StackdriverStatsExporter.createAndRegister((StackdriverStatsConfiguration) null); }
@Test void shouldReturnMappedInputWhenNullSafeAndInputIsNotNull() { Mapper<String, Integer> nullSafeMapper = MapperUtils.nullSafe(mapper); assertThat(nullSafeMapper.map("1")).isEqualTo(1); }
@Test public void testIncrementalSimple() throws IOException { File partitionDir = InputFormatTestUtil.prepareTable(basePath, baseFileFormat, 10, "100"); createCommitFile(basePath, "100", "2016/05/01"); FileInputFormat.setInputPaths(jobConf, partitionDir.getPath()); InputFormatTestUtil.setupIncremental(jobConf, "100", 1); FileStatus[] files = inputFormat.listStatus(jobConf); assertEquals(0, files.length, "We should exclude commit 100 when returning incremental pull with start commit time as 100"); }
@Test public void testB_C1_PC_IB__C2_FC() throws IOException { String data = "0123456789"; BasicHttpEntity basic; PartiallyRepeatableHttpEntity replay; InputStream stream; String text; basic = new BasicHttpEntity(); basic.setContent( new ByteArrayInputStream( data.getBytes( StandardCharsets.UTF_8 ) ) ); replay = new PartiallyRepeatableHttpEntity( basic, 20 ); stream = replay.getContent(); text = blockRead( stream, StandardCharsets.UTF_8, 4, 1 ); assertThat( text, is( "0123" ) ); stream.close(); stream = replay.getContent(); text = blockRead( stream, StandardCharsets.UTF_8, -1, 7 ); assertThat( text, is( "0123456789" ) ); }
@Test public void invokingExpireAtCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.EXPIREAT, () -> getConnection().expireAt("key".getBytes(), 0L)); verify(mockRedisConnection()).expireAt("key".getBytes(), 0L); }
@Test public void whenMegabytesAreGivenSameReturned() { assertEquals("megabytes count should remain unchanged", 1L, new BytesAndUOMConverter().toMegabytes("1M")); }
@Test public void testPoint() { final SimpleFeature feature1 = createFeature(factory.createPoint(new Coordinate(0, 0))); final SimpleFeature feature2 = createFeature(factory.createPoint(new Coordinate(0.001, 0.001))); testBounds(functionUnderTest.measure(feature1, feature2), 100, 200); }
@Test public void testComplete() { Session session = Mockito.mock( Session.class ); CommandLine commandLine = Mockito.mock( CommandLine.class ); Mockito.when( commandLine.getCursorArgument()).thenReturn( "" ); Mockito.when( commandLine.getArgumentPosition()).thenReturn( 0 ); LogLevelCompleter completer = new LogLevelCompleter(); List<String> candidates = new ArrayList<> (); Assert.assertEquals( 0, candidates.size()); Assert.assertEquals( 0, completer.complete( session, commandLine, candidates )); Assert.assertEquals( LogLevelCompleter.LEVELS.length, candidates.size()); candidates = new ArrayList<> (); Mockito.when( commandLine.getCursorArgument()).thenReturn( "I" ); Mockito.when( commandLine.getArgumentPosition()).thenReturn( 1 ); Assert.assertEquals( 0, candidates.size()); Assert.assertEquals( -1, completer.complete( session, commandLine, candidates )); Assert.assertEquals( 1, candidates.size()); Assert.assertEquals( Level.INFO.toString(), candidates.get( 0 ).trim()); candidates = new ArrayList<> (); Mockito.when( commandLine.getCursorArgument()).thenReturn( "i" ); Mockito.when( commandLine.getArgumentPosition()).thenReturn( 1 ); Assert.assertEquals( 0, candidates.size()); Assert.assertEquals( -1, completer.complete( session, commandLine, candidates )); Assert.assertEquals( 1, candidates.size()); Assert.assertEquals( Level.INFO.toString(), candidates.get( 0 ).trim()); candidates = new ArrayList<> (); Mockito.when( commandLine.getCursorArgument()).thenReturn( "unknown" ); Mockito.when( commandLine.getArgumentPosition()).thenReturn( "unknown".length()); Assert.assertEquals( 0, candidates.size()); Assert.assertEquals( -1, completer.complete( session, commandLine, candidates )); }
@Test public void testConvertToGraphFromTosca() { System.out.println("*************************************************"); System.out.println("******* start convert Tosca to model *********"); System.out.println("*************************************************"); final String content = this.getFilecontent("/tosca/request-dummy.xml"); final String result = this.converter.post(AbstractConverter.TOSCA, AbstractConverter.TTL, content); System.out.println(result); Assert.assertTrue("should contain osco:STOPPED", result.contains("osco:STOPPED")); }
@Test public void testIsSpecified() { FramedIPAddressAttribute a; a = new FramedIPAddressAttribute(FramedIPAddressAttribute.Type.SPECIFIED, 192, 168, 1, 3); Assert.assertFalse(a.isUserNegotiated()); Assert.assertFalse(a.isNasSelected()); Assert.assertTrue(a.isSpecified()); Assert.assertEquals(a.getAddress()[0], (byte) 192); Assert.assertEquals(a.getAddress()[1], (byte) 168); Assert.assertEquals(a.getAddress()[2], (byte) 1); Assert.assertEquals(a.getAddress()[3], (byte) 3); }
@Test public void assertGetSchemasWithParameter() { assertNull(metaData.getSchemas(null, null)); }
@Test public void testInitPlugin() throws Exception { manager.execute( context, "{JavaScriptPlugin}"); Assertions.assertTrue( JavaScriptPlugin.c_inited ); }
@Test public void testOnResume() { subject.isPlaying = true; subject.seekPosition = TEST_SEEK_POSITION; subject.onResume(); verify(videoView).start(); }
@Test public void fromJSONTest() throws JSONException { TriggerWifiSsid t = new TriggerWifiSsid().setValue("aSSID").comparator(Comparator.Compare.IS_EQUAL); TriggerWifiSsid t2 = (TriggerWifiSsid) Trigger.instantiate(new JSONObject(t.toJSON())); Assert.assertEquals(Comparator.Compare.IS_EQUAL, t2.getComparator().getValue()); Assert.assertEquals("aSSID", t2.getValue()); }
@Test (expectedExceptions = ConstraintViolationException.class) public void testExpirationSetter() throws ComponentInitializationException { revocationCache.setEntryExpiration(0); }
@Test public void failure_workAndRefresh() { Assume.assumeTrue( "This test only makes sense when refresh is forced", DocumentRefreshStrategy.FORCE.equals( refreshStrategy ) ); RuntimeException work1Exception = new RuntimeException( "work1" ); Long work2Result = 41L; Long work3Result = 43L; Capture<CompletableFuture<Long>> work1FutureCapture = Capture.newInstance(); Capture<CompletableFuture<Long>> work2FutureCapture = Capture.newInstance(); Capture<CompletableFuture<Long>> work3FutureCapture = Capture.newInstance(); CompletableFuture<IndexIndexingPlanExecutionReport<StubEntityReference>> planExecutionFuture; resetAll(); LuceneIndexIndexingPlanExecution<StubEntityReference> execution = new LuceneIndexIndexingPlanExecution<>( orchestratorMock, entityReferenceFactoryMock, commitStrategy, DocumentRefreshStrategy.FORCE, createWorkMocks( 3 ) ); replayAll(); verifyAll(); resetAll(); orchestratorMock.submit( capture( work1FutureCapture ), eq( workMocks.get( 0 ) ) ); orchestratorMock.submit( capture( work2FutureCapture ), eq( workMocks.get( 1 ) ) ); orchestratorMock.submit( capture( work3FutureCapture ), eq( workMocks.get( 2 ) ) ); replayAll(); planExecutionFuture = execution.execute(); verifyAll(); resetAll(); replayAll(); work2FutureCapture.getValue().complete( work2Result ); work1FutureCapture.getValue().completeExceptionally( work1Exception ); verifyAll(); FutureAssert.assertThat( planExecutionFuture ).isPending(); RuntimeException refreshException = new RuntimeException( "Some message" ); resetAll(); if ( DocumentCommitStrategy.FORCE.equals( commitStrategy ) ) { orchestratorMock.forceCommitInCurrentThread(); } orchestratorMock.forceRefreshInCurrentThread(); expectLastCall().andThrow( refreshException ); expectWorkGetInfo( 0, 1, 2 ); replayAll(); work3FutureCapture.getValue().complete( work3Result ); verifyAll(); FutureAssert.assertThat( planExecutionFuture ).isSuccessful( report -> { assertThat( report ).isNotNull(); SoftAssertions.assertSoftly( softly -> { softly.assertThat( report.throwable() ).containsSame( work1Exception ); softly.assertThat( work1Exception ).hasSuppressedException( refreshException ); softly.assertThat( report.failingEntityReferences() ) .containsExactly( entityReference( 0 ), entityReference( 1 ), entityReference( 2 ) ); } ); } ); }
@Test public void testRenderTemplateFileDoesNotModifyWithEmptyPropertiesFromInstantiate() throws IOException { TemplateRenderer trWithCustomProperties = mkTemplateRendererWithPropertiesMap(properties0); File file = composeTemplateXmlToFile(); String result = trWithCustomProperties.renderTemplateFile(file); assertThat(result).isEqualTo(composeTemplateXml()); }
@Test public void getAddressHolder() throws Exception { ConsumerConfig consumerConfig = new ConsumerConfig().setBootstrap("test").setAddressHolder("test"); ConsumerBootstrap bootstrap = Bootstraps.from(consumerConfig); Assert.assertEquals(AddressHolderFactory.getAddressHolder(bootstrap).getClass(), TestAddressHolder.class); boolean error = false; try { consumerConfig.setAddressHolder("xasdsa"); AddressHolderFactory.getAddressHolder(bootstrap); } catch (Exception e) { error = true; } Assert.assertTrue(error); }
@Test public void testProcessTemplateSimpleDynamicContent() throws Exception { String sqlTemplate = "SELECT * FROM ME WHERE $a"; Map<String, Object> map = Collections.<String, Object> singletonMap("a", "VALUE_OF_A"); SQLStatement compiled = processor.processTemplate(sqlTemplate, map); assertEquals("SELECT * FROM ME WHERE VALUE_OF_A", compiled.getSql()); assertEquals(0, compiled.getBindings().length); }
@Test public void testGenericArrayType() throws Exception { ArrayList<Type> typeList = Lists.newArrayList(); typeList.add(String[].class); typeList.addAll(getBothParameters(ArrayToListArray.class)); typeList.add(getFirstTypeParameter(NoOpSink.class)); PipelineTypeValidator.validateTypes(typeList); }
@Test public void testMutateRow() { RowMutation rowMutation = RowMutation.create(TABLE_ID, ROW_KEY); doNothing().when(dataClientV2).mutateRow(rowMutation); dataGCJClient.mutateRow(rowMutation); verify(dataClientV2).mutateRow(rowMutation); }
@Test public void testIsInUse() { assertTrue(node.isInUse()); node.free(); assertFalse(node.isInUse()); node.clear(23L, coords); assertTrue(node.isInUse()); }
@Test public void testDebugEnabledException() { when(logger.isDebugEnabled()).thenReturn(true); instance.debug(errorMsg, t); verify(logger).debug(errorMsg, t); }
@Test public void testRequiredSpaceFalse() throws ProcessingException { String text = "Hello<a>!"; Sentence sentence = process(text); assertEquals(text, sentence.toString(true, false)); assertEquals("Hello!", sentence.toString(false, false)); assertTrue(sentence.hasTags()); assertArrayEquals(new Word[]{ w("Hello"), w("!") }, sentence.getWords()); assertArrayEquals(new Tag[]{ t("<a>", 1) }, sentence.getTags()); }
@Test public void testSelectedIndexChangeVetoed() { final boolean[] invoked = new boolean[1]; CallableWithArgs<Void> callable = args -> { invoked[0] = true; return null; }; assertNull(adapter.getSelectedIndexChangeVetoed()); adapter.selectedIndexChangeVetoed(null, null); assertFalse(invoked[0]); adapter.setSelectedIndexChangeVetoed(callable); adapter.selectedIndexChangeVetoed(null, null); assertTrue(invoked[0]); }
@Test public void testGetAsString_4() throws Exception { CollectionConverter fixture = new CollectionConverter(); FacesContext facesContext = FacesContext.getCurrentInstance(); UIComponent uiComponent = new DynaForm(); Object obj = new LinkedList(); String result = fixture.getAsString(facesContext, uiComponent, obj); assertNotNull(result); }
@Test public void voteTallyNotUpdatedWhenBlockHasNoVoteSubject() { when(serialiser.extractVoteFromHeader(any())).thenReturn(Optional.empty()); final BlockHeaderTestFixture headerBuilder = new BlockHeaderTestFixture(); headerBuilder.number(EPOCH_LENGTH - 1); final BlockHeader header = headerBuilder.buildHeader(); updater.updateForBlock(header, voteTally); verifyZeroInteractions(voteTally); }
@Test public void coords() { CxSmilesState state = new CxSmilesState(); assertThat(CxSmilesParser.processCx("|(.0,-1.5,;-1.3,-.75,;-2.6,-1.5,;-3.9,-.75,;-3.9,.75,)|", state), is(not(-1))); assertThat(state.atomCoords.get(0), new AprxDoubleArray(0, -1.5, 0)); assertThat(state.atomCoords.get(1), new AprxDoubleArray(-1.3, -.75, 0)); assertThat(state.atomCoords.get(2), new AprxDoubleArray(-2.6, -1.5, 0)); assertThat(state.atomCoords.get(3), new AprxDoubleArray(-3.9, -.75, 0)); assertThat(state.atomCoords.get(4), new AprxDoubleArray(-3.9, .75, 0)); }
@Test public void testGetUpdateTotalTasksStatement() { String statement = "UPDATE junit.workflows SET total_tasks=? WHERE workflow_id=? AND shard_id=?;"; assertEquals(statement, statements.getUpdateTotalTasksStatement()); }
@Test public void noTargetValuesUpdatesLastCheckWithUnknown() throws Exception { when(mockCheck.getId()).thenReturn("id"); when(mockCheck.isEnabled()).thenReturn(true); when(mockCheck.isAllowNoData()).thenReturn(false); when(mockTargetChecker.check(mockCheck)).thenReturn(new HashMap<String, Optional<BigDecimal>>()); when(mockChecksStore.updateStateAndLastCheck(eq("id"), eq(AlertType.UNKNOWN), any(DateTime.class))).thenReturn(mockCheck); checkRunner.run(); verify(mockChecksStore).updateStateAndLastCheck(eq("id"), eq(AlertType.UNKNOWN), any(DateTime.class)); }
@Test @Ignore public void testExitStandby() throws AwsException { util.exitStandby(AS_GROUP_ID); }
@Test public void shouldParseShortVersion() { assertEquals(new Asn(3333l), Asn.parse("3333")); assertEquals(new Asn((12 << 16) | 3333l), Asn.parse("12.3333")); assertEquals(new Asn(65536l), Asn.parse(" 65536 ")); }
@Test public void testTimeFirstIDSecondReadStrAll() throws IOException { Variable var = datasetReverse.findVariable("hru_soil_moist"); String str = CFSimpleGeometryHelper.getSubsetString(var, 3); Assert.assertEquals(":,3", str); }
@Test(expected = IllegalArgumentException.class) public void testPutWithNullBlockchainShouldThrowExtension() throws IOException, ClassNotFoundException { blockchainService.put("testHash", "test", null, BlockchainUnitType.BLOCK); }
@Test public void testRenderHtmlNoAttributes() { final HtmlStartTag tag = new HtmlStartTag("div", Collections.<HtmlAttribute>emptyList()); assertThat(tag.renderHtml(), is("<div>")); }
@Test public void validFeatureOneIncludeTagTest() throws Exception { String featureContent = getTwoScenariosWithTags(); when(propertyManager.getIncludeScenarioTags()).thenReturn("@tag1"); List<SingleScenario> singleScenariosFromFeature = gherkinDocumentParser.getSingleScenariosFromFeature(featureContent, "", null); assertThat(singleScenariosFromFeature.size(), is(1)); }
@Test public void testUpdateUI() { System.out.println("updateGui"); MergeResultsGui instance = new MergeResultsGui(); instance.updateUI(); }
@Test public void testFindDeletes() { Set<NodeRef> deletes = treeDifference.findDeletes(); assertEquals(2, deletes.size()); assertTrue(deletes.contains(tree("buildings/towers", "a7", "d5"))); assertTrue(deletes.contains(tree("buildings/unknown", "a6", "d4"))); }
@Test public void testGetRedirectHtmlFilename_appZip() { assertEquals("MyApp-Release-iphoneos-app.zip.htm", getRedirectHtmlFilename("MyApp-1.0.0-20120821.132955-1-Release-iphoneos-app.zip", "MyApp")); }
@Test public void getPendingSpendProfiles() { List<Object[]> pendingSpendProfiles = singletonList(new Object[]{BigInteger.valueOf(11L), BigInteger.valueOf(1L), new String("Project 1")}); when(competitionRepositoryMock.getPendingSpendProfiles(competitionId)).thenReturn(pendingSpendProfiles); ServiceResult<List<SpendProfileStatusResource>> result = service.getPendingSpendProfiles(competitionId); assertTrue(result.isSuccess()); List<SpendProfileStatusResource> expectedPendingSpendProfiles = singletonList(new SpendProfileStatusResource(11L, 1L, "Project 1")); assertEquals(expectedPendingSpendProfiles, result.getSuccess()); }
@Test public void testIterator() throws IOException { EntryIndexFile file = new EntryIndexFile(makeEntryIndexFileContent(3, 4)); Iterator<EntryIndexItem> iterator = file.iterator(); Assert.assertTrue(iterator.hasNext()); EntryIndexItem item = iterator.next(); Assert.assertEquals(3, item.getIndex()); Assert.assertEquals(1, item.getKind()); Assert.assertEquals(3, item.getTerm()); Assert.assertTrue(iterator.hasNext()); item = iterator.next(); Assert.assertEquals(4, item.getIndex()); Assert.assertFalse(iterator.hasNext()); }
@Test public void testIsNotApplicableWithNoUser() { CramMD5Mechanism mech = new CramMD5Mechanism(); assertFalse("Should not be applicable with no username", mech.isApplicable(null, "pass", null)); }
@Test public void amplitudeNeverExceedOne(){ final int expectedAmplitude = 1; SynthMonitor monitor = newAssertAmplitudeMonitor(expectedAmplitude); MonitoredSynth ms = new MonitoredSynth(monitor); ms.sendAmplitude(1.1f); ms.sendAmplitude(1.0f); }
@Test public void testOspfRouterId() throws Exception { assertThat(OspfRouterId.ospfRouterId(IpAddress.valueOf("2.2.2.2")), instanceOf(OspfRouterId.class)); }
@Test public void testCachedApproximateDataSize() throws Exception { DataTree dt = new DataTree(); long initialSize = dt.approximateDataSize(); assertEquals(dt.cachedApproximateDataSize(), dt.approximateDataSize()); dt.createNode("/testApproximateDataSize", new byte[20], null, -1, 1, 1, 1); dt.createNode("/testApproximateDataSize1", new byte[20], null, -1, 1, 1, 1); assertEquals(dt.cachedApproximateDataSize(), dt.approximateDataSize()); dt.setData("/testApproximateDataSize1", new byte[32], -1, 1, 1); assertEquals(dt.cachedApproximateDataSize(), dt.approximateDataSize()); dt.deleteNode("/testApproximateDataSize", -1); assertEquals(dt.cachedApproximateDataSize(), dt.approximateDataSize()); }
@Test public void rawTimedEventWithEvent() { TimedEvent event = TimedEvent.create(9876501234L, EVENT); assertThat(event.getEpochNanos()).isEqualTo(9876501234L); assertThat(event.getName()).isEqualTo(NAME_2); assertThat(event.getAttributes()).isEqualTo(ATTRIBUTES_2); }
@Test public void test180_90_2() { double longitude = 180.0; double latitude = 90.0; Long expResult = (long) 4; Long result = two.getId(longitude, latitude); assertEquals(expResult, result); }
@Test public void testGenerateWorldFileResponse() { byte[] fileBytes = {2, 4, 6, 8, 10}; Message message = worldServerMessageFactory.generateWorldFileResponse(fileBytes); assertEquals(message.name, "WorldFileResponse"); assertEquals(message.getArgument("fileBytes"), fileBytes); }
@Test public void testOrchestration_UnknownContext() { setMockContextFactoryToReturnNull(); OutboundDocSubmissionDeferredResponseDelegate delegate = createOutboundDocSubmissionDeferredResponseDelegate(); OutboundDocSubmissionDeferredResponseOrchestratable dsOrchestratable = createOutboundDocSubmissionDeferredResponseOrchestratable(delegate); Orchestratable response = delegate .process(dsOrchestratable); context.assertIsSatisfied(); assertNull(response); }
@Test public void testRegisterAlreadyRegistered() { when(agent.isRegistered(anyString())).thenReturn(true); advertiser.register("http", 8080, 8081); verify(agent, never()) .register(anyInt(), anyString(), anyLong(), anyString(), anyString(), anyList(), anyMap()); }
@Test public void testDoesNotAcceptWrongOutputType() { Set<SqlTypeName> unsupportedTypes = new HashSet<>(SqlTypeName.ALL_TYPES); unsupportedTypes.remove(SqlTypeName.TIMESTAMP); unsupportedTypes.remove(SqlTypeName.DATE); unsupportedTypes.remove(SqlTypeName.TIME); for (SqlTypeName unsupportedType : unsupportedTypes) { BeamSqlDatetimeMinusIntervalExpression minusExpression = minusExpression(unsupportedType, DATETIME, INTERVAL_2_SEC); assertFalse(minusExpression.accept()); } }
@Test public void testSetNullable() { AbstractFreeSqlBuilder test = new AbstractFreeSqlBuilder(); test.setLogicDbName(logicDbName); StatementParameters p = new StatementParameters(); test.with(p); test.select(template).from(template).where(equal(template)).setNullable("abc", null, Types.VARCHAR).ignoreNull(null); assertEquals("SELECT [template] FROM [template] WITH (NOLOCK) WHERE", test.build()); StatementParameters parameters = test.buildParameters(); assertEquals(0, parameters.size()); test = new AbstractFreeSqlBuilder(); test.setLogicDbName(logicDbName); p = new StatementParameters(); test.with(p); test.select(template).from(template).where(equal(template)).setNullable("abc", null, Types.VARCHAR); assertEquals("SELECT [template] FROM [template] WITH (NOLOCK) WHERE [template] = ?", test.build()); parameters = test.buildParameters(); assertEquals(0, parameters.size()); }
@Test public void testCreateTutor() { Tutor tutor = new Tutor(); tutor.setName("siva"); tutor.setEmail("siva@gmail.com"); tutor = tutorService.createTutor(tutor); assertNotNull(tutor); System.err.println(tutor.getTutorId()); }
@Test public void testMessageStartEventWithExistingMessage() { modelInstance = Bpmn.createProcess() .startEvent("start") .message("message") .subProcess() .triggerByEvent() .embeddedSubProcess() .startEvent("subStart") .message("message") .subProcessDone() .done(); final Message message = assertMessageEventDefinition("start", "message"); final Message subMessage = assertMessageEventDefinition("subStart", "message"); assertThat(message).isEqualTo(subMessage); assertOnlyOneMessageExists("message"); }
@Test public void testAcceptsAbort() throws Exception { BdfList body = BdfList.of(ABORT.getValue(), sessionId.getBytes(), previousMsgId.getBytes()); expectEncodeMetadata(ABORT); BdfMessageContext messageContext = validator.validateMessage(message, group, body); assertExpectedContext(messageContext, previousMsgId); }
@Test public void testTrimNull() { List<String> trimmed = CommentUtil.trim(null); Assert.assertEquals(0, trimmed.size()); }
@Test public void testService4() throws Exception { NanoPiranha piranha = new NanoPiranhaBuilder() .servlet("TestQueryStringServlet", new TestQueryStringServlet()) .build(); NanoRequest request = new NanoRequestBuilder() .method("GET") .servletPath("/index.html") .queryString("q=value") .build(); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); NanoResponse response = new NanoResponseBuilder() .outputStream(outputStream) .build(); piranha.service(request, response); assertEquals("q=value", outputStream.toString()); }
@Test( expected = NullPointerException.class ) public void copyNullStringNullOutputStreamPosBufSz() throws Exception { IOUtil.copy( nullString(), nullOutputStream(), 1 ); }
@Test public void testMultipleRenamesToSameField() throws Exception { ProjectionTransform.ProjectionTransformConfig config = new ProjectionTransform .ProjectionTransformConfig(null, "x:z,y:z", null, null); Transform<StructuredRecord, StructuredRecord> transform = new ProjectionTransform(config); TransformContext transformContext = new MockTransformContext(); try { transform.initialize(transformContext); Assert.fail(); } catch (ValidationException e) { Assert.assertEquals(1, e.getFailures().size()); Assert.assertEquals(1, e.getFailures().get(0).getCauses().size()); Cause expectedCause = new Cause(); expectedCause.addAttribute(CauseAttributes.STAGE_CONFIG, ProjectionTransform.ProjectionTransformConfig.RENAME); expectedCause.addAttribute(STAGE, MOCK_STAGE); Assert.assertEquals(expectedCause, e.getFailures().get(0).getCauses().get(0)); } }
@Test public void testGetOutputStream() throws Exception { assertNotNull(response.getOutputStream()); verify(mockResponse).getOutputStream(); }
@Test public void shouldThrowAllOtherExceptionsDuringDelete() throws LDAPOperationFailedException, ErrorResultException { String tokenId = "badger"; DN testDN = DN.rootDN(); Connection mockConnection = mock(Connection.class); ErrorResultException exception = ErrorResultException.newErrorResult(ResultCode.OTHER); given(mockConnection.delete(anyString())).willThrow(exception); TokenAttributeConversion mockConversion = mock(TokenAttributeConversion.class); given(mockConversion.generateTokenDN(anyString())).willReturn(testDN); LDAPAdapter adapter = new LDAPAdapter(mockConversion); try { adapter.delete(mockConnection, tokenId); fail(); } catch (ErrorResultException e) {} }
@Test public void markAsIneligible() { long applicationId = 1L; IneligibleOutcomeResource reason = newIneligibleOutcomeResource() .withReason("reason") .build(); when(applicationRestService.markAsIneligible(applicationId, reason)).thenReturn(restSuccess()); ServiceResult<Void> result = service.markAsIneligible(applicationId, reason); assertTrue(result.isSuccess()); InOrder inOrder = inOrder(applicationRestService); inOrder.verify(applicationRestService).markAsIneligible(applicationId, reason); inOrder.verifyNoMoreInteractions(); }
@Test (expected = SDKApplianceNotReachableException.class) public void testSendRequestUriTooLongResponse() { Mockito.when(responseStatus.getStatusCode()).thenReturn(414); restClient.sendRequest(SESSION_ID, new Request(HttpMethod.GET, "")); fail("Exception should have been raised"); }
@Test(expected = KeyNotFoundException.class) public void testGetTrustedCertificateBlankAlias() throws Exception { keyStoreManager.getTrustedCertificate(" "); }
@Test public void testWriteDataHandler() throws Exception { DataSourceProvider<DataHandler> p = new DataSourceProvider<>(); DataHandler ds = new DataHandler(new InputStreamDataSource( new ByteArrayInputStream("image".getBytes()), "image/png")); ByteArrayOutputStream os = new ByteArrayOutputStream(); p.writeTo(ds, DataHandler.class, DataHandler.class, new Annotation[]{}, MediaType.valueOf("image/png"), new MetadataMap<String, Object>(), os); assertEquals("image", os.toString()); }
@Test public void testExecSQLScript() { String sql = "CREATE TABLE `base_url_info_test` ( "+ "`id` int(11) NOT NULL AUTO_INCREMENT,"+ "`url` varchar(255) DEFAULT NULL,"+ "`url_detail_id` int(11) DEFAULT NULL,"+ "`search_type` int(11) DEFAULT NULL COMMENT '1唯一，2类',"+ "`priority` int(11) DEFAULT '0' COMMENT '优先级随数字增大',"+ "PRIMARY KEY (`id`)"+ ") ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;"; commonDAO.execSQLScript(sql); }
@Test public void testPathElementsToPathWithLeadingSeparator() { assertEquals(separator + "path" + separator + "to" + separator + "file", FileFunctions.pathElementsToPath(asList(separator + "path", "to", "file")).toString()); }
@Test public void shouldBeResilientAgainstInvalidCertificates() throws CertificateException, IllegalAccessException, NoSuchFieldException, SecurityException, IllegalArgumentException { writeField(subject, "defaultTrustManager", defaultTrustManager, true); when(topOfChain.getSubjectX500Principal()) .thenReturn(new X500Principal("CN=example.com, OU=Smarthome, O=Eclipse, C=DE")); when(topOfChain.getSubjectAlternativeNames()) .thenThrow(new CertificateParsingException("Invalid certificate!!!")); subject.checkClientTrusted(chain, "just"); verify(defaultTrustManager).checkClientTrusted(chain, "just", (Socket) null); verifyNoMoreInteractions(trustmanager); }
@Test public void childNodesCopy() { Document doc = Jsoup.parse("<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>"); Element div1 = doc.select("#1").first(); Element div2 = doc.select("#2").first(); List<Node> divChildren = div1.childNodesCopy(); assertEquals(5, divChildren.size()); TextNode tn1 = (TextNode) div1.childNode(0); TextNode tn2 = (TextNode) divChildren.get(0); tn2.text("Text 1 updated"); assertEquals("Text 1 ", tn1.text()); div2.insertChildren(-1, divChildren); assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated" +"<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html())); }
@Test public void testCreateNode() { assertTrue(AdHocSubprocess.class.isInstance(tested.createNode("id").getContent().getDefinition())); }
@Test void getPsuDataListByPaymentId_technicalError() { when(securityDataService.decryptId(ENCRYPTED_PAYMENT_ID)).thenReturn(Optional.empty()); CmsResponse<List<PsuIdData>> actual = pisCommonPaymentServiceInternalEncrypted.getPsuDataListByPaymentId(ENCRYPTED_PAYMENT_ID); assertTrue(actual.hasError()); assertEquals(CmsError.TECHNICAL_ERROR, actual.getError()); }
@Test public void testFormatSolidDate() { Assert.assertEquals("20150314", B2DateTimeUtil.formatSolidDate(LocalDate.of(2015, 3, 14))); }
@Test public void getStyleRootPath_shouldReturnCorrectValue() throws Exception { assertThat(style.getStyleRootPath()).isEqualTo("tron-style/"); }
@Test public void testEquals() throws Exception { NullaryFunction<Object> f = new BoundNullaryFunction<Object>(Identity.INSTANCE,"xyzzy"); assertEquals(f,f); assertObjectsAreEqual(f,new BoundNullaryFunction<Object>(Identity.INSTANCE,"xyzzy")); assertObjectsAreNotEqual(f,Constant.of("xyzzy")); assertObjectsAreNotEqual(f,new BoundNullaryFunction<Object>(Identity.INSTANCE,"foo")); assertObjectsAreNotEqual(f,new BoundNullaryFunction<Object>(Constant.of("xyzzy"),"foo")); assertObjectsAreNotEqual(f,new BoundNullaryFunction<Object>(Identity.INSTANCE,null)); assertTrue(!f.equals(null)); }
@Test void getWrapperFieldType_enum() { Proto proto = new Proto(); proto.setPackage(new Package(proto, "package")); Enum anEnum = new Enum(proto); anEnum.setName("Enum"); anEnum.setProto(proto); anEnum.addConstant(createEnumConstant(anEnum, "A", 0)); Field field = new Field(null); field.setModifier(FieldModifier.REPEATED); field.setType(anEnum); assertEquals("package.Enum", MessageFieldUtil.getWrapperFieldType(field)); }
@Test public void foo() { Alarm alarm = new Alarm(); assertEquals(false, alarm.isAlarmOn()); }
@Test public void buildMethods() throws Exception { underTest.addProperty("foo", TypeName.INT) .addProperty("bar", TypeName.OBJECT) .addProperty("baz", TypeName.BOOLEAN); final List<MethodSpec> actual = underTest.buildMethods(); assertThat(actual) .hasSize(4) .doesNotContainNull(); assertThat(actual.get(0)) .isNotConstructor() .isPublic() .hasNoJavaDoc() .hasNoAnnotation() .hasReturnType(TypeName.INT) .hasName("getFoo") .hasNoException() .hasNoParameter() .hasStatement("return foo"); assertThat(actual.get(1)) .isNotConstructor() .isPublic() .hasNoJavaDoc() .hasNoAnnotation() .hasReturnType(TypeName.OBJECT) .hasName("getBar") .hasNoException() .hasNoParameter() .hasStatement("return bar"); assertThat(actual.get(2)) .isNotConstructor() .isPublic() .hasNoJavaDoc() .hasNoAnnotation() .hasReturnType(TypeName.BOOLEAN) .hasName("isBaz") .hasNoException() .hasNoParameter() .hasStatement("return baz"); assertThat(actual.get(3)) .isConstructor() .isPublic() .hasNoJavaDoc() .hasNoAnnotation() .hasNoException() .hasParameter(TypeName.INT, "foo") .hasParameter(TypeName.OBJECT, "bar") .hasParameter(TypeName.BOOLEAN, "baz") .hasCode(CodeBlock.builder() .addStatement("this.$1L = $1L", "foo") .addStatement("this.$1L = $1L", "bar") .addStatement("this.$1L = $1L", "baz") .build()); }
@Test public void testToSecureString() { GetRequestBuilder<Long, TestRecord> builder = generateDummyRequestBuilder(); Request<TestRecord> request = builder.id(5L).build(); Assert.assertEquals( request.toSecureString(), "com.linkedin.restli.client.GetRequest{_method=get, _baseUriTemplate=abc, _methodName=null, " + "_requestOptions=RestliRequestOptions{_protocolVersionOption=USE_LATEST_IF_AVAILABLE, " + "_requestCompressionOverride=null, _responseCompressionOverride=null, _contentType=null, " + "_acceptTypes=null, _acceptResponseAttachments=false}}"); }
@Test public void equalsTransitiveTest(){ ClassDeployment d1 = new ClassDeployment(TestCoreService1.class, TestQueue1.class, TestQueue2.class, TestService1.class, TestTopic1.class); ClassDeployment d2 = new ClassDeployment(TestCoreService1.class, TestQueue1.class, TestQueue2.class, TestService1.class, TestTopic1.class); ClassDeployment d3 = new ClassDeployment(TestCoreService1.class, TestQueue1.class, TestQueue2.class, TestService1.class, TestTopic1.class); assertTrue(d1.equals(d2)); assertTrue(d2.equals(d3)); assertTrue(d1.equals(d3)); }
@Test public void testClientLogged() { when(_connectionMock.getClientVersion()).thenReturn("foo"); Map<String, List<String>> contextValues = new HashMap<>(); contextValues.put(ConnectionVersionValidator.VIRTUALHOST_LOGGED_CONNECTION_VERSION, Arrays.asList("foo")); setContextValues(contextValues); assertTrue(_connectionValidator.validateConnectionCreation(_connectionMock, _virtualHostMock)); verify(_eventLoggerMock).message(ConnectionMessages.CLIENT_VERSION_LOG("foo")); }
@Test public void shouldNotInterpretBackslashQuoteDifferentlyIfDisabledLegacyStyleQuoting() throws Exception { char slash = '\\'; String data = lines( "\n", "'abc''def" + slash + "''ghi'" ); seeker = seeker( data, withLegacyStyleQuoting( withQuoteCharacter( config(), '\'' ), false ) ); assertNextValue( seeker, mark, COMMA, "abc'def" + slash + "'ghi" ); assertFalse( seeker.seek( mark, COMMA ) ); }
@Test public void testConvertToStringNull() { InPlaceUuidValueEditor editor = new InPlaceUuidValueEditor(); byte[] bytes = null; String displayValue = editor.convertToString( bytes ); assertEquals( Messages.getString( "InPlaceUuidValueEditor.InvalidUuid" ), displayValue ); }
@Test void wrap_non_aliasable() { var command = map.wrap(node); assertEquals(null, command.getName()); assertEquals("/null", command.getUsage()); assertEquals(plugin, command.getPlugin()); assertEquals(dispatcher, command.dispatcher); assertEquals(List.of(), command.getAliases()); }
@Test public void testOnCallPendingMessagesDecrement() throws Exception { cut.onCall(messages); assertThat(metrics.getCounters().get(QueueToDatabaseTransaction.METRIC_NAME_PENDING_MESSAGES).getCount(), is(-1L)); }
@Test public void givenByteValue_generateDefault_shouldReturn0() { Byte byteValue = 3; byte primitiveByte = 4; Object result = defaultValueGenerator.generate(byteValue); Object primitiveResult = defaultValueGenerator.generate(primitiveByte); assertEquals((byte) 0, result); assertEquals((byte) 0, primitiveResult); }
@Test public void testCheckTwoStepsInLegalOrderIsUnchanged() { analysisSteps.add(FREQUENCY_FILTER); analysisSteps.add(KNOWN_VARIANT_FILTER); expectedSteps.add(FREQUENCY_FILTER); expectedSteps.add(KNOWN_VARIANT_FILTER); assertThat(instance.check(analysisSteps), equalTo(expectedSteps)); }
@Test public void testOnBackPress() { final ActionMode mockActionMode = mock(ActionMode.class); final ActionBarFragment fragment = new TestFragment(); fragment.onActionModeStarted(mockActionMode); assertThat(fragment.onBackPress(), is(true)); verify(mockActionMode).finish(); verifyNoMoreInteractions(mockActionMode); }
@Test public void testEnsemlFetchEnsemblEntry() throws IOException, ExternalDbUnavailableException, InterruptedException { String fetchRes = readFile("ensembl_lookup_id_ENSG00000106683.json"); Mockito.when( httpDataManager.fetchData(Mockito.any(), Mockito.any(ParameterNameValue[].class)) ).thenReturn(fetchRes); EnsemblEntryVO limk1Gene = ensemblDataManager.fetchEnsemblEntry("rs7412"); Assert.assertNotNull(limk1Gene); Assert.assertEquals("ENSG00000106683", limk1Gene.getId()); Assert.assertTrue(limk1Gene.getStart().equals(GENE_START)); Assert.assertTrue(limk1Gene.getEnd().equals(END)); Assert.assertEquals("GRCh38", limk1Gene.getAssemblyName()); Assert.assertEquals("LIMK1", limk1Gene.getDisplayName()); Assert.assertEquals("LIM domain kinase 1 [Source:HGNC Symbol;Acc:HGNC:6613]", limk1Gene.getDescription()); }
@Test public void testDefaultNoFeatures() { node.forEachFeature((ns, id) -> Assert.fail()); }
@Test public void shouldFailWhenLockIsNotSmartLock() throws Exception { expectedException.expect(IllegalStateException.class); Application application = mock(Application.class, withSettings().extraInterfaces(LockProvider.class)); when(((LockProvider)application).getLock()).thenReturn(mock(Lock.class)); when(activity.getApplication()).thenReturn(application); SmartLock.getSmartLock(activity); }
@Test(expected = IllegalArgumentException.class) public void testObjectIdParsedInvalidNull() { ObjectId.parseObjectId(null); }
@Test void eliminatesUselessLoans() { final Loan alreadyInvested = new MockLoanBuilder() .set(LoanImpl::setRating, Rating.B) .set(LoanImpl::setRemainingInvestment, Money.from(1)) .set(LoanImpl::setReservedAmount, Money.from(0)) .set(LoanImpl::setMyInvestment, mockMyInvestment()) .build(); final Loan normal = new MockLoanBuilder() .set(LoanImpl::setRating, Rating.A) .set(LoanImpl::setRemainingInvestment, Money.from(1)) .set(LoanImpl::setReservedAmount, Money.from(0)) .build(); final Zonky zonky = harmlessZonky(); when(zonky.getAvailableLoans(any())).thenReturn(Stream.of(alreadyInvested, normal)); final Tenant tenant = mockTenant(zonky); final AbstractMarketplaceAccessor<LoanDescriptor> d = new PrimaryMarketplaceAccessor(tenant, UnaryOperator.identity()); final Collection<LoanDescriptor> ld = d.getMarketplace(); assertThat(ld).hasSize(1) .element(0) .extracting(LoanDescriptor::item) .isSameAs(normal); }
@Test public void testCopyVariablesFrom() throws Exception { assertNull( meta.getVariable( "var1" ) ); IVariables vars = mock( IVariables.class ); when( vars.getVariable( "var1" ) ).thenReturn( "x" ); when( vars.listVariables() ).thenReturn( new String[] { "var1" } ); meta.copyVariablesFrom( vars ); assertEquals( "x", meta.getVariable( "var1", "y" ) ); }
@Test public void shouldSubscribeToFeatureSet() { allSubscriptions = allSubscriptions.subList(2, 4); boolean actual1 = Store.isSubscribedToFeatureSet(allSubscriptions, "project1", "fs_1"); boolean expected1 = false; boolean actual2 = Store.isSubscribedToFeatureSet(allSubscriptions, "project1", "fs_2"); boolean expected2 = true; boolean actual3 = Store.isSubscribedToFeatureSet(allSubscriptions, "project1", "fs_nonexistent"); boolean expected3 = false; assertThat(actual1, equalTo(expected1)); assertThat(actual2, equalTo(expected2)); assertThat(actual3, equalTo(expected3)); }
@Test public void testGetExplodedToListWithMax () { assertEquals (new CommonsArrayList <> ("a", "b", "", "c"), StringHelper.getExploded ("@", "a@b@@c", 5)); assertEquals (new CommonsArrayList <> ("a", "b", "", "c"), StringHelper.getExploded ("@", "a@b@@c", 4)); assertEquals (new CommonsArrayList <> ("a", "b", "@c"), StringHelper.getExploded ("@", "a@b@@c", 3)); assertEquals (new CommonsArrayList <> ("a", "b@@c"), StringHelper.getExploded ("@", "a@b@@c", 2)); assertEquals (new CommonsArrayList <> ("a@b@@c"), StringHelper.getExploded ("@", "a@b@@c", 1)); assertEquals (new CommonsArrayList <> ("a", "b", "", "c"), StringHelper.getExploded ("@", "a@b@@c", 0)); assertEquals (new CommonsArrayList <> ("a", "b", "", "c"), StringHelper.getExploded ("@", "a@b@@c", -1)); assertEquals (new CommonsArrayList <> ("a", "b", "", "c"), StringHelper.getExploded ("@", "a@b@@c", -2)); assertEquals (new CommonsArrayList <> ("", "b", ""), StringHelper.getExploded ("@", "@b@", -2)); assertTrue (StringHelper.getExploded ("@", null, 5).isEmpty ()); }
@Test public void testFindQuery() throws Exception { fedora.cleanUp(); fedora.ingest( getClass().getResource("tree1.xml") ); SearchView instance = new SearchView(storage); List<Item> result = instance.findQuery("tree", "tree", "u", "u", NdkPlugin.MODEL_PERIODICAL, Collections.<String>emptyList()); assertFalse(result.isEmpty()); }
@Test public void maxTest() { double max = max(MATRIX); assertEquals(3d, max, 0d); }
@Test public void testExistsResource() throws IOException { Assert.assertTrue(ResourceUtil.existsResource("/context.xml")); Assert.assertFalse(ResourceUtil.existsResource("/test.txt")); }
@Test public void testCreateFilter() { String where = "id > 1 and id <= 10"; IFilter filter = FilterUtils.createFilter(where); System.out.println(filter); where = "name = 'hello' and id in ('1','2')"; filter = FilterUtils.createFilter(where); System.out.println(filter); where = "gmt_create = '2013-11-11 11:11:11'"; filter = FilterUtils.createFilter(where); System.out.println(filter); where = "1+1"; filter = FilterUtils.createFilter(where); System.out.println(filter); }
@Test void testClose() { final DefaultStorageAccessor a = new DefaultStorageAccessor(storageProperties(DATA_SOURCE_CLASS), Collections.emptyMap()); assertTrue(a.isOpen()); a.close(); assertFalse(a.isOpen()); }
@Test public void modify_mntby_on_inetnum_with_lir() { final RpslObject rpslOriginalObject = RpslObject.parse("" + "inetnum: 192.168.0.0 - 192.169.255.255\n" + "status: ALLOCATED PA\n" + "mnt-by: RIPE-NCC-HM-MNT\n" + "mnt-by: TEST-MNT"); final RpslObject rpslUpdatedlObject = RpslObject.parse("" + "inetnum: 192.168.0.0 - 192.169.255.255\n" + "status: ALLOCATED PA\n" + "mnt-by: RIPE-NCC-HM-MNT\n" + "mnt-by: TEST2-MNT"); when(authenticationSubject.hasPrincipal(Principal.RS_MAINTAINER)).thenReturn(false); when(authenticationSubject.hasPrincipal(Principal.OVERRIDE_MAINTAINER)).thenReturn(false); when(update.getReferenceObject()).thenReturn(rpslOriginalObject); when(update.getUpdatedObject()).thenReturn(rpslUpdatedlObject); subject.validate(update, updateContext); verify(updateContext).addMessage(update, UpdateMessages.canOnlyBeChangedByRipeNCC(AttributeType.MNT_BY)); verify(maintainers).isRsMaintainer(ciSet("RIPE-NCC-HM-MNT", "TEST-MNT")); verifyNoMoreInteractions(maintainers); }
@Test public void testUpdateInvalidLoadBalancer() throws Exception { when(objectMessage.getObject()).thenReturn(messageDataContainer); when(messageDataContainer.getAccountId()).thenReturn(ACCOUNT_ID); when(messageDataContainer.getLoadBalancerId()).thenReturn(LOAD_BALANCER_ID); when(messageDataContainer.getUserName()).thenReturn(USERNAME); when(loadBalancerService.getWithUserPages(LOAD_BALANCER_ID, ACCOUNT_ID)).thenThrow(EntityNotFoundException.class); deleteSslTerminationListener.doOnMessage(objectMessage); verify(notificationService).saveAlert(eq(ACCOUNT_ID), eq(LOAD_BALANCER_ID), isA(EntityNotFoundException.class), eq(AlertType.DATABASE_FAILURE.name()), anyString()); verify(notificationService).saveLoadBalancerEvent(eq(USERNAME), eq(ACCOUNT_ID), eq(LOAD_BALANCER_ID), anyString(), anyString(), eq(EventType.DELETE_SSL_TERMINATION), eq(CategoryType.DELETE), eq(EventSeverity.CRITICAL)); }
@Test void validate_AuthenticationData_with_collectedClientData_null_test() { AuthenticationData authenticationData = new AuthenticationData( new byte[32], new byte[32], TestDataUtil.createAuthenticatorData(), new byte[32], null, new byte[32], new AuthenticationExtensionsClientOutputs<>(), new byte[32] ); assertThrows(ConstraintViolationException.class, () -> BeanAssertUtil.validate(authenticationData) ); }
@Test public void deleteConnectionReturnsFromService() { String id = "userId"; Type type = Type.FOLLOW; when(service.deleteConnection(id, type)).thenReturn(Observable.<Void>empty()); TestSubscriber<Void> ts = new TestSubscriber<>(); network.deleteConnection(id, type).subscribe(ts); ts.assertNoErrors(); ts.assertCompleted(); }
@Test public void testUpdateSchemaMissing() throws Exception { Uploader uploader = new Uploader.Builder() .setServiceAccountKeyFilePath(SERVICE_ACCOUNT_FILE_PATH) .setUploaderHelper(uploaderHelper) .setBaseUri(tempFolder.getRoot().toURI()) .build(); UploadRequest uploadRequest = new UploadRequest(); uploadRequest.sourceId = "ds1"; UploadRequest.UpdateSchemaRequest updateRequest = new UploadRequest.UpdateSchemaRequest(); updateRequest.schemaJsonFile = "no-such-file.json"; uploadRequest.requests = Collections.singletonList(updateRequest); thrown.expect(IOException.class); uploader.execute(uploadRequest); }
@Test public void testResetCbFlowInfoWhenNotTriggeredFlow() { SdxCluster cluster = new SdxCluster(); cluster.setLastCbFlowChainId(FLOW_CHAIN_ID); cluster.setInitiatorUserCrn(USER_CRN); cluster.setClusterName(CLUSTER_NAME); FlowIdentifier flowIdentifier = FlowIdentifier.notTriggered(); underTest.saveLastCloudbreakFlowChainId(cluster, flowIdentifier); verify(sdxClusterRepository).save(clusterCaptor.capture()); assertNull(clusterCaptor.getValue().getLastCbFlowId()); assertNull(clusterCaptor.getValue().getLastCbFlowChainId()); }
@Test public void testBasic() throws Exception { Configuration conf = new Configuration(); when(pcollection.getSize()).thenReturn(7 * 1000L * 1000L * 1000L); when(pcollection.getPipeline()).thenReturn(pipeline); when(pipeline.getConfiguration()).thenReturn(conf); assertEquals(8, PartitionUtils.getRecommendedPartitions(pcollection)); }
@Test public void shouldDetectEvenAndOddNumbers() { assertTrue(BitUtil.isEven(0)); assertTrue(BitUtil.isEven(2)); assertTrue(BitUtil.isEven(MIN_VALUE)); assertFalse(BitUtil.isEven(1)); assertFalse(BitUtil.isEven(-1)); assertFalse(BitUtil.isEven(MAX_VALUE)); }
@Test public void testSerialize() throws Exception { val expected = objectMapper.writeValueAsBytes(alert); val actual = serdeUnderTest.serializer().serialize("some-topic", alert); assertArrayEquals(expected, actual); }
@Test public void testMultipleCatch() throws Exception { assertEquals("BaseException: SubException: testMultipleCatch", ExceptionHandler.multipleCatch(new SubException("testMultipleCatch"))); assertEquals("BaseException: testMultipleCatch", ExceptionHandler.multipleCatch(new BaseException("testMultipleCatch"))); assertEquals("File not found: testMultipleCatch", ExceptionHandler.multipleCatch(new FileNotFoundException("File not found: testMultipleCatch"))); assertEquals("Out of memory: testMultipleCatch", ExceptionHandler.multipleCatch(new OutOfMemoryError("Out of memory: testMultipleCatch"))); }
@SuppressWarnings("deprecation") @Test public void hasNewNetworkBufConfMixed() throws Exception { Configuration config = new Configuration(); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); config.setInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS, 1); assertFalse(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)); Configuration config1 = config.clone(); config1.setFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION, 0.1f); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1)); config1 = config.clone(); config1.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN, "1024"); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1)); config1 = config.clone(); config1.setString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX, "1024"); assertTrue(TaskManagerServicesConfiguration.hasNewNetworkBufConf(config1)); }
@Test public void testRDNCompareToNCS2NCSNotEquals() throws LdapException { Rdn rdn1 = new Rdn( " a = f + g = h + c = d " ); Rdn rdn2 = new Rdn( " c = d + a = h + g = h " ); assertFalse( rdn1.equals( rdn2 ) ); assertFalse( rdn2.equals( rdn1 ) ); }
@Test public void findByForceGreaterThanAndRankIs() throws Exception { Long force = randomLong(); Rank rank = randomEnum(Rank.class); mvc.perform(get("/elastic/jedi/findByForceGreaterThanAndRankIs/" + force + "/" + rank).contentType(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()); verify(jediService).findByForceGreaterThanAndRankIs(eq(force), eq(rank)); }
@Test(expected = IllegalReferenceCountException.class) public void testReadBytesAfterRelease9() throws IOException { releasedBuffer().readBytes(new ByteArrayOutputStream(), 1); }
@Test public void query() { Iterable<Row> query = this.cut.query(); assertNotNull(query); Row theOnly = query.iterator().next(); assertNotNull(theOnly); Collection<Column> columns = theOnly.getColumns(); assertFalse(columns.isEmpty()); Iterator<Column> iterator = columns.iterator(); Column javaColumn = iterator.next(); javaColumn.convertToInteger(); Integer javaRank = (Integer) javaColumn.getValue(); assertThat(javaRank, is(1)); Column cColumn = iterator.next(); cColumn.convertToInteger(); Integer cRank = (Integer) cColumn.getValue(); assertThat(cRank, is(2)); Column cobolColumn = iterator.next(); cobolColumn.convertToInteger(); Integer cobolRank = (Integer) cobolColumn.getValue(); assertThat(cobolRank, is(3)); Column esotericColumn = iterator.next(); esotericColumn.convertToInteger(); Integer esotericRank = (Integer) esotericColumn.getValue(); assertThat(esotericRank, is(4)); }
@Test public void resume() throws Exception { mBuilder = mBuilder.resume(new ArrayList<Uri>()); assertNotNull(mBuilder); mBuilder.forResult(MOCK_REQUEST_CODE); mLatch.await(); }
@Test(expected = ValueExprEvaluationException.class) public void testWrongArguments() { IRI subj = f.createIRI("urn:a"); function.evaluate(f, subj); fail("expect ValueExprEvaluationException"); }
@Test public void testGetRoutingRules_AssignedRepositoriesHiddenByPerms() { when(routingRuleStore.list()).thenReturn(Arrays.asList(rule1, rule2, rule3)); Map<EntityId,List<Repository>> ruleRepoMap = new HashMap<>(); ruleRepoMap.put(new DetachedEntityId("rule1"), Collections.singletonList(repository1)); ruleRepoMap.put(new DetachedEntityId("rule2"), Collections.singletonList(repository2)); ruleRepoMap.put(new DetachedEntityId("rule3"), Collections.singletonList(repository3)); when(routingRuleHelper.calculateAssignedRepositories()).thenReturn(ruleRepoMap); when(repositoryPermissionChecker.userHasRepositoryAdminPermission(Arrays.asList(repository1), "read")) .thenReturn(Arrays.asList(repository1)); when(repositoryPermissionChecker.userHasRepositoryAdminPermission(Arrays.asList(repository2), "read")) .thenReturn(Collections.emptyList()); when(repositoryPermissionChecker.userHasRepositoryAdminPermission(Arrays.asList(repository3), "read")) .thenReturn(Arrays.asList(repository3)); List<RoutingRuleXO> xos = underTest.getRoutingRules(true); assertThat(xos.size(), is(3)); assertXO(xos.get(0), "rule1", 1, "repository1"); assertXO(xos.get(1), "rule2", 1); assertXO(xos.get(2), "rule3", 1, "repository3"); }
@Test public void testAbnormalCheck() throws IOException, SystemCheckException { File tempRoot = new File(TestConstant.BASE_OUTPUT_PATH.concat("root")); tempRoot.mkdir(); try { for (int i = 0; i < 5; i++) { File subDir = new File(tempRoot, "storage_group" + i); subDir.mkdir(); LogWriter logWriter = new LogWriter(subDir.getPath() + File.separator + WAL_FILE_NAME); ByteBuffer binaryPlans = ByteBuffer.allocate(64 * 1024); String deviceId = "device1"; String[] measurements = new String[]{"s1", "s2", "s3"}; TSDataType[] types = new TSDataType[]{TSDataType.INT64, TSDataType.INT64, TSDataType.INT64}; String[] values = new String[]{"5", "6", "7"}; for (int j = 0; j < 10; j++) { new InsertRowPlan(deviceId, j, measurements, types, values).serialize(binaryPlans); } if (i > 2) { binaryPlans.put("not a wal".getBytes()); } logWriter.write(binaryPlans); logWriter.force(); logWriter.close(); } WalChecker checker = new WalChecker(tempRoot.getAbsolutePath()); assertEquals(2, checker.doCheck().size()); } finally { FileUtils.deleteDirectory(tempRoot); } }
@Test public void getScriptCount_null() { int count = item.getScriptCount(); assertEquals(0, count); }
@Test public void initChannel_adds_ExceptionHandlingHandler_immediately_before_ResponseSenderHandler_and_after_NonblockingEndpointExecutionHandler_and_uses_riposteErrorHandler_and_riposteUnhandledErrorHandler() { HttpChannelInitializer hci = basicHttpChannelInitializerNoUtilityHandlers(); RiposteErrorHandler expectedRiposteErrorHandler = extractField(hci, "riposteErrorHandler"); RiposteUnhandledErrorHandler expectedRiposteUnhandledErrorHandler = extractField(hci, "riposteUnhandledErrorHandler"); DistributedTracingConfig<Span> distributedTracingConfigMock = mock(DistributedTracingConfig.class); ServerSpanNamingAndTaggingStrategy<Span> serverSpanNamingAndTaggingStrategyMock = mock(ServerSpanNamingAndTaggingStrategy.class); Whitebox.setInternalState(hci, "distributedTracingConfig", distributedTracingConfigMock); doReturn(serverSpanNamingAndTaggingStrategyMock) .when(distributedTracingConfigMock).getServerSpanNamingAndTaggingStrategy(); hci.initChannel(socketChannelMock); ArgumentCaptor<ChannelHandler> channelHandlerArgumentCaptor = ArgumentCaptor.forClass(ChannelHandler.class); verify(channelPipelineMock, atLeastOnce()).addLast(anyString(), channelHandlerArgumentCaptor.capture()); List<ChannelHandler> handlers = channelHandlerArgumentCaptor.getAllValues(); Pair<Integer, ResponseSenderHandler> responseSenderHandler = findChannelHandler(handlers, ResponseSenderHandler.class); Pair<Integer, NonblockingEndpointExecutionHandler> nonblockingEndpointExecutionHandler = findChannelHandler(handlers, NonblockingEndpointExecutionHandler.class); Pair<Integer, ExceptionHandlingHandler> exceptionHandlingHandler = findChannelHandler(handlers, ExceptionHandlingHandler.class); assertThat(responseSenderHandler, notNullValue()); assertThat(nonblockingEndpointExecutionHandler, notNullValue()); assertThat(exceptionHandlingHandler, notNullValue()); assertThat(exceptionHandlingHandler.getLeft(), is(responseSenderHandler.getLeft() - 1)); assertThat(exceptionHandlingHandler.getLeft(), is(greaterThan(nonblockingEndpointExecutionHandler.getLeft()))); assertThat(extractField(exceptionHandlingHandler.getRight(), "spanNamingAndTaggingStrategy"), is(serverSpanNamingAndTaggingStrategyMock)); RiposteErrorHandler actualRiposteErrorHandler = (RiposteErrorHandler) Whitebox.getInternalState(exceptionHandlingHandler.getRight(), "riposteErrorHandler"); RiposteUnhandledErrorHandler actualRiposteUnhandledErrorHandler = (RiposteUnhandledErrorHandler) Whitebox.getInternalState(exceptionHandlingHandler.getRight(), "riposteUnhandledErrorHandler"); assertThat(actualRiposteErrorHandler, is(expectedRiposteErrorHandler)); assertThat(actualRiposteUnhandledErrorHandler, is(expectedRiposteUnhandledErrorHandler)); }
@Test(description = "This method tests trying to get details activity IDs when call with empty list") public void testGetActivitiesWithEmptyActivityIdList() throws OperationManagementException { PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "isAdmin")).toReturn(true); Response response = this.activityInfoProviderService.getActivities(activityListEmpty); Assert.assertNotNull(response); Assert.assertEquals(response.getStatus(), Response.Status.BAD_REQUEST.getStatusCode()); Mockito.reset(this.deviceManagementProviderService); }
@Test void testIntRange() { assertAll("int range", () -> { assertThrows(SyntaxError.class, () -> fromString("-2147483649").integerNumber()); }, () -> { assertThrows(SyntaxError.class, () -> fromString("2147483648").integerNumber()); }, () -> { assertEquals(fromString("1785498889").integerNumber().getValue().intValue(), 1785498889); }); }
@Test public void containsMatchingPartialHeadlineWithTrimmingAndExactContent(){ DataCell dataCell = new DataCell("Content1", "Headline1"); Assert.assertTrue(dataCell.isContainsMatch("Content1", " Headline ")); }
@Test public void createNetworkTest_NetworkTypeAsMultiProvider() throws Exception { StubOpenStack.mockOpenstackPostNetwork(wireMockServer, "OpenstackCreateNeutronNetworkResponse.json"); NetworkInfo networkInfo = msoNeutronUtils.createNetwork("MTN13", "tenantId", MsoNeutronUtils.NetworkType.MULTI_PROVIDER, "networkName", "PROVIDER", vlans); Assert.assertEquals("2a4017ef-31ff-496a-9294-e96ecc3bc9c9", networkInfo.getId()); }
@Test(expected = JpaUnitException.class) public void testNonHibernateOgmNeo4jConfigurationCanBeAccessed() { final Map<String, Object> properties = new HashMap<>(); when(descriptor.getProperties()).thenReturn(properties); properties.put(HibernateOgmConfiguration.HIBERNATE_OGM_DATASTORE_PROVIDER, "foo"); registry.getConfiguration(descriptor); }
@Test(expected = RuntimeException.class) public void testDateFormatterFail2() { formatter.fromString("20120101 250000"); }
@Test public void testBuildDefault() throws Exception { new SSLContextBuilder().build(); }
@Test public void testGetName() throws Exception { JoinRelationshipModel relModel = new JoinRelationshipModel(); relModel.setLeftKeyFieldModel( createFieldModel( "field1", "pt1" ) ); relModel.setRightKeyFieldModel( createFieldModel( "field2", "pt2" ) ); assertEquals( "pt1.field1 - multitable.INNER_JOIN - pt2.field2", relModel.getName() ); }
@Test public void testHeaderAfterLinebreak() { String src = "Hallo das ist super\r\n===Und jetzt\r\nGehts weiter"; String target = "Hallo das ist super\r\n!!Und jetzt\r\nGehts weiter"; Assertions.assertEquals(target, translate(src)); }
@Test(expectedExceptions = IllegalArgumentException.class) public void testEnumShouldFailInvalidEnumIndex(){ final int invalidIndex = MockEnum.class.getEnumConstants().length + 1; Conversions.variantToEnum(invalidIndex, MockEnum.class); }
@Test public void testNonMetricTelemetry() throws Exception { MetricTelemetryFilter tested = new MetricTelemetryFilter(); boolean result = tested.process(new PageViewTelemetry()); Assert.assertTrue(result); }
@Test public void sizeTest() throws RestServiceException { NettyRequest nettyRequest = createNettyRequest(HttpMethod.GET, "/", null, new MockChannel()); assertEquals("Size not as expected", -1, nettyRequest.getSize()); int xAmbryBlobSize = 20; int contentLength = 10; HttpHeaders headers = new DefaultHttpHeaders(); headers.add(HttpHeaderNames.CONTENT_LENGTH, contentLength); nettyRequest = createNettyRequest(HttpMethod.GET, "/", headers, new MockChannel()); assertEquals("Size not as expected", contentLength, nettyRequest.getSize()); headers = new DefaultHttpHeaders(); headers.add(RestUtils.Headers.BLOB_SIZE, xAmbryBlobSize); nettyRequest = createNettyRequest(HttpMethod.GET, "/", headers, new MockChannel()); assertEquals("Size not as expected", xAmbryBlobSize, nettyRequest.getSize()); headers = new DefaultHttpHeaders(); headers.add(RestUtils.Headers.BLOB_SIZE, xAmbryBlobSize); headers.add(HttpHeaderNames.CONTENT_LENGTH, contentLength); nettyRequest = createNettyRequest(HttpMethod.GET, "/", headers, new MockChannel()); assertEquals("Size not as expected", xAmbryBlobSize, nettyRequest.getSize()); }
@Test void testSetExecutable() { this.c.setExecutable(EXECUTABLE); Assertions.assertThat(this.c.getExecutable()).isEqualTo(EXECUTABLE); }
@Test public void shouldFetchDateOfDeathObsOffObsGroup() { Obs dispositionObsGroup = createDispositionObsGroup(); Obs dateOfDeath = new Obs(); dateOfDeath.setConcept(dateOfDeathConcept); dispositionObsGroup.addGroupMember(dateOfDeath); assertThat(dispositionDescriptor.getDateOfDeathObs(dispositionObsGroup), is(dateOfDeath)); }
@Test public void testParseOk() { Offset rb1 = at("right bottom"); Offset rb2 = at("right+20% bottom+25%"); Offset rb3 = at("right-20% bottom-25%"); Offset rb4 = at("right+5px bottom+2px"); Offset rb5 = at("right-5px bottom-2px"); Offset tl1 = at("left top"); Offset tl2 = at("left+20% top+25%"); Offset tl3 = at("left-20% top-25%"); Offset tl4 = at("left+5px top+2px"); Offset tl5 = at("left-5px top-2px"); Offset cc1 = at("center center"); Offset cc2 = at("center+20% center+25%"); Offset cc3 = at("center-20% center-25%"); Offset cc4 = at("center+5px center+2px"); Offset cc5 = at("center-5px center-2px"); Offset ii1 = at("-inf -inf"); Offset ii2 = at("+inf -inf"); Offset ii3 = at("-inf +inf"); Rectangle r = new Rectangle(200, 100, 150, 160); assertThat(rb1.apply(r), equalTo(new Point(350, 260))); assertThat(rb2.apply(r), equalTo(new Point(380, 300))); assertThat(rb3.apply(r), equalTo(new Point(320, 220))); assertThat(rb4.apply(r), equalTo(new Point(355, 262))); assertThat(rb5.apply(r), equalTo(new Point(345, 258))); assertThat(tl1.apply(r), equalTo(new Point(200, 100))); assertThat(tl2.apply(r), equalTo(new Point(230, 140))); assertThat(tl3.apply(r), equalTo(new Point(170, 60))); assertThat(tl4.apply(r), equalTo(new Point(205, 102))); assertThat(tl5.apply(r), equalTo(new Point(195, 98))); assertThat(cc1.apply(r), equalTo(new Point(275, 180))); assertThat(cc2.apply(r), equalTo(new Point(305, 220))); assertThat(cc3.apply(r), equalTo(new Point(245, 140))); assertThat(cc4.apply(r), equalTo(new Point(280, 182))); assertThat(cc5.apply(r), equalTo(new Point(270, 178))); assertThat(ii1.apply(r), equalTo(new Point(Integer.MIN_VALUE, Integer.MIN_VALUE))); assertThat(ii2.apply(r), equalTo(new Point(Integer.MAX_VALUE, Integer.MIN_VALUE))); assertThat(ii3.apply(r), equalTo(new Point(Integer.MIN_VALUE, Integer.MAX_VALUE))); }
@Test void getObject_withCustomUserAgentPrefix() throws Exception { AmazonWebserviceClientFactoryBean<AmazonTestWebserviceClient> factoryBean = new AmazonWebserviceClientFactoryBean<>( AmazonTestWebserviceClient.class, new AWSStaticCredentialsProvider(new BasicAWSCredentials("aaa", "bbb"))); factoryBean.setRegionProvider(new StaticRegionProvider("eu-west-1")); factoryBean.afterPropertiesSet(); AmazonTestWebserviceClient webserviceClient = factoryBean.getObject(); assertThat(webserviceClient.getClientConfiguration().getUserAgentSuffix()) .startsWith("spring-cloud-aws/"); }
@Test(expected = GeocodeException.class) public void shouldThrowExceptionIfTheAddressComponentsArrayIsMissingFromTheResultObject() { String jsonGeocodeResponse = "{" + " \"status\":\"ZERO_RESULTS\"," + " \"results\":[" + " {" + " \"types\":[\"street_address\"]," + " \"formatted_address\":\"1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA\"," + " \"geometry\":{" + " \"location\":{" + " \"lat\":37.4227820," + " \"lng\":-122.0850990" + " }," + " \"location_type\":\"ROOFTOP\"," + " \"viewport\":{" + " \"southwest\":{" + " \"lat\":37.4196344," + " \"lng\":-122.0882466" + " }," + " \"northeast\":{" + " \"lat\":37.4259296," + " \"lng\":-122.0819514" + " }" + " }" + " }" + " }" + " ]" + "}"; JsonGeocodeResponseParser.parse("1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA", new ByteArrayInputStream(jsonGeocodeResponse.getBytes())); }
@Test public void testHashCodeSameObj() throws LdapException { ModifyRequestImpl req = getRequest(); assertTrue( req.hashCode() == req.hashCode() ); }
@Test public void execute() { if (statusIsValid) { executeWithValidStatus(status, potentialOwnerBelongsToTask, previousPlanningTask); if (potentialOwnerBelongsToTask) { assertThat(potentialOwners).contains(organizationalEntity); } else { assertThat(potentialOwners).doesNotContain(organizationalEntity); } } else { executeWithInvalidStatus(status, previousPlanningTask); } }
@Test(expected = java.sql.SQLException.class) public void testQuery1SqlNull() throws Exception { queryRunner.query((String) null, new MapOutputHandler()); }
@Test public void recordPageHistory() { Map<String, Object> model = new HashMap<>(); when(modelAndView.getModel()).thenReturn(model); when(request.getRequestURI()).thenReturn("/url/pageThree"); when(handler.hasMethodAnnotation(NavigationRoot.class)).thenReturn(false); pageHistoryService.recordPageHistory(request, response, modelAndView, handler); assertEquals(3, history.size()); assertEquals("/url/pageSecond", model.get("cookieBackLinkUrl")); assertEquals("pageSecond", model.get("cookieBackLinkText")); verify(encodedCookieService).saveToCookie(response, PAGE_HISTORY_COOKIE_NAME, JsonUtil.getSerializedObject(history)); }
@Test public void loadFile() throws JDOMException, IOException { URL resourceAsStream = classLoader.getResource("test-sql.sql"); BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream.openStream(), Constants.ENCODING)); try { List<String> lines = new ConfigurationOverrides("/WEB-INF/overrides-config.xml,/WEB-INF/overrides-config-overlay.xml").loadTextFileAndUpdate("test-sql.sql", null, appPath, reader); assertEquals("CREATE TABLE NewRelations", lines.get(0).trim()); assertEquals("(", lines.get(1).trim()); assertEquals("primary key(id,overridden)", lines.get(2).trim()); assertEquals(");", lines.get(3).trim()); assertEquals("INSERT INTO Settings VALUES (21,20,'host','localhost');", lines.get(4).trim()); assertEquals("INSERT INTO Settings VALUES (22,20,'port','8080');", lines.get(5).trim()); } finally { reader.close(); } }
@Test public void first_time_confirmable_message_received() { CoapMessage in = new CoapMessage(1, MessageType.CONFIRMABLE, 1, 1234, "token".getBytes(), null, "payload".getBytes()); filter.messageReceived(session, in, readController); verify(readController).callReadNextFilter(in); Mockito.verifyNoMoreInteractions(readController); }
@Test public void testGetTotalStreams() throws Exception { int number= service.getTotalStreams(); assertEquals(2, number); }
@Test public void notEqualsWithThumbCompressedSize() { ObjectInfo objectInfo1 = new ObjectInfo(STORAGE_ID, OBJECT_FORMAT, PROTECTION_STATUS, OBJECT_COMPRESSED_SIZE, THUMB_FORMAT, new UINT32(0), THUMB_PIX_WIDTH, THUMB_PIX_HEIGHT, IMAGE_PIX_WIDTH, IMAGE_PIX_HEIGHT, IMAGE_BIT_DEPTH, PARENT_OBJECT, ASSOCIATION_TYPE, ASSOCIATION_DESC, SEQUENCE_NUMBER, FILE_NAME, CAPTURE_DATE, MODIFICATION_DATE, KEYWORDS); ObjectInfo objectInfo2 = new ObjectInfo(STORAGE_ID, OBJECT_FORMAT, PROTECTION_STATUS, OBJECT_COMPRESSED_SIZE, THUMB_FORMAT, new UINT32(1), THUMB_PIX_WIDTH, THUMB_PIX_HEIGHT, IMAGE_PIX_WIDTH, IMAGE_PIX_HEIGHT, IMAGE_BIT_DEPTH, PARENT_OBJECT, ASSOCIATION_TYPE, ASSOCIATION_DESC, SEQUENCE_NUMBER, FILE_NAME, CAPTURE_DATE, MODIFICATION_DATE, KEYWORDS); assertFalse(objectInfo1.equals(objectInfo2)); }
@Test(expected = ConfigurationException.class) public void testGetUDDIClientNoConfig() throws Exception { System.out.println("testGetUDDIClientNoConfig"); String random = UUID.randomUUID().toString(); ServletContext req = createNiceMock(ServletContext.class); req.setAttribute(JUDDI_CLIENT_NAME, null); expect(req.getInitParameter(WebHelper.JUDDI_CLIENT_NAME)).andReturn(null).times(0, 1); req.setAttribute(UDDI_CLIENT_CONFIG_FILE, random); expect(req.getInitParameter(WebHelper.UDDI_CLIENT_CONFIG_FILE)).andReturn(random).times(0, 1); replay(req); UDDIClient result = WebHelper.getUDDIClient(req); Assert.assertNotNull(result); }
@Test public void testSetProcessor() throws Throwable { DirPollAdaptor dirPollAdaptor = new DirPollAdaptor(); dirPollAdaptor.setProcessor("testDirPollAdaptorProcessor"); assertEquals("testDirPollAdaptorProcessor", dirPollAdaptor.processorClass, "dirPollAdaptor.processorClass"); assertTrue(dirPollAdaptor.isModified(), "dirPollAdaptor.isModified()"); }
@Test public void testClientAddress() throws Exception { QuorumPeer quorumPeer = new QuorumPeer(); LocalPeerBean remotePeerBean = new LocalPeerBean(quorumPeer); String result = remotePeerBean.getClientAddress(); assertNotNull(result); assertEquals(0, result.length()); ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory(); int clientPort = PortAssignment.unique(); InetSocketAddress address = new InetSocketAddress(clientPort); cnxnFactory.configure(address, 5, -1, false); quorumPeer.setCnxnFactory(cnxnFactory); result = remotePeerBean.getClientAddress(); String ipv4 = "0.0.0.0:" + clientPort; String ipv6 = "[0:0:0:0:0:0:0:0]:" + clientPort; assertTrue(result.equals(ipv4) || result.equals(ipv6)); cnxnFactory.shutdown(); clientPort = PortAssignment.unique(); InetAddress clientIP = InetAddress.getLoopbackAddress(); address = new InetSocketAddress(clientIP, clientPort); cnxnFactory = ServerCnxnFactory.createFactory(); cnxnFactory.configure(address, 5, -1, false); quorumPeer.setCnxnFactory(cnxnFactory); result = remotePeerBean.getClientAddress(); String expectedResult = clientIP.getHostAddress() + ":" + clientPort; assertEquals(expectedResult, result); cnxnFactory.shutdown(); }
@Test public void test()throws Exception{ Method method = new Method(); method.setApiKeyRequired(true); method.setHttpMethod("Get"); Map<String, Method> resourceMethods = new HashMap(); resourceMethods.put("1", method); Resource resource = new Resource(); resource.setResourceMethods(resourceMethods); Collection<Resource> li = new ArrayList<>(); li.add(resource); GetResourcesResult resourceResult = new GetResourcesResult(); resourceResult.setItems(li); GetMethodResult methodResult = new GetMethodResult(); methodResult.setAuthorizationType("AuthorizationType"); methodResult.setApiKeyRequired(false); methodResult.setHttpMethod("Get"); Collection<Resource> emptyList = new ArrayList<>(); GetResourcesResult emptyRulesResult = new GetResourcesResult (); emptyRulesResult.setItems(emptyList); mockStatic(PacmanUtils.class); when(PacmanUtils.doesAllHaveValue(anyString(),anyString(),anyString(),anyString())).thenReturn( true); when(PacmanUtils.splitStringToAList(anyString(),anyString())).thenReturn(CommonTestUtils.getListString()); Map<String,Object>map=new HashMap<String, Object>(); map.put("client", apiGatewayClient); CheckForApiGatewayProtected spy = Mockito.spy(new CheckForApiGatewayProtected()); Mockito.doReturn(map).when((BaseRule)spy).getClientFor(anyObject(), anyString(), anyObject()); when(apiGatewayClient.getResources(anyObject())).thenReturn(resourceResult); when(apiGatewayClient.getMethod(anyObject())).thenReturn(methodResult); spy.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 ")); when(apiGatewayClient.getResources(anyObject())).thenReturn(emptyRulesResult); spy.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 ")); when(apiGatewayClient.getResources(anyObject())).thenThrow(new RuleExecutionFailedExeption()); assertThatThrownBy( () -> checkForApiGatewayProtected.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 "))).isInstanceOf(InvalidInputException.class); when(PacmanUtils.doesAllHaveValue(anyString(),anyString(),anyString(),anyString())).thenReturn( false); assertThatThrownBy( () -> checkForApiGatewayProtected.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 "))).isInstanceOf(InvalidInputException.class); }
@Test public void compliantUntilReturnsNullIfNoProductsInstalled() { Consumer consumer = mockConsumer(); Date start = TestUtil.createDate(2005, 6, 12); List<Entitlement> ents = new LinkedList<>(); int iterations = 5; int interval = 1000; for (int i = 0; i < interval * iterations; i += interval) { ents.add(mockEntitlement( consumer, TestUtil.createProduct("Provides Product 1 For Short Period"), new Date(start.getTime() + i), new Date(start.getTime() + i + interval), PRODUCT_1 )); ents.add(mockEntitlement( consumer, TestUtil.createProduct("Provides Product 2 For Short Period"), new Date(start.getTime() + i), new Date(start.getTime() + i + interval), PRODUCT_2 )); } mockEntCurator(consumer, ents); Date expectedDate = null; ComplianceStatus status = compliance.getStatus(consumer, start); assertEquals("valid", status.getStatus()); assertEquals(expectedDate, status.getCompliantUntil()); }
@Test public void supports_noStrict_as_direct_bundle_argument() { final Bundle bundle = new Bundle(); bundle.putString("noStrict", "true"); final Arguments arguments = new Arguments(bundle); final String cucumberOptions = arguments.getCucumberOptions(); assertThat(cucumberOptions, is("--no-strict")); }
@Test public void modifyRequest_UpdatesLocationConstraint_When_NullLocationConstraint() { CreateBucketRequest request = CreateBucketRequest.builder() .bucket("test-bucket") .createBucketConfiguration(CreateBucketConfiguration.builder() .build()) .build(); Context.ModifyRequest context = () -> request; ExecutionAttributes attributes = new ExecutionAttributes() .putAttribute(AwsExecutionAttribute.AWS_REGION, Region.US_WEST_2); SdkRequest modifiedRequest = new CreateBucketInterceptor().modifyRequest(context, attributes); String locationConstraint = ((CreateBucketRequest) modifiedRequest).createBucketConfiguration().locationConstraintAsString(); assertThat(locationConstraint).isEqualToIgnoringCase("us-west-2"); }
@Test(expected = IOException.class) public void testNextNegativeLength() throws IOException { DataOutputStream os = new DataOutputStream(new FileOutputStream(bucket)); os.writeInt(-1); os.write("apple".getBytes()); os.flush(); lengthReadBucket.next(); }
@Test public void error_missingBackendType_nullType() { String keyPrefix = "somePrefix."; FailureCollector rootFailureCollectorMock = createMock( FailureCollector.class ); ContextualFailureCollector backendFailureCollectorMock = createMock( ContextualFailureCollector.class ); Capture<Throwable> throwableCapture = Capture.newInstance(); resetAll(); EasyMock.expect( configurationSourceMock.get( "backends.backendName.type" ) ) .andReturn( Optional.empty() ); EasyMock.expect( configurationSourceMock.resolve( "backends.backendName.type" ) ) .andReturn( Optional.of( keyPrefix + "backends.backendName.type" ) ); EasyMock.expect( rootBuildContextMock.getFailureCollector() ) .andReturn( rootFailureCollectorMock ); EasyMock.expect( rootFailureCollectorMock.withContext( EventContexts.fromBackendName( "backendName" ) ) ) .andReturn( backendFailureCollectorMock ); backendFailureCollectorMock.add( EasyMock.capture( throwableCapture ) ); replayAll(); holder.createBackends( CollectionHelper.asSet( Optional.of( "backendName" ) ) ); verifyAll(); assertThat( throwableCapture.getValue() ) .isInstanceOf( SearchException.class ) .hasMessageContaining( "Missing backend type for backend 'backendName'" ) .hasMessageContaining( "Set the property 'somePrefix.backends.backendName.type' to a supported value" ); }
@Test public void testBuildNetworkConnectionInfo_mobileSubtypeOnly() { assertThat( NetworkConnectionInfo.builder() .setMobileSubtype(NetworkConnectionInfo.MobileSubtype.COMBINED) .build()) .isInstanceOf(NetworkConnectionInfo.class); }
@Test public void testConcurrentPutAndGet() { List<CompletableFuture> futures = new ArrayList<>(10000); final CyclicBarrier cyclicBarrier = new CyclicBarrier(8); for (int j = 0; j < 10000; j++) { final int finalJ = j; futures.add(CompletableFuture.runAsync(() -> { try { cyclicBarrier.await(); if (finalJ % 2 == 0) { batchSave(); } else { inMemoryMetricsRepository.listResourcesOfApp(DEFAULT_APP); } } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } }, executorService) ); } CompletableFuture all = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])); try { all.get(10, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.getCause().printStackTrace(); if (e.getCause() instanceof ConcurrentModificationException) { fail("concurrent error occurred"); } else { fail("unexpected exception"); } } catch (TimeoutException e) { fail("allOf future timeout"); } }
@Test public void evictAbsentPeerShouldNotEvict() { final PeerTable table = new PeerTable(Peer.randomId(), 16); final DiscoveryPeer peer = helper.createDiscoveryPeer(); final List<DiscoveryPeer> otherPeers = helper.createDiscoveryPeers(5); otherPeers.forEach(table::tryAdd); final EvictResult evictResult = table.tryEvict(peer); assertThat(evictResult.getOutcome()).isEqualTo(EvictOutcome.ABSENT); }
@Test public void getMothers_shouldReturnAllMothersOfPatient() { Patient parent = TestUtils.getPatient(7); Patient child = TestUtils.getPatient(2); TestUtils.saveRelationship(parent, Context.getPersonService().getRelationshipType(2), child); SimpleObject[] mothers = controller.getMothers(child, ui); Assert.assertThat(mothers, arrayWithSize(1)); Assert.assertThat(mothers[0], hasEntry("id", (Object) (7))); }
@Test public void testEmptyString() throws Exception { IdSplitIterator iterator = new IdSplitIterator(""); assertFalse(iterator.hasNext()); try { iterator.next(); fail(); } catch (NoSuchElementException e) { } assertNull(iterator.getSubtreeId()); }
@Test void first_token() { CompilationUnitTree cut = createTree("class A {\n" + " void bar(){\n" + " foo();\n" + " }" + "}"); ClassTree classTree = (ClassTree) cut.types().get(0); MethodInvocationTree mit = (MethodInvocationTree) ((ExpressionStatementTree) ((MethodTree) (classTree.members().get(0))).block().body().get(0)).expression(); SyntaxToken firstToken = mit.firstToken(); assertThat(firstToken.text()).isEqualTo("foo"); }
@Test public void clearBatchShouldThrowExceptionIfClosedStatement() throws SQLException { expectedEx.expect(SQLException.class); Statement stmt = BoltNeo4jStatement.newInstance(false, Mocker.mockConnectionOpen()); stmt.close(); stmt.clearBatch(); }
@Test public void deveRetornarGeradorXmlDesligamento() throws GeracaoXmlException { Evento evento = new Evento(); evento.setTipoEvento(new TipoEvento(2299l)); GeradorXml gerador = geradorXmlFactory.getGerador(evento); assertThat(gerador).isInstanceOf(GeradorXmlDeslig.class); }
@Test public void testGetName() { assertEquals("someName", new ClassPathResource("/my/package/someName").getName()); assertEquals("someName.dfi.sdfj", new ClassPathResource("/my/package/someName.dfi.sdfj").getName()); assertEquals("someName", new ClassPathResource("someName").getName()); assertEquals("someName.dfi.sdfj", new ClassPathResource("someName.dfi.sdfj").getName()); }
@Test(expected = PropertyAccessException.class) public void testLoadPropertyFile_FileDoesNotExists() throws PropertyAccessException { File propertyFile = new File("/config/PropertyAccessorTest/doesnotexist"); PropertyFileDAO propDAO = new PropertyFileDAO(); propDAO.loadPropertyFile(propertyFile, "doesnotexist"); }
@Test public void printRequestedItemsAfterSubscriberRequestMethodCall() { logSubscriber.afterRequestMethodCall(joinPoint, 10); verify(messageManager).printSubscriberRequestedItems(subscriber.getClass().getSimpleName(), 10); }
@Test public void validCommonNameFromCertificate() throws CertificateException { Assert.assertEquals("VOLL,ANDRES,39004170346", CertUtil.getCommonName(getCertificate())); }
@Test void buildSpace() { Assertions.assertEquals(" test", StringUtils.buildSpace(2) + "test"); }
@Test public void itExtractsTableNameBasic() { String sql = "SELECT * FROM table WHERE bar = baz"; assertThat(SqlTableNameExtractor.extractTableName(sql)).isEqualTo("table"); }
@Test public void NmeaSentence_WhenGNSS_IsValidSentence(){ NmeaSentence nmeaSentence = new NmeaSentence("$GNGGA,095556.857,3454.932,N,07502.500,W,0,00,0.3,,M,,M,,*69"); assertThat("GNSS GNGGA is a valid sentence", nmeaSentence.isLocationSentence(), is(true)); }
@Test public void testFtpSystemProxy() { R.CONFIG.put("proxy_protocols", "ftp"); SystemProxy.setupProxy(); Assert.assertEquals(System.getProperty("ftp.proxyHost"), host); Assert.assertEquals(System.getProperty("ftp.proxyPort"), port); Assert.assertEquals(System.getProperty("http.proxyHost"), ""); Assert.assertEquals(System.getProperty("https.proxyHost"), ""); Assert.assertEquals(System.getProperty("socksProxyHost"), ""); Assert.assertEquals(System.getProperty("http.proxyPort"), ""); Assert.assertEquals(System.getProperty("https.proxyPort"), ""); Assert.assertEquals(System.getProperty("socksProxyPort"), ""); }
@Test public void hasVibratePermission_returnsTrueIfVibratePermissionInManifest() { PackageManager packageManager = mock(PackageManager.class); when(packageManager.checkPermission(eq(Manifest.permission.VIBRATE), anyString())) .thenReturn(PackageManager.PERMISSION_GRANTED); Context context = mock(Context.class); when(context.getPackageManager()).thenReturn(packageManager); assertTrue(VibrationHelper.hasVibrationPermission(context)); }
@Test public void getJsonIntValueErrorTest() throws IOException { String response = this.getJson("SDNCServiceResponseExample.json"); assertEquals(0, JsonUtils.getJsonIntValue(response, null)); }
@Test(expected=uk.co.flax.biosolr.ontology.storage.StorageEngineException.class) public void storeOntologyEntries_responseNotOkay() throws Exception { final int commitWithMs = 60000; final SolrConfiguration config = mock(SolrConfiguration.class); when(config.getCommitWithinMs()).thenReturn(commitWithMs); OntologyEntryBean bean = mock(OntologyEntryBean.class); List<OntologyEntryBean> beans = Arrays.asList(bean); UpdateResponse response = mock(UpdateResponse.class); when(response.getStatus()).thenReturn(1); SolrClient server = mock(SolrClient.class); when(server.addBeans(beans, commitWithMs)).thenReturn(response); SolrStorageEngine engine = new SolrStorageEngine(config, server); engine.storeOntologyEntries(beans); verify(server).addBeans(beans, commitWithMs); verify(response).getStatus(); }
@Test public void supportedFileAttributeViewsReturnBasic() { Set<String> operations = fs.supportedFileAttributeViews(); assertNotNull(operations); assertTrue(!operations.isEmpty()); assertTrue(operations.contains("basic")); assertTrue(operations.contains("posix")); }
@Test public void testExecuteQuery() throws SQLException, RichSQLException { this.orm.executeQuery("SELECT 1"); this.orm.executeQuery("SELECT 2"); }
@Test public void validateDisposable() { Disposable d1 = Disposables.empty(); assertFalse(EndConsumerHelper.validate(DisposableHelper.DISPOSED, d1, getClass())); assertTrue(d1.isDisposed()); assertTrue(errors.toString(), errors.isEmpty()); }
@Test public void filePageIdIsUnboundByDefault() { assertThat( pageList.getFilePageId( pageRef ), is( PageCursor.UNBOUND_PAGE_ID ) ); }
@Test public void testPermitsMessageEvenWithPrivsThatWouldDeny() { AuthorizationContext context = AuthzFixtures.createContext(AuthzFixtures.placeId, "dev:w,x:*"); UUID devId = UUID.randomUUID(); PlatformMessage gaMsg = AuthzFixtures.createGetAttributes(devId, "dev:name"); assertTrue(authorizer.isAuthorized(context, AuthzFixtures.placeId.toString(), gaMsg)); }
@Test public void validatePermisionTest() throws Exception { LoginUser user = LoginUser.builder().id(1L).build(); DasGroup group = DasGroup.builder().group_name("name").build(); Errors errors = new BeanPropertyBindingResult(group, "group", true, 256); Assert.assertTrue(groupService.validatePermision(user, errors).validate().isValid()); }
@Test void scanForResourcesPathSymlink() { File file = new File("src/test/resource-symlink/test/resource.txt"); List<URI> resources = resourceScanner.scanForResourcesPath(file.toPath()); assertThat(resources, contains(file.toURI())); }
@Test public void testValidateConfigurationValidFieldItemSelectorRequired() throws Exception { _fragmentEntryValidatorImpl.validateConfiguration( _read("configuration_valid_field_itemselector_required.json")); }
@Test public void testDefaultTitleTypefacePath() { builder1.defaultTitleTypefacePath("title"); assertEquals("title", builder1.build().getDefaultTitleTypefacePath()); }
@Test public void testClientServerNegotationPolicyFromPropertiesBuilder() throws Exception { SettableJargonPropertiesMBean jargonProperties = new SettableJargonProperties(); jargonProperties.setNegotiationPolicy(SslNegotiationPolicy.CS_NEG_REQUIRE); IRODSSession irodsSession = Mockito.mock(IRODSSession.class); Mockito.when(irodsSession.getJargonProperties()).thenReturn(jargonProperties); ClientServerNegotationPolicyFromPropertiesBuilder builder = new ClientServerNegotationPolicyFromPropertiesBuilder( irodsSession); ClientServerNegotiationPolicy actual = builder.buildClientServerNegotiationPolicyFromJargonProperties(); Assert.assertEquals(SslNegotiationPolicy.CS_NEG_REQUIRE, actual.getSslNegotiationPolicy()); }
@Test public void testParseShouldReturnStubDescriptorAttributesWithActiveValue() { given(root.getAttribute("active")).willReturn("false"); StubDescriptorAttributes expectedAttributes = new StubDescriptorAttributes("Default", false); StubDescriptor actual = underTest.parse(document); assertEquals(actual.getAttributes().isActive(), expectedAttributes.isActive()); }
@Test public void testSelectQueryWithIdAsEmpty() { String expectedQuery = "SELECT ck.keyName as keyName, cv.value as value FROM egmr_serviceconfiguration ck JOIN egmr_serviceconfigurationvalues cv ON ck.id = cv.keyId WHERE ck.tenantId=? ORDER BY ck.keyName ASC,cv.effectivefrom DESC;"; List<Integer> idsList = new ArrayList<>(); serviceConfigurationSearchCriteria = ServiceConfigurationSearchCriteria.builder().ids(idsList) .tenantId("ap.kurnool").build(); List<Object> preparedStatementValues = new ArrayList<>(); String actualQuery = serviceConfigurationQueryBuilder.getSelectQuery(serviceConfigurationSearchCriteria, preparedStatementValues); List<Object> expectedPreparedStatementValues = new ArrayList<>(); expectedPreparedStatementValues.add("ap.kurnool"); assertEquals(preparedStatementValues, expectedPreparedStatementValues); assertEquals(expectedQuery, actualQuery); }
@Test(expected = IllegalArgumentException.class) public void testSet_WithNull() throws Exception { Location location = new Location(); location.set(null); fail("Expected a InvalidArgumentException."); }
@Test public void testNullFunction() { assertThatIllegalArgumentException() .isThrownBy(() -> INTEGRATOR.integrate(null, L, U)); }
@Test public void testGetHammingDistance() throws Exception { assertThat(CompareHammingDistance.getHammingDistance(2L, 3L), is(1)); }
@Test(expected = IllegalArgumentException.class) public void saveNull() { victim.saveWorkspace(Collections.emptyMap(), null); }
@Test public void testCalculateHoursPassingOverCustomDefinedWeekend() { Properties config = new Properties(); config.setProperty(BusinessCalendarImpl.WEEKEND_DAYS, Calendar.FRIDAY + ","+Calendar.SATURDAY); String expectedDate = "2012-05-06 12:45"; SessionPseudoClock clock = new StaticPseudoClock(parseToDateWithTime("2012-05-03 13:45").getTime()); BusinessCalendarImpl businessCal = new BusinessCalendarImpl(config, clock); Date result = businessCal.calculateBusinessTimeAsDate("7h"); assertEquals(expectedDate, formatDate("yyyy-MM-dd HH:mm", result)); }
@Test public void removeInviteFromInviteView() throws Exception { String email = "firstname.lastname@example.com"; when(competitionInviteRestService.deleteInvite(email, competition.getId())).thenReturn(restSuccess()); mockMvc.perform(post("/competition/{competitionId}/assessors/invite", competition.getId()) .param("remove", email) .param("page", "5")) .andExpect(status().is3xxRedirection()) .andExpect(redirectedUrl(format("/competition/%s/assessors/invite?page=5", competition.getId()))) .andReturn(); verify(competitionInviteRestService, only()).deleteInvite(email, competition.getId()); }
@Test public void isApplicableFails() { final boolean applicable = underTest.isApplicable(mockRequestContext(null, null)); assertThat(applicable).isFalse(); }
@Test(expected=IllegalStateException.class) public void testNullEnvironment() { new EnvironmentFilter(){}.getEnvironment(); }
@Test public void testHeapToDirectBuffer() { final HeapBuffer heapBuffer = HeapBuffer.allocate(8); heapBuffer.writeLong(10); heapBuffer.flip(); final DirectBuffer directBuffer = DirectBuffer.allocate(8); directBuffer.write(heapBuffer.array()); directBuffer.flip(); assertEquals(directBuffer.readLong(), heapBuffer.readLong()); directBuffer.release(); }
@Test void getAuthorisationScaStatus_malformedEncryptedId() { AuthorisationParentHolder encryptedParentHolder = new AuthorisationParentHolder(AUTHORISATION_TYPE, MALFORMED_ENCRYPTED_PARENT_ID); when(securityDataService.decryptId(MALFORMED_ENCRYPTED_PARENT_ID)).thenReturn(Optional.empty()); CmsResponse<ScaStatus> actualResponse = authorisationServiceInternalEncrypted.getAuthorisationScaStatus(AUTHORISATION_ID, encryptedParentHolder); assertTrue(actualResponse.hasError()); assertEquals(CmsError.TECHNICAL_ERROR, actualResponse.getError()); verify(authorisationService, never()).getAuthorisationScaStatus(any(), any()); }
@Test public void testLiteralFloat() throws Exception { final Matcher<JsonNode> sut = jsonNumber(NF.numberNode(1f)); assertThat(NF.numberNode(1f), is(sut)); }
@Test public void testGetLogContent() throws IOException { String expectedFileContent = "content"; Collection<File> files = new ArrayList<>(); String fileName = "a"; File file = new File("a"); files.add(file); given(fileUtils.getFilesWithExtension(LOG_PATH, LOG_EXTENSION)).willReturn(files); given(fileUtils.readFileToString(file)).willReturn(expectedFileContent); String result = underTest.getLogContent(fileName); assertEquals(expectedFileContent, result); }
@Test public void testOutputForamtUnix() { String field = "datetime"; String targetField = "@timestamp"; ZoneId zoneId = ZoneId.of("Europe/Paris"); String outputFormat = "UNIX"; ZonedDateTime zonedDateTime = LocalDateTime.now().atZone(zoneId); String iso8601Format = zonedDateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss,SSS")); Doc doc = createDoc(field, iso8601Format); Map<String,Object> config = createConfig("field", field, "targetField", targetField, "formats", Arrays.asList("ISO8601"), "outputFormat", outputFormat, "timeZone", zoneId.toString()); DateProcessor dateProcessor = createProcessor(DateProcessor.class, config); assertThat(dateProcessor.process(doc).isSucceeded()).isTrue(); assertThat((String)doc.getField(targetField)).isEqualTo(zonedDateTime.format(DateProcessor.UNIX)); }
@Test public void testCheckCanHandleExpressionNull() { DataSet dataset = null; Object inputData = null; int rowNum = 0; String column = null; String ruleName = null; String expression = ".equals(\"string1\")"; boolean ignoreBlanks = false; ActionParameter actionParaneter = new ActionParameter(dataset, inputData, rowNum, column, ruleName, expression, ignoreBlanks); ExpressionAction expressionAction = new ExpressionAction(); boolean checkCanHandle = expressionAction.canHandle(actionParaneter); Assert.assertEquals("The result of checkCanHandle shuold be false because of expression is null", false, checkCanHandle); }
@Test public void testSerializeAsPath() throws Exception { Schema schema = new Schema.Parser().parse("{\"type\":\"record\", \"name\":\"test\", " + "\"fields\":[" + "{\"name\": \"name\", \"type\": \"string\"}, " + "{\"name\": \"title\", \"type\": \"string\"}" + "]}"); GenericRecord partition = new GenericData.Record(schema); partition.put("name", "a/b:c\\d e"); partition.put("title", "title"); Assert.assertEquals(AvroUtils.serializeAsPath(partition, true, true), new Path("name=a_b_c_d_e/title=title")); Assert.assertEquals(AvroUtils.serializeAsPath(partition, false, true), new Path("a_b_c_d_e/title")); Assert.assertEquals(AvroUtils.serializeAsPath(partition, false, false), new Path("a/b_c_d_e/title")); }
@Test public void testCreateForAliasWithoutCertificate() throws Exception { new Expectations() { { keyStore.getKey(ALIAS, PASSWORD); result = key; keyStore.getCertificate(ALIAS); result = null; } }; EncryptionServiceFactory factory = new EncryptionServiceFactory(keyStore); EncryptionService encryptionService = factory.create(ALIAS, PASSWORD); Assertions.assertThat(encryptionService).isNotNull(); new Verifications() { { new EncryptionServiceImpl(ALIAS, publicKey, key); } }; }
@Test public void testLoginUserRequest() throws Exception { this.mockWebServer.enqueue(new MockResponse()); this.userDataRepository.loginUser(this.fakeUser).subscribe(this.testObserver); RecordedRequest request = this.mockWebServer.takeRequest(); assertEquals("/users/login", request.getPath()); assertEquals("POST", request.getMethod()); assertEquals(gson.toJson(new UserWrapper(this.fakeUser)).toString(), request.getBody().readUtf8()); }
@Test(expectedExceptions = UnsupportedOperationException.class) public void testRootModification() throws Exception { new RadixTree().setRoot(new RadixTreeNode()); }
@Test void testBuildingWithInvalidTopicsShouldThrowAxonConfigurationException() { assertThrows(AxonConfigurationException.class, () -> StreamableKafkaMessageSource.builder().topics(null)); }
@Test public void testCopyToAdvancesPositionOnlyInDest() { ByteBuffer src = ByteBuffer.allocate(10); ByteBuffer dest = ByteBuffer.allocate(10); ByteBuffers.copyTo(src, dest); assertEquals(0, src.position()); assertEquals(10, dest.position()); }
@Test public void shouldConstructInCriteriaQuery() { Condition condition = new Condition("key", Operator.in, Arrays.asList("value")); when(builder.parameter(Collection.class, "key")).thenReturn(expression); when(root.get("key")).thenReturn(path); condition.constructQuery(builder, root); verify(path).in(expression); }
@Test(expected = RuntimeException.class) public void testSearchPageZero() { AbstractEntityManager.SearchRequest request = buildSearchRequestMock("", 0, 5); AbstractEntityManager.SearchResponse<Group> response = groupsManager.search(request); }
@Test public void testCallModuleMethod2() throws Exception { JSONArray args = new JSONArray(); args.add("testarg"); WXModuleManager.callModuleMethod(instance.getInstanceId(),"test1","testMethod",args); }
@Test( expected = NullPointerException.class ) public void toStringNullByteArrayJunkEncodingNegBufSz() throws Exception { IOUtil.toString( nullByteArray(), "junk", -1 ); }
@Test public void testProcessNoOptions4() throws SoarException { List<String> nonOptions = op.process(Lists.newArrayList("command", "arg", "arg")); assertEquals(nonOptions.size(), 2); }
@Test(expected = NotDirectoryException.class) public void testOnMissingDir() throws IOException { reader.readDirectoryStructure("missing", null, null); }
@Test void wildcardNotAtEnd() { assertThrows(IllegalArgumentException.class, () -> DependencyRule.allowAll("a*b")); }
@Test public void testGetKeyFromMessage() throws Exception { XpathCacheValueTranslator translator = createTranslator(); AdaptrisMessage message = createMessage(); assertEquals("abc", translator.getKeyFromMessage(message)); }
@Test public void insertSubChannel() { for( boolean subtensor : new boolean[]{false,true}) { Tensor_F64 src = TensorFactory_F64.random(rand, subtensor, 4, 10, 8); Tensor_F64 dst = TensorFactory_F64.random(rand, subtensor, 5, 11, 12); TensorOps_F64.insertSubChannel(src,15,7,dst,19,8,3,4); for (int row = 0; row < 3; row++) { for (int col = 0; col < 4; col++) { assertEquals( src.d[15+row*7+col],dst.d[19+row*8+col], DeepBoofConstants.TEST_TOL_F64); } } } }
@Test public void splitOnly4_startDelim() { String string = "_01_34_67_90"; final char[][] split = CharScanner.split(string.toCharArray(), '_'); String zero = new String(split[0]); ok |= zero.equals("") || die(zero); String one = new String(split[1]); ok |= one.equals("01") || die(one); String two = new String(split[2]); ok |= two.equals("34") || die(two); String three = new String(split[3]); ok |= three.equals("67") || die(three); String four = new String(split[4]); ok |= four.equals("90") || die(three); ok |= split.length == 5 || die("Length is wrong size"); }
@Test public void testComposeAllViaAndThen() { Function<String, String> f1 = x -> x + "a"; Function<String, String> f2 = x -> x + "b"; Function<String, String> f3 = x -> x + "c"; Function<String, String> f4 = x -> x + "d"; Function<String, String> f5 = x -> x + "e"; List<Function<String, String>> list = Arrays.asList(f1, f2, f3, f4, f5); assertEquals("edcba", ComposeAll.composeAllViaAndThen(list).apply("")); }
@Test public void testGenericImages() throws Exception { Assert.assertEquals("Image 1", dc.cleanLinkId(IMAGE_NOFILE_URL, "*(&(*&(", true)); Assert.assertEquals("Image 2", dc.cleanLinkId(IMAGE_NOFILE_URL, "_!!\n!!_", true)); Assert.assertEquals("image.jpg", dc.cleanLinkId(IMAGE_URL, "!", true)); Assert.assertEquals("Image 3", dc.cleanLinkId(IMAGE_INVALID_URL, "!", true)); }
@Test public void shouldThrowOnInvalidPropertyValue() { final KsqlRequest request = new KsqlRequest( "sql", ImmutableMap.of( ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "not-parsable" ), SOME_REQUEST_PROPS, null ); final Exception e = assertThrows( KsqlException.class, () -> request.getConfigOverrides() ); assertThat(e.getMessage(), containsString( ConsumerConfig.AUTO_OFFSET_RESET_CONFIG)); assertThat(e.getMessage(), containsString( "not-parsable")); }
@Test public void testLargeRingSystem() throws Exception { String smiles = "O=C1Oc6ccccc6(C(O)C1C5c2ccccc2CC(c3ccc(cc3)c4ccccc4)C5)"; SmilesParser smilesParser = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer molecule = smilesParser.parseSmiles(smiles); molecule = fbot.kekuliseAromaticRings(molecule); Assert.assertNotNull(molecule); molecule = (IAtomContainer) AtomContainerManipulator.removeHydrogens(molecule); Assert.assertEquals(34, molecule.getAtomCount()); int doubleBondCount = 0; for (int i = 0; i < molecule.getBondCount(); i++) { IBond bond = molecule.getBond(i); if (bond.getOrder() == Order.DOUBLE) doubleBondCount++; } Assert.assertEquals(13, doubleBondCount); }
@Test void minus() { assertNotNull(Expressions.minus(ToShort.of(s -> (short) 1), 1)); assertNotNull(Expressions.minus(ToShort.of(s -> (short) 1), ToShort.of(s -> (short) 1))); assertNotNull(Expressions.minus(ToFloat.of(f -> 1f), 1f)); assertNotNull(Expressions.minus(ToFloat.of(f -> 1f), ToFloat.of(f -> 1f))); }
@Test void getName() { assertEquals("name", ENTITY.getName()); }
@Test public void testIsNormalDoesNotUseApply() { SeverityComparator a = new SeverityComparator(); Throwable next = this.headIeChain(new AssertionError()); next = new Error(next); next = this.headIioeChain(next); next = new ExecutionException(next); assertFalse(a.isNormal(next)); }
@Test public void testReduce() throws Exception { List<L3TemporalBin> temporalBins = new ArrayList<L3TemporalBin>(); temporalBins.add(createTBin(1, 10, 0.2f, 0.15f, 0.3f)); temporalBins.add(createTBin(2, 7, 0.4f, 0.25f, 0.3f)); temporalBins.add(createTBin(4, 6, 0.6f, 0.35f, 0.3f)); L3TemporalBin outputBin = (L3TemporalBin) taReducer.binManager.createTemporalBin(-1); for (L3TemporalBin bin : temporalBins) { taReducer.binManager.aggregateTemporalBin(bin, outputBin); } TAPoint taPoint = new TAPoint("northsea", taReducer.minDate, taReducer.maxDate, outputBin); assertNotNull(taPoint); assertEquals("northsea", taPoint.getRegionName()); assertEquals("2010-01-01", taPoint.getStartDate()); assertEquals("2010-01-10", taPoint.getStopDate()); TemporalBin temporalBin = taPoint.getTemporalBin(); assertNotNull(temporalBin); assertEquals(1 + 2 + 4, temporalBin.getNumPasses()); assertEquals(10 + 7 + 6, temporalBin.getNumObs()); float[] featureValues = temporalBin.getFeatureValues(); assertEquals(3, featureValues.length); assertEquals(8.4f, featureValues[0], 1e-5f); assertEquals(5.35f, featureValues[1], 1e-5f); assertEquals(23f, featureValues[2], 1e-5f); assertEquals("TAPoint{regionName=northsea, startDate=2010-01-01, stopDate=2010-01-10, temporalBin=L3TemporalBin{index=-1, numObs=23, numPasses=7, featureValues=[8.400001, 5.35, 23.0]}}", taPoint.toString()); }
@Test public void validateSqlQueryTabularInputsEmpty() throws Exception { final List<String> validationList1 = validateSqlQueryTabularInputs(EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY); assertThat(validationList1, is(Arrays.asList(INVALID_DB_TYPE, INVALID_DB_SERVER_NAME, INVALID_USERNAME, INVALID_PASSWORD, INVALID_TRUST_ALL_ROOTS, INVALID_RESULT_SET_TYPE, INVALID_RESULT_SET_CONCURRENCY, INVALID_COMMAND, INVALID_TIMEOUT))); }
@Test public void testParseProperties() throws Exception { final String simpleFormatExample = getClass().getResource("reader/simple_format_example.txt").getFile(); final CsvSourceParser parser = CsvFile.createCsvSourceParser(simpleFormatExample); parser.parseMetadata(); final CsvSource source = parser.parseMetadata(); final Map<String,String> properties = source.getProperties(); assertNotNull(properties); assertEquals(5, properties.size()); assertEquals("POLYGON(0.0, 1.0, 1.1)", properties.get("geometry1")); assertEquals("POLYGON(2.0, 1.0, 1.1)", properties.get("geometry2")); assertEquals(",", properties.get("separator")); assertEquals("3", properties.get("sceneRasterWidth")); }
@Test(expected = RiceIllegalArgumentException.class) public void testNullPrincipalId() { mediator.getActionListCustomizations(null, Collections.<ActionItem>emptyList()); }
@Test public void testCheckMetadataWhenLocallyMissingEvenIfUpdatePolicyIsNever() { UpdateCheck<Metadata, MetadataTransferException> check = newMetadataCheck(); check.setPolicy( RepositoryPolicy.UPDATE_POLICY_NEVER ); session.setResolutionErrorPolicy( new SimpleResolutionErrorPolicy( true, false ) ); check.getFile().delete(); assertEquals( check.getFile().getAbsolutePath(), false, check.getFile().exists() ); manager.checkMetadata( session, check ); assertEquals( true, check.isRequired() ); }
@Test public void resolveComplexRecursively() { String result = StringResolver.substVars("blalblalab ${key1_${key2}}", properties); assertEquals("blalblalab value101", result); }
@Test public void testCommand_LD_L_mIYd() { final Z80State state = new Z80State(); state.IY = 0x25AF; this.memory[0x25C8] = (byte) 0xFE; final Z80 cpu = executeCommand(state, 0xFD, 0x6E, 0x19); assertFlagsNotChanged(state, cpu); assertEquals(0x00, cpu.getRegister(Z80.REG_H)); assertEquals(0xFE, cpu.getRegister(Z80.REG_L)); assertEquals(0x25AF, cpu.getRegister(Z80.REG_IY)); assertTacts(cpu, 19); }
@Test public void hasChanged() { final IDependencyObject<String> input = new StaticDependencyObject<>("Input"); final IDependencyObject<String> target = new TransformingDependencyObject<>(input, s -> s.replace("In", "Out"), s -> s.replace("Out", "In")); Assert.assertTrue(target.hasChanged(new DummyInjectionTarget())); Assert.assertEquals("Output", target.get(new DummyInjectionTarget())); Assert.assertFalse(target.hasChanged(new DummyInjectionTarget())); target.set(new DummyInjectionTarget(), "Test"); Assert.assertTrue(target.hasChanged(new DummyInjectionTarget())); Assert.assertEquals("Test", target.get(new DummyInjectionTarget())); Assert.assertFalse(target.hasChanged(new DummyInjectionTarget())); Assert.assertFalse(target.hasChanged(new DummyInjectionTarget())); target.set(new DummyInjectionTarget(), "Output"); Assert.assertTrue(target.hasChanged(new DummyInjectionTarget())); Assert.assertTrue(target.hasChanged(new DummyInjectionTarget())); Assert.assertEquals("Input", input.get(new DummyInjectionTarget())); Assert.assertEquals("Output", target.get(new DummyInjectionTarget())); Assert.assertFalse(target.hasChanged(new DummyInjectionTarget())); }
@Ignore("Remove to run test") @Test public void littleStraight() { Yacht yacht = new Yacht(new int[]{ 3, 5, 4, 1, 2 }, YachtCategory.LITTLE_STRAIGHT); assertEquals(30, yacht.score()); }
@Test(groups = "unit") public void newExecution() throws Exception { MDC.put(ThriftLogContext.TRACE_ID, "DEAD"); MDC.put(ThriftLogContext.SPAN_ID, "DEAE"); MDC.put(ThriftLogContext.PARENT_SPAN_ID, "DEAF"); ThriftLogContext.newExecution(); assertNotEquals(MDC.get(ThriftLogContext.TRACE_ID), "dead"); assertNotEquals(MDC.get(ThriftLogContext.SPAN_ID), "deae"); assertNotEquals(MDC.get(ThriftLogContext.PARENT_SPAN_ID), Optional.of("deaf")); }
@Test void IfFieldIsMarked_ShouldNotClearTheField() { Field field = new Field(0, 0); provider.addMarkedField(field, Mark.John); sut.onFieldUpdated(field); assertHasNotCleared(); }
@Test public void returnsNullForEmptyPayload() { List<Object> payloads = new ArrayList<>(); EpoxyModel<?> modelFromPayload = getModelFromPayload(payloads, 2); assertNull(modelFromPayload); }
@Test public void testFileType() throws IOException { String efile = path + "/image/ali.gif"; String hfile = path + "/image/tge.png"; assertEquals("文件类型判断有错", "gif", FileUtil.fileType(new File(efile))); assertEquals("文件类型判断有错", "png", FileUtil.fileType(new File(hfile))); assertEquals("获取文件的mime类型错误", "image/gif", FileUtil.mimeType(efile)); }
@Test public void createAssignmentObjectTest() throws IOException { Date date = new Date(); SegmentationProfile segmentationProfile = null; User.ID userID = User.ID.valueOf("test-user-1"); Context context = Context.valueOf("TEST"); boolean selectBucket = true; Experiment exp1 = Experiment.withID(Experiment.ID.valueOf(UUID.randomUUID())) .withApplicationName(Application.Name.valueOf("test-app-1")) .withLabel(Experiment.Label.valueOf("test-exp-1")) .withState(Experiment.State.RUNNING) .withIsPersonalizationEnabled(false) .build(); BucketList bucketList1 = new BucketList(); bucketList1.addBucket(Bucket.newInstance(exp1.getID(), Bucket.Label.valueOf("bucket-1")).withAllocationPercent(0.9d).withPayload("bucket1").withState(Bucket.State.OPEN).build()); bucketList1.addBucket(Bucket.newInstance(exp1.getID(), Bucket.Label.valueOf("bucket-2")).withAllocationPercent(0.1d).withPayload("bucket-2").withState(Bucket.State.OPEN).build()); when(assignmentDecorator.getBucketList(exp1, userID, segmentationProfile)).thenReturn(bucketList1); when(metadataCache.getExperimentById(exp1.getID())).thenReturn(Optional.of(exp1)); Assignment newAssignment = assignmentsImpl.createAssignmentObject(exp1, userID, context, selectBucket, bucketList1, date, segmentationProfile); assertTrue(newAssignment != null); assertTrue(newAssignment.getStatus().equals(Assignment.Status.NEW_ASSIGNMENT)); }
@Test public void test0() throws Exception { PullTimeDelayAlarmState state = new PullTimeDelayAlarmState(); AlarmResult result; AlarmContext context = new AlarmContext(); context.setNamespace("client"); context.setName("test"); ExponentialAlarmStrategy strategy = new ExponentialAlarmStrategy(); strategy.setMinExponentialAlarmIntervalInSecond(100); strategy.setMaxExponentialAlarmIntervalInSecond(200); state.setAlarm(true); when(clock.getTimestamp()).thenReturn(0L); result = filter.filter(context, state, strategy); assertTrue(result.isAlarm()); }
@Test(expectedExceptions = IllegalArgumentException.class) public void whenNullArgThenGetProjectFeatureFlagsShouldThrow() throws Exception { service.listProjectFeatureFlags(null); }
@Test public void testSetScriptsExecutableOnDirectory() throws Exception { File dir = this.folder.newFolder(); File f = new File( dir, "whatever" ); Assert.assertTrue( f.createNewFile()); Assert.assertFalse( f.canExecute()); ScriptUtils.setScriptsExecutable( dir ); Assert.assertTrue( f.canExecute()); }
@Test() public void testNotNullWithMessageSuccess() { Assert.notNull("Hi", "Failure!"); }
@Test public void submitDeclaration() throws Exception { UserResource user = newUserResource().build(); setLoggedInUser(user); String principalEmployer = "Big Name Corporation"; String role = "Financial Accountant"; String professionalAffiliations = "Professional affiliations..."; String hasAppointments = "true"; List<String[]> appointments = asList(new String[]{"Org 1", "Pos 1"}, new String[]{"Org 2", "Pos 2"}); String hasFinancialInterests = "true"; String financialInterests = "Other financial interests..."; String hasFamilyAffiliations = "true"; List<String[]> familyAffiliations = asList(new String[]{"Relation 1", "Org 1", "Pos 1"}, new String[]{"Relation 2", "Org 2", "Pos 2"}); String hasFamilyFinancialInterests = "true"; String familyFinancialInterests = "Other family financial interests..."; String accurateAccount = "true"; AffiliationResource expectedPrincipalEmployer = newAffiliationResource() .with(id(null)) .withAffiliationType(EMPLOYER) .withExists(TRUE) .withOrganisation(principalEmployer) .withPosition(role) .build(); AffiliationResource expectedProfessionalAffiliations = newAffiliationResource() .with(id(null)) .withAffiliationType(PROFESSIONAL) .withExists(TRUE) .withDescription(professionalAffiliations) .build(); List<AffiliationResource> expectedAppointments = appointments.stream().map(appointment -> newAffiliationResource() .with(id(null)) .withAffiliationType(PERSONAL) .withExists(TRUE) .withOrganisation(appointment[0]) .withPosition(appointment[1]) .build()).collect(toList()); AffiliationResource expectedFinancialInterests = newAffiliationResource() .with(id(null)) .withAffiliationType(PERSONAL_FINANCIAL) .withExists(TRUE) .withDescription(financialInterests) .build(); List<AffiliationResource> expectedFamilyAffiliations = familyAffiliations.stream().map(familyAffiliation -> newAffiliationResource() .with(id(null)) .withAffiliationType(FAMILY) .withExists(TRUE) .withRelation(familyAffiliation[0]) .withOrganisation(familyAffiliation[1]) .withPosition(familyAffiliation[2]) .build()).collect(toList()); AffiliationResource expectedFamilyFinancialInterests = newAffiliationResource() .with(id(null)) .withAffiliationType(FAMILY_FINANCIAL) .withExists(TRUE) .withDescription(familyFinancialInterests) .build(); when(affiliationRestService.updateUserAffiliations(user.getId(), new AffiliationListResource(combineLists( combineLists(expectedAppointments, expectedFamilyAffiliations ), expectedPrincipalEmployer, expectedProfessionalAffiliations, expectedFinancialInterests, expectedFamilyFinancialInterests)))).thenReturn(restSuccess()); mockMvc.perform(post("/profile/declaration/edit") .contentType(APPLICATION_FORM_URLENCODED) .param("principalEmployer", principalEmployer) .param("role", role) .param("professionalAffiliations", professionalAffiliations) .param("hasAppointments", hasAppointments) .param("appointments[0].organisation", appointments.get(0)[0]) .param("appointments[0].position", appointments.get(0)[1]) .param("appointments[1].organisation", appointments.get(1)[0]) .param("appointments[1].position", appointments.get(1)[1]) .param("hasFinancialInterests", hasFinancialInterests) .param("financialInterests", financialInterests) .param("hasFamilyAffiliations", hasFamilyAffiliations) .param("familyAffiliations[0].relation", familyAffiliations.get(0)[0]) .param("familyAffiliations[0].organisation", familyAffiliations.get(0)[1]) .param("familyAffiliations[0].position", familyAffiliations.get(0)[2]) .param("familyAffiliations[1].relation", familyAffiliations.get(1)[0]) .param("familyAffiliations[1].organisation", familyAffiliations.get(1)[1]) .param("familyAffiliations[1].position", familyAffiliations.get(1)[2]) .param("hasFamilyFinancialInterests", hasFamilyFinancialInterests) .param("familyFinancialInterests", familyFinancialInterests) .param("accurateAccount", accurateAccount)) .andExpect(status().is3xxRedirection()) .andExpect(redirectedUrl("/profile/declaration")); }
@Test public void testFormatForUrlEmpty() throws InvalidNameException { LdapName ldapName = new LdapName(""); String result = AbstractContextSource.formatForUrl(ldapName); assertThat(result).isEqualTo(""); }
@Test public void toStringReturnsAbsoluteFileName() { File file = new File(outputDirectory, "FileWithCorrespondingCustomAstClass.java"); CompiledJavaccFile compiledJavaccFile = new CompiledJavaccFile(file, outputDirectory, customAstClassesDirectory, targetDirectory, logger); String stringValue = compiledJavaccFile.toString(); assertEquals(file.getAbsolutePath(), stringValue); }
@Test public void testGetQualifiedName() throws Exception { String name = DatabaseObjectUtil.getQualifiedName(s -> "[" + s + "]", "aaa", "bbb", "ccc"); assertEquals("[aaa].[bbb].[ccc]", name); }
@Test public void executes() { Assert.assertEquals( "02be517550b9e3be7fe42c80932d51e88e698663b4926e598b269d050e87e34d8c", Hex.toHexString((byte[]) method.execute(new Object[]{ "xpub661MyMwAqRbcFMGNG2YcHvj3x63bAZN9U5cKikaiQ4zu2D1cvpnZYyXNR9nH62sGp4RR39Ui7SVQSq1PY4JbPuEuu5prVJJC3d5Pogft712", }))); }
@Test(expected = CandidateAlreadyRegisteredException.class) public void testDuplicateRegistration() throws CandidateAlreadyRegisteredException { final DOMEntityOwnershipCandidateRegistration reg = service.registerCandidate(FOO_FOO_ENTITY); assertNotNull(reg); service.registerCandidate(FOO_FOO_ENTITY); }
@Test public void testFindNearestEdge() { final Subdivision division = SubdivisionLinesTest.createSquareStar(false); assertEquals(division.edges().get(0), division.findNearestEdge(new PointD(-1.1, 0)).edge); assertEquals(division.edges().get(1), division.findNearestEdge(new PointD(-0.9, 0)).edge); assertEquals(division.edges().get(2), division.findNearestEdge(new PointD(0, 2.1)).edge); assertEquals(division.edges().get(3), division.findNearestEdge(new PointD(0, 1.9)).edge); assertEquals(division.edges().get(4), division.findNearestEdge(new PointD(0.9, 0)).edge); assertEquals(division.edges().get(5), division.findNearestEdge(new PointD(1.1, 0)).edge); assertEquals(division.edges().get(6), division.findNearestEdge(new PointD(0, -1.9)).edge); assertEquals(division.edges().get(7), division.findNearestEdge(new PointD(0, -2.1)).edge); assertEquals(division.edges().get(8), division.findNearestEdge(new PointD(-0.5, -1.1)).edge); assertEquals(division.edges().get(9), division.findNearestEdge(new PointD(-0.5, -0.9)).edge); assertEquals(division.edges().get(10), division.findNearestEdge(new PointD(-0.5, 0.9)).edge); assertEquals(division.edges().get(11), division.findNearestEdge(new PointD(-0.5, 1.1)).edge); assertEquals(division.edges().get(12), division.findNearestEdge(new PointD(0.5, 1.1)).edge); assertEquals(division.edges().get(13), division.findNearestEdge(new PointD(0.5, 0.9)).edge); assertEquals(division.edges().get(14), division.findNearestEdge(new PointD(0.5, -0.9)).edge); assertEquals(division.edges().get(15), division.findNearestEdge(new PointD(0.5, -1.1)).edge); }
@Test(expected = IllegalReferenceCountException.class) public void testGetLongLEAfterRelease() { releasedBuffer().getLongLE(0); }
@Test public void testCreateProductMergeWithExisting() { Owner owner1 = this.createOwner("test-owner-1", "Test Owner 1"); Owner owner2 = this.createOwner("test-owner-2", "Test Owner 2"); Product product1 = TestUtil.createProduct("p1", "prod1"); Product product2 = this.createProduct("p1", "prod1", owner2); ProductDTO pdto = this.modelTranslator.translate(product1, ProductDTO.class); Product output = this.productManager.createProduct(pdto, owner1); assertEquals(output.getUuid(), product2.getUuid()); assertEquals(output, product2); assertTrue(this.ownerProductCurator.isProductMappedToOwner(output, owner1)); assertTrue(this.ownerProductCurator.isProductMappedToOwner(output, owner2)); }
@Test public void testSetZero() { buffer.clear(); while (buffer.writable()) { buffer.writeByte((byte) 0xFF); } for (int i = 0; i < buffer.capacity();) { int length = Math.min(buffer.capacity() - i, random.nextInt(32)); buffer.setZero(i, length); i += length; } for (int i = 0; i < buffer.capacity(); i ++) { assertEquals(0, buffer.getByte(i)); } }
@Test public void testDisplayMessages() { messageList.add(Message.newError("code", "text")); selectBinding.displayMessages(messageList); @NonNull MessageList validationMessages = selectField.getValidationMessages(); assertThat(validationMessages, hasErrorMessage("code")); Message firstMessage = validationMessages.getFirstMessage(Severity.ERROR).get(); assertEquals(firstMessage.getText(), "text"); }
@Test public void callingOfWithNullValueThrowsRTE() { exceptions.expect(RuntimeException.class); Optional.of(null); }
@Test(expected = InvalidPreferenceScopeException.class) public void validateScopeWithInvalidTypeTest() { validator.validate(new PreferenceScopeImpl("invalidType", null, null)); }
@Test public void testNotify() { ProtocolBinding pb = new ProtocolBinding(null, null, Protocol.RESCRIPT); Set<ProtocolBinding> bindingSet = new HashSet<ProtocolBinding>(); bindingSet.add(pb); ProtocolBindingRegistry bindingReg = Mockito.mock(ProtocolBindingRegistry.class); when(bindingReg.getProtocolBindings()).thenReturn(bindingSet); JettyHttpTransport transport = new JettyHttpTransport(); transport.setProtocolBindingRegistry(bindingReg); transport.setCommandProcessorFactory(factory); assertTrue("Should be no entry in the handlerSpecMap", transport.getHandlerSpecificationMap().isEmpty()); transport.registerHandler(rescriptServiceBindingDescriptor); assertTrue("should be one entry in the handlerSpecMap", transport.getHandlerSpecificationMap().size() == 1); verify(commandProc).bind(eq(rescriptServiceBindingDescriptor)); }
@Test public void testDataGetterForURI() throws IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException { DataGetter dg = DataGetterUtils.dataGetterForURI(vreq, displayModel, testDataGetterURI_1); Assert.assertNotNull(dg); }
@Test public void testGetGeometryDatatype_RDFDatatype() { RDFDatatype rdfDatatype = WKTDatatype.INSTANCE; GeometryDatatype expResult = WKTDatatype.INSTANCE; GeometryDatatype result = GeometryDatatype.get(rdfDatatype); assertEquals(expResult, result); }
@Test public void testHashCode() { int colNum = schema.size(); LazyTuple t1 = new LazyTuple(schema, new byte[colNum][], -1); LazyTuple t2 = new LazyTuple(schema, new byte[colNum][], -1); t1.put(0, DatumFactory.createInt4(1)); t1.put(1, DatumFactory.createInt4(2)); t1.put(3, DatumFactory.createInt4(2)); t1.put(4, DatumFactory.createText("str")); t2.put(0, DatumFactory.createInt4(1)); t2.put(1, DatumFactory.createInt4(2)); t2.put(3, DatumFactory.createInt4(2)); t2.put(4, DatumFactory.createText("str")); assertEquals(t1.hashCode(), t2.hashCode()); Tuple t3 = new VTuple(colNum); t3.put(0, DatumFactory.createInt4(1)); t3.put(1, DatumFactory.createInt4(2)); t3.put(3, DatumFactory.createInt4(2)); t3.put(4, DatumFactory.createText("str")); assertEquals(t1.hashCode(), t3.hashCode()); assertEquals(t2.hashCode(), t3.hashCode()); Tuple t4 = new VTuple(5); t4.put(0, DatumFactory.createInt4(1)); t4.put(1, DatumFactory.createInt4(2)); t4.put(4, DatumFactory.createInt4(2)); assertNotSame(t1.hashCode(), t4.hashCode()); }
@Test public void testFlattenWithGroupingContext() throws Exception { JsonObjectFlattener flattener = new JsonObjectFlattenerImpl.Builder().flattenMode(FlattenMode.GROUPED).occurrenceInGroupDelimiter("#") .mapKeyValueNormalizer(noOpNormalizer).build(); JsonParser parser = new JsonParser(); JsonElement jsonElement = parser.parse(json); Multimap<String,String> fieldMap = flattener.flatten(jsonElement.getAsJsonObject()); Assert.assertEquals(27, fieldMap.keySet().size()); Assert.assertEquals(29, fieldMap.values().size()); Assert.assertEquals(1, fieldMap.get("date.rootobject#0.date#0").size()); Assert.assertEquals(1, fieldMap.get("date.rootobject#0.date#1").size()); Assert.assertEquals(1, fieldMap.get("date.rootobject#0.date#2").size()); Assert.assertEquals(1, fieldMap.get("name.rootobject#0.properties#0.array#0.name#0").size()); }
@Test public void testGetPrincipal_HandshakeRequest() { System.out.println("getPrincipal"); HandshakeRequest handshakeRequest = mock(HandshakeRequest.class); Principal principal = mock(Principal.class); when(principal.getName()).thenReturn("FOO"); when(handshakeRequest.getUserPrincipal()).thenReturn(null).thenReturn(principal); Principal result = instance.getPrincipal(handshakeRequest); assertThat(result).isNotNull(); assertThat(result.getName()).isEqualTo(Constants.ANONYMOUS); result = instance.getPrincipal(handshakeRequest); assertThat(result).isEqualTo(principal); assertThat(result.getName()).isEqualTo("FOO"); handshakeRequest = null; result = instance.getPrincipal(handshakeRequest); assertThat(result).isNotNull(); assertThat(result.getName()).isEqualTo(Constants.ANONYMOUS); }
@Test public void testAppendRow() { StructField field1 = DataTypes.createStructField("field1", DataTypes.StringType, true); StructField field2 = DataTypes.createStructField("field2", DataTypes.IntegerType, true); StructField field3 = DataTypes.createStructField("field3", DataTypes.FloatType, true); StructType baseSchema = DataTypes.createStructType(Lists.newArrayList(field1, field2, field3)); Row base = new RowWithSchema(baseSchema, "hello", 1, 1.0); StructField field4 = DataTypes.createStructField("field4", DataTypes.StringType, true); StructField field5 = DataTypes.createStructField("field5", DataTypes.IntegerType, true); StructField field6 = DataTypes.createStructField("field6", DataTypes.FloatType, true); StructType appendSchema = DataTypes.createStructType(Lists.newArrayList(field4, field5, field6)); Row append = new RowWithSchema(appendSchema, "world", -1, -1.0); Row appended = RowUtils.append(base, append); Row expected = new RowWithSchema( DataTypes.createStructType(Lists.newArrayList(field1, field2, field3, field4, field5, field6)), "hello", 1, 1.0, "world", -1, -1.0); assertEquals(expected, appended); }
@SuppressWarnings({ "rawtypes", "unchecked" }) @Test public void testNodeProcessing() { FilteredLineToTokenHashMap oper = new FilteredLineToTokenHashMap(); HashTestSink tokenSink = new HashTestSink(); oper.setSplitBy(";"); oper.setSplitTokenBy(","); oper.tokens.setSink(tokenSink); String[] filters = new String[2]; filters[0] = "a"; filters[1] = "c"; oper.setFilterBy(filters); oper.beginWindow(0); String input1 = "a,2,3;b,1,2;c,4,5,6"; String input2 = "d"; String input3 = ""; int numTuples = 1000; for (int i = 0; i < numTuples; i++) { oper.data.process(input1); oper.data.process(input2); oper.data.process(input3); } oper.endWindow(); Assert.assertEquals("number emitted tuples", 2, tokenSink.map.size()); HashMap<HashMap<String, ArrayList<String>>, Object> smap = tokenSink.map; for (Map.Entry<HashMap<String, ArrayList<String>>, Object> e : smap .entrySet()) { for (Map.Entry<String, ArrayList<String>> l : e.getKey().entrySet()) { String key = l.getKey(); ArrayList<String> list = l.getValue(); Assert.assertTrue(!key.equals("b")); Assert.assertTrue(!key.equals("d")); if (key.equals("a")) { Assert .assertEquals("number emitted values for \"a\"", 2, list.size()); Assert.assertEquals("first value for \"a\"", "2", list.get(0)); Assert.assertEquals("second value for \"a\"", "3", list.get(1)); } else if (key.equals("c")) { Assert .assertEquals("number emitted values for \"c\"", 3, list.size()); Assert.assertEquals("first value for \"c\"", "4", list.get(0)); Assert.assertEquals("second value for \"c\"", "5", list.get(1)); Assert.assertEquals("second value for \"c\"", "6", list.get(2)); } } } }
@Test public void testRemoveEntities_12() { try { StringReader reader = new StringReader("&"); StringWriter writer = new StringWriter(); XmlUtil.removeEntities(reader, writer); assertEquals("&", writer.toString()); } catch (Exception excep) { fail("Unhandled exception: " + excep.getMessage()); } }
@Test public void drawSeries_withPointLabelFormatter_drawsPointLabels() { LineAndPointFormatter formatter = new LineAndPointFormatter(0, 0, 0, null); formatter.setPointLabelFormatter(new PointLabelFormatter(Color.RED)); SimpleXYSeries series = new SimpleXYSeries( SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, "some data", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10); xyPlot.addSeries(series, formatter); LineAndPointRenderer renderer = xyPlot.getRenderer(LineAndPointRenderer.class); renderer.drawSeries(canvas, plotArea, series, formatter); verify(canvas, times(series.size())).drawText( anyString(), anyFloat(), anyFloat(), eq(formatter.getPointLabelFormatter().getTextPaint())); }
@Test public void geneInNetworkClosestHit() { GeneModelPhenotypeMatch bestModel = geneModelMatch(5, 0.7, "MONDO:5"); ArrayListMultimap<Integer, GeneModelPhenotypeMatch> bestGeneModels = ArrayListMultimap.create(); bestGeneModels.put(bestModel.getEntrezGeneId(), bestModel); HiPhiveProteinInteractionScorer instance = new HiPhiveProteinInteractionScorer(dataMatrix, bestGeneModels, HIGH_QUALITY_PHENO_SCORE_CUT_OFF); int queryGeneId = 6; GeneMatch closestPhenoMatchInNetwork = instance.getClosestPhenoMatchInNetwork(queryGeneId); assertThat(closestPhenoMatchInNetwork.getQueryGeneId(), equalTo(queryGeneId)); assertThat(closestPhenoMatchInNetwork.getMatchGeneId(), equalTo(bestModel.getEntrezGeneId())); assertThat(closestPhenoMatchInNetwork.getScore(), closeTo(0.57d, 0.001)); assertThat(closestPhenoMatchInNetwork.getBestMatchModels(), equalTo(ImmutableList.of(bestModel))); }
@Test public void shouldBeDerivedFromIfSubtypeMatchesPrimaryType() throws Exception { assertTrue(this.nodeTypeMgr.isDerivedFrom(SUBTYPES, SUBTYPE2, null)); assertTrue(this.nodeTypeMgr.isDerivedFrom(SUBTYPES, SUBTYPE2, MIXINS)); }
@Test public void testCustomizedPoolInitialization() throws Exception { final float memoryPercentage = 0.05f; final int processors = Runtime.getRuntime().availableProcessors(); final long maxMemory = Runtime.getRuntime().maxMemory(); PooledMemoryManager mm = new PooledMemoryManager(2048, 1, 0, processors, memoryPercentage, 1.0f, isDirect); final long memoryPerPool = (long) (maxMemory * memoryPercentage); final long upperBound = (long) (maxMemory * 0.0505f); PooledMemoryManager.Pool[] pools = mm.getPools(); assertEquals(1, pools.length); assertTrue(pools[0].size() + " >= " + memoryPerPool + " failed", pools[0].size() >= memoryPerPool); assertTrue(pools[0].size() + " <= " + upperBound + " failed", pools[0].size() <= upperBound); assertEquals(2048, pools[0].getBufferSize()); final float preallocatedPercentage = 0.25f; mm = new PooledMemoryManager(2048, 1, 0, processors, memoryPercentage, preallocatedPercentage, isDirect); pools = mm.getPools(); final PoolSlice slice0 = pools[0].getSlices()[0]; assertEquals((int) (slice0.getMaxElementsCount() * preallocatedPercentage), slice0.elementsCount()); }
@Test public void testValidation() throws JAXBException, SAXException, IOException { XmlNationalCalendar xcal1 = new XmlNationalCalendar(); xcal1.setName("calendar.test1"); XmlFixedDay fday = new XmlFixedDay(); fday.setMonth(Month.March); fday.setDay(21); XmlSpecialDayEvent sday = new XmlSpecialDayEvent(); sday.setDay(fday); xcal1.getSpecialDayEvent().add(sday); XmlNationalCalendar xcal2 = new XmlNationalCalendar(); xcal2.setName("calendar.test2"); xcal2.getSpecialDayEvent().add(sday); XmlChainedCalendar xchained = new XmlChainedCalendar(); xchained.setCalendarBreak(Day.toDay()); xchained.setStartCalendar(xcal1.getName()); xchained.setEndCalendar(xcal2.getName()); xchained.setName("calendar.chained"); XmlCompositeCalendar xcomposite = new XmlCompositeCalendar(); xcomposite.getWeightedCalendar().add(new XmlWeightedItem(xcal1.getName())); xcomposite.getWeightedCalendar().add(new XmlWeightedItem(xcal2.getName())); xcomposite.getWeightedCalendar().add(new XmlWeightedItem(xchained.getName())); xcomposite.setName("calendar.composite"); XmlCalendars xcals = new XmlCalendars(); xcals.getCalendars().add(xcal1); xcals.getCalendars().add(xcal2); xcals.getCalendars().add(xchained); xcals.getCalendars().add(xcomposite); JAXBContext jaxb = JAXBContext.newInstance(xcals.getClass()); JAXBSource source = new JAXBSource(jaxb, xcals); Validator validator = Schemas.Calendars.newValidator(); validator.validate(source); }
@Test public void checkEmpty() { assertNull(instance.resolveConverter("foo")); }
@Test public void testSetIsOpaqueCapable() throws Exception { ddPacket.setIsOpaqueCapable(true); assertThat(ddPacket.isOpaqueCapable(), is(true)); }
@Test public void test() { FocusManager focusManager = new FocusManagerImpl(); focusManager.focus(null); verify(attributes).put(FocusManager.FOCUS_CONTEXT_ATTRIBUTE, null); assertFalse(FocusRendererUtils.isFocusEnforced(facesContext)); verifyZeroInteractions(javaScriptService); }
@Test public void createClusterWithAutoscalingTest() throws IOException, InterruptedException { CreateClusterWithAutoscaling.createClusterwithAutoscaling( PROJECT_ID, REGION, CLUSTER_NAME, AUTOSCALING_POLICY_NAME); String output = bout.toString(); assertThat(output, CoreMatchers.containsString(CLUSTER_NAME)); }
@Test public void test220UserContainerReplace() throws Exception { final String TEST_NAME = "test220UserContainerReplace"; Task task = createTask(TEST_NAME); AssignmentType ass1 = new AssignmentType(prismContext); ass1.setActivation(new ActivationType(prismContext)); ass1.getActivation().setAdministrativeStatus(ActivationStatusType.DISABLED); ass1.getActivation().setValidFrom(XmlTypeConverter.createXMLGregorianCalendar(2010, 1, 1, 0, 0, 0)); ass1.setTargetRef(createObjectRef(ROLE_SUPERUSER_OID, ROLE)); ActivationType act1 = new ActivationType(prismContext); act1.setAdministrativeStatus(ActivationStatusType.DISABLED); ObjectDelta<?> delta = DeltaBuilder.deltaFor(UserType.class, prismContext) .item(UserType.F_NAME).replace("admin") .item(UserType.F_ACTIVATION).replace(act1) .item(UserType.F_ASSIGNMENT).replace(ass1) .asObjectDelta(USER_ADMINISTRATOR_OID); displayWhen(TEST_NAME); final Scene scene = visualizer.visualizeDelta((ObjectDelta<? extends ObjectType>) delta, task, task.getResult()); displayThen(TEST_NAME); display("scene", scene); }
@Test public void test_forwardFxRate() { FxRate computed = PRICER.forwardFxRate(FWD, PROVIDER); double df1 = PROVIDER.discountFactor(USD, PAYMENT_DATE); double df2 = PROVIDER.discountFactor(KRW, PAYMENT_DATE); double spot = PROVIDER.fxRate(USD, KRW); FxRate expected = FxRate.of(USD, KRW, spot * df1 / df2); assertThat(computed).isEqualTo(expected); }
@Test public void testOnePage() { final ArrayList<String> strings = Lists.newArrayList(); buildFirstPageOnly().iterable().forEach(strings::add); assertTrue(strings.size() == itemsOne.size()); assertEquals(lastItemFirstPage, strings.get(strings.size() - 1)); assertEquals(itemsOne, strings); assertFalse(StringCollection.twoCalled); assertFalse(StringCollection.threeCalled); }
@Test public void testSourceSubplan() { TestSource<String> source = new TestSource<>(DataSetType.createDefault(String.class)); final CardinalityEstimate sourceCardinality = new CardinalityEstimate(123, 321, 0.123d); source.setCardinalityEstimators((optimizationContext, inputEstimates) -> sourceCardinality); TestMapOperator<String, String> op = new TestMapOperator<>( DataSetType.createDefault(String.class), DataSetType.createDefault(String.class) ); source.connectTo(0, op, 0); Subplan subplan = (Subplan) Subplan.wrap(source, op); OptimizationContext optimizationContext = new DefaultOptimizationContext(this.job, subplan); final OptimizationContext.OperatorContext subplanCtx = optimizationContext.getOperatorContext(subplan); final CardinalityPusher pusher = SubplanCardinalityPusher.createFor(subplan, this.configuration); pusher.push(subplanCtx, this.configuration); Assert.assertEquals(sourceCardinality, subplanCtx.getOutputCardinality(0)); }
@Ignore @Test public void testTotalRecordCount() throws Exception { LOGGER.info("Size of ProcessType is:" + processTypeDAO.totalRecordCount(null)); }
@Test public void require_that_subquery_is_correct() { ConjunctionIdIterator iterator = new ConjunctionIdIterator(0b1111, new int[]{1}); assertEquals(0b1111, iterator.getSubqueryBitmap()); }
@Test public void testValidateContentTypes() { assertThat( isContentTypeCompatible(MediaType.TEXT_HTML_TYPE)).isFalse(); assertThat( isContentTypeCompatible( MediaType.APPLICATION_FORM_URLENCODED_TYPE)).isTrue(); assertThat( isContentTypeCompatible(MediaType.MULTIPART_FORM_DATA_TYPE)) .isFalse(); assertThat( isContentTypeCompatible(MediaType.APPLICATION_XML_TYPE)) .isTrue(); assertThat( isContentTypeCompatible(MediaType.APPLICATION_JSON_TYPE)) .isTrue(); assertThat( isContentTypeCompatible( MediaType.APPLICATION_OCTET_STREAM_TYPE)).isTrue(); assertThat( isContentTypeCompatible(MediaType.WILDCARD_TYPE)).isTrue(); MediaType zanataXmlType = new MediaType( "application", "vnd.zanata+xml"); assertThat(isContentTypeCompatible(zanataXmlType)).isTrue(); assertThat(isContentTypeCompatible( zanataXmlType.withCharset(LATIN_1))).isTrue(); MediaType zanataVersionXmlType = new MediaType( "application", "vnd.zanata.version+xml"); assertThat(isContentTypeCompatible(zanataVersionXmlType)).isTrue(); assertThat(isContentTypeCompatible( zanataVersionXmlType.withCharset(LATIN_1))).isTrue(); assertThat( isContentTypeCompatible(MediaType.TEXT_PLAIN_TYPE)).isTrue(); assertThat( isContentTypeCompatible(null)).isTrue(); }
@Test public void find() throws Exception { int page = 2; AvailableAssessorPageResource availableAssessorPageResource = newAvailableAssessorPageResource() .withContent(setUpAvailableAssessorResources()) .build(); when(reviewInviteRestService.getAvailableAssessors(competition.getId(), page)).thenReturn(restSuccess(availableAssessorPageResource)); when(reviewInviteRestService.getAvailableAssessorIds(competition.getId())).thenReturn(restSuccess(emptyList())); MvcResult result = mockMvc.perform(get("/assessment/panel/competition/{competitionId}/assessors/find", competition.getId()) .param("page", "2")) .andExpect(status().isOk()) .andExpect(model().attributeExists("model")) .andExpect(view().name("assessors/panel-find")) .andReturn(); ReviewSelectionForm selectionForm = (ReviewSelectionForm) result.getModelAndView().getModel().get("reviewSelectionForm"); assertTrue(selectionForm.getSelectedAssessorIds().isEmpty()); assertCompetitionDetails(competition, result); assertAvailableAssessors(availableAssessorPageResource.getContent(), result); InOrder inOrder = inOrder(competitionRestService, reviewInviteRestService, competitionKeyApplicationStatisticsRestService); inOrder.verify(reviewInviteRestService).getAvailableAssessorIds(competition.getId()); inOrder.verify(competitionRestService).getCompetitionById(competition.getId()); inOrder.verify(competitionKeyApplicationStatisticsRestService).getReviewInviteStatisticsByCompetition(competition.getId()); inOrder.verify(reviewInviteRestService).getAvailableAssessors(competition.getId(), page); inOrder.verifyNoMoreInteractions(); }
@Test public void testDescription() { FreeDBTAGWizardPlugin i = new FreeDBTAGWizardPlugin(); String desc = i.getDescription( Locale.ENGLISH ); Assert.assertTrue( desc.equals( FreeDBTAGWizardPlugin.DESCRIPTION ) ); }
@Test public void testRootPath() { assertThat(tagsProvider.httpRequestTags(event(200, null, "/", (String[]) null))) .containsExactlyInAnyOrder(tagsFrom("root", 200, null, "SUCCESS")); }
@Test public void negativeVolErrorvommaTest() { assertThatIllegalArgumentException() .isThrownBy(() -> BlackScholesFormulaRepository.vomma( SPOT, STRIKES_INPUT[1], TIME_TO_EXPIRY, -0.5, INTEREST_RATES[1], COST_OF_CARRY)); }
@Test public void testRangeClosedDoubleStep3() { Context context = BigFloat.context(20); List<BigFloat> list = BigFloatStream.rangeClosed(0.0, 12.0, 3.0, context) .collect(Collectors.toList()); assertEquals(5, list.size()); assertEquals(true, list.contains(context.valueOf(0))); assertEquals(true, list.contains(context.valueOf(3))); assertEquals(true, list.contains(context.valueOf(6))); assertEquals(true, list.contains(context.valueOf(9))); assertEquals(true, list.contains(context.valueOf(12))); }
@Test public void test_shouldUndeployIfLastEventIsUnpublishAPI() throws Exception { io.gravitee.repository.management.model.Api api = new RepositoryApiBuilder().id("api-test").updatedAt(new Date()).definition("test").build(); final io.gravitee.definition.model.Api mockApi = mockApi(api); final Event mockEvent = mockEvent(api, EventType.PUBLISH_API); final Event mockEvent2 = mockEvent(api, EventType.UNPUBLISH_API); when(eventRepository.search( any(EventCriteria.class), any(Pageable.class) )).thenReturn(new Page<>(singletonList(mockEvent), 0, 0, 1), new Page<>(singletonList(mockEvent2), 0, 0, 1)); when(apiRepository.search(null, new ApiFieldExclusionFilter.Builder().excludeDefinition().excludePicture().build())).thenReturn(singletonList(api)); syncManager.refresh(); when(eventRepository.search( any(EventCriteria.class) )).thenReturn(singletonList(mockEvent2)); syncManager.refresh(); verify(apiManager).deploy(new Api(mockApi)); verify(apiManager, never()).update(any(Api.class)); verify(apiManager).undeploy(mockApi.getId()); }
@Test void attributeWithoutPrefix() throws IOException { TemplateEngine templateEngine = templateEngine(); Template template = templateEngine.template("test-attribute.html").orElseThrow(RuntimeException::new); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); Map<String, Object> bindings = Maps.newHashMap(); bindings.put("class", "class"); template.output(bindings, outputStream); assertEquals("<!doctype html><html lang=\"en-US\"><head></head><body><div class=\"class some\"></div></body></html>", new String(outputStream.toByteArray(), Charsets.UTF_8)); }
@Test public void testConvertBlank() { Short result = underTest.convert(" "); assertNull(result); }
@Test(expected = IllegalArgumentException.class) public void testGetUrlNull() { Main.getUrlFromArgs(null); }
@Test void loadEntityThrowsStorageAccessExceptionWhenOntoDriverThrowsException() throws Exception { final String msg = "Exception message."; when(typesMock.getTypes(INDIVIDUAL, null, false)).thenThrow(new OntoDriverException(msg)); final StorageAccessException ex = assertThrows(StorageAccessException.class, () -> instanceLoader.loadEntity(loadingParameters)); assertThat(ex.getMessage(), containsString(msg)); }
@Test public void testApplicationTemplateBinding_5() throws Exception { ApplicationTemplate app = new ApplicationTemplate( "my application" ); app.setExternalExportsPrefix( "test" ); ObjectMapper mapper = JSonBindingUtils.createObjectMapper(); StringWriter writer = new StringWriter(); mapper.writeValue( writer, app ); String s = writer.toString(); ApplicationTemplate readApp = mapper.readValue( s, ApplicationTemplate.class ); Assert.assertEquals( app, readApp ); Assert.assertEquals( app.getName(), readApp.getName()); Assert.assertEquals( app.getDescription(), readApp.getDescription()); Assert.assertEquals( app.getVersion(), readApp.getVersion()); Assert.assertEquals( app.getExternalExportsPrefix(), readApp.getExternalExportsPrefix()); Assert.assertEquals( app.getTags(), readApp.getTags()); }
@Test public void testGetGenericClass() throws Exception { assertThat(ReflectUtils.getGenericClass(Foo1.class), sameInstance(String.class)); }
@Test public void should_convert_env() { LegacyEndpointConverter converter = LegacyEndpointConverters.env(); assertThat(converter.canConvert("env")).isTrue(); assertThat(converter.canConvert("foo")).isFalse(); Flux<DataBuffer> legacyInput = this.read("env-legacy.json"); Flux<Object> converted = converter.convert(legacyInput).transform(this::unmarshal); Flux<Object> expected = this.read("env-expected.json").transform(this::unmarshal); StepVerifier.create(Flux.zip(converted, expected)) .assertNext(t -> assertThat(t.getT1()).isEqualTo(t.getT2())) .verifyComplete(); }
@Test(expected = IOException.class) public void exceptionIsThrownOnUnexpectedEnd() throws IOException { when(request.getInputStream()).thenReturn(createInputStream("")); when(request.getHeader("Content-Length")).thenReturn("1"); handler.doHandleSimpleMultipartFileUpload(null, request, null, null, null, null, null); }
@Test(expected = TrailingWhitespaceIntegrityCheckerException.class) public void testTrailingWhitespaceCheckCatchesRemovedSpace() { String source = "There are %1 files and %2 folders "; String target = "Il y a %1 fichiers et %2 dossiers"; checker.check(source, target); }
@Test public void testGetApplications() throws Exception { Collection<ApplicationReport> apps = historyManager.getAllApplications().values(); Assert.assertNotNull(apps); Assert.assertEquals(SCALE + 1, apps.size()); ApplicationId ignoredAppId = ApplicationId.newInstance(0, SCALE + 2); for (ApplicationReport app : apps) { Assert.assertNotEquals(ignoredAppId, app.getApplicationId()); } }
@Test public void testInvokeOccurBusinessexception02() throws Throwable { BusinessException occurException = new BusinessException(ResultMessages .error().add("e.cm.xxx1", "args1", "args2")); when(mockMethodInvocation.proceed()).thenThrow(occurException); try { testTarget.invoke(mockMethodInvocation); fail("don't occur BusinessException."); } catch (BusinessException e) { assertThat(e, is(occurException)); verify(mockExceptionLogger, times(1)).warn(occurException); verify(mockExceptionLogger, times(1)).warn(any(Exception.class)); } }
@Test public void testInvalidTokenFails() { ClientBuffer buffer = new ClientBuffer(TASK_INSTANCE_ID, BUFFER_ID); addPage(buffer, createPage(0)); addPage(buffer, createPage(1)); buffer.getPages(1, sizeOfPages(10)).cancel(true); assertBufferInfo(buffer, 1, 1); assertInvalidSequenceId(buffer, -1); assertBufferInfo(buffer, 1, 1); assertInvalidSequenceId(buffer, 10); assertBufferInfo(buffer, 1, 1); }
@Test public void testParse_badInput() { try { MediaType.parse("/"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("te<t/plain"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/pl@in"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain;"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; "); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a="); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=@"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=\"@"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=1;"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=1; "); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=1; b"); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=1; b="); fail(); } catch (IllegalArgumentException expected) { } try { MediaType.parse("text/plain; a=\u2025"); fail(); } catch (IllegalArgumentException expected) { } }
@Test public void testPluginsWhenRejected() throws Exception { final HelloServiceImpl service1 = new HelloServiceImpl(); final ServiceRegistration<HelloServiceImpl> registration1 = osgiRule.registerService(HelloService.class, service1, props().with("microbule.server", "true")); final OsgiContainer container = new OsgiContainer(osgiRule.getBundleContext(), 100); final HelloServiceImpl defaultVal = new HelloServiceImpl(); final AtomicReference<HelloService> ref = container.pluginReference(HelloService.class, defaultVal); assertEquals(service1, ref.get()); final HelloServiceImpl service2 = new HelloServiceImpl(); final ServiceRegistration<HelloServiceImpl> registration2 = osgiRule.registerService(HelloService.class, service2, props().with("microbule.server", "true")); assertEquals(service1, ref.get()); registration2.unregister(); assertEquals(service1, ref.get()); registration1.unregister(); assertEquals(defaultVal, ref.get()); }
@Test public void testIdOnly() { ConstraintsBuilder<T> tc = Constraint.idOnly(T.class); ConstrainedAgEntity<T> result = tc.apply(entity); assertNotNull(result); assertTrue(result.getAttributes().isEmpty()); assertTrue(result.getChildren().isEmpty()); assertTrue(result.isIdIncluded()); }
@Test(expectedExceptions = InvalidPayloadException.class) public void testCreateResource_invalidRequest__noName() throws Exception { AtlasTypeSystem typeSystem = createStrictMock(AtlasTypeSystem.class); QueryFactory queryFactory = createStrictMock(QueryFactory.class); AtlasQuery query = createStrictMock(AtlasQuery.class); replay(typeSystem, queryFactory, query); Map<String, Object> requestProperties = new HashMap<>(); requestProperties.put("description", "description"); Request userRequest = new InstanceRequest(requestProperties); EntityTagResourceProvider provider = new EntityTagResourceProvider(typeSystem); provider.setQueryFactory(queryFactory); provider.createResource(userRequest); }
@Test(expected=Exception.class) public void testEnsureIndexAndTypeForAnnotationWithNoEsURL() throws Exception{ Annotation annotation = new Annotation(); annotation.put(PacmanSdkConstants.DATA_SOURCE_KEY, "test"); annotation.put(PacmanSdkConstants.TARGET_TYPE, "test"); annotation.put(PacmanSdkConstants.TYPE, "test"); PowerMockito.mockStatic(CommonUtils.class); PowerMockito.when(CommonUtils.isValidResource(anyString())).thenReturn(Boolean.TRUE); ESUtils.ensureIndexAndTypeForAnnotation(annotation, Boolean.FALSE); }
@Test public void Test1() { ArrayList<Integer> a = new ArrayList<>(Arrays.asList(1, 1, 0, 1, 1, 0, 0, 1, 1, 1)); int b = 1; ArrayList<Integer> actual = solution.maxone(a, b); ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(0, 1, 2, 3, 4)); assertEquals(expected, actual); }
@Test public void shouldThrowExceptionHeadingAboveUpperBound() { Integer testInput = 241; long testHeading = testInput; long testLatOffset = 0; long testLonOffset = 0; long testElevationOffset = 0; long testTimeOffset = 1; JsonNode testPathHistoryPoint = null; try { testPathHistoryPoint = (JsonNode) XmlUtils.fromXmlS("<PathHistor><latOffset>" + testLatOffset + "</latOffset><lonOffset>" + testLonOffset + "</lonOffset><elevationOffset>" + testElevationOffset + "</elevationOffset><timeOffset>" + testTimeOffset + "</timeOffset><heading>" + testHeading + "</heading></PathHistor>", JsonNode.class); } catch (XmlUtilsException e) { fail("XML parsing error:" + e); } try { PathHistoryPointBuilder .genericPathHistoryPoint(testPathHistoryPoint) .getHeading(); fail("Expected IllegalArgumentException"); } catch (RuntimeException e) { assertEquals(IllegalArgumentException.class, e.getClass()); } }
@Test public void testEncodeWithGroup() throws Exception { Group group1 = messageBuilder.newGroup(1002, 2); group1.add(1003, "g1-1"); group1.add(1004, "g1-2"); Group group2 = messageBuilder.newGroup(1002); group2.add(1003, "g2-1"); group2.add(1004, "g2-2"); encoder.encode(ctx, messageBuilder, out); verify(ctx).flush(); String expectedString = "8=FIX.4.2\u00019=136\u000135=0\u000149=SenderCompID\u000156=TargetCompID\u000134=2\u000152=19700102-10:17:36.789\u00011001=test2\u00011000=test1\u00011002=2\u00011003=g1-1\u00011004=g1-2\u00011003=g2-1\u00011004=g2-2\u000110=014\u0001"; assertResult(expectedString); }
@Test public void testTableColumnConfigurer() { final EventList<Color> source = GlazedLists.eventList(RGBNull); final TableFormat<Color> tableFormat = new ColorTableFormat(); final Table table = new Table(getShell(), SWT.CHECK); DefaultEventTableViewer<Color> viewer = new DefaultEventTableViewer<>(source, table, tableFormat); checkColorTableFormatColumns(table); viewer.dispose(); }
@Test public void exactResponseType() throws Exception { HandlerMethod handlerMethod = createHandlerMethod("processItem"); mockFieldComment(ProcessingResponse.class, "output", "An output"); new JacksonResponseFieldSnippet().responseBodyAsType(ProcessingResponse.class) .document(operationBuilder .attribute(HandlerMethod.class.getName(), handlerMethod) .attribute(ObjectMapper.class.getName(), mapper) .attribute(JavadocReader.class.getName(), javadocReader) .attribute(ConstraintReader.class.getName(), constraintReader) .build()); assertThat(this.generatedSnippets.snippet(AUTO_RESPONSE_FIELDS)).is( tableWithHeader("Path", "Type", "Optional", "Description") .row("output", "String", "true", "An output.")); }
@Test public void functionsFirebaseRtdb_shouldDefaultAdminToZero() { MockContext context = new MockContext(); context.resource = "resource_1"; new FirebaseRtdb().accept("", context); List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords(); Truth.assertThat(logs.get(0).getMessage()).isEqualTo( "Function triggered by change to: resource_1"); Truth.assertThat(logs.get(1).getMessage()).isEqualTo("Admin?: false"); }
@Test public void testMoveCanvasToWhenElementIsNotVerticallyVisible() { final int expectedDeltaX = 0; final int expectedDeltaY = -493; final Transform copy = mock(Transform.class); final Transform newTransform = mock(Transform.class); when(transform.copy()).thenReturn(copy); when(copy.translate(anyInt(), anyInt())).thenReturn(newTransform); highlightHelper.moveCanvasTo(x, y - visibleBoundsHeight); verify(copy).translate(expectedDeltaX, expectedDeltaY); verify(viewport).setTransform(newTransform); verify(defaultGridLayer).batch(); verify(gridPanel).refreshScrollPosition(); }
@Test public void testReportHistograms() throws Exception { elasticsearchReporter.reportMetrics( metricNameMap(Gauge.class), metricNameMap(Counter.class), metricNameMap(name("histogram").build(), histogram(400)), metricNameMap(Meter.class), metricNameMap(Timer.class)); assertEquals(objectMap("@timestamp", timestamp) .add("name", "histogram") .add("app", "test") .add("count", 1) .add("max", 200.0) .add("mean", 400.0) .add("p50", 600.0) .add("min", 400.0) .add("p25", 0.0) .add("p75", 700.0) .add("p95", 800.0) .add("p98", 900.0) .add("p99", 1000.0) .add("p999", 1100.0) .add("std", 500.0), asMap(out)); }
@Test public void apply() throws IOException { PathData item = mock(PathData.class); when(expr.apply(item)).thenReturn(Result.PASS).thenReturn(Result.FAIL); assertEquals(Result.PASS, test.apply(item)); assertEquals(Result.FAIL, test.apply(item)); verify(expr, times(2)).apply(item); verifyNoMoreInteractions(expr); }
@Test(expected = IllegalArgumentException.class) public void testInvalidVersion() { ArtifactSelectorConfig config = new ArtifactSelectorConfig(ArtifactScope.USER.name(), "abc", "abc"); PROVIDER.getPluginSelector(config); }
@Test(expected = ProtocolStateException.class) public void testOnJoinActionFromStart() throws Exception { engine.onJoinAction(txn, getDefaultSession(START)); }
@Test public void isTrashTest() { Folder folder; folder = new Folder(Folder.ROOT_FOLDER_ID); assertFalse(folder.isTrash()); folder = new Folder("a"); assertFalse(folder.isTrash()); folder = new Folder("a/b"); assertFalse(folder.isTrash()); folder = new Folder(Folder.TRASH_FOLDER_ID); assertTrue(folder.isTrash()); folder = new Folder(Folder.TRASH_FOLDER_ID + "/a"); assertTrue(folder.isTrash()); folder = new Folder(Folder.TRASH_FOLDER_ID + "/a/b"); assertTrue(folder.isTrash()); }
@Test public void newInstance() { CompositeGenotype<String, Genotype> composite = new CompositeGenotype<String, Genotype>(); composite.put("one", new IntegerGenotype(0, 2)); composite.put("two", new IntegerGenotype(0, 2)); CompositeGenotype<String, Genotype> composite2 = composite.newInstance(); Assert.assertEquals(0, composite2.size()); Assert.assertFalse(composite.equals(composite2)); }
@Test public void testSelectBodyPartIterator() throws Exception { try (BodyPartIterator input = new BodyPartIterator(generateByteArrayInput(false))) { SelectByPosition selector = new SelectByPosition(); MimeBodyPart part = selector.select(input); assertNotNull(part); selector = new SelectByPosition(15); assertNull(selector.select(input)); } }
@Test public void testFetchDataTypeKeysFromSingleValueString() { String data = "k:v;"; Set<String> expectedDataTypeKeys = Sets.newHashSet("k"); Set<String> dataTypeKeys = QueryOptions.fetchDataTypeKeys(data); assertEquals("Failed to parse single value option string", expectedDataTypeKeys, dataTypeKeys); }
@Test public void testToString() { HeroStat heroStatA = HeroStat.valueOf(3, 9, 2); HeroStat heroStatB = HeroStat.valueOf(3, 9, 2); HeroStat heroStatC = HeroStat.valueOf(3, 9, 8); assertThat(heroStatA.toString(), is(heroStatB.toString())); assertThat(heroStatA.toString(), is(not(heroStatC.toString()))); }
@Test public void shouldNotModifyAssignedView() { final ClientState clientState = new ClientState(1); final Set<TaskId> taskIds = clientState.assignedTasks(); assertThrows(UnsupportedOperationException.class, () -> taskIds.add(TASK_0_0)); assertThat(clientState, hasActiveTasks(0)); assertThat(clientState, hasStandbyTasks(0)); }
@Test void isEnabledFalseWhenReadableAndFieldNotInsertable() { NestedPost NestedPost = new NestedPost(metaResource, metaResourceField, relatedMetaResource); Assert.assertTrue(metaResource.isReadable()); metaResource.setInsertable(false); Assert.assertFalse(NestedPost.isEnabled()); }
@Test public void parseAndStripColorsFromMessage_reset() throws Exception { String testMessage = String.format( "%sTe%sst%s Message", IRC_BOLD, IRC_UNDERLINE, IRC_RESET_FORMATTING); Pair<String, List<FormatSpanInfo>> actual = parseAndStripColorsFromMessage(testMessage); assertThat(actual.first).isEqualTo("Test Message"); assertThat(actual.second).containsOnly( new FormatSpanInfo(0, 4, Format.BOLD), new FormatSpanInfo(2, 4, Format.UNDERLINED)); }
@Test public void testSupportsSetCharacterStream() { assertFalse( hive2DatabaseMeta.supportsSetCharacterStream() ); }
@Test public void test00() throws Exception { Main.main(getFileAsArgs("00")); assertEquals(getResult("true", "false", "false", "true"), this.output.toString()); }
@Test public void testCommand_LD_A_L() { final Z80State state = new Z80State(); state.A = 12; state.L = 15; final Z80 cpu = executeCommand(state, 0x7D); assertEquals(15, cpu.getRegister(Z80.REG_A)); assertEquals(15, cpu.getRegister(Z80.REG_L)); assertFlagsNotChanged(state, cpu); assertTacts(cpu, 4); }
@Test public void string_representation() { final RpslObject updatedObject = RpslObject.parse("mntner: DEV-ROOT-MNT\nsource: RIPE #Filtered\ninvalid: invalid\nmnt-by: MNT2"); when(update.getType()).thenReturn(ObjectType.MNTNER); when(update.getSubmittedObject()).thenReturn(updatedObject); final ObjectMessages objectMessages = new ObjectMessages(); objectMessages.addMessage(UpdateMessages.filteredNotAllowed()); objectMessages.addMessage(updatedObject.getAttributes().get(0), UpdateMessages.objectInUse(updatedObject)); objectMessages.addMessage(updatedObject.getAttributes().get(2), ValidationMessages.unknownAttribute("invalid")); objectMessages.addMessage(updatedObject.getAttributes().get(3), UpdateMessages.referencedObjectMissingAttribute(ObjectType.MNTNER, "MNT2", AttributeType.DESCR)); final UpdateResult subject = new UpdateResult(null, updatedObject, Action.MODIFY, UpdateStatus.FAILED, objectMessages, 0, false); final String string = subject.toString(); assertThat(string, is("" + "mntner: DEV-ROOT-MNT\n" + "***Error: Object [mntner] DEV-ROOT-MNT is referenced from other objects\n" + "source: RIPE #Filtered\n" + "invalid: invalid\n" + "***Error: \"invalid\" is not a known RPSL attribute\n" + "mnt-by: MNT2\n" + "***Warning: Referenced mntner object MNT2 is missing mandatory attribute\n" + " \"descr:\"\n" + "\n" + "***Error: Cannot submit filtered whois output for updates\n" + "\n")); }
@Test public void when_token_is_null_do_not_try_to_validate_it() throws Exception { String uri = HttpRequestHandler.ACCESS_TOKEN_VALIDATE_URI; HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri); AuthorizationServer auth = mock(AuthorizationServer.class); handler.auth = auth; HttpResponse response = handler.handleTokenValidate(req); verify(handler.auth, times(0)).isValidToken(anyString()); assertEquals(response.getStatus(), HttpResponseStatus.BAD_REQUEST); }
@Test public void testUnbalanced() throws Exception { String html = "<html><head><script src=\"1.js\"></script></head>" + "<body><p><embed></p></embed></body></html>"; String expected = "<html><head><script src=\"1.js\"></script></head>" + "<body><p><embed /></p>" + "</body></html>"; assertEquals(expected, serializer.serialize(parser.parseDom(html))); }
@Test public void testGetEventFieldsGROUPED() throws Exception { JsonIngestHelper ingestHelper = init(initConfig(FlattenMode.GROUPED)); RawRecordContainer event = new RawRecordContainerImpl(); event.setDate((new Date()).getTime()); event.setRawData(testRecord); event.generateId(null); Assert.assertNotNull(ingestHelper.getEmbeddedHelper()); Multimap<String,NormalizedContentInterface> fieldMap = ingestHelper.getEventFields(event); Assert.assertEquals(12, fieldMap.keySet().size()); Assert.assertEquals(16, fieldMap.values().size()); Assert.assertTrue(fieldMap.containsKey("NESTED")); Assert.assertFalse(fieldMap.containsKey("HEADER_DATE")); Assert.assertTrue(fieldMap.containsKey("HEADERDATE")); for (NormalizedContentInterface field : fieldMap.values()) { if (((NormalizedFieldAndValue) field).isGrouped()) { Assert.assertEquals("NESTED", field.getIndexedFieldName()); } else { Assert.assertFalse(((NormalizedFieldAndValue) field).isGrouped()); } } }
@Test public void testGetConfig() { assertTrue(new HBaseSailFactory().getConfig() instanceof HBaseSailConfig); }
@Test public void Config_CreateCustomDataType() throws Exception { ArgumentCaptor<ConfigCreateCustomDataTypeSingle> captor = ArgumentCaptor.forClass(ConfigCreateCustomDataTypeSingle.class); rxFit.config().createCustomDataType(dataTypeCreateRequest); rxFit.config().createCustomDataType(dataTypeCreateRequest, TIMEOUT_TIME, TIMEOUT_TIMEUNIT); PowerMockito.verifyStatic(times(2)); Single.create(captor.capture()); ConfigCreateCustomDataTypeSingle single = captor.getAllValues().get(0); assertEquals(dataTypeCreateRequest, single.dataTypeCreateRequest); assertNoTimeoutSet(single); single = captor.getAllValues().get(1); assertEquals(dataTypeCreateRequest, single.dataTypeCreateRequest); assertTimeoutSet(single); }
@Test public void testUpdateOrganisationUnits() { DataSet dsA = new DataSet( "dsA" ); OrganisationUnit ouA = new OrganisationUnit( "ouA" ); OrganisationUnit ouB = new OrganisationUnit( "ouB" ); OrganisationUnit ouC = new OrganisationUnit( "ouC" ); OrganisationUnit ouD = new OrganisationUnit( "ouD" ); dsA.addOrganisationUnit( ouA ); dsA.addOrganisationUnit( ouB ); assertEquals( 2, dsA.getSources().size() ); assertTrue( dsA.getSources().containsAll( Sets.newHashSet( ouA, ouB ) ) ); assertTrue( ouA.getDataSets().contains( dsA ) ); assertTrue( ouB.getDataSets().contains( dsA ) ); assertTrue( ouC.getDataSets().isEmpty() ); assertTrue( ouD.getDataSets().isEmpty() ); dsA.updateOrganisationUnits( Sets.newHashSet( ouB, ouC ) ); assertEquals( 2, dsA.getSources().size() ); assertTrue( dsA.getSources().containsAll( Sets.newHashSet( ouB, ouC ) ) ); assertTrue( ouA.getDataSets().isEmpty() ); assertTrue( ouB.getDataSets().contains( dsA ) ); assertTrue( ouC.getDataSets().contains( dsA ) ); assertTrue( ouD.getDataSets().isEmpty() ); }
@Test public void prepareObjectTypeTest_Equals() throws Exception { assertEquals( "2", SwitchCase.prepareObjectType( "2" ) ); }
@Test public void testComparator() { List<CrossVrfEdgeId> ordered = ImmutableList.of( new CrossVrfEdgeId("a", "a"), new CrossVrfEdgeId("a", "b"), new CrossVrfEdgeId("a", "c"), new CrossVrfEdgeId("b", "a")); for (int i = 0; i < ordered.size(); i++) { for (int j = 0; j < ordered.size(); j++) { assertThat( Integer.signum(ordered.get(i).compareTo(ordered.get(j))), equalTo(Integer.signum(i - j))); } } }
@Test public void testEqualsDifferentName() { final SubroutineDefinition other = new SubroutineDefinition(StringUtils.reverse(subroutineName), argumentNames); assertThat(definition).isNotEqualTo(other); assertThat(other).isNotEqualTo(definition); assertThat(definition.hashCode()).isNotEqualTo(other.hashCode()); }
@Test public void jodaSet() throws SQLException { ZonedDateTime value = ZonedDateTime.now(); Timestamp ts = Timestamp.from(value.toInstant()); PreparedStatement stmt = EasyMock.createNiceMock(PreparedStatement.class); stmt.setTimestamp(1, ts); EasyMock.replay(stmt); new DateTimeType().setValue(stmt, 1, toJoda(value)); EasyMock.verify(stmt); }
@Test public void testGetId() throws Exception { ConfigurationFolder folder = new ConfigurationFolder("id", "name", "path"); assertEquals(folder.getId(), "id"); }
@Test public void testEquals() { assertFalse(newRange("b", "d").equals(newRange("a", "d"))); assertFalse(newRange("a", "d").equals(newRange("b", "d"))); assertFalse(newRange("x", "y").equals(newRange("a", "d"))); assertFalse(newRange("a", "d").equals(newRange("x", "y"))); assertFalse(newRange("a", "z").equals(newRange("a", "d"))); assertFalse(newRange("a", "d").equals(newRange("a", "z"))); assertTrue(newRange("a", "z").equals(newRange("a", "z"))); }
@Test public void reportUsage_givenToSmall_givenOutOfOrder_thenIncreasesElements() throws Exception { int[] elements = {1, 2, 3, 4}; setElements(elements); test.reportUsage(new NonEmptyInterval(2, 1), 5); assertElements(3, 4, 1, 2, 0, 0, 0, 0, 0, 0); }
@Test public void testReadCompletion() { completeOperation(transactionProxy -> { NormalizedNode<?, ?> nodeToRead = ImmutableNodes.containerNode(TestModel.TEST_QNAME); doReturn(readDataReply(nodeToRead)).when(mockActorContext).executeOperationAsync( any(ActorSelection.class), eqReadData(), any(Timeout.class)); transactionProxy.read(TestModel.TEST_PATH); transactionProxy.read(TestModel.TEST_PATH); }); }
@Test public void toSupportedShouldReturnZeroWhenDateIsNull() throws Exception { final Long actual = underTest.toSupported(null); assertThat(actual) .isZero(); }
@Test public void formateDateTest() { Date date = new Date(2019 - 1900, 0, 1); Calendar calendar = Calendar.getInstance(); calendar.set(2019, 0, 1, 0, 0, 0); assertEquals("2019-01-01", Util.formateDate(calendar.getTime(), "yyyy-MM-dd")); assertEquals("2019-01-01 00:00:00", Util.formateDate(calendar.getTime())); assertEquals("2019-01-01", Util.formateDate(date, "yyyy-MM-dd")); assertEquals("2019-01-01 00:00:00", Util.formateDate(date)); }
@Test public void removeMs() { redisMsService.removeMs(tacMsDO.getCode()); TacMsDO ms = redisMsService.getMs(tacMsDO.getCode()); assertNull(ms); }
@Test public void importConsumerWithNullUuidOnOwnerShouldSetUuid() throws ImporterException { OwnerDTO ownerDTO = mock(OwnerDTO.class); Owner owner = mock(Owner.class); ConsumerDTO consumer = mock(ConsumerDTO.class); ConsumerTypeDTO type = mock(ConsumerTypeDTO.class); when(ownerDTO.getId()).thenReturn("test-owner-id"); when(consumer.getUuid()).thenReturn("test-uuid"); when(consumer.getOwner()).thenReturn(ownerDTO); when(consumer.getType()).thenReturn(type); IdentityCertificate idCert = new IdentityCertificate(); idCert.setSerial(new CertificateSerial()); importer.store(owner, consumer, new ConflictOverrides(), idCert); ArgumentCaptor<UpstreamConsumer> arg = ArgumentCaptor.forClass(UpstreamConsumer.class); verify(owner).setUpstreamConsumer(arg.capture()); assertEquals("test-uuid", arg.getValue().getUuid()); verify(curator).merge(owner); }
@Test public void canMapFromBooleanFalse() throws LdapException { final LdapMapper<SocialPerson> mapper = new LdapMapper<>(); final Entry existing = new DefaultEntry("uid=hendy,ou=users,dc=aksimata,dc=com"); existing.put("objectClass", "organizationalPerson", "extensibleObject", "inetOrgPerson", "uidObject"); existing.put("uid", "hendy"); existing.put("cn", "Hendy Irawan"); existing.put("newsletterSubscriptionEnabled", "FALSE"); log.info("Input Entry: {}", existing); final SocialPerson person = mapper.fromEntry(existing, SocialPerson.class); assertEquals(false, person.getNewsletterSubscriptionEnabled()); }
@Test public void testGetNext() throws Exception { Provider mockProvider = Mockito.mock(Provider.class); ProviderWrapper<Provider> wrapper = new ProviderWrapper<Provider>(mockProvider); assertSame(mockProvider, wrapper.getNext()); }
@Test public void testGetAzureEnvironment() { assertEquals(AzureEnvironment.AZURE, AzureAuthHelper.getAzureEnvironment(null)); assertEquals(AzureEnvironment.AZURE, AzureAuthHelper.getAzureEnvironment(" ")); assertEquals(AzureEnvironment.AZURE, AzureAuthHelper.getAzureEnvironment("azure")); assertEquals(AzureEnvironment.AZURE, AzureAuthHelper.getAzureEnvironment("aZUre")); assertEquals(AzureEnvironment.AZURE, AzureAuthHelper.getAzureEnvironment("AZURE_CLOUD")); assertEquals(AzureEnvironment.AZURE_GERMANY, AzureAuthHelper.getAzureEnvironment("AZURE_GERMANY")); assertEquals(AzureEnvironment.AZURE_GERMANY, AzureAuthHelper.getAzureEnvironment("AzureGermanCloud")); assertEquals(AzureEnvironment.AZURE_GERMANY, AzureAuthHelper.getAzureEnvironment("AZUREGERMANCLOUD")); assertEquals(AzureEnvironment.AZURE_US_GOVERNMENT, AzureAuthHelper.getAzureEnvironment("AZURE_US_GOVERNMENT")); assertEquals(AzureEnvironment.AZURE_US_GOVERNMENT, AzureAuthHelper.getAzureEnvironment("AZUREUSGOVERNMENT")); assertEquals(AzureEnvironment.AZURE_CHINA, AzureAuthHelper.getAzureEnvironment("AzureChinaCloud")); assertEquals(AzureEnvironment.AZURE_CHINA, AzureAuthHelper.getAzureEnvironment("Azure_China")); assertEquals(AzureEnvironment.AZURE, AzureAuthHelper.getAzureEnvironment("AzureChinaCloud ")); }
@Test public void noRetryOnSSLFailure() throws Exception { final HttpGet request = new HttpGet("/"); Assert.assertFalse(retryStrategy.retryRequest(request, new SSLException("encryption failed"), 1, null)); }
@Test public void testToString() { int[] bitsetColumns = {0, 3}; ColumnCombinationBitset columnCombination = new ColumnCombinationBitset(bitsetColumns); String expectedStringRepresentation = "1001"; assertTrue(columnCombination.toString().contains(expectedStringRepresentation)); }
@Test public final void validatePlatformCredentialCombinedWithChassisSerialNumbersMatchedChassis() throws Exception { DeviceInfoReport deviceInfoReport = buildReport( new HardwareInfo(DeviceInfoReport.NOT_SPECIFIED, DeviceInfoReport.NOT_SPECIFIED, DeviceInfoReport.NOT_SPECIFIED, DeviceInfoReport.NOT_SPECIFIED, "G6YK42300CB6", DeviceInfoReport.NOT_SPECIFIED)); byte[] certBytes = Files.readAllBytes(Paths.get(CertificateTest.class. getResource(TEST_PLATFORM_CRED_BASE_CHASIS_COMBO).toURI())); PlatformCredential pc = new PlatformCredential(certBytes); EndorsementCredential ec = PowerMockito.spy(new EndorsementCredential( Files.readAllBytes(Paths.get(getClass().getResource(EK_CERT).toURI())) )); PowerMockito.when(ec, "getSerialNumber").thenReturn(pc.getHolderSerialNumber()); AppraisalStatus result = supplyChainCredentialValidator.validatePlatformCredentialAttributes( pc, deviceInfoReport, ec); Assert.assertEquals(result.getAppStatus(), AppraisalStatus.Status.PASS); Assert.assertEquals(result.getMessage(), SupplyChainCredentialValidator.PLATFORM_ATTRIBUTES_VALID); }
@Test public void testFetchFeedIoException() throws Exception { BdfDictionary feedDict= new BdfDictionary(); BdfList feedList = BdfList.of(feedDict); expectGetFeeds(feedList); context.checking(new Expectations() {{ oneOf(noDnsLookups).lookup("example.org"); will(throwException(new UnknownHostException())); }}); expectStoreFeed(feedList); feedManager.fetchFeeds(); }
@Test(expected = UnsupportedOperationException.class) public void testUnsupportedFairSelectNextIndexOutOf2() { InputSelection.ALL.fairSelectNextIndexOutOf2(7, 0); }
@Test public void testValueOfStringIPv4() { Ip4Address ipAddress; ipAddress = Ip4Address.valueOf("1.2.3.4"); assertThat(ipAddress.toString(), is("1.2.3.4")); ipAddress = Ip4Address.valueOf("0.0.0.0"); assertThat(ipAddress.toString(), is("0.0.0.0")); ipAddress = Ip4Address.valueOf("255.255.255.255"); assertThat(ipAddress.toString(), is("255.255.255.255")); }
@Test public void testPlanWithPropertyRestrictionsEnabled() throws Exception { NodeBuilder builder = nodeState.builder(); builder.child("oak:index").child("solr") .setProperty("propertyRestrictions", true); nodeState = builder.getNodeState(); SelectorImpl selector = newSelector(nodeState, "a"); SolrQueryIndex solrQueryIndex = new SolrQueryIndex(null, null, null); FilterImpl filter = new FilterImpl(selector, "select * from [nt:base] as a where name = 'hello')", new QueryEngineSettings()); filter.restrictProperty("name", Operator.EQUAL, PropertyValues.newString("hello")); List<QueryIndex.OrderEntry> sortOrder = new LinkedList<QueryIndex.OrderEntry>(); List<QueryIndex.IndexPlan> plans = solrQueryIndex.getPlans(filter, sortOrder, nodeState); assertEquals(1, plans.size()); }
@Test public void shouldCreateDateFromCalendar() { Calendar value = Calendar.getInstance(); value.setTimeInMillis(10000); assertThat(factory.create(value), is(new ModeShapeDateTime(value))); }
@Test public void testAnnotation() throws Exception { Class<?> type = new ByteBuddy() .makeAnnotation() .make() .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER) .getLoaded(); assertThat(Modifier.isPublic(type.getModifiers()), is(true)); assertThat(type.isEnum(), is(false)); assertThat(type.isInterface(), is(true)); assertThat(type.isAnnotation(), is(true)); }
@Test public void testGetStreamNoRootStorageContainerStore() throws Exception { rangeStore.getRegistry().stopStorageContainer(scId).join(); String colName = "test-get-namespace-no-root-storage-container-store"; String streamName = colName; verifyNotFoundException(fromListenableFuture( rootRangeService.getStream(createGetStreamRequest(colName, streamName))), Status.NOT_FOUND); }
@Test public void testOperatorIn() throws IOException { String json = FileHelper.getStringFrom("tasks/operator-in.json"); SqlQueryResult result = builder.build(json); Assert.assertEquals("age IN(?, ?, ?)", result.getQuery()); Assert.assertEquals(1, result.getParams().get(0)); Assert.assertEquals(5, result.getParams().get(1)); Assert.assertEquals(10, result.getParams().get(2)); Assert.assertEquals("age IN(1, 5, 10)", result.getQuery(true)); }
@Test public void testThatYarnListLineAtBeginningIsIgnored() { final List<String> designedYarnLock = new ArrayList<>(); designedYarnLock.add("abab@5.5.2:"); designedYarnLock.add(" version \"5.5.2\""); designedYarnLock.add(""); final List<String> testLines = new ArrayList<>(); testLines.add("yarn list v1.5.1"); testLines.add("├─ abab@1.0.4"); final ExternalIdFactory externalIdFactory = new ExternalIdFactory(); final YarnLockParser yarnLockParser = new YarnLockParser(); final YarnListParser yarnListParser = new YarnListParser(externalIdFactory, yarnLockParser); final DependencyGraph dependencyGraph = yarnListParser.parseYarnList(designedYarnLock, testLines); final List<ExternalId> tempList = new ArrayList<>(dependencyGraph.getRootDependencyExternalIds()); assertNotNull(tempList.get(0)); assertEquals(1, tempList.size()); }
@Test public void testOrElse() { Versioned<String> vv = new Versioned<>("foo", 1); Versioned<String> nullVV = null; assertThat(Versioned.valueOrElse(vv, "bar"), is("foo")); assertThat(Versioned.valueOrElse(nullVV, "bar"), is("bar")); }
@Test void test1() { TreeNode root = new TreeNode(6); root.left = new TreeNode(2); root.right = new TreeNode(8); root.left.left = new TreeNode(0); root.left.right = new TreeNode(4); root.left.right.left = new TreeNode(3); root.left.right.right = new TreeNode(5); root.right.left = new TreeNode(7); root.right.right = new TreeNode(9); assertEquals(root, solution.lowestCommonAncestor(root, root.left, root.right)); }
@Test(expected = IllegalStateException.class) public void shouldThrowExceptionWhenNoRetriesLeft() { BrainslugContext context = brainslugContext(); AsyncTrigger asyncTriggerWithNoRetriesLeft = taskMock(0); new ExecuteTaskCallable(context, asyncTriggerWithNoRetriesLeft, asyncTriggerStore, asyncTriggerExecutor, retryStrategy).call(); }
@Test public void testHierarchicalFilteringWithoutParents() { HierarchicalContainer container = new HierarchicalContainer(); initializeContainer(container); container.setIncludeParentsWhenFiltering(false); container.addContainerFilter(SIMPLE_NAME, "ab", false, false); int expectedSize = 20; int expectedRoots = 20; validateHierarchicalContainer(container, "com.vaadin.data.BufferedValidatable", "com.vaadin.ui.TabSheet", "com.vaadin.terminal.gwt.client.ui.VTabsheetBase", "blah", true, expectedSize, expectedRoots, false); container.removeAllContainerFilters(); container.addContainerFilter(FULLY_QUALIFIED_NAME, ".gwt.client.", false, false); int packages = 3; int classes = 110; expectedSize = packages + classes; expectedRoots = 35 + 1; validateHierarchicalContainer(container, "com.vaadin.terminal.gwt.client.ApplicationConfiguration", "com.vaadin.terminal.gwt.client.WidgetSet", "com.vaadin.terminal.gwt.client.ui.VOptionGroup", "blah", true, expectedSize, expectedRoots, false); container.addContainerFilter(SIMPLE_NAME, "P", false, false); expectedSize = 13; expectedRoots = expectedSize; validateHierarchicalContainer(container, "com.vaadin.terminal.gwt.client.Paintable", "com.vaadin.terminal.gwt.client.ui.VTabsheetPanel", "com.vaadin.terminal.gwt.client.ui.VPopupCalendar", "blah", true, expectedSize, expectedRoots, false); }
@Test public void testGetBaseParam() { String parameter = "{\"type\":\"MYSQL_TO_HDFS\",\"reader\":{\"column\":[\"`id`\",\"`name`\",\"`email`\",\"`desc`\",\"`phone`\",\"`password`\",\"`role`\",\"`proxy_users`\",\"`create_time`\",\"`modify_time`\"],\"datasource\":\"test11111\",\"table\":[\"user\"]},\"writer\":{\"path\":\"/test/temp/here\",\"fileName\":\"filetest\",\"writeMode\":\"APPEND\",\"fileType\":\"ORC\",\"column\":[{\"name\":\"`id`\",\"type\":\"VARCHAR\"},{\"name\":\"`name`\",\"type\":\"VARCHAR\"},{\"name\":\"`email`\",\"type\":\"VARCHAR\"},{\"name\":\"`desc`\",\"type\":\"VARCHAR\"},{\"name\":\"`phone`\",\"type\":\"VARCHAR\"},{\"name\":\"`password`\",\"type\":\"VARCHAR\"},{\"name\":\"`role`\",\"type\":\"VARCHAR\"},{\"name\":\"`proxy_users`\",\"type\":\"VARCHAR\"},{\"name\":\"`create_time`\",\"type\":\"VARCHAR\"},{\"name\":\"`modify_time`\",\"type\":\"VARCHAR\"}]},\"setting\":{\"speed\":{\"channel\":1,\"byte\":104857600},\"errorLimit\":{\"record\":3,\"percentage\":0.05}}}"; String type = "IMPEXP"; ImpExpParam impExpParam = (ImpExpParam) BaseParamFactory.getBaseParam(type, parameter); assertTrue(impExpParam.checkValid()); }
@Test public void testIncomingRssMessage() throws DbException, FormatException { Transaction txn = new Transaction(null, false); BdfList body = BdfList.of("body"); BdfDictionary meta = BdfDictionary.of( new BdfEntry(KEY_TYPE, POST.getInt()), new BdfEntry(KEY_TIMESTAMP, timestamp), new BdfEntry(KEY_TIME_RECEIVED, timeReceived), new BdfEntry(KEY_AUTHOR, rssAuthorList), new BdfEntry(KEY_READ, false), new BdfEntry(KEY_RSS_FEED, true) ); context.checking(new Expectations() {{ oneOf(clientHelper).parseAndValidateAuthor(rssAuthorList); will(returnValue(rssLocalAuthor)); }}); blogManager.incomingMessage(txn, rssMessage, body, meta); context.assertIsSatisfied(); assertEquals(1, txn.getEvents().size()); assertTrue(txn.getEvents().get(0) instanceof BlogPostAddedEvent); BlogPostAddedEvent e = (BlogPostAddedEvent) txn.getEvents().get(0); assertEquals(rssBlog.getId(), e.getGroupId()); BlogPostHeader h = e.getHeader(); assertEquals(POST, h.getType()); assertTrue(h.isRssFeed()); assertEquals(timestamp, h.getTimestamp()); assertEquals(timeReceived, h.getTimeReceived()); assertEquals(rssMessageId, h.getId()); assertEquals(rssBlog.getId(), h.getGroupId()); assertNull(h.getParentId()); assertEquals(NONE, h.getAuthorStatus()); assertEquals(rssLocalAuthor, h.getAuthor()); }
@Test public void create_acquired() throws Exception { try (SessionMirror session = provider.create("testing")) { try { createAndClose("testing"); fail(); } catch (SessionException e) { assertThat(e.getSessionId(), is("testing")); assertThat(e.getReason(), is(Reason.ACQUIRED)); } } }
@Test public void testContainingGeometryIsContained() throws ParseException { Point ll = (Point) createGeometry("POINT (0 0)"); Point ur = (Point) createGeometry("POINT (10 10)"); BoundingBox bbox = new BoundingBox(ll, ur, "EPSG:4326"); Geometry overlappingPolygon = createGeometry("POLYGON ((0 1, 9 0, 3 3, 0 1))"); assertTrue(bbox.contains(overlappingPolygon), "geometry is not contained by bbox"); }
@Test public void testEventSubProcessConditionalStartEvent() { modelInstance = Bpmn.createProcess() .startEvent() .userTask() .endEvent() .subProcess() .triggerByEvent() .embeddedSubProcess() .startEvent(START_EVENT_ID) .conditionalEventDefinition(CONDITION_ID) .condition(TEST_CONDITION) .conditionalEventDefinitionDone() .endEvent() .done(); ConditionalEventDefinition eventDefinition = assertAndGetSingleEventDefinition(START_EVENT_ID, ConditionalEventDefinition.class); assertThat(eventDefinition.getId()).isEqualTo(CONDITION_ID); assertThat(eventDefinition.getCondition().getTextContent()).isEqualTo(TEST_CONDITION); }
@Test public void testMaximumAreaAddresses() throws Exception { isisHeader.setMaximumAreaAddresses((byte) 1); result2 = isisHeader.maximumAreaAddresses(); assertThat(result2, is((byte) 1)); }
@Test public void returnsEmptyExclusionsWithoutConfig() throws Exception { CustomFieldsAdapter adapter = new CustomFieldsAdapter(); assertThat(adapter.getExcludedFieldKeyNames(), is(empty())); }
@Test public void testShadow() { ZContext ctx = new ZContext(); Socket s = ctx.createSocket(ZMQ.PUB); assertTrue(s != null); assertEquals(1, ctx.getSockets().size()); ZContext shadowCtx = ZContext.shadow(ctx); shadowCtx.setMain(false); assertEquals(0, shadowCtx.getSockets().size()); @SuppressWarnings("unused") Socket s1 = shadowCtx.createSocket(ZMQ.SUB); assertEquals(1, shadowCtx.getSockets().size()); assertEquals(1, ctx.getSockets().size()); shadowCtx.destroy(); ctx.destroy(); }
@Test public void testRename() { Fields fields = new Fields( "a", "b", "c", "d" ); Fields from = new Fields( "a", "b" ); Fields to = new Fields( "A", "B" ); Fields renamed = fields.rename( from, to ); assertEquals( "not equal: ", 4, renamed.size() ); assertEquals( "not equal: ", "A", renamed.get( 0 ) ); assertEquals( "not equal: ", "B", renamed.get( 1 ) ); assertEquals( "not equal: ", "c", renamed.get( 2 ) ); assertEquals( "not equal: ", "d", renamed.get( 3 ) ); }
@Test public void executeAskQueryForwardsCallToWrappedConnector() throws Exception { final Query query = QueryFactory.create("ASK { ?x a <" + TYPE_ONE + "> . }"); final AbstractResultSet resultSet = connector.executeAskQuery(query, Statement.StatementOntology.CENTRAL); assertNotNull(resultSet); verify(wrappedConnector).executeAskQuery(query, Statement.StatementOntology.CENTRAL); }
@Test public void testBuild() throws Exception { this.task = new ExecTask(); TaskExecutor actual = this.factory.create(this.task); TaskExecutor expected = new ExecTaskExecutor(); Assert.assertEquals(expected.getClass(), actual.getClass()); }
@Test public void shouldFinalize() throws Exception { AnnualDistrictEstimateEntry districtEstimateEntry = make(a(AnnualDistrictEstimateBuilder.defaultAnnualDistrictEstimateEntry, with(AnnualDistrictEstimateBuilder.id, 3L), with(AnnualDistrictEstimateBuilder.isFinal, false))); EstimateForm form = getDemographicEstimateFormForOneDistrict(districtEstimateEntry); service.finalizeEstimate(form, 2L); verify(repository, never()).insert(districtEstimateEntry); verify(repository, times(1)).update(any(AnnualDistrictEstimateEntry.class)); verify(repository, times(1)).finalizeEstimate(any(AnnualDistrictEstimateEntry.class)); }
@Test public void shuldAddRelation() { context.setDocumentKey("key1"); Node parent = db.createNode(); parent.setProperty("type", "album"); Node child = db.createNode(); child.setProperty("type", "artist"); Relationship rel1 = this.docrel.buildRelation(parent, child, context); context.setDocumentKey("key2"); Relationship rel2 = this.docrel.buildRelation(parent, child, context); Assert.assertNotEquals(rel1.getId(), rel2.getId()); Assert.assertEquals("key1", rel1.getType().name()); Assert.assertEquals("key2", rel2.getType().name()); }
@Test public void testSetReadonlyFalse() { editor.setReadOnly(false); verify(view, times(1)).setReadOnly(false); }
@Test public void testCreateShortDynamicLink() { api.createShortDynamicLink(createDynamicLinkBundle()); verify(mockGoogleApi).doWrite(any(CreateShortDynamicLinkImpl.class)); }
@Test(expected = AssertionError.class) public void canBeCombinedWithFailingMatcher() { assertThat("not empty", both(isEmptyString()) .and(valid(new StreamSource(new File(TestResources.BOOK_XSD))))); }
@Test public void testMatchUdpDstMethod() { Criterion matchUdpDst = Criteria.matchUdpDst(tpPort1); UdpPortCriterion udpPortCriterion = checkAndConvert(matchUdpDst, Criterion.Type.UDP_DST, UdpPortCriterion.class); assertThat(udpPortCriterion.udpPort(), is(equalTo(tpPort1))); }
@Test public void disableCertChecking_PropertySet_TurnsOffCertChecking() { System.setProperty(DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, "anything"); assertTrue(SDKGlobalConfiguration.isCertCheckingDisabled()); }
@Test public void create_find_types() throws Exception { TypeScope ts = new TypeScope(); PrimitiveScope ps = new PrimitiveScope(); ts.add(new NamedType("a", ps.int16())); ts.add(new NamedType("d", ps.int32())); assertEquals(ps.int16(), ts.type("a")); assertEquals(ps.int32(), ts.type("d")); assertNull(ts.type("e")); }
@Test(expected = ReadOnlyBufferException.class) public void testSetInt() throws IOException { ByteBuf buf = newBuffer(wrappedBuffer(new byte[8])); try { buf.setInt(0, 1); } finally { buf.release(); } }
@Test public void should_fail_when_the_lock_cannot_be_constrained() throws SQLException { Statement constraintStatement = mock(Statement.class); when(connection.createStatement()).thenReturn(constraintStatement); ResultSet resultSet = mock(ResultSet.class); when(resultSet.next()).thenReturn(true, false); when(resultSet.getBoolean("result")).thenReturn(false); when(constraintStatement.executeQuery(anyString())).thenReturn(resultSet); when(constraintStatement.execute(anyString())).thenThrow(SQLException.class); assertThatThrownBy(() -> lock.acquire(connection)).isInstanceOf(LiquigraphLockException.class); }
@Test(expected = IllegalArgumentException.class) public void testShowMissingCommand() throws Exception { presenter.show(path, validator, null); }
@Test public void getMavenCommandWithMainServiceMavenCommandWithMainService() { String result = new RunApplication(Vertx.vertx(), config) .getMavenCommand(new DeployApplicationRequest("group", "artifact", "version", "classifier", "type") .withMainService("main_service")); assertThat(result, is("maven:group:artifact:version::main_service")); }
@Test public void class_shouldBe_DaleqSupport() { init(); final Class<?> clazz = bean.getObjectType(); final Class<?> expected = DaleqSupport.class; assertThat(clazz.equals(expected), is(true)); }
@Test public void getGadget() throws Exception { String xml = "<app xmlns='" + ApplicationManifest.NAMESPACE + "'>" + "<gadget>" + " <label>development</label>" + " <version>2.0</version>" + " <spec>app2.xml</spec>" + "</gadget>" + "<gadget>" + " <label>production</label>" + " <version>1.0</version>" + " <spec>app.xml</spec>" + "</gadget></app>"; ApplicationManifest manifest = new ApplicationManifest(BASE_URI, XmlUtil.parse(xml)); assertEquals(BASE_URI.resolve(Uri.parse("app.xml")), manifest.getGadget("1.0")); assertEquals(BASE_URI.resolve(Uri.parse("app2.xml")), manifest.getGadget("2.0")); }
@Test public void testOnRefreshMenusEvent() { menu.onRefreshMenusEvent(new RefreshMenusEvent()); verify(menu).initialise(); }
@Test public void test_update() { InstrumentVoucherEntity entity = getInstrumentVoucherEntity(); InstrumentVoucher expectedResult = entity.toDomain(); when(instrumentVoucherJdbcRepository.update(any(InstrumentVoucherEntity.class))).thenReturn(entity); InstrumentVoucher actualResult = instrumentVoucherRepository.update(getInstrumentVoucherDomin()); assertEquals(expectedResult.getVoucherHeaderId(), actualResult.getVoucherHeaderId()); assertEquals(expectedResult.getInstrument().getId(), actualResult.getInstrument().getId()); }
@Test public void testShouldBeComposite() { MountInfoProvider mip = Mounts.newBuilder() .mount("libs", true, Arrays.asList( "/oak:index/*$" ), Arrays.asList( "/apps", "/libs", "/jcr:system/rep:permissionStore/oak:mount-libs-crx.default") ) .build(); CompositionContext ctx = new CompositionContext(mip, null, Collections.emptyList(), CompositeNodeStoreMonitor.EMPTY_INSTANCE, CompositeNodeStoreMonitor.EMPTY_INSTANCE); assertTrue(ctx.shouldBeComposite("/")); assertTrue(ctx.shouldBeComposite("/oak:index")); assertTrue(ctx.shouldBeComposite("/oak:index/lucene")); assertTrue(ctx.shouldBeComposite("/jcr:system")); assertTrue(ctx.shouldBeComposite("/jcr:system/rep:permissionStore")); assertFalse(ctx.shouldBeComposite("/apps")); assertFalse(ctx.shouldBeComposite("/apps/acme")); assertFalse(ctx.shouldBeComposite("/libs")); assertFalse(ctx.shouldBeComposite("/libs/acme")); assertFalse(ctx.shouldBeComposite("/oak:index/lucene/:data")); assertFalse(ctx.shouldBeComposite("/oak:index/lucene/:oak:mount-libs-data")); assertFalse(ctx.shouldBeComposite("/jcr:system/rep:permissionStore/oak:mount-libs-crx.default")); assertFalse(ctx.shouldBeComposite("/jcr:system/rep:permissionStore/oak:mount-libs-crx.default/123")); assertFalse(ctx.shouldBeComposite("/jcr:system/rep:permissionStore/crx.default")); assertFalse(ctx.shouldBeComposite("/content")); assertFalse(ctx.shouldBeComposite("/jcr:system/rep:versionStorage")); }
@Test public void testAssetCreatedEvent() { underTest.on(assetCreatedEvent); ArgumentCaptor<ComposerHostedMetadataInvalidationEvent> captor = ArgumentCaptor .forClass(ComposerHostedMetadataInvalidationEvent.class); verify(eventManager).post(captor.capture()); ComposerHostedMetadataInvalidationEvent event = captor.getValue(); assertThat(event.getProject(), is(PROJECT)); assertThat(event.getVendor(), is(VENDOR)); assertThat(event.getRepositoryName(), is(REPOSITORY_NAME)); }
@Test public void strip() { TreeSet<String> files = new TreeSet<String>(); files.add("file1.file"); files.add("file2.file"); instance.setFiles(files); instance.setTags("test tag"); instance.strip(); assertEquals(0, instance.getFiles().size()); assertEquals(null, instance.getTags()); }
@Test(expected = InterruptedException.class) public void waitForLeaseWithoutALease() throws Exception { ThreadInterrupter.interruptIn(300L); leaseMaintainer.waitForLease(); }
@Test public void sendVenue() { Float lat = 21.999998f, lng = 105.2f; String title = "title", address = "addr", frsqrId = "asdfasdf", frsqrType = "frType"; Venue venue = bot.execute(new SendVenue(chatId, lat, lng, title, address) .foursquareId(frsqrId) .foursquareType(frsqrType) ).message().venue(); assertEquals(lat, venue.location().latitude()); assertEquals(lng, venue.location().longitude()); assertEquals(address, venue.address()); assertEquals(title, venue.title()); assertEquals(frsqrId, venue.foursquareId()); assertEquals(frsqrType, venue.foursquareType()); }
@Test public void testFillOutlineColorLayerProperty() { fillManager = new FillManager(mapView, mapboxMap, style, coreElementProvider, null, null, draggableAnnotationController); verify(fillLayer, times(0)).setProperties(argThat(new PropertyValueMatcher(fillOutlineColor(get("fill-outline-color"))))); List<LatLng>innerLatLngs = new ArrayList<>(); innerLatLngs.add(new LatLng()); innerLatLngs.add(new LatLng(1,1)); innerLatLngs.add(new LatLng(-1,-1)); List<List<LatLng>>latLngs = new ArrayList<>(); latLngs.add(innerLatLngs); FillOptions options = new FillOptions().withLatLngs(latLngs).withFillOutlineColor("rgba(0, 0, 0, 1)"); fillManager.create(options); verify(fillLayer, times(1)).setProperties(argThat(new PropertyValueMatcher(fillOutlineColor(get("fill-outline-color"))))); fillManager.create(options); verify(fillLayer, times(1)).setProperties(argThat(new PropertyValueMatcher(fillOutlineColor(get("fill-outline-color"))))); }
@Test public void parseServerIpAndPort_propertiesOverrideServiceName() throws SQLException { setupAndReturnPropertiesForHost("1.2.3.4").setProperty("zipkinServiceName", "foo"); TracingQueryInterceptor.parseServerIpAndPort(connection, span); verify(span).remoteServiceName("foo"); verify(span).remoteIpAndPort("1.2.3.4", 5555); }
@Test(dataProvider = "getHavingOrderByDataFail") public void testHavingOrderByQueryTestFail(String isHavingSupported, String isOrderBySupported) { conf.set(JDBCDriverConfConstants.JDBC_IS_HAVING_SUPPORTED, isHavingSupported); conf.set(JDBCDriverConfConstants.JDBC_IS_ORDERBY_SUPPORTED, isOrderBySupported); String query = "select a,sum(b) from tabl1 where a<=10 group by a having sum(b) > 10 order by a desc limit 10"; SessionState.start(hconf); try { qtest.rewrite(query, conf, hconf); Assert.fail("The invalid query did NOT suffer any exception"); } catch (LensException e) { System.out.println("Exception as expected in Having/Orderby query.."); } }
@Test public void testCompressorFactory() { CompressorFactory factory = CompressorFactory.getInstance(); Assert.assertNotNull(factory); }
@Test public void testResourceAsXml() throws Exception { String text = item1resource().accept("application/xml").get(String.class); System.out.println("Item XML is: " + text); Book response = item1resource().accept("application/xml").get(Book.class); assertNotNull("Should have returned an item!", response); assertEquals("item title", "Svejk", response.getTitle()); }
@Test void testFirstTimeInitWihtClientIdAndSecret() { this.playerLogic.firstTimeInit(ID2, ID2); verify(this.spotifyAPICalls).setClientID(ID2); verify(this.spotifyAPICalls).setClientSecret(ID2); verify(this.spotifyAPICalls).authorizationCodeUri(); }
@Test void testJdbcValues() throws Exception { CalciteAssert.that() .with(CalciteAssert.SchemaSpec.JDBC_SCOTT) .doWithConnection(connection -> { try { final FrameworkConfig config = Frameworks.newConfigBuilder() .defaultSchema(connection.getRootSchema()) .build(); final RelBuilder builder = RelBuilder.create(config); final RelRunner runner = connection.unwrap(RelRunner.class); final RelNode values = builder.values(new String[]{"a", "b"}, "X", 1, "Y", 2) .project(builder.field("a")) .build(); if (false) { runner.prepare(values).executeQuery(); } final RelNode scan = builder.scan("JDBC_SCOTT", "EMP").build(); runner.prepare(scan).executeQuery(); builder.clear(); RelRunner runner2 = connection.unwrap(RelRunner.class); runner2.prepare(values).executeQuery(); } catch (Exception e) { throw TestUtil.rethrow(e); } }); }
@Test public void testGetProjectType() throws Exception { Assert.assertEquals(MavenAttributes.MAVEN_ID, mavenProjectGenerator.getProjectType()); }
@Test public void testExecutionRuntimeException() throws Exception { final HttpClientConnection conn = Mockito.mock(HttpClientConnection.class); final HttpRequestExecutor executor = new HttpRequestExecutor(); final HttpCoreContext context = HttpCoreContext.create(); final ClassicHttpRequest request = new BasicClassicHttpRequest(Method.GET, "/"); Mockito.doThrow(new RuntimeException("Oopsie")).when(conn).receiveResponseHeader(); try { executor.execute(request, conn, context); Assert.fail("IOException should have been thrown"); } catch (final RuntimeException ex) { Mockito.verify(conn).close(); } }
@Test public void shouldReturnFalseWhenGivenSignatureMoreThanFive() throws Exception { String signaturesFalse = "abcdef"; assertFalse(signatureDialog.checkSignature(signaturesFalse)); }
@Test public final void testBuildUpgradePostCheckPayload() { String expectedPayload = "{" + "\"ipaddress-v4-oam\":\"192.168.1.10\"," + "\"playbook-name\":\"postcheck_playbook\"," + "\"oldSwVersion\":\"v1\"," + "\"targetSwVersion\":\"v2\"," + "\"ruleName\":\"r102\"," + "\"additionalData\":\"{}\"" + "}"; UpgradePostCheckPayload upgradePostCheckPayload = SDNCLcmPayloadBuilder.buildUpgradePostCheckPayload(execution); try { String payload = SDNCLcmPayloadBuilder.convertToSting(upgradePostCheckPayload); logger.debug("UpgradePostCheckPayload:\n" + payload); assertEquals(expectedPayload, payload); } catch (JsonProcessingException e) { fail("Convert UpgradePostCheckPayload to String error: " + e.toString()); } }
@Test public void testParseBooleanLiteralComma() throws IOException { String data = "<urn:a> <urn:b> true, false ."; Reader r = new StringReader(data); try { parser.parse(r, baseURI); assertTrue(statementCollector.getStatements().size() == 2); } catch (RDFParseException e) { fail("parse error on correct data: " + e.getMessage()); } }
@Test public void testCopyNullFlavorsWhenPRPAIN201306UV02Empty() { HL7ArrayTransforms trans = new HL7ArrayTransforms(); PRPAIN201301UV02 returnedToRequest = trans.copyNullFlavors(createPRPAIN201306UV02Empty(), createPRPAIN201301UV02()); assertEquals(returnedToRequest.getNullFlavor().get(0), "NA201301"); }
@Test public void shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier() { assertThat(functionAsSupplier(mockFunction, ITEM), gives(RETURN_ITEM)); }
@Test public void testValidateUserTypeWithMissingUserTypeParam() { Map<String, Object> userMap = new HashMap<>(); try { userMap.put(JsonKey.USER_TYPE, "invalid"); UserBulkUploadRequestValidator.validateUserBulkUploadRequest(userMap); } catch (Exception e) { Assert.assertEquals( "Invalid userType: invalid. Valid values are: [TEACHER, OTHER].", e.getMessage()); } }
@Test public void singletonMultipleOriginalsThrows() { thrown.expect(IllegalArgumentException.class); ReplacementOutputs.singleton( ImmutableList.copyOf(Iterables.concat(ints.expand(), moreInts.expand())), replacementInts); }
@Test public void testDistance() { Vector x, y; x = new DoubleArrayDataRow(new double[]{1, 5, 2, 3, 10}); y = new DoubleArrayDataRow(new double[]{4, 15, 20, 5, 5}); double dist = subject.measure(x, y); assertEquals(0.40629405295727883, dist, DELTA); }
@Test public void testConstant() { for (int i = 0; i < 100; i++) { percentiles.record(10); } checkPercentiles(percentiles, 10, 10, 10, 10, 10, 10, 10, 10); checkValuesAreFlushed(percentiles); }
@Test public void chat() { GameChatMessageReport result = (GameChatMessageReport) instance.transform(ImmutableMap.of( KEY_COMMAND, "Chat", KEY_ARGS, Collections.singletonList("Message") )); assertThat(result.getMessage(), is("Message")); }
@Test void testInterleaved2ComplexFloatIllegalIndex3Dmin() { Assertions.assertThrows(IllegalArgumentException.class, () -> ComplexUtils.interleaved2Complex(fi3d0, -1) ); }
@Test public void testDropTables() throws Exception { final Statement statement = Mockito.mock(Statement.class); Mockito.when(statement.execute(Mockito.anyString())).then(invocation -> { final String sql = (String) invocation.getArguments()[0]; if (sql.startsWith("DROP TABLE IF EXISTS `invalid`")) { throw new SQLException(); } return true; }); final Connection connection = Mockito.mock(Connection.class); Mockito.when(connection.createStatement()).thenReturn(statement); TableRegisterSupport support = new TableRegisterSupport(connection); Assert.assertTrue(support.dropTables("cat", "feed", EnumSet.of(TableType.MASTER, TableType.VALID, TableType.INVALID), ImmutableSet.of("backup.feed"))); Mockito.verify(statement).execute("DROP TABLE IF EXISTS `cat`.`feed`"); Mockito.verify(statement).execute("DROP TABLE IF EXISTS `cat`.`feed_valid`"); Mockito.verify(statement).execute("DROP TABLE IF EXISTS `cat`.`feed_invalid`"); Mockito.verify(statement).execute("DROP TABLE IF EXISTS backup.feed"); Assert.assertFalse(support.dropTables("invalid", "feed", EnumSet.allOf(TableType.class), ImmutableSet.of())); Assert.assertFalse(support.dropTables("cat", "feed", ImmutableSet.of(), ImmutableSet.of("`invalid`"))); }
@Test public void testIsValidTrueCases() { assertTrue(isValid(1, "00")); assertTrue(isValid(1, "40")); assertTrue(isValid(1, "FF")); assertTrue(isValid(2, "4000")); assertTrue(isValid(2, "4040")); assertTrue(isValid(2, "40FF")); }
@Test public void testEnableDrag_Pinned_DifferentModeller() { builder.onDecisionTablePinnedEvent(new DecisionTablePinnedEvent(mock(GuidedDecisionTableModellerView.Presenter.class), true)); verify(view, never()).enableDrag(any(Boolean.class)); }
@Test public void testCompare4() { Tuple aTuple = new Tuple( "Just My Luck", "ClaudiaPuig", null, "LisaRose", null ); Tuple bTuple = new Tuple( "Just My Luck", "ClaudiaPuig", null, "LisaRose", null ); assertEquals( "not equal: aTuple", bTuple, aTuple ); assertTrue( "not equal than: aTuple = bTuple", aTuple.compareTo( bTuple ) == 0 ); bTuple = new Tuple( "Just My Luck", "ClaudiaPuig", null, "Z", null ); assertTrue( "not less than: aTuple < bTuple", aTuple.compareTo( bTuple ) == "LisaRose".compareTo( "Z" ) ); assertTrue( "not less than: bTuple > aTuple", bTuple.compareTo( aTuple ) == "Z".compareTo( "LisaRose" ) ); }
@Test public void testValidateUserSucceedWithoutPrefix() { UserManagerResolver umr = new UserManagerResolver(); umr.configure(new HashMap<>()); assertTrue(umr.validate("Administrator")); }
@Test void testDistributor() { String topicNamesTopic = "topic_names"; String outputTopic = "output_topic"; TopologyContext<String, TestCommand, TestEvent, Optional<TestAggregate>> ctx = ctxBuilder.buildContext(); driver = new TestDriverInitializer().build(builder -> { EventSourcedTopology.InputStreams<String, TestCommand> inputStreams = EventSourcedTopology.addTopology(ctx, builder); DistributorContext<CommandId, CommandResponse<String>> context = new DistributorContext<>( topicNamesTopic, new DistributorSerdes<>(ctx.serdes().commandId(), ctx.serdes().commandResponse()), ctx.aggregateSpec().generation().stateStoreSpec(), CommandResponse::commandId, CommandId::id); KStream<CommandId, String> topicNames = builder.stream(topicNamesTopic, Consumed.with(ctx.serdes().commandId(), Serdes.String())); ResultDistributor.distribute(context, inputStreams.commandResponse, topicNames); }); TestContextDriver<String, TestCommand, TestEvent, Optional<TestAggregate>> ctxDriver = new TestContextDriver<>(ctx, driver); CommandRequest<String, TestCommand> commandRequest = CommandRequest.of( CommandId.random(), key, Sequence.first(), new TestCommand.CreateCommand("Name 2")); ctxDriver.getPublisher(ctx.serdes().commandId(), Serdes.String()) .publish(topicNamesTopic, commandRequest.commandId(), outputTopic); ctxDriver.publishCommand( key, commandRequest); ProducerRecord<String, CommandResponse<String>> output = driver.readOutput(outputTopic, Serdes.String().deserializer(), ctx.serdes().commandResponse().deserializer()); assertThat(output.key()).isEqualTo(String.format("%s:%s", outputTopic, commandRequest.commandId().id().toString())); assertThat(output.value().sequenceResult().isSuccess()).isEqualTo(true); }
@Test public void testSetThrottleValue() { final String profileId = "abc"; ProfileInstanceManager profileInstanceManager = mock(ProfileInstanceManager.class); ProfileInstance profileInstance = mock(ProfileInstance.class); when(profileInstance.getUuid()).thenReturn(profileId); when(profileContextLocator.getProfileInstance(profileId)).thenReturn(profileInstance); when(profileContextLocator.openProfileInstanceManager(profileInstance)).thenReturn(profileInstanceManager); profileManager.setThrottleValue(profileId, 12345); verify(profileInstanceManager).setThrottleValue(12345); }
@Test public void testStruct() throws Exception { Object[] constantArgs = new Object[] { null }; DataType[] dataTypes = new DataType[] { DataTypes.ARRAY( DataTypes.ROW( DataTypes.FIELD("1", DataTypes.INT()), DataTypes.FIELD("2", DataTypes.DOUBLE()) ) ) }; HiveGenericUDTF udf = init( GenericUDTFInline.class, constantArgs, dataTypes ); udf.eval( new Row[]{ Row.of(1, 2.2d), Row.of(3, 4.4d) } ); assertEquals(Arrays.asList(Row.of(1, 2.2), Row.of(3, 4.4)), collector.result); }
@Test public void testWorkflowWithTrivialJoin() { final Node a = MapReduceActionBuilder.create().withName("A").build(); final Node b = MapReduceActionBuilder.create().withName("B").withParent(a).build(); final Node c = MapReduceActionBuilder.create().withName("C").withParent(a).build(); MapReduceActionBuilder.create().withName("D").withParent(b).withParent(c).build(); final Workflow workflow = new WorkflowBuilder().withName("trivial-join").withDagContainingNode(a).build(); final Graph graph = new Graph(workflow); checkDependencies(workflow.getNodes(), graph); }
@Test public void testDanglingSectionTemplate() { String template = EMPTY_STRING + "{{name}} passed the following courses:" + NEW_LINE + "{{#course}}" + NEW_LINE + "\t* {{name}}" + NEW_LINE + "{{text}}"; assertThatThrownBy(() -> processor.preProcess(template)) .isInstanceOf(TemplateProcessingException.class) .hasMessageContaining("section has not been closed"); }
@Test public void shouldReturnTrueIfNewFPMethodOfTheECIsCentchroman() { boolean didRuleSucceed = rule.apply(new SafeMap(mapOf("currentMethod", "centchroman"))); assertTrue(didRuleSucceed); }
@Test(expected = IllegalStateException.class) public void testUnknownRedefinitionFunction() { buggedDefinition.redef("unknown", (start) -> new EpsilonParser()); }
@Test(expected = UnsupportedOperationException.class) public void testAggregateWithNullIntegerDistribution() { counterUpdates.get(0).setDistribution(null); aggregator.aggregate(counterUpdates); }
@Test public void patchBuilder() { List<PatchOperation> operations = HiveStatusPatchBuilder .patchBuilder() .set(AgentProperty.TRUCK_PARK_STATE, "bar") .build(); assertThat(operations.size(), is(1)); PatchOperation operation = operations.get(0); assertThat(operation.getOperation(), is(Operation.REPLACE)); assertThat(operation.getPath(), is("/destinations/hive/status/truckParkState")); assertThat(operation.getValue(), is("bar")); }
@Test public void testParserNotFound() { final Class<User> nonSupportedClass = User.class; final String anyValue = "wewee-4343"; exceptionRule.expect( QueryParserException.class ); exceptionRule .expectMessage( "Unable to parse `" + anyValue + "` to `" + nonSupportedClass.getSimpleName() + "`." ); QueryUtils.parseValue( nonSupportedClass, anyValue ); }
@Test public void testValidateArtifactId() { driverDef.setArtifactId( null ); assertFalse( validator.validate( driverDef ) ); driverDef.setArtifactId( EMPTY_VALUE ); assertFalse( validator.validate( driverDef ) ); }
@Test public void getOrderByIdTest() throws ApiException { Long orderId = null; Order response = api.getOrderById(orderId); }
@Test public void testVersion() { final String[] args = new String[]{"-V"}; ParseCommandLineArgsResult ret = Bootstrap.parseCommandLineArgs(args); assertThat(ret.isExit()).isTrue(); assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK); assertThat(ret.getOptions()).isNull(); }
@Test(expected = IllegalStateException.class) public void throwsExceptionOnInvalidJavaCode() { code.add(someValue()); code.typeName(); }
@Test public void testAddLibraryFilesLibraryDirExists() throws Exception { Project project = ProjectBuilder.builder().withGradleUserHomeDir(temporaryFolder.newFolder("gradleUserHome")) .withProjectDir(temporaryFolder.getRoot()).build(); File ideaFolder = temporaryFolder.newFolder(".idea"); File librariesFolder = new File(ideaFolder, "libraries"); Files.createDirectories(librariesFolder.toPath()); TestUtils.setupGenericExtensions(project).getPluginManager().apply(TestableBazelLeafPlugin.class); HatchejModel hatchejModel = new HatchejModel(); hatchejModel.getLibraryDependencies().add("librarydep1"); hatchejModel.getLibraryDependencies().add("librarydep2"); HatchejImlAction hatchejImlAction = new HatchejImlAction(); boolean added = hatchejImlAction.addLibraryFiles(project, hatchejModel); assertThat(added, Is.is(true)); assertThat(temporaryFolder.getRoot().list(), IsArrayWithSize.arrayWithSize(2)); assertThat(librariesFolder.list(), IsArrayContainingInAnyOrder .arrayContainingInAnyOrder("librarydep1!.xml", "librarydep2!.xml")); String libraryDep1Xml = FileUtils.readFileToString(new File(librariesFolder, "librarydep1!.xml"), "UTF-8"); assertThat(StringUtils.deleteWhitespace(libraryDep1Xml), IsEqual.equalTo(StringUtils.deleteWhitespace(getLibraryXmlContent("librarydep1")))); String libraryDep2Xml = FileUtils.readFileToString(new File(librariesFolder, "librarydep2!.xml"), "UTF-8"); assertThat(StringUtils.deleteWhitespace(libraryDep2Xml), IsEqual.equalTo(StringUtils.deleteWhitespace(getLibraryXmlContent("librarydep2")))); }
@Test(dataProvider = "getData") public void testSerialization(ByteBuf data) { data.retain(); data.markReaderIndex(); ConnectedDataItemResponse item = new ConnectedDataItemResponse(data); ConnectedDataItemResponse decoded = encodeDecode(item, ConnectedDataItemResponse::encode, ConnectedDataItemResponse::decode); data.resetReaderIndex(); assertEquals(item, decoded); data.release(); decoded.getData().release(); }
@Test public void testPatterns() { int results[] = new int[PARTITIONS]; RehashPartitioner <IntWritable, NullWritable> p = new RehashPartitioner < IntWritable, NullWritable> (); for(int i = 0; i < END; i+= STEP) { results[p.getPartition(new IntWritable(i), null, PARTITIONS)]++; } int badbuckets = 0; Integer min = Collections.min(Arrays.asList(ArrayUtils.toObject(results))); Integer max = Collections.max(Arrays.asList(ArrayUtils.toObject(results))); Integer avg = (int) Math.round((max+min)/2.0); System.out.println("Dumping buckets distribution: min="+min+" avg="+avg+" max="+max); for (int i = 0; i < PARTITIONS; i++) { double var = (results[i]-avg)/(double)(avg); System.out.println("bucket "+i+" "+results[i]+" items, variance "+var); if (Math.abs(var) > MAX_ERROR) badbuckets++; } System.out.println(badbuckets + " of "+PARTITIONS+" are too small or large buckets"); assertTrue("too many overflow buckets", badbuckets < PARTITIONS * MAX_BADBUCKETS); }
@Test(timeout = 1000) public void testSchedule() throws InterruptedException { Semaphore s = new Semaphore(0); TestSchedulerTemporalAdjuster temporalAdjuster = new TestSchedulerTemporalAdjuster(); scheduler.schedule(s::release, temporalAdjuster); s.acquire(3); Thread.sleep(300); assertEquals("Scheduler should not have released more after done", 0, s.availablePermits()); assertEquals("Scheduler should have run 3 times", 3, temporalAdjuster.getCount()); }
@Test public void testFieldBindingWarningToggleWhenFieldBindingIsNotValid() { final boolean isFieldBindingValid = false; page.fieldBindingWarningToggle(isFieldBindingValid); verify(view).showFieldBindingWarning(); verify(view, never()).hideFieldBindingWarning(); }
@Test public void testSimpleNumbers() throws ParseException { InputStream inputStream = getClass().getResourceAsStream("/json/simple_numbers.json"); List<ItemCollection> result = null; try { result = ImixsJSONParser.parse(inputStream); } catch (UnsupportedEncodingException e) { e.printStackTrace(); Assert.fail(); } Assert.assertNotNull(result); ItemCollection itemCol = result.get(0); Assert.assertNotNull(itemCol); Assert.assertEquals(10, itemCol.getEventID()); Assert.assertEquals(100, itemCol.getTaskID()); }
@Test public void testDotNormal() { double[] arr1 = new double[] {1, 2, 3}; double[] arr2 = new double[] {4, 5, 6}; DoubleVector vec1 = new DenseDoubleVector(arr1); DoubleVector vec2 = new DenseDoubleVector(arr2); assertEquals(32.0, vec1.dot(vec2), 0.000001); }
@Test public void setUserHome() throws Exception { File userHome = temp.newFolder(); FileCache cache = new FileCacheBuilder(mock(Logger.class)).setUserHome(userHome).build(); assertThat(cache.getDir()).isDirectory().exists(); assertThat(cache.getDir().getName()).isEqualTo("cache"); assertThat(cache.getDir().getParentFile()).isEqualTo(userHome); }
@Test public void testLoadByClass() { Hello load = EnhancedServiceLoader.load(Hello.class); assertThat(load.say()).isEqualTo("Olá."); }
@Test public void putAll() { assertNull(map.get("test")); assertNull(map.get("test2")); Map<String, Integer> map2 = Collections.singletonMap("test", 123); map.putAll(map2); assertEquals(123, (int)map.get("test")); }
@Test public void testGetOutputFileWithPath() throws IOException { final String path = "abc"; final File f = getOutputFile(path, "test2.log"); assertTrue(f.exists()); FileUtils.forceDelete(new File(path)); }
@Test public void isValid() { assertThat(TraceId.INVALID.isValid()).isFalse(); assertThat(first.isValid()).isTrue(); assertThat(second.isValid()).isTrue(); }
@Test public void testLowerCase() { assertNull(StringUtils.lowerCase(null)); assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); }
@Test public void testFindMessageByCpa() throws DAOException { MessageDVO dvo; List list; MessageDVO result; MessageDataSourceDAO dao = super.getTestingTarget(); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); list = dao.findMessageByCpa(dvo, 10); Assert.assertEquals(5, list.size()); result = (MessageDVO)list.get(0); Assert.assertEquals("convId3", result.getConvId()); result = (MessageDVO)list.get(1); Assert.assertEquals("convId4", result.getConvId()); result = (MessageDVO)list.get(2); Assert.assertEquals("convId2", result.getConvId()); result = (MessageDVO)list.get(3); Assert.assertEquals("convId5", result.getConvId()); result = (MessageDVO)list.get(4); Assert.assertEquals("convId1", result.getConvId()); list = dao.findMessageByCpa(dvo, 1); Assert.assertEquals(1, list.size()); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); dvo.setFromPartyId("fromPartyId1"); list = dao.findMessageByCpa(dvo, 10); result = (MessageDVO)list.get(0); Assert.assertEquals("fromPartyId1", result.getFromPartyId()); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); dvo.setFromPartyRole("fromPartyType2"); list = dao.findMessageByCpa(dvo, 10); result = (MessageDVO)list.get(0); Assert.assertEquals("fromPartyType2", result.getFromPartyRole()); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); dvo.setToPartyId("toPartyId3"); list = dao.findMessageByCpa(dvo, 10); result = (MessageDVO)list.get(0); Assert.assertEquals("toPartyId3", result.getToPartyId()); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); dvo.setToPartyRole("toPartyType4"); list = dao.findMessageByCpa(dvo, 10); result = (MessageDVO)list.get(0); Assert.assertEquals("toPartyType4", result.getToPartyRole()); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); dvo.setConvId("convId5"); list = dao.findMessageByCpa(dvo, 10); result = (MessageDVO)list.get(0); Assert.assertEquals("convId5", result.getConvId()); dvo = (MessageDVO)dao.createDVO(); dvo.setCpaId("cecid4"); dvo.setService("cecid:cecid"); dvo.setAction("order"); dvo.setConvId("convId5"); dvo.setFromPartyId("fromPartyId5"); dvo.setFromPartyRole("fromPartyType5"); dvo.setToPartyId("toPartyId5"); dvo.setToPartyRole("toPartyType5"); list = dao.findMessageByCpa(dvo, 10); Assert.assertEquals(1, list.size()); }
@Test void testGetDomainWhenEnvironmentNameIsNull() { IllegalStateException iSE = assertThrows(IllegalStateException.class, () -> underTest.getDomainName(null, "anAccountName")); assertEquals(EnvironmentBasedDomainNameProvider.ENV_NAME_SHOULD_BE_SPECIFIED_MSG, iSE.getMessage()); }
@Test public void getProxyHost_envVarSet_emptyUrl_doesNotThrow() { EnvironmentVariableHelper environmentVariableHelper = new EnvironmentVariableHelper(); environmentVariableHelper.set("https_proxy", ""); ClientConfiguration config = new ClientConfiguration(); assertNull(config.getProxyHost()); environmentVariableHelper.reset(); environmentVariableHelper.set("http_proxy", ""); config = new ClientConfiguration(); assertNull(config.getProxyHost()); environmentVariableHelper.reset(); }
@Test public void when_addClamped_then_doesNotOverflow() { assertEquals(0, addClamped(0, 0)); assertEquals(1, addClamped(1, 0)); assertEquals(-1, addClamped(-1, 0)); assertEquals(-1, addClamped(Long.MAX_VALUE, Long.MIN_VALUE)); assertEquals(-1, addClamped(Long.MIN_VALUE, Long.MAX_VALUE)); assertEquals(Long.MAX_VALUE, addClamped(Long.MAX_VALUE, 1)); assertEquals(Long.MAX_VALUE, addClamped(Long.MAX_VALUE, Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, addClamped(Long.MIN_VALUE, -1)); assertEquals(Long.MIN_VALUE, addClamped(Long.MIN_VALUE, Long.MIN_VALUE)); }
@Test public void testGet() throws PolicyManagerException { final PolicyManager mgr = new DBPolicyManager(sessionFactory); Assert.assertNull(mgr.getPolicy(POLICY_NAME)); final Policy policy = createPolicy(mgr); final Policy getPolicy = mgr.getPolicy(POLICY_NAME); Assert.assertNotNull(getPolicy); Assert.assertEquals(getPolicy, policy); Assert.assertEquals(getPolicy.getId(), policy.getId()); }
@Test public void empty_infrascanconfig_is_rejected() throws Exception { SecHubInfrastructureScanConfiguration infraScan = mock(SecHubInfrastructureScanConfiguration.class); List<URI> list = new ArrayList<>(); when(infraScan.getUris()).thenReturn(list); when(target.getInfraScan()).thenReturn(Optional.of(infraScan)); validatorToTest.validate(target, errors); assertError("api.error.infrascan.target.missing", Mockito.times(1)); }
@Test public void testSelectQueries() { FinishedLensQuery mockFinishedQuery = mock(FinishedLensQuery.class); EstimatedImmutableQueryCollection mockWaitingQueries = mock(EstimatedImmutableQueryCollection.class); String mockUser = "MockUser"; Set expectedQueriesSet = mock(Set.class); when(mockFinishedQuery.getSubmitter()).thenReturn(mockUser); when(mockWaitingQueries.getQueries(mockUser)).thenReturn(expectedQueriesSet); WaitingQueriesSelectionPolicy selectionPolicy = new UserSpecificWaitingQueriesSelectionPolicy(); Set actualEligibleQueries = selectionPolicy.selectQueries(mockFinishedQuery, mockWaitingQueries); assertEquals(actualEligibleQueries, expectedQueriesSet); }
@Test public void testClose() throws Exception { decorated.close(); verify( fileContent ).close(); }
@Test public void testSetReadonlyTrue() { renderer.setReadOnly(true); verify(widget).setReadOnly(true); }
@Test public void testBuildUserDataAzure() throws IOException { String expectedGwScript = FileReaderUtils.readFileFromClasspath("azure-gateway-init.sh"); String expectedCoreScript = FileReaderUtils.readFileFromClasspath("azure-core-init.sh"); Map<InstanceGroupType, String> userdata = underTest.buildUserData(Platform.platform("AZURE"), "priv-key".getBytes(), "cloudbreak", getPlatformParameters(), "pass", "cert", null, null); Assert.assertEquals(expectedGwScript, userdata.get(InstanceGroupType.GATEWAY)); Assert.assertEquals(expectedCoreScript, userdata.get(InstanceGroupType.CORE)); }
@Test public void testGetMimeType() throws Exception { assertEquals( repositoryFileBundle.getMimeType(), MIME_NAME ); }
@SuppressWarnings( "EqualsWithItself" ) @Test public void equalsAndHashCode() { final ArezContext context = Arez.context(); final ObservableValue<Object> observableValue = context.observable(); final Observer observer1 = context.observer( ValueUtil.randomString(), observableValue::reportObserved ); final Observer observer2 = context.observer( ValueUtil.randomString(), observableValue::reportObserved ); final ObserverInfo info1a = observer1.asInfo(); final ObserverInfo info1b = new ObserverInfoImpl( context.getSpy(), observer1 ); final ObserverInfo info2 = observer2.asInfo(); assertNotEquals( info1a, "" ); assertEquals( info1a, info1a ); assertEquals( info1b, info1a ); assertNotEquals( info2, info1a ); assertEquals( info1a, info1b ); assertEquals( info1b, info1b ); assertNotEquals( info2, info1b ); assertNotEquals( info1a, info2 ); assertNotEquals( info1b, info2 ); assertEquals( info2, info2 ); assertEquals( info1a.hashCode(), observer1.hashCode() ); assertEquals( info1a.hashCode(), info1b.hashCode() ); assertEquals( info2.hashCode(), observer2.hashCode() ); }
@Test(expected = IllegalArgumentException.class) public void invalidSetClassToIdMapEmptyAlias() { Map<Class<?>, String> map = new HashMap<Class<?>, String>(); map.put(ClassAliasIdResolverTest.class, "cairt"); map.put(Object.class, ""); builder.setClassToId(map); }
@Test public void testForNPEinAddParam() { try { q.addParameter(QUERY_SYNTAX, "LUCENE"); } catch (NullPointerException e) { Assert.fail(); } }
@Test public void testAdd() { WorkflowList list = new WorkflowList(); list.add(createWorkflow(idGenerator.create(list))); assertEquals(1, list.size()); try { list.add(null); fail(); } catch (IllegalArgumentException expected) { } assertEquals(1, list.size()); }
@Test public void testProlog2() throws BadLocationException { String content = "<?xml version= \"1.0\" encoding=\"UTF-8\" ?><a>bb</a>"; String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + lineSeparator() + "<a>bb</a>"; format(content, expected); }
@Test public void configureDestination_shouldStoreStackTracesInTheSameDirectoryAsTheLogFile_whenLoggingToAPathAndStoringStackTracesHasNotBeenExplicitlyConfigured() throws Exception { Path logFile = tempFiles.createTempFile(".log"); InfrastructureFactory factory = new InfrastructureFactory( Optional.of(logFile), Optional.empty(), Optional.empty(), Optional.empty(), SAMPLE_CONTEXT_SUPPLIER, SAMPLE_ERROR_HANDLER); StackTraceProcessor stackTraceProcessor = factory.<TestMessages>configureDestination().getStackTraceProcessor(); assertThat(stackTraceProcessor, instanceOf(FilesystemStackTraceProcessor.class)); FilesystemStackTraceProcessor fs = (FilesystemStackTraceProcessor) stackTraceProcessor; assertEquals(logFile.getParent(), fs.getDestination()); }
@Test public void setMessageCompressionTest() { forward.setMessageCompression(true); verify(mock).setMessageCompression(true); }
@Test public void isProcessedChangeSet() { context.setProcessedChangeSet(5); for (int i = 0; i <= 5; i++) { assertThat(context.isProcessedChangeSet(i)).isTrue(); } }
@Test public void whenFindNearestAssignableFromUnknownClazz_thenNullIsReturned() { Class<?> foundClazz = searchableClasses.findNearestAssignableFrom(UnknownClazz.class); assertThat(foundClazz, is(nullValue())); }
@Test public void acceptsValidJson() throws JSONException { Product.create( "{\"micros-price\":1," + "\"vendor-id\":\"1\"," + "\"price\":\"1\"," + "\"name\":\"1\"," + "\"description\":\"1\"," + "\"currency\":\"1\"," + "\"subscription\":false," + "\"sku\":\"1\"}" ); }
@Test public void getOrganisationForUser() { OrganisationResource organisation = newOrganisationResource().withId(4L).build(); ProcessRoleResource roleWithUser = newProcessRoleResource() .withUser(user) .withOrganisation(organisation.getId()) .build(); when(organisationRestService.getOrganisationById(organisation.getId())).thenReturn(restSuccess(organisation)); Optional<OrganisationResource> result = service.getOrganisationForUser(user.getId(), singletonList(roleWithUser)); verify(organisationRestService, times(1)).getOrganisationById(organisation.getId()); verifyNoMoreInteractions(organisationRestService); assertEquals(organisation, result.get()); }
@Test void getStringByIndexThrowsIllegalStateExceptionWhenCalledBeforeNext() { model.add(SUBJECT, RDF.type, TYPE_ONE); this.selectResult = resultFor(QUERY); final IllegalStateException ex = assertThrows(IllegalStateException.class, () -> selectResult.getString(0)); assertEquals("Must call next before getting any values.", ex.getMessage()); }
@Test void deleteSdxClustersForEnvironment() { PollingConfig pollingConfig = PollingConfig.builder() .withSleepTime(0) .withSleepTimeUnit(TimeUnit.SECONDS) .withTimeout(10) .withTimeoutTimeUnit(TimeUnit.SECONDS) .build(); Environment environment = new Environment(); environment.setName("envName"); SdxClusterResponse sdx1 = new SdxClusterResponse(); sdx1.setCrn("crn1"); when(environmentResourceDeletionService.getAttachedSdxClusterCrns(environment)).thenReturn(Set.of("crn1", "crn2")); when(sdxEndpoint.list(environment.getName())).thenReturn(List.of(sdx1)).thenReturn(List.of()); underTest.deleteSdxClustersForEnvironment(pollingConfig, environment, true); verify(sdxEndpoint).deleteByCrn(eq("crn1"), eq(true)); verify(sdxEndpoint).deleteByCrn(eq("crn2"), eq(true)); verifyNoMoreInteractions(sdxEndpoint); }
@Test public void testSetMappings() { Map<Integer, Integer> map = new TreeMap<Integer, Integer>(); map.put(0, 0); map.put(1, 1); List<Map<Integer, Integer>> mappings = new ArrayList<Map<Integer, Integer>>(); mappings.add(map); CDKRMapHandler instance = new CDKRMapHandler(); instance.setMappings(mappings); Assert.assertNotNull(instance.getMappings()); }
@Test public void ifPackageIsNotFoundThenPackageFoundWillNotBeCalled() { givenThatPackageIsNotFound(); simpleChromeCustomTabsAvailableAppProvider.findBestPackage(mockPackageFoundCallback, mockActivity); verify(mockPackageFoundCallback, never()).onPackageFound(anyString()); }
@Test public void testGetArray() { assertArrayEquals(new int[] {-278349, 12223423, 0, -2, 3}, test.getArray()); }
@Test public void testEqualsDiffStart() { final MessageNumberSet msgSet1 = new MessageNumberSet(1, 100); final MessageNumberSet msgSet2 = new MessageNumberSet(2, 100); Assert.assertFalse(msgSet1.equals(msgSet2), "Result mismatched."); }
@Test public void testIsValidForFieldTypeDouble() { assertTrue(constraint.isValidForFieldType(DoubleType.TYPE)); }
@Test public void testMatchHivePolicy_NoResourceList(){ boolean bnlChk = rangerBizUtil.matchHivePolicy(resourceName, null, null, 0); Assert.assertFalse(bnlChk); }
@Test public void testHandleEvent_withContext_noRule() throws Exception { List<Rule> rules = new ArrayList<>( 0 ); Application app = new Application( "app", new TestApplicationTemplate()); AutonomicApplicationContext ctx = Mockito.spy( new AutonomicApplicationContext( app )); Mockito.when( ctx.findRulesToExecute()).thenReturn( rules ); this.autonomicMngr.appNameToContext.put( "app", ctx ); ManagedApplication ma = new ManagedApplication( app ); this.autonomicMngr.handleEvent( ma, new MsgNotifAutonomic( "app", "/root", "event", null )); Mockito.verifyZeroInteractions( this.commandsMngr ); Mockito.verifyZeroInteractions( this.preferencesMngr ); Map<?,?> eventNameToLastRecordTime = TestUtils.getInternalField( ctx, "eventNameToLastRecordTime", Map.class ); Assert.assertEquals( 1, eventNameToLastRecordTime.size()); Assert.assertNotNull( eventNameToLastRecordTime.get( "event" )); }
@Test public void set_symmetric_differnce_4() { Set<Integer> x1 = set(1,2,3) ; Set<Integer> x2 = set() ; Set<Integer> expected = set(1,2,3) ; assertEquals(expected, SetUtils.symmetricDifference(x1, x2)) ; assertEquals(expected, SetUtils.symmetricDifference(x2, x1)) ; }
@Test public void cannot_start_many_times_without_cancelling_first() throws InterruptedException { timeout = new CommandExecutingTimeout(new SpyCommand(), 10, TimeUnit.MILLISECONDS); timeout.start(); thrown.expect(IllegalStateException.class); thrown.expectMessage("already started"); timeout.start(); }
@Test public void testFindByCriteria() { StudyService studyService = BeanFactory.getStudyServiceBean(); List<Study> foundStudies = studyService.findByCriteria("Human", false); assertEquals(1, foundStudies.size()); foundStudies = studyService.findByCriteria("human", true); assertEquals(0, foundStudies.size()); foundStudies = studyService.findByCriteria("human", false); assertEquals(1, foundStudies.size()); foundStudies = studyService.findByCriteria("120", false); assertEquals(1, foundStudies.size()); foundStudies = studyService.findByCriteria("data", false); assertEquals(1, foundStudies.size()); }
@Test public void testDestroyResourcesOnKeyDown() { when(layer.getGridWidgets()).thenReturn(gridWidgets); when(gridWidget1.isSelected()).thenReturn(true); when(event.getNativeKeyCode()).thenReturn(KeyCodes.KEY_RIGHT); final StringDOMElementColumn columnWithAdditionalDomElements = mock(StringDOMElementColumn.class); gridWidget1Data.appendColumn(columnWithAdditionalDomElements); handler.onKeyDown(event); verify(columnWithAdditionalDomElements).destroyResources(); }
@Test public void toStringMatches_withDeadline() { assertThat(allSet.toString()).contains("1 ns from now"); }
@Test public void testIsNodeTypeMixinContainedInSupertypes() { PropertyState supertypes = PropertyStates.createProperty(REP_SUPERTYPES, ImmutableList.of(MIX_REFERENCEABLE), Type.NAMES); when(ntDef.getProperty(REP_SUPERTYPES)).thenReturn(supertypes); PropertyState mixinNames = PropertyStates.createProperty(JcrConstants.JCR_MIXINTYPES, Lists.newArrayList(JcrConstants.MIX_VERSIONABLE), Type.NAMES); Tree tree = when(mockTree(CHILD_PATH, z, true).getProperty(JCR_MIXINTYPES)).thenReturn(mixinNames).getMock(); assertTrue(TreeUtil.isNodeType(tree, MIX_REFERENCEABLE, typeRoot)); assertFalse(TreeUtil.isNodeType(child, MIX_LASTMODIFIED, typeRoot)); }
@Test public void test_onboardServiceAccount_failure_invalid_ttl() { UserDetails userDetails = getMockUser(true); String token = userDetails.getClientToken(); ServiceAccount serviceAccount = new ServiceAccount(); serviceAccount.setName("testacc02"); serviceAccount.setAutoRotate(true); serviceAccount.setOwner("testacc01"); String expectedResponse = "{\"errors\":[\"Invalid or no value has been provided for MAX_TTL\"]}"; ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(expectedResponse); Response response = getMockResponse(HttpStatus.OK, true, "{\"keys\":[\"testacc03\"]}"); when(reqProcessor.process("/ad/serviceaccount/onboardedlist","{}",token)).thenReturn(response); List<ADServiceAccount> allServiceAccounts = new ArrayList<>(); allServiceAccounts.add(generateADServiceAccount("testacc02")); ReflectionTestUtils.setField(serviceAccountsService, "ldapTemplate", ldapTemplate); when(ldapTemplate.search(Mockito.anyString(), Mockito.any(), Mockito.any(AttributesMapper.class))).thenReturn(allServiceAccounts); ResponseEntity<String> responseEntity = serviceAccountsService.onboardServiceAccount(token, serviceAccount, userDetails); assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }
@Test public void convertRangeUnit() throws ParameterValueException { String unit = handler.convertRangeUnit(APIEnums.Units.KILOMETRES); Assert.assertEquals("km", unit); unit = handler.convertRangeUnit(APIEnums.Units.METRES); Assert.assertEquals("m", unit); unit = handler.convertRangeUnit(APIEnums.Units.MILES); Assert.assertEquals("mi", unit); }
@Test public void filterResultsWithOneColumn() { List<Object> results = Arrays.asList(13, 27); assertSame(results, this.queryFilter.filterResults(results)); }
@Test public void entityTypeIsSense() { assertEquals(sense1.getEntityType(), EntityIdValue.ET_SENSE); }
@Test public void testRemoveStringWithNullThrowsException() throws Exception { thrown.expect(NotEnoughDataInByteBufferException.class); thrown.expect(notEnoughData(1, 0)); buffer.removeString(1, ASCII); }
@Test public void testProcessNotificationWithInvalidArguments() { resetAll(); replayAll(); try { notificationProcessingService.processNotification(null, Collections.emptyMap()); fail("Exception should be thrown"); } catch (final IllegalArgumentException ex) { } try { final Long notificationId = 1L; notificationProcessingService.processNotification(notificationId, null); fail("Exception should be thrown"); } catch (final IllegalArgumentException ex) { } verifyAll(); }
@Test public void shouldFailIfNameIsOnlyWhitespaces() { attributeType.setName(" "); validator.validate(attributeType, errors); Assert.assertTrue(errors.hasFieldErrors("name")); assertThat(errors.getFieldErrors("name").get(0).getCode(), is("error.name")); }
@Test( expected = NullPointerException.class ) public void testCapitalizeFirstLetter_NPE() { assertThat( StringUtils.capitalizeFirstLetter( null ) , nullValue() ); }
@Test public void testTest() { logger.info("test"); TransposeDataList transposeDataList = new TransposeDataList(); transposeDataList.put(0, new FlatDataList(Arrays.asList(new Object[]{56,75,45,71,61,64,58,80,76,61}))); transposeDataList.put(1, new FlatDataList(Arrays.asList(new Object[]{66,70,40,60,65,56,59,77,67,63}))); boolean is_twoTailed = true; double aLevel = 0.05; boolean expResult = true; boolean result = SpearmanCorrelation.test(transposeDataList, is_twoTailed, aLevel); assertEquals(expResult, result); }
@Test public void testValidPackageNames() { PackageValidator.validate("foo"); PackageValidator.validate("foo.bar"); PackageValidator.validate("foo.bar.baz"); PackageValidator.validate("ab.c.d"); PackageValidator.validate("a1.b2.c3"); }
@Test public void serialization() { SerializableTester.reserializeAndAssert( UVariableDecl.create( "foo", UClassIdent.create("java.lang.String"), ULiteral.stringLit("bar"))); }
@Test public void indexOfNoHetroAtom() { int[] cycle = new int[]{3, 2, 1, 4, 5, 3}; int[] contr = new int[]{1, 1, 1, 1, 1, 1}; Assert.assertEquals(-1, MmffAromaticTypeMapping.indexOfHetro(cycle, contr)); }
@Test public void testDateTimeConversion() throws Exception { DateTimeStandardizer standardizer = new DateTimeStandardizer("MM/dd/YYYY HH:mm:ss", OutputFormats.DATETIME_NOMILLIS, "UTC", "PST"); assertEquals("2016-05-06 15:32:54", standardizer.convertValue("05/06/2016 22:32:54")); }
@Test public void fileOperationsTest() throws Exception { AllScenariosPageCollection allScenariosPageCollection = new AllScenariosPageCollection(""); Report report1 = new Report(); List<Element> elements1 = new ArrayList<>(); Element element1 = new Element(); elements1.add(element1); report1.setElements(elements1); Report report2 = new Report(); List<Element> elements2 = new ArrayList<>(); Element element2 = new Element(); elements2.add(element2); report2.setElements(elements2); Report[] reportList = {report1, report2}; allScenariosPageCollection.addReports(reportList); reportGenerator.generateReport(allScenariosPageCollection); verify(fileSystemManager, times(8)).createDirectory(anyString()); verify(fileSystemManager, times(17)).copyResourceFromJar(anyString(), anyString()); }
@Test public void testProcessingRenderingWithClonedErrorRequestContainingNewErrors() throws IOException, InterruptedException { StringDataList dataList = createDataList(); dataList.request().errors().add(new ErrorMessage("m1","d1")); dataList.request().errors().add(new ErrorMessage("m2","d2")); dataList.add(new StringDataList(dataList.request().clone())); dataList.asList().get(2).request().errors().add(new ErrorMessage("m3","d3")); assertThat(render(dataList), equalTo("{\"errors\":[" + "\"m1: d1\"," + "\"m2: d2\"" + "]," + "\"datalist\":[" + "{\"data\":\"l1\"}," + "{\"datalist\":[" + "{\"data\":\"l11\"}," + "{\"data\":\"l12\"}" + "]}," + "{\"errors\":[" + "\"m3: d3\"" + "]," + "\"datalist\":[]}" + "]}")); }
@Test public void getStringSecret() { Optional<String> result = simpleSecretsGroup.getStringSecret(stringSecretIdentifier); assertThat(result, is(Optional.of(value1))); }
@Test public void getName() { final Repository repository = mock(Repository.class); doReturn("my-repo").when(repository).getAlias(); final Module mainModule = mock(Module.class); doReturn("my-module").when(mainModule).getModuleName(); final WorkspaceProject workspaceProject = new WorkspaceProject(mock(OrganizationalUnit.class), repository, mock(Branch.class), mainModule); assertEquals("my-module", workspaceProject.getName()); }
@Test public void getConsumerAssignments_returnsConsumerAssignment() throws Exception { expect( consumerManager.getConsumer( CLUSTER_ID, CONSUMER.getConsumerGroupId(), CONSUMER.getConsumerId())) .andReturn(completedFuture(Optional.of(CONSUMER))); replay(consumerManager); ConsumerAssignment assignment = consumerAssignmentManager.getConsumerAssignment( CLUSTER_ID, CONSUMER.getConsumerGroupId(), CONSUMER.getConsumerId(), "topic-1", 1) .get() .get(); assertEquals( ConsumerAssignment.builder() .setClusterId(CLUSTER_ID) .setConsumerGroupId(CONSUMER.getConsumerGroupId()) .setConsumerId(CONSUMER.getConsumerId()) .setTopicName("topic-1") .setPartitionId(1) .build(), assignment); }
@Test void testWithEnumCount() { ImmutableMap<TestEnum, Integer> testEnumCount = ImmutableMap.of(TestEnum.PRESENT_ELEMENTS, 1); TableLine tableLine = builder .withEnumCount("COUNT", testEnumCount, TestEnum.class) .build(); TableLine expectedTableLine = new TableLine(ImmutableMap.of( "PRESENT_ELEMENTS_COUNT", "1", "MISSING_ELEMENTS_COUNT", "0"), ImmutableSet.of()); Assertions.assertEquals(expectedTableLine.getLineMap(), tableLine.getLineMap()); }
@Test public void testConfigure() { plugin.initialize( context ); PreviewPane reportPane = mock( PreviewPane.class ); boolean result = plugin.configure( reportPane ); verify( reportPane ).setClosed( true ); assertThat( result, is( equalTo( true ) ) ); }
@Test public void testRegisterProcessingNode_withInvalidServicePort() throws Exception { try { new SPQRNodeServer().registerProcessingNode("http", "localhost", -1, 8081, Mockito.mock(SPQRResourceManagerClient.class)); Assert.fail("Invalid input"); } catch(RequiredInputMissingException e) { } }
@Test public void asIntMatrix() { double[] array1 = {0, 1, 2}; double[] array2 = {0, 1, 2}; DoubleColumn c1 = DoubleColumn.create("1", array1); DoubleColumn c2 = DoubleColumn.create("2", array2); Table table = Table.create("test", c1, c2); int[][] expected = {{0, 0}, {1, 1}, {2, 2}}; int[][] results = table.as().intMatrix(); assertTrue(Arrays.deepEquals(expected, results)); }
@Test public void retrievesTagsFromNote () { HashMap<String, Integer> tags = TagsHelper.retrieveTags(note); assertEquals(tags.size(), 4); assertTrue(tags.containsKey(TAG1) && tags.containsKey(TAG3) && tags.containsKey(TAG4) && tags.containsKey(TAG5)); assertFalse(tags.containsKey(TAG2)); }
@Test public void test_updateMetadataOnSvcaccPwdReset_successfully_update_initialResetStatus() { String token = "7QPMPIGiyDFlJkrK3jFykUqa"; Map<String,String> params = new HashMap<String,String>(); params.put("type", "initialPasswordReset"); params.put("path",new StringBuffer(TVaultConstants.SVC_ACC_ROLES_PATH).append("testacc02").toString()); params.put("value","true"); Response metaResponse = getMockResponse(HttpStatus.OK, true, "{\"data\":{ \"initialPasswordReset\": false,\"managedBy\": \"snagara14\",\"name\": \"svc_vault_test2\",\"users\": {\"snagara14\": \"sudo\"}}}"); when(reqProcessor.process(eq("/read"),Mockito.any(),eq(token))).thenReturn(metaResponse); Response response = getMockResponse(HttpStatus.OK, true, ""); when(reqProcessor.process(eq("/write"),Mockito.any(),eq(token))).thenReturn(response); Response actualResponse = ControllerUtil.updateMetadataOnSvcaccPwdReset(params, token); assertEquals(HttpStatus.OK, actualResponse.getHttpstatus()); assertEquals(response, actualResponse); }
@Test public void testSingleServerAddedRemovedSegment() throws Exception { segmentViewInitLatch = new CountDownLatch(1); segmentAddedLatch = new CountDownLatch(1); segmentRemovedLatch = new CountDownLatch(1); setupViews(); final DruidServer druidServer = new DruidServer( "localhost:1234", "localhost:1234", null, 10000000L, ServerType.HISTORICAL, "default_tier", 0 ); setupZNodeForServer(druidServer, zkPathsConfig, jsonMapper); final DataSegment segment = dataSegmentWithIntervalAndVersion("2014-10-20T00:00:00Z/P1D", "v1"); announceSegmentForServer(druidServer, segment, zkPathsConfig, jsonMapper); Assert.assertTrue(timing.forWaiting().awaitLatch(segmentViewInitLatch)); Assert.assertTrue(timing.forWaiting().awaitLatch(segmentAddedLatch)); TimelineLookup timeline = brokerServerView.getTimeline( DataSourceAnalysis.forDataSource(new TableDataSource("test_broker_server_view")) ).get(); List<TimelineObjectHolder> serverLookupRes = (List<TimelineObjectHolder>) timeline.lookup( Intervals.of( "2014-10-20T00:00:00Z/P1D" ) ); Assert.assertEquals(1, serverLookupRes.size()); TimelineObjectHolder<String, ServerSelector> actualTimelineObjectHolder = serverLookupRes.get(0); Assert.assertEquals(Intervals.of("2014-10-20T00:00:00Z/P1D"), actualTimelineObjectHolder.getInterval()); Assert.assertEquals("v1", actualTimelineObjectHolder.getVersion()); PartitionHolder<ServerSelector> actualPartitionHolder = actualTimelineObjectHolder.getObject(); Assert.assertTrue(actualPartitionHolder.isComplete()); Assert.assertEquals(1, Iterables.size(actualPartitionHolder)); ServerSelector selector = (actualPartitionHolder.iterator().next()).getObject(); Assert.assertFalse(selector.isEmpty()); Assert.assertEquals(segment, selector.getSegment()); Assert.assertEquals(druidServer, selector.pick().getServer()); unannounceSegmentForServer(druidServer, segment, zkPathsConfig); Assert.assertTrue(timing.forWaiting().awaitLatch(segmentRemovedLatch)); Assert.assertEquals( 0, ((List<TimelineObjectHolder>) timeline.lookup(Intervals.of("2014-10-20T00:00:00Z/P1D"))).size() ); Assert.assertNull(timeline.findEntry(Intervals.of("2014-10-20T00:00:00Z/P1D"), "v1")); }
@Test void testRelease() throws IOException { ByteBufferPool byteBufferPool = new ByteBufferPool(); assertThat(byteBufferPool.getCurrentPoolSize()).isEqualTo(0); PooledByteBufferOutputStream pooledByteBufferOutputStream = new PooledByteBufferOutputStream( byteBufferPool, 2); pooledByteBufferOutputStream.write(new byte[]{0, 0}); pooledByteBufferOutputStream.getPooledByteBuffer().release(); assertThat(byteBufferPool.getCurrentPoolSize()).isEqualTo(1); pooledByteBufferOutputStream.release(); assertThat(byteBufferPool.getCurrentPoolSize()).isEqualTo(1); }
@Test public void probabilityTest(){ System.out.println("Probability test"); double[] theta = {-4.0, -3.9, -3.8, -3.7, -3.6, -3.5, -3.4, -3.3, -3.2, -3.1, -3.0, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2.0, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0}; double[][] prob = { {9.99925e-01,7.46220e-05,6.10908e-10}, {9.99907e-01,9.30761e-05,9.50443e-10}, {9.99884e-01,1.16093e-04,1.47868e-09}, {9.99855e-01,1.44802e-04,2.30049e-09}, {9.99819e-01,1.80608e-04,3.57901e-09}, {9.99775e-01,2.25267e-04,5.56803e-09}, {9.99719e-01,2.80965e-04,8.66234e-09}, {9.99650e-01,3.50430e-04,1.34761e-08}, {9.99563e-01,4.37061e-04,2.09645e-08}, {9.99455e-01,5.45098e-04,3.26133e-08}, {9.99320e-01,6.79822e-04,5.07335e-08}, {9.99152e-01,8.47815e-04,7.89187e-08}, {9.98943e-01,1.05728e-03,1.22757e-07}, {9.98681e-01,1.31842e-03,1.90938e-07}, {9.98356e-01,1.64396e-03,2.96967e-07}, {9.97950e-01,2.04972e-03,4.61838e-07}, {9.97444e-01,2.55537e-03,7.18170e-07}, {9.96814e-01,3.18535e-03,1.11663e-06}, {9.96028e-01,3.97004e-03,1.73591e-06}, {9.95050e-01,4.94706e-03,2.69810e-06}, {9.93833e-01,6.16303e-03,4.19261e-06}, {9.92318e-01,7.67558e-03,6.51299e-06}, {9.90434e-01,9.55575e-03,1.01138e-05}, {9.88093e-01,1.18909e-02,1.56980e-05}, {9.85187e-01,1.47882e-02,2.43513e-05}, {9.81584e-01,1.83782e-02,3.77476e-05}, {9.77122e-01,2.28194e-02,5.84614e-05}, {9.71607e-01,2.83025e-02,9.04418e-05}, {9.64805e-01,3.50553e-02,1.39726e-04}, {9.56438e-01,4.33461e-02,2.15502e-04}, {9.46182e-01,5.34868e-02,3.31686e-04}, {9.33658e-01,6.58323e-02,5.09213e-04}, {9.18445e-01,8.07761e-02,7.79332e-04}, {9.00073e-01,9.87386e-02,1.18824e-03}, {8.78051e-01,1.20146e-01,1.80346e-03}, {8.51883e-01,1.45394e-01,2.72223e-03}, {8.21114e-01,1.74803e-01,4.08231e-03}, {7.85378e-01,2.08547e-01,6.07490e-03}, {7.44466e-01,2.46575e-01,8.95907e-03}, {6.98397e-01,2.88527e-01,1.30761e-02}, {6.47487e-01,3.33652e-01,1.88610e-02}, {5.92393e-01,3.80760e-01,2.68474e-02}, {5.34123e-01,4.28216e-01,3.76611e-02}, {4.74001e-01,4.74001e-01,5.19982e-02}, {4.13565e-01,5.15850e-01,7.05849e-02}, {3.54440e-01,5.51443e-01,9.41170e-02}, {2.98175e-01,5.78640e-01,1.23184e-01}, {2.46105e-01,5.95712e-01,1.58184e-01}, {1.99234e-01,6.01532e-01,1.99234e-01}, {1.58184e-01,5.95712e-01,2.46105e-01}, {1.23184e-01,5.78640e-01,2.98175e-01}, {9.41170e-02,5.51443e-01,3.54440e-01}, {7.05849e-02,5.15850e-01,4.13565e-01}, {5.19982e-02,4.74001e-01,4.74001e-01}, {3.76611e-02,4.28216e-01,5.34123e-01}, {2.68474e-02,3.80760e-01,5.92393e-01}, {1.88610e-02,3.33652e-01,6.47487e-01}, {1.30761e-02,2.88527e-01,6.98397e-01}, {8.95907e-03,2.46575e-01,7.44466e-01}, {6.07490e-03,2.08547e-01,7.85378e-01}, {4.08231e-03,1.74803e-01,8.21114e-01}, {2.72223e-03,1.45394e-01,8.51883e-01}, {1.80346e-03,1.20146e-01,8.78051e-01}, {1.18824e-03,9.87386e-02,9.00073e-01}, {7.79332e-04,8.07761e-02,9.18445e-01}, {5.09213e-04,6.58323e-02,9.33658e-01}, {3.31686e-04,5.34868e-02,9.46182e-01}, {2.15502e-04,4.33461e-02,9.56438e-01}, {1.39726e-04,3.50553e-02,9.64805e-01}, {9.04418e-05,2.83025e-02,9.71607e-01}, {5.84614e-05,2.28194e-02,9.77122e-01}, {3.77476e-05,1.83782e-02,9.81584e-01}, {2.43513e-05,1.47882e-02,9.85187e-01}, {1.56980e-05,1.18909e-02,9.88093e-01}, {1.01138e-05,9.55575e-03,9.90434e-01}, {6.51299e-06,7.67558e-03,9.92318e-01}, {4.19261e-06,6.16303e-03,9.93833e-01}, {2.69810e-06,4.94706e-03,9.95050e-01}, {1.73591e-06,3.97004e-03,9.96028e-01}, {1.11663e-06,3.18535e-03,9.96814e-01}, {7.18170e-07,2.55537e-03,9.97444e-01} }; double[] step = {0.0, 0.3, 1.3}; IrmGPCM model = new IrmGPCM(1.3, step, 1.7); assertEquals(" Number of categories test", 3, model.getNcat()); assertEquals(" Number of parameters test", 4, model.getNumberOfParameters()); for(int i=0;i<theta.length;i++){ assertEquals(" Probability test at theta " + i, prob[i][0], model.probability(theta[i], 0), 1e-6); assertEquals(" Probability test at theta " + i, prob[i][1], model.probability(theta[i], 1), 1e-6); assertEquals(" Probability test at theta " + i, prob[i][2], model.probability(theta[i], 2), 1e-6); } }
@Test void shouldConvertToString() { TestClass toConvert = new TestClass(1, "test-1"); String converted = typeConverter.toString(TestClass.class, toConvert, null); assertThat(converted).isEqualTo("" + "integer: 1\n" + "string: test-1\n"); }
@Test public void bean_should_be_bind_by_parent_type() { HolderForBeanWithParentType holder = injector.getInstance(HolderForBeanWithParentType.class); assertThat(holder.beanWithParentType).isNotNull(); assertThat(holder.beanWithParentType.name()).isNotNull(); assertThat(holder.beanWithParentType.name()).isEqualTo("I am Jane"); }
@Test public void testDeleteConsumerGroupOffsetsNumRetries() throws Exception { final Cluster cluster = mockCluster(3, 0); final Time time = new MockTime(); try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(time, cluster, AdminClientConfig.RETRIES_CONFIG, "0")) { final TopicPartition tp1 = new TopicPartition("foo", 0); env.kafkaClient().setNodeApiVersions(NodeApiVersions.create()); env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller())); env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse("foo", 0, Errors.NOT_COORDINATOR)); env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller())); final DeleteConsumerGroupOffsetsResult result = env.adminClient() .deleteConsumerGroupOffsets("group-0", Stream.of(tp1).collect(Collectors.toSet())); TestUtils.assertFutureError(result.all(), TimeoutException.class); } }
@Test public void testDecodeRequest() throws Exception { String json = "{" + "objectType : ['objectType']," + "factType : ['factType']," + "objectValue : ['objectValue']," + "factValue : ['factValue']," + "origin : ['origin']," + "minimum : 0.1," + "maximum : 0.2," + "dimension : 'trust'," + "before : '2016-11-30T15:47:00Z'," + "after : '2016-11-30T15:47:01Z'," + "limit : 25," + "query : 'g.out()'" + "}"; TraverseByObjectSearchRequest request = getMapper().readValue(json, TraverseByObjectSearchRequest.class); assertEquals(SetUtils.set("objectType"), request.getObjectType()); assertEquals(SetUtils.set("factType"), request.getFactType()); assertEquals(SetUtils.set("objectValue"), request.getObjectValue()); assertEquals(SetUtils.set("factValue"), request.getFactValue()); assertEquals(SetUtils.set("origin"), request.getOrigin()); assertEquals(0.1f, request.getMinimum(), 0.0); assertEquals(0.2f, request.getMaximum(), 0.0); assertEquals(Dimension.trust, request.getDimension()); assertEquals(1480520820000L, request.getBefore().longValue()); assertEquals(1480520821000L, request.getAfter().longValue()); assertEquals(25, request.getLimit().intValue()); assertEquals("g.out()", request.getQuery()); }
@Test void getCurrentSchemaVersionShouldReturnEmptyWhenTableIsEmpty() { assertThat(testee.getCurrentSchemaVersion().block()) .isEqualTo(Optional.empty()); }
@Test public void testOrFileFilterFileFilter() { final FileFilter filter1 = new DummyFilter(); final FileFilter filter2 = new DummyFilter(); final FileFilter filter3 = new DummyFilter(); final OrFileFilter testee = new OrFileFilter(filter1, filter2, filter3); assertContainsOnly(testee.getFileFilters(), filter1, filter2, filter3); }
@Test public void matches() throws Exception { TotalConnectionAtom matcher = new TotalConnectionAtom(2, mock(IChemObjectBuilder.class)); IAtom atom = mock(IAtom.class); when(atom.getProperty(SMARTSAtomInvariants.KEY)) .thenReturn( new SMARTSAtomInvariants(mock(IAtomContainer.class), 0, 0, Collections.<Integer> emptySet(), 0, 0, 2, 0)); assertTrue(matcher.matches(atom)); }
@Test public void testInit() throws Exception { manager.init(10); assertNull(mockContext.mCallbacks); manager.init(14); assertNotNull(mockContext.mCallbacks); }
@Test public void testDequeueReturnsNullWhenEmpty() { assertNull(queue.dequeue()); }
@Test public void getPatchingDetailsEmptyListTest() throws Exception { when(patchingService.getPatchingDetails(anyString(),anyObject())).thenReturn(CommonTestUtil.getListMapObject()); when(patchingService.filterMatchingCollectionElements(anyObject(),anyString(),anyBoolean())).thenReturn(new ArrayList<HashMap<String,Object>>()); assertThat(patchingController.getPatchingDetails(CommonTestUtil.getRequest()), is(notNullValue())); assertThat(patchingController.getPatchingDetails(CommonTestUtil.getRequestEmpty()), is(notNullValue())); when(patchingService.getPatchingDetails(anyString(),anyObject())).thenThrow(new ServiceException()); when(complianceService.formatException(anyObject())).thenReturn(ResponseUtils.buildFailureResponse(new ServiceException())); ResponseEntity<Object> responseObj = patchingController.getPatchingDetails(CommonTestUtil.getRequest()); assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED); }
@Test public void testCorrectParameters_nonLocalizedOutput() throws Exception { Map<String, Object> params = ImmutableMap.of( PARAMETER_PATH, BRAND_TAGS_ROOT, PARAMETER_LOCALIZED,"false", PARAMETER_DEFAULT_LOCALIZATION,"pl"); context.request().setParameterMap(params); servlet.doGet(context.request(), context.response()); assertEquals(HttpStatus.SC_OK, context.response().getStatus()); String output = context.response().getOutputAsString(); assertTrue(output.contains("Products {{products}}")); assertFalse(output.contains("pl[")); assertFalse(output.contains("en[")); }
@Test public void testBooleanConversion() throws Exception { row = new RowMetaAndData( rowsMeta, null, true, null ); assertEquals( true, row.getAsJavaType( "bool", boolean.class, converter ) ); assertEquals( true, row.getAsJavaType( "bool", Boolean.class, converter ) ); assertEquals( 1, row.getAsJavaType( "bool", int.class, converter ) ); assertEquals( 1, row.getAsJavaType( "bool", Integer.class, converter ) ); assertEquals( 1L, row.getAsJavaType( "bool", long.class, converter ) ); assertEquals( 1L, row.getAsJavaType( "bool", Long.class, converter ) ); assertEquals( "Y", row.getAsJavaType( "bool", String.class, converter ) ); row = new RowMetaAndData( rowsMeta, null, false, null ); assertEquals( false, row.getAsJavaType( "bool", boolean.class, converter ) ); assertEquals( false, row.getAsJavaType( "bool", Boolean.class, converter ) ); assertEquals( 0, row.getAsJavaType( "bool", int.class, converter ) ); assertEquals( 0, row.getAsJavaType( "bool", Integer.class, converter ) ); assertEquals( 0L, row.getAsJavaType( "bool", long.class, converter ) ); assertEquals( 0L, row.getAsJavaType( "bool", Long.class, converter ) ); assertEquals( "N", row.getAsJavaType( "bool", String.class, converter ) ); row = new RowMetaAndData( rowsMeta, null, null, null ); assertEquals( null, row.getAsJavaType( "bool", String.class, converter ) ); assertEquals( null, row.getAsJavaType( "bool", Integer.class, converter ) ); assertEquals( null, row.getAsJavaType( "bool", Long.class, converter ) ); assertEquals( null, row.getAsJavaType( "bool", Boolean.class, converter ) ); }
@FixFor( "MODE-869" ) @Test public void shouldOptimizePlanForSimpleQueryWithMultipleSubqueriesInCriteria() { node = optimize("SELECT c11, c12 FROM t1 WHERE c13 IN (SELECT c21 FROM t2 WHERE c22 < CAST('3' AS LONG)) AND c12 = (SELECT c22 FROM t2 WHERE c23 = 'extra')"); print = true; PlanNode expected = new PlanNode(Type.DEPENDENT_QUERY, selector("t1"), selector("t2")); PlanNode subquery1 = new PlanNode(Type.ACCESS, expected, selector("t2")); subquery1.setProperty(Property.VARIABLE_NAME, Subquery.VARIABLE_PREFIX + "1"); PlanNode project1 = new PlanNode(Type.PROJECT, subquery1, selector("t2")); project1.setProperty(Property.PROJECT_COLUMNS, columns(column("t2", "c22"))); PlanNode select1 = new PlanNode(Type.SELECT, project1, selector("t2")); select1.setProperty(Property.SELECT_CRITERIA, new Comparison(new PropertyValue(selector("t2"), "c23"), Operator.EQUAL_TO, new Literal("extra"))); PlanNode source1 = new PlanNode(Type.SOURCE, select1, selector("t2")); source1.setProperty(Property.SOURCE_NAME, selector("t2")); source1.setProperty(Property.SOURCE_COLUMNS, context.getSchemata().getTable(selector("t2")).getColumns()); PlanNode depQuery2 = new PlanNode(Type.DEPENDENT_QUERY, expected, selector("t1"), selector("t2")); PlanNode subquery2 = new PlanNode(Type.ACCESS, depQuery2, selector("t2")); subquery2.setProperty(Property.VARIABLE_NAME, Subquery.VARIABLE_PREFIX + "2"); PlanNode project2 = new PlanNode(Type.PROJECT, subquery2, selector("t2")); project2.setProperty(Property.PROJECT_COLUMNS, columns(column("t2", "c21"))); PlanNode select2 = new PlanNode(Type.SELECT, project2, selector("t2")); select2.setProperty(Property.SELECT_CRITERIA, new Comparison(new PropertyValue(selector("t2"), "c22"), Operator.LESS_THAN, new Literal(3L))); PlanNode source2 = new PlanNode(Type.SOURCE, select2, selector("t2")); source2.setProperty(Property.SOURCE_NAME, selector("t2")); source2.setProperty(Property.SOURCE_COLUMNS, context.getSchemata().getTable(selector("t2")).getColumns()); PlanNode mainQuery = new PlanNode(Type.ACCESS, depQuery2, selector("t1")); PlanNode project = new PlanNode(Type.PROJECT, mainQuery, selector("t1")); project.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11"), column("t1", "c12"))); PlanNode firstSelect = new PlanNode(Type.SELECT, project, selector("t1")); firstSelect.setProperty(Property.SELECT_CRITERIA, new SetCriteria(new PropertyValue(selector("t1"), "c13"), new BindVariableName(Subquery.VARIABLE_PREFIX + "2"))); PlanNode secondSelect = new PlanNode(Type.SELECT, firstSelect, selector("t1")); secondSelect.setProperty(Property.SELECT_CRITERIA, new Comparison(new PropertyValue(selector("t1"), "c12"), Operator.EQUAL_TO, new BindVariableName(Subquery.VARIABLE_PREFIX + "1"))); PlanNode source = new PlanNode(Type.SOURCE, secondSelect, selector("t1")); source.setProperty(Property.SOURCE_NAME, selector("t1")); source.setProperty(Property.SOURCE_COLUMNS, context.getSchemata().getTable(selector("t1")).getColumns()); assertPlanMatches(expected); }
@Test public void testGetAndIncrement() { AtomicRangeInteger atomicI = new AtomicRangeInteger(0, 10); for (int i = 0; i < 10; i++) { Assert.assertEquals(i, atomicI.getAndIncrement()); } Assert.assertEquals(0, atomicI.getAndIncrement()); Assert.assertEquals(1, atomicI.get()); Assert.assertEquals(1, atomicI.intValue()); Assert.assertEquals(1, atomicI.longValue()); Assert.assertEquals(1, (int) atomicI.floatValue()); Assert.assertEquals(1, (int) atomicI.doubleValue()); }
@Test public void testSetMediaEntity_withVideo() { final VideoInfo videoInfo = new VideoInfo(null, 1000, null); final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo); view.setMediaEntity(entity); assertEquals(View.GONE, view.badge.getVisibility()); assertEquals(View.VISIBLE, view.videoDuration.getVisibility()); assertEquals("0:01", view.videoDuration.getText()); }
@Test public void isOverwriteUserBundles() { PropertyResolver propertyResolver = createMock( PropertyResolver.class ); expect( propertyResolver.get( "org.ops4j.pax.runner.platform.overwriteUserBundles" ) ).andReturn( "true" ); replay( propertyResolver ); Configuration config = new ConfigurationImpl( propertyResolver ); assertEquals( "Overwrite user bundles", true, config.isOverwriteUserBundles() ); verify( propertyResolver ); }
@Test public void testBuildWithDisabledDefaultConstraints() throws Exception { unit.setActive(false); unit.setSecurity(false); PersonList context = new PersonList(); String expectedQuery = "SELECT e FROM Person e "; MultiplePagedSearch<PersonList> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); String actualQuery = unit.build(pagedSearch); assertEquals(expectedQuery, actualQuery); }
@Test public void testAlreadyUpgraded() { terminal.expectCommand( "yum upgrade --assumeyes --setopt skip_missing_names_on_update=False package-1 package-2 2>&1", 0, "foobar\nNo packages marked for update\n"); assertFalse(yum .upgrade("package-1", "package-2") .converge(taskContext)); }
@Test public void testGetCredentialsFromSharedState() { Map<String, Credentials> sharedState = new HashMap<>(); sharedState.put(SHARED_KEY_CREDENTIALS, new TestCredentials()); AbstractLoginModule lm = initLoginModule(TestCredentials.class, sharedState); assertTrue(lm.getCredentials() instanceof TestCredentials); SimpleCredentials sc = new SimpleCredentials("test", "test".toCharArray()); sharedState.put(SHARED_KEY_CREDENTIALS, sc); lm = initLoginModule(TestCredentials.class, sharedState); assertNull(lm.getCredentials()); sharedState.put(SHARED_KEY_CREDENTIALS, sc); lm = initLoginModule(SimpleCredentials.class, sharedState); assertTrue(lm.getCredentials() instanceof SimpleCredentials); sharedState.clear(); lm = initLoginModule(TestCredentials.class, sharedState); assertNull(lm.getCredentials()); }
@Test public void should_validate_tuple2() throws Exception { final TypeName typeName = TypeName.get(TestTypes.class.getDeclaredField("tuple2").getGenericType()); typeValidator.validateAllowedTypes(aptUtils, typeName, typeName); verify(aptUtils, times(4)).validateTrue(eq(true), anyString(), anyVararg()); }
@Test public void shouldReturnMetaData() throws SQLException { assertThat(resultSet.getMetaData(), is(notNullValue())); }
@Test public void toJsonReturnsExpected() { final CreatePolicyResponse underTestCreated = CreatePolicyResponse.of(TestConstants.Policy.POLICY_ID, TestConstants.Policy.POLICY, TestConstants.EMPTY_DITTO_HEADERS); final JsonObject actualJsonCreated = underTestCreated.toJson(FieldType.regularOrSpecial()); assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON_CREATED); }
@Test public void shouldThrowWebDriverExceptionAfterReachingMaxRetryCount() { when(javascriptControl.executeScript(startsWith("cssText = \"some: css\";"))).thenThrow(WebDriverException.class); assertThatThrownBy(() -> cssSupport.inject(CSS_TEXT)).isInstanceOf(WebDriverException.class); verify(javascriptControl, times(10)).executeScript(startsWith("cssText = \"some: css\";")); verify(awaitControl, times(9)).await(); verifyNoMoreInteractions(javascriptControl); verifyNoMoreInteractions(awaitControl); }
@Test public void temporalMapperTest() { String rawEventDate = "2019-01-01"; Long eventDate = LocalDate.of(2019, 1, 1).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli(); TemporalRecord temporalRecord = TemporalRecord.newBuilder() .setId("1") .setDay(1) .setYear(2019) .setMonth(1) .setStartDayOfYear(1) .setEventDate(EventDate.newBuilder().setLte(rawEventDate).build()) .setDateIdentified(rawEventDate) .setModified(rawEventDate) .build(); OccurrenceHdfsRecord hdfsRecord = toOccurrenceHdfsRecord(temporalRecord); Assert.assertEquals(Integer.valueOf(1), hdfsRecord.getDay()); Assert.assertEquals(Integer.valueOf(1), hdfsRecord.getMonth()); Assert.assertEquals(Integer.valueOf(2019), hdfsRecord.getYear()); Assert.assertEquals("1", hdfsRecord.getStartdayofyear()); Assert.assertEquals(eventDate, hdfsRecord.getEventdate()); Assert.assertEquals(eventDate, hdfsRecord.getDateidentified()); Assert.assertEquals(eventDate, hdfsRecord.getModified()); }
@Test(expected = InvalidArtifactException.class) public void inspectAdditionaPluginClasses() throws Exception { File artifactFile = createJar(InspectionApp.class, new File(TMP_FOLDER.newFolder(), "InspectionApp-1.0.0.jar"), new Manifest()); Id.Artifact artifactId = Id.Artifact.from(Id.Namespace.DEFAULT, "InspectionApp", "1.0.0"); Location artifactLocation = Locations.toLocation(artifactFile); try (CloseableClassLoader artifactClassLoader = classLoaderFactory.createClassLoader( ImmutableList.of(artifactLocation).iterator(), new EntityImpersonator(artifactId.toEntityId(), new DefaultImpersonator(CConfiguration.create(), null)))) { PluginClass pluginClass = new PluginClass("plugin_type", "plugin_name", "", "non-existing-class", "pluginConf", ImmutableMap.of()); artifactInspector.inspectArtifact(artifactId, artifactFile, artifactClassLoader, ImmutableSet.of(pluginClass)); } }
@Test public void testParsing() { assertNotEquals(new BacnetDate(119, 3, 15, 5), new BacnetDate(119, 3, 15, 6)); assertNotEquals(new BacnetDate(119, 3, 15, 5), new BacnetDate(119, 3, 16, 5)); assertNotEquals(new BacnetDate(119, 3, 15, 5), new BacnetDate(119, 4, 15, 5)); assertNotEquals(new BacnetDate(119, 3, 15, 5), new BacnetDate(118, 3, 15, 5)); testRoundtrip(new BacnetDate(119, 3, 15, 5)); testRoundtrip(new BacnetDate(119, 3, 15, BacnetDate.ANY)); testRoundtrip(new BacnetDate(119, BacnetDate.ANY, 15, BacnetDate.ANY)); testRoundtrip(new BacnetDate(119, 3, BacnetDate.ANY, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, 3, 15, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, 3, BacnetDate.ANY, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, BacnetDate.ANY, 15, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, BacnetDate.MONTH_EVEN, 15, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, BacnetDate.MONTH_EVEN, BacnetDate.DAY_OF_MONTH_LAST, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, BacnetDate.MONTH_ODD, BacnetDate.DAY_OF_MONTH_ODD, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, BacnetDate.MONTH_ODD, BacnetDate.DAY_OF_MONTH_EVEN, BacnetDate.ANY)); testRoundtrip(new BacnetDate(BacnetDate.ANY, BacnetDate.MONTH_ODD, BacnetDate.DAY_OF_MONTH_LAST, BacnetDate.ANY)); assertEquals(new BacnetDate(BacnetDate.ANY, BacnetDate.ANY, BacnetDate.ANY, BacnetDate.ANY), BacnetDate.parse("*")); }
@Test(expected = AssertionError.class) public void finding_object_with_null_hierarchical_name() throws Exception { TestScope s = new TestScope(); s.find((HierarchicalName) null); }
@Test public void should_handle_http_name() { InvocationDataPublisher publisher = factory.create(HttpInvocationDataPublisherImpl.NAME, config); assertThat(publisher, instanceOf(HttpInvocationDataPublisherImpl.class)); output.expect(is("")); }
@Test public void testIgnoredMangledStrings_Tilde() throws Exception { String mangled = "?BobsStuffIO@344GPAUHINSTANCE__@@U_COMMPROP@@~W"; MicrosoftDemangler demangler = new MicrosoftDemangler(); DemangledObject demangledObj = null; try { demangledObj = demangler.demangle(mangled, true); } catch (DemangledException e) { return; } fail(); }
@Test public void testContainsDate() { assertTrue(period_2001_03.contains(DATE_2001_03_10)); assertFalse(period_2001_03.contains(DATE_2001_01_10)); }
@Test public void testInvalidRfc3339() { try { DateAndTime.parseRfc3339String("1937-01"); fail("Parsing string should have failed, it's not valid RFC3339"); } catch (IllegalArgumentException e) { } }
@Test public void isValidEntityReferenceWithHint() { when(nameStrategyManager.getEntityReferenceNameStrategy(HINT)).thenReturn(nameStrategy); when(configuration.useValidation()).thenReturn(false); assertFalse(scriptService.isValid(entityReferenceSource, HINT)); verify(nameStrategy, times(1)).isValid(entityReferenceSource); verify(nameStrategyManager, never()).getEntityReferenceNameStrategy(); when(nameStrategyManager.getEntityReferenceNameStrategy(HINT)).thenReturn(null); when(configuration.useValidation()).thenReturn(false); assertTrue(scriptService.isValid(entityReferenceSource, HINT)); verify(nameStrategy, times(1)).isValid(entityReferenceSource); verify(nameStrategyManager, never()).getEntityReferenceNameStrategy(); when(nameStrategyManager.getEntityReferenceNameStrategy(HINT)).thenReturn(nameStrategy); when(configuration.useValidation()).thenReturn(true); assertFalse(scriptService.isValid(entityReferenceSource, HINT)); verify(nameStrategy, times(2)).isValid(entityReferenceSource); verify(nameStrategyManager, never()).getEntityReferenceNameStrategy(); when(nameStrategyManager.getEntityReferenceNameStrategy(HINT)).thenReturn(null); when(configuration.useValidation()).thenReturn(true); assertTrue(scriptService.isValid(entityReferenceSource, HINT)); verify(nameStrategy, times(2)).isValid(entityReferenceSource); verify(nameStrategyManager, never()).getEntityReferenceNameStrategy(); }
@Test public void testGetInstanceFromPrivilegesRootTree() { Tree tree = when(mock(Tree.class).getName()).thenReturn(REP_PRIVILEGES).getMock(); PrivilegeBits.getInstance(tree); Mockito.verify(tree, times(1)).getProperty(REP_NEXT); }
@Test public void testBuildWithDefaults() throws IOException { MisoServiceManager sut = MisoServiceManager.buildWithDefaults(null, null, new UserImpl()); assertNotNull(sut); SampleService sampleService = sut.getSampleService(); assertNotNull(sampleService); assertNotNull(sampleService.getAuthorizationManager()); assertNotNull(sampleService.getDeletionStore()); }
@Test void recordEvent() { EventBO event = EventBO.builder().build(); when(eventRemoteUrls.createEvent()).thenReturn(CREATE_URL); when(consentRestTemplate.postForEntity(eq(CREATE_URL), eq(event), eq(Boolean.class))).thenReturn(responseEntity); when(responseEntity.getBody()).thenReturn(true); assertTrue(eventServiceRestClient.recordEvent(event)); verify(eventRemoteUrls, times(1)).createEvent(); verify(consentRestTemplate, times(1)).postForEntity(eq(CREATE_URL), eq(event), eq(Boolean.class)); verify(responseEntity, times(1)).getBody(); }
@Test public void testValidateTenancyObject() { Tenancy tenant = new Tenancy().setDomain("athenz").setService("sports.provider"); assertTrue(zms.validateTenancyObject(tenant, "athenz", "sports.provider")); assertFalse(zms.validateTenancyObject(tenant, "athens", "sports.provider")); assertFalse(zms.validateTenancyObject(tenant, "athenz", "sports.providers")); }
@Test public void testBuildTreeFromIHasID () { final MockHasIDString [] x = new MockHasIDString [0]; final IParentProvider <MockHasIDString> pp = o -> null; final DefaultTreeWithID <String, MockHasIDString> aTree = TreeWithIDBuilder.buildTree (x, pp); assertNotNull (aTree); try { TreeWithIDBuilder.buildTree ((MockHasIDString []) null, pp); fail (); } catch (final NullPointerException ex) {} try { TreeWithIDBuilder.buildTree (x, null); fail (); } catch (final NullPointerException ex) {} }
@Test public void addColumnStringTest() throws Exception { String example = "ALTER TABLE table_name ADD COLUMN column_name INTEGER"; assertEquals(example + " DEFAULT 123", MParticleDatabaseHelper.addIntegerColumnString("table_name", "column_name", "123")); assertEquals(example, MParticleDatabaseHelper.addColumnString("table_name", "column_name", "INTEGER")); example = example + " DEFAULT abcd"; assertEquals(example, MParticleDatabaseHelper.addColumnString("table_name", "column_name", "INTEGER", "abcd")); }
@Test public void testFilterWithNoPredicates() throws Exception { CNF predicates = predicateFromQuery("MATCH ()-[a]->()"); EPGMEdgeFactory edgeFactory = new EPGMEdgeFactory(); Properties properties = Properties.create(); properties.set("name", "Anton"); EPGMEdge e1 = edgeFactory.createEdge("knows", GradoopId.get(), GradoopId.get(), properties); DataSet<EPGMEdge> edges = getExecutionEnvironment().fromElements(e1); List<Embedding> result = new FilterAndProjectEdges<>(edges, predicates, new ArrayList<>(), false) .evaluate() .collect(); assertEquals(1, result.size()); assertEquals(result.get(0).getId(1), e1.getId()); }
@Test public void testOnNodeDisconnected() { NodeDisconnectMessage msg = new NodeDisconnectMessage(); collector.onNodeDisconnected(msg); CollectorTestUtils.captureAddActivityItem(ActivityType.INFORMATION, activityLogger); }
@Test public void negativeStrikeErrorDualDeltaTest() { assertThatIllegalArgumentException() .isThrownBy(() -> BlackFormulaRepository.dualDelta(FORWARD, -STRIKES_INPUT[1], TIME_TO_EXPIRY, VOLS[1], true)); }
@Test public void givenAnActWhenDurationCalculatedThenCalculatedDurationIsDelegatedToTheViscosity() throws Exception { int timesTransitionViewed = 1; long currentDuration = 50L; calc.calculateNewDuration(mockViscosity, timesTransitionViewed, currentDuration); verify(mockViscosity).calculateDuration(currentDuration, timesTransitionViewed); }
@Test public void recognizeSymptomShouldReturnTheSameFraudServiceResponseWhenRiskScoreIsRiskGuardian() throws Exception { when(orderModelMock.getPaymentTransactions()).thenReturn(singletonList(worldpayPaymentAuthoriseTransactionModelMock)); when(worldpayPaymentAuthoriseTransactionModelMock.getRiskScore()).thenReturn(worldpayRiskScoreModelMock); final double negativeRiskScoreValue = configuredLimitValue - 10; final String riskScoreValue = String.valueOf(negativeRiskScoreValue); when(worldpayRiskScoreModelMock.getValue()).thenReturn(riskScoreValue); final FraudServiceResponse fraudServiceResponse = new FraudServiceResponse(StringUtils.EMPTY); testObj.recognizeSymptom(fraudServiceResponse, orderModelMock); assertEquals(0D, fraudServiceResponse.getScore(), 0.0); assertEquals(Collections.emptyList(), fraudServiceResponse.getSymptoms()); verify(worldpayRiskScoreModelMock).getValue(); }
@Test public void testGetUniqueHandler() { int i1 = session.getUniqueHandler(); int i2 = session.getUniqueHandler(); assertTrue("Same handler", i1 != i2); }
@Test public void search() throws Exception { Mockito.doReturn(EMPTY_SEARCH_RESULT).when(CLIENT).execute(Mockito.any(Search.class)); List<TSDRRecord> result = store.search( ElasticSearchStore.RecordType.METRIC, DataCategory.EXTERNAL.name(), 1L, 0L, 1000); assertThat(result).isEmpty(); result = store.search( ElasticSearchStore.RecordType.METRIC, DataCategory.EXTERNAL.name(), 0L, 0L, 1000); assertThat(result).isEqualTo(Collections.emptyList()); Mockito.verify(CLIENT, Mockito.atLeastOnce()).execute(Mockito.any()); }
@Test public void convertValid() { PageTemplate template = new PageTemplateImpl("1"); template.setName("name"); template.setSubPageTemplates(new ArrayList<PageTemplate>()); template.setDefaultTemplate(true); template.setRenderSequence(1); template.setPageTemplateRegions(new ArrayList<PageTemplateRegion>()); template.setPageLayout(new PageLayoutImpl()); template.setParentPageTemplate(new PageTemplateImpl("1")); template.setDescription("Description"); template.setPageType(PageType.USER.toString()); JpaPageTemplate jpaTemplate = converter.convert(template); assertThat(jpaTemplate, is(not(sameInstance(template)))); assertThat(jpaTemplate, is(instanceOf(JpaPageTemplate.class))); assertThat(jpaTemplate.getId().toString(), is(equalTo(template.getId()))); assertThat(jpaTemplate.getPageType(), is(equalTo(template.getPageType()))); assertThat(jpaTemplate.getName(), is(equalTo(template.getName()))); assertThat(jpaTemplate.getDescription(), is(equalTo(template.getDescription()))); assertThat(jpaTemplate.getParentPageTemplate(), is(instanceOf(JpaPageTemplate.class))); assertThat(jpaTemplate.getPageLayout(), is(instanceOf(JpaPageLayout.class))); assertThat(jpaTemplate.getPageTemplateRegions(), is(equalTo(template.getPageTemplateRegions()))); assertThat(jpaTemplate.getRenderSequence(), is(equalTo(template.getRenderSequence()))); assertThat(jpaTemplate.isDefaultTemplate(), is(equalTo(template.isDefaultTemplate()))); assertThat(jpaTemplate.getSubPageTemplates(), is(equalTo(template.getSubPageTemplates()))); }
@Test public void getIsPassiveTest() { assertFalse( getIsPassive( BgpActivePeerConfig.builder() .setIpv4UnicastAddressFamily(Ipv4UnicastAddressFamily.builder().build()) .build())); assertFalse( getIsPassive( BgpUnnumberedPeerConfig.builder() .setPeerInterface("i") .setIpv4UnicastAddressFamily(Ipv4UnicastAddressFamily.builder().build()) .build())); assertTrue( getIsPassive( BgpPassivePeerConfig.builder() .setIpv4UnicastAddressFamily(Ipv4UnicastAddressFamily.builder().build()) .build())); }
@Test public void testRangeCardinality6() { MappeableBitmapContainer bc = generateContainer((char)100, (char)10000, 5); MappeableRunContainer rc = TestMappeableRunContainer.generateContainer(new char[]{7, 300, 400, 900, 1400, 5200}, 3); bc = (MappeableBitmapContainer) bc.iand(rc); assertEquals(5046, bc.cardinality); }
@Test public void shouldBuildEntity() { final String vertex = "vertex1"; final String propValue = "propValue"; final Entity entity = new Entity.Builder() .group(TestGroups.ENTITY) .vertex(vertex) .property(TestPropertyNames.STRING, propValue) .build(); assertEquals(TestGroups.ENTITY, entity.getGroup()); assertEquals(vertex, entity.getVertex()); assertEquals(propValue, entity.getProperty(TestPropertyNames.STRING)); }
@Test(expected = IllegalArgumentException.class) public void testGetUnknownProperty() { TypeReflector<TestClass> underTest = new TypeReflector<>(TestClass.class); TestClass instance = new TestClass(); underTest.get(instance, "unknown"); }
@Test public void testSendUserVerificationEmailWithCompetitionId() { final UserResource userResource = newUserResource() .withId(1L) .withFirstName("Sample") .withLastName("User") .withEmail("sample@me.com") .build(); final String hash = "1e627a59879066b44781ca584a23be742d3197dff291245150e62f3d4d3d303e1a87d34fc8a3a2e0"; ReflectionTestUtils.setField(service, "passwordEncoder", passwordEncoder); when(passwordEncoder.encode("1==sample@me.com==700")).thenReturn(hash); final Token newToken = new Token(TokenType.VERIFY_EMAIL_ADDRESS, User.class.getName(), userResource.getId(), hash, now(), JsonNodeFactory.instance.objectNode()); final String verificationLink = String.format("%s/registration/verify-email/%s", webBaseUrl, hash); final Map<String, Object> expectedNotificationArguments = asMap("verificationLink", verificationLink); final NotificationSource from = systemNotificationSourceMock; final NotificationTarget to = new UserNotificationTarget(userResource.getName(), userResource.getEmail()); final Notification notification = new Notification(from, singletonList(to), RegistrationNotificationService.Notifications.VERIFY_EMAIL_ADDRESS, expectedNotificationArguments); when(tokenRepositoryMock.findByTypeAndClassNameAndClassPk(TokenType.VERIFY_EMAIL_ADDRESS, User.class.getName(), 1L)).thenReturn(empty()); when(tokenRepositoryMock.save(isA(Token.class))).thenReturn(newToken); when(notificationServiceMock.sendNotificationWithFlush(notification, EMAIL)).thenReturn(serviceSuccess()); final ServiceResult<Void> result = service.sendUserVerificationEmail(userResource, of(456L), of(123L)); assertTrue(result.isSuccess()); verify(tokenRepositoryMock).save(isA(Token.class)); verify(notificationServiceMock).sendNotificationWithFlush(notification, EMAIL); }
@Test public void testSendEmptyMessage() { KafkaEndpoint endpoint = new KafkaEndpoint(); endpoint.getEndpointConfiguration().setServer("localhost:9092"); endpoint.getEndpointConfiguration().setTopic("test"); try { endpoint.createProducer().send(null, context); } catch(IllegalArgumentException e) { Assert.assertEquals(e.getMessage(), "Message is empty - unable to send empty message"); return; } Assert.fail("Missing " + CitrusRuntimeException.class + " because of sending empty message"); }
@Test public void shouldNotFailOnTrivialyEmptyOperations() { final ConnectorSettings connectorSettings = new ConnectorSettings.Builder() .putConfiguredProperty("specification", "{\"swagger\": \"2.0\",\"info\": {\"version\": \"0.0.0\",\"title\": \"title\",\"description\": \"description\"},\"paths\": {\"/operation\": {\"get\": {\"responses\": {\"200\": {\"description\": \"OK\"}}}}}}") .build(); final APISummary summary = generator.info(ApiConnectorTemplate.SWAGGER_TEMPLATE, connectorSettings); assertThat(summary).isNotNull(); }
@Test public void testCloseShouldTearDownZkConnectionOnInterruptedException() throws Exception { CountDownLatch latch = new CountDownLatch(1); ZkClient zkClient = new ZkClient("127.0.0.1:" + zkServer.getPort()); ZkUtils zkUtils = new ZkUtils(KEY_BUILDER, zkClient, CONNECTION_TIMEOUT_MS, SESSION_TIMEOUT_MS, new NoOpMetricsRegistry()); Thread threadToInterrupt = new Thread(() -> { try { latch.await(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } zkUtils.close(); }); threadToInterrupt.start(); Field field = ZkClient.class.getDeclaredField("_closed"); field.setAccessible(true); Assert.assertFalse(field.getBoolean(zkClient)); threadToInterrupt.interrupt(); threadToInterrupt.join(); Assert.assertTrue(field.getBoolean(zkClient)); }
@Test public void testContainerLimit() { when(schedulerConfiguration.getMaxLaunchingTasksPerMachine()).thenReturn(2); ConstraintEvaluator.Result result = constraint.evaluate( createTaskRequest(TASK_ID), createVirtualMachineCurrentStateMock(INSTANCE_ID, Collections.emptyList(), createMockAssignmentResultList(2)), taskTrackerState); assertThat(result.isSuccessful()).isFalse(); }
@Test public void testVerifySignatureFailWhenSignatureDoesntMatch() { NotificationRequestSignatureVerifier verifier = new NotificationRequestSignatureVerifier("someApiSecret"); boolean actual = verifier.verifySignature( "{}", "0", "notMatchingForSure"); assertFalse(actual); }
@Test public void testRewind() throws IOException { ThriftRecordReader recordReader = new ThriftRecordReader(); recordReader.init(_tempFile, getSourceFields(), getThriftRecordReaderConfig()); List<GenericRow> genericRows = new ArrayList<>(); while (recordReader.hasNext()) { genericRows.add(recordReader.next()); } recordReader.rewind(); while (recordReader.hasNext()) { genericRows.add(recordReader.next()); } recordReader.close(); Assert.assertEquals(genericRows.size(), 4, "The number of rows return after the rewind is incorrect"); }
@Test public void resolveWithExplicitSpaceReference() { SpaceReference reference = this.resolver.resolve("", new SpaceReference("space", new WikiReference("wiki"))); Assert.assertEquals("space", reference.getName()); Assert.assertEquals("wiki", reference.getWikiReference().getName()); }
@Test public void testRenderShouldNotHaveGroupingSymbols() throws Exception { DDMForm ddmForm = DDMFormTestUtil.createDDMForm(); DDMFormField ddmFormField = DDMFormTestUtil.createDDMFormField( "Numeric", "Numeric", "numeric", "double", false, false, false); ddmForm.addDDMFormField(ddmFormField); DDMFormValues ddmFormValues = DDMFormValuesTestUtil.createDDMFormValues( ddmForm); LocalizedValue localizedValue = new LocalizedValue(); localizedValue.addString(LocaleUtil.US, "111222333.25"); DDMFormFieldValue ddmFormFieldValue = DDMFormValuesTestUtil.createDDMFormFieldValue( "Numeric", localizedValue); ddmFormValues.addDDMFormFieldValue(ddmFormFieldValue); String enRenderedValue = _numericDDMFormFieldValueRenderer.render( ddmFormFieldValue, LocaleUtil.US); Assert.assertEquals("111222333.25", enRenderedValue); String ptRenderedValue = _numericDDMFormFieldValueRenderer.render( ddmFormFieldValue, LocaleUtil.BRAZIL); Assert.assertEquals("111222333,25", ptRenderedValue); }
@Test public void nullOnNull() { assertThat(declarativeSampler.trySample(null)) .isNull(); }
@Test public void shouldAllowRemovingAllValuesForKey() { LocalDuplicateIndex<Long> index = duplicateValueIndex(Long.class); loadLongIndexWithNoDuplicates(index, 10); assertThat(index.estimateTotalCount(), is(10L)); assertThat(index.estimateTotalCount(), is(10L)); assertMatch(index, Operator.EQUAL_TO, 20L, key(2)); index.remove(key(2)); assertNoMatch(index, Operator.EQUAL_TO, 20L); assertThat(index.estimateTotalCount(), is(9L)); assertNoMatch(index, Operator.EQUAL_TO, 200L); index.remove(key(20)); assertNoMatch(index, Operator.EQUAL_TO, 200L); assertThat(index.estimateTotalCount(), is(9L)); index.remove(key(3), null, 30L); assertNoMatch(index, Operator.EQUAL_TO, 30L); assertThat(index.estimateTotalCount(), is(8L)); index.remove(key(3), null, 3000L); assertNoMatch(index, Operator.EQUAL_TO, 30L); assertThat(index.estimateTotalCount(), is(8L)); }
@Test public void testRemoveDestination() { Spec.given(user) .expect(removing(primaryDestination), to().raise(InvalidDestinationException.class)) .when(removing(secondaryDestination)) .expect(User::destinations, to().have(oneElement())); }
@Test public void shouldAllowAnyDecimal() { givenFunctions( function(EXPECTED, false, DECIMAL) ); final KsqlScalarFunction fun = udfIndex.getFunction(ImmutableList.of(DECIMAL1_ARG)); assertThat(fun.name(), equalTo(EXPECTED)); }
@Test void getBalances_wrongId_fail() { when(balanceService.getBalancesReport(anyString(), anyString(), anyString())).thenReturn(getBalanceReport()); when(request.getRequestURI()).thenReturn(REQUEST_URI); ResponseObject<Xs2aBalancesReport> responseEntity = buildBalanceReportWithError(); when(balanceService.getBalancesReport(WRONG_CONSENT_ID, WRONG_ACCOUNT_ID, REQUEST_URI)) .thenReturn(responseEntity); when(responseErrorMapper.generateErrorResponse(MESSAGE_ERROR_AIS_404)) .thenReturn(new ResponseEntity<>(HttpStatus.NOT_FOUND)); ResponseEntity<?> result = accountController.getBalances(WRONG_ACCOUNT_ID, null, WRONG_CONSENT_ID, null, null, null, null, null, null, null, null, null, null, null, null, null); assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND); }
@Test public void testProcessSummaryMapper_mapProcessSummary() { final ProcessDefinition pd = new ProcessDefinition(); pd.setName("definitionName"); pd.setId("definitionId"); pd.setDynamic(true); pd.setContainerId("containerId"); pd.setVersion("1.0"); pd.setAssociatedEntities(singletonMap("e1", new String[0])); pd.setProcessVariables(singletonMap("initiator", "String")); pd.setReusableSubProcesses(singletonList("processOne")); pd.setServiceTasks(singletonMap("email", "org.jbpm")); pd.setNodes(singletonList(NodeDefinition.builder().id(1l).build())); pd.setTimers(singletonList(TimerDefinition.builder().id(1l).build())); assertProcessSummary(pd, new ProcessSummaryMapper().apply(pd)); }
@Test public void channelBuilderClassFoundReflectively() { AndroidChannelBuilder.forTarget("target"); }
@Test public void getAllDesignations() { sampleDesignation(); final List<Designation> desigList = designationService.getAllDesignations(); assertNotNull(desigList); }
@Test public void testDecodeToBigInteger() throws AddressFormatException { byte[] input = Base58.decode("129"); assertEquals(new BigInteger(1, input), Base58.decodeToBigInteger("129")); }
@Test public void testStandardDeviation33() { double[] T = { 0.2, 0.2, 0.2 }; double standardDeviation = TimeSeriesUtil.standardDeviation(T); double expectation = 0; assertEquals(expectation, standardDeviation, 1e-5); }
@Test( expected = SecurityException.class ) public void testAssignRoleToUserUnauthorizedException() throws UserRoleListService.UnauthorizedException { String userName = "testUser"; String roleNames = "Power User\tBusiness User\t"; setupMockSessionUser( SESSION_USER_NAME, false ); userRoleService.assignRolesToUser( userName, roleNames ); }
@Test public void testMultiPartCheckConfiguredSuccess() { assertThat(checkValidForProvider(ListCredentials.from("accessKey", "secretKey"), MULTI_PART_PROVIDER)) .isEqualTo(ListCredentials.from("accessKey", "secretKey")); assertThat(checkValidForProvider(ListCredentials.from("accessKey", "secretKey", "sessionToken"), MULTI_PART_PROVIDER)) .isEqualTo(ListCredentials.from("accessKey", "secretKey", "sessionToken")); }
@Test public void validateExpectedDataTypes() throws SQLException { setupPrimaryKeysMetaData(); when(primaryKeysResultSet.next()).thenReturn(true).thenReturn(false); when(columnResultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false); String columnName1 = "columnName1"; int columnDataType1 = 1; String columnName2 = "columnName2"; int columnDataType2 = 2; when(columnResultSet.getString("COLUMN_NAME")).thenReturn(columnName1).thenReturn(columnName2); when(columnResultSet.getInt("DATA_TYPE")).thenReturn(columnDataType1) .thenReturn(columnDataType2); TableMetaDataView data = tableMetaDataManager.getTableMetaDataView(connection, regionMapping); JDBCType dataType1 = data.getColumnDataType(columnName1); JDBCType dataType2 = data.getColumnDataType(columnName2); assertThat(dataType1.getVendorTypeNumber()).isEqualTo(columnDataType1); assertThat(dataType2.getVendorTypeNumber()).isEqualTo(columnDataType2); verify(primaryKeysResultSet).close(); verify(columnResultSet).close(); }
@Test public void sumOfIntegersOfACollection() { Collection<Integer> empty = asList(); assertTrue(0 == sumInts(empty)); assertTrue(10 == sumInts(asList(1,2,3,4))); assertTrue(-10 == sumInts(asList(-1,-2,-3,-4))); }
@Test public void testShortRow() { assertThrows( AddCellToColumnException.class, () -> { Table.read().csv("../data/short_row.csv"); }); }
@Test public void getDistributionSummaryByEnvTest() throws Exception { ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2,onpremserver"); Map<String, Long> prodInfo = new HashMap<>(); prodInfo.put("totalVulnerableAssets", 1L); prodInfo.put(Constants.VULNEREBILITIES, 1L); prodInfo.put("uniqueVulnCount", 1L); Map<String, Long> nonProdInfo = new HashMap<>(); nonProdInfo.put("totalVulnerableAssets", 1L); nonProdInfo.put(Constants.VULNEREBILITIES, 1L); nonProdInfo.put("uniqueVulnCount", 1L); when(vulnerabilityRepository.getProdInfoByEnv(anyString(), anyString())).thenReturn(prodInfo); when(vulnerabilityRepository.getNonProdInfoByEnv(anyString(), anyString())).thenReturn(nonProdInfo); assertThat(vulnerabilityService.getDistributionSummaryByEnv("ag", "3"), is(notNullValue())); ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2"); prodInfo = new HashMap<>(); prodInfo.put("totalVulnerableAssets", 0L); prodInfo.put(Constants.VULNEREBILITIES, 0L); prodInfo.put("uniqueVulnCount", 0L); nonProdInfo = new HashMap<>(); nonProdInfo.put("totalVulnerableAssets", 0L); nonProdInfo.put(Constants.VULNEREBILITIES, 0L); nonProdInfo.put("uniqueVulnCount", 0L); when(vulnerabilityRepository.getProdInfoByEnv(anyString(), anyString())).thenReturn(prodInfo); when(vulnerabilityRepository.getNonProdInfoByEnv(anyString(), anyString())).thenReturn(nonProdInfo); assertThat(vulnerabilityService.getDistributionSummaryByEnv("ag", ""), is(notNullValue())); }
@Test public void shouldReturnOrgRenamedEmail() throws Exception { EmailBean email = emails.organizationRenamed("Org", "SuperOrg"); assertEquals(email.getFrom(), MAIL_FROM); assertEquals(email.getReplyTo(), MAIL_FROM); assertEquals(email.getMimeType(), MediaType.TEXT_HTML); assertEquals(email.getSubject(), ORG_RENAMED_SUBJECT); verify(templateProcessor).process(eq(ORG_RENAMED_TEMPLATE), attributesCaptor.capture()); Map<String, Object> attributes = attributesCaptor.getValue(); assertEquals(attributes.get("orgOldName"), "Org"); assertEquals(attributes.get("orgNewName"), "SuperOrg"); }
@Test public void testJoin3BetweenTiers_1Left2Right_ThreeTiers2() throws EmptyStructureException { Join3BetweenTiers method = new Join3BetweenTiers(); ITabularFormula formula = createFormula(1, 2, 3, 2, 3, 4, 4, 6, 5, 7, 8, 9); SimpleTier tier = new SimpleTier(6, 7, 8); tier.add(_101_instance); assertTrue("Should join", method.tryJoin(formula, tier)); assertTrue("Permutation should match", formula.getPermutation().sameAs( createPermutation(1, 2, 3, 4, 5, 6, 7, 8, 9))); formula.complete(createPermutation(1, 2, 3, 4, 5, 6, 7, 8, 9)); assertTrue(((ICompactTripletsStructure)formula).tiersSorted()); }
@Test public void testGetConfigParamMessageOfIofogUuid() { assertEquals("Iofog UUID", CmdProperties.getConfigParamMessage(CommandLineConfigParam.IOFOG_UUID)); }
@Test public final void testByteToHexString() { byte b = (byte)0xE8; String expectedResult = "E8"; String result = HexUtils.byteToHexString(b); assertThat("Returned string must be equal to 'expectedResult'", result, is(equalTo(expectedResult))); }
@Test void addRegistry() { RegistryConfig registry = new RegistryConfig(); ApplicationBuilder builder = new ApplicationBuilder(); builder.addRegistry(registry); Assertions.assertNotNull(builder.build().getRegistry()); Assertions.assertEquals(1, builder.build().getRegistries().size()); Assertions.assertSame(registry, builder.build().getRegistry()); }
@Test public void startsOffEmpty() throws Exception { Traits traits = new Traits(); assertThat(traits.iterator().hasNext(), is(false)); }
@Test public void test_or_permission_ok() throws Throwable { Mockito.when(subjectUnderTest.isPermitted("CODE")).thenReturn(true); Mockito.when(subjectUnderTest.isPermitted("EAT")).thenReturn(false); underTest = new RequiresPermissionsInterceptor(); MethodInvocation methodInvocation = Mockito.mock(MethodInvocation.class); when(methodInvocation.getMethod()) .thenReturn(RequiresPermissionsInterceptorTest.class.getMethod("securedOrMethod")); underTest.invoke(methodInvocation); }
@Test public void testAllDefinedInputsComplete() { final Iterable<TransRef<Integer, Character, ?>> trans = Automata.allDefinedInputs(this.complete, this.alphabet); int definedCount = 0; for (TransRef<Integer, Character, ?> t : trans) { Assert.assertNotNull(t.transition); Assert.assertNotNull(this.complete.getSuccessor(t.state, t.input)); definedCount++; } Assert.assertEquals(definedCount, this.complete.size() * this.alphabet.size()); }
@Test public void pairOfTasksEndEndFirstOfThemWithOneSubtask2() { givenPairOfTasksEndEndFirstOfThemWithOneSubtask(2, 3, 6); List<ITaskFundamentalProperties> criticalPath = buildCalculator().calculateCriticalPath(diagramGraphExample); assertThat(criticalPath.size(), equalTo(1)); assertThat(daysBetweenStartAndEnd(criticalPath.get(0)), equalTo(6)); }
@Test(expected = IllegalArgumentException.class) public void visitFileNull1() { final Path dir = newTempDir(null); final Path file = Files.createTempFile(dir, "foo", "bar"); simple.visitFile(null, Files.readAttributes(file, BasicFileAttributes.class)); }
@Test public void testBytesToInt() throws Exception { final int[] ints = ByteConversion.bytesToInts(new byte[]{0x01, 0x02, 0x03, 0x04}); assertEquals(0x01020304, ints[0]); }
@Test public void getStatus() { problemDetails.getStatus(); }
@Test public void testThatTriggerWordsAreTurnedToLowerCaseForFlagLowerCaseInputFalse() { final WordBreakCompoundRewriterFactory factory = new WordBreakCompoundRewriterFactory("w2", () -> null, "field1", false, 1, 2, 1, Arrays.asList("Word1", "word2"), false, 2, false); final TrieMap<Boolean> triggerWords = factory.getReverseCompoundTriggerWords(); Assert.assertFalse(triggerWords.get("word1").getStateForCompleteSequence().isFinal()); Assert.assertTrue(triggerWords.get("Word1").getStateForCompleteSequence().isFinal()); Assert.assertTrue(triggerWords.get("word2").getStateForCompleteSequence().isFinal()); }
@SuppressWarnings("unchecked") @Test public void testValiate_returns_true_when_valid_file_date_with_and_error_found_and_exclude__no_match() throws IOException { ReflectionTestUtils.setField(instance, "excludeValidator", excludeValidator); when(fileAgeValidator.validate(file)).thenReturn(true); when(file.getPath()).thenReturn("The/File/Path/name.log"); final String aline = "This line is okay"; final String errorLine = "Exception blah blah blah"; when(bufferedReader.readLine()).thenReturn(aline).thenReturn(errorLine).thenReturn(null); when(scanForValidator.validate(aline)).thenReturn(false); when(scanForValidator.validate(errorLine)).thenReturn(true); when(excludeValidator.validate(aline)).thenReturn(false); when(excludeValidator.validate(errorLine)).thenReturn(false); boolean result = instance.validate(file); assertTrue(result); verify(results).addFile(anyString()); verify(results).addResult(anyString(), anyInt(), (List<String>) anyObject()); }
@Test public void getBalanceWithAccountAndBlock() throws Exception { World world = new World(); Account acc1 = new AccountBuilder(world).name("acc1").balance(Coin.valueOf(10000)).build(); Block genesis = world.getBlockByName("g00"); Block block1 = new BlockBuilder().parent(genesis).build(); world.getBlockChain().tryToConnect(block1); Web3Impl web3 = createWeb3(world); web3.repository = world.getBlockChain().getRepository(); String accountAddress = Hex.toHexString(acc1.getAddress().getBytes()); String balanceString = "0x" + Hex.toHexString(BigInteger.valueOf(10000).toByteArray()); org.junit.Assert.assertEquals(balanceString, web3.eth_getBalance(accountAddress, "0x1")); }
@Test void hasRightShouldReturnFalseWhenTheUserDoesNotOwnTheMailboxAndHasNoRightOnIt() { Mailbox mailbox = new Mailbox(MailboxPath.forUser(BOB, MailboxConstants.INBOX), UID_VALIDITY, MAILBOX_ID); assertThat(storeRightManager.hasRight(mailbox, Right.Write, aliceSession)) .isFalse(); }
@Test public void expect_fieldName_Set() { underTest = new NpmFieldMatcher(FIELD_NAME, "", fieldDeserializer); assertThat(underTest.getFieldName(), equalTo(FIELD_NAME)); }
@SuppressWarnings("unchecked") @Test public void testNoMessageCtx() { prc.setInboundMessageContext(null); Assert.assertNull(lookup.apply(prc)); }
@Test public void testShowDisabledSubmitButtonIfProjectManagerAndSignedGrantOfferLetterNotYetUploaded() { boolean leadPartner = true; boolean projectManager = true; boolean signedGrantOfferUploaded = false; GrantOfferLetterModel model = createGrantOfferLetterModel(leadPartner, projectManager, signedGrantOfferUploaded, stateForPmGeneratedOfferSentToProjectTeam); assertThat(model.isShowDisabledSubmitButton(), is(true)); }
@Test public void test_should_search_Disposals() { final List<Disposal> disposals = new ArrayList<>(); final Disposal disposal = getDisposalFromDB(); disposals.add(disposal); when(disposalQueryBuilder.getQuery(any(DisposalCriteria.class), any(List.class))).thenReturn(StringUtils.EMPTY); when(jdbcTemplate.query(any(String.class), any(Object[].class), any(DisposalRowMapper.class))) .thenReturn(disposals); assertTrue(disposals.equals(disposalRepository.search(new DisposalCriteria()))); }
@Test public void shouldReturnUniqueTokens2() { final String input = "___${____${TOKEN_1}_${TOKEN_2}_}___${TOKEN_2}_${${TOKEN_3}}_"; final List<String> tokens = StringUtils.allTokens(input, startDelimiter, endDelimiter, true); assertEquals(3, tokens.size()); assertEquals("TOKEN_1", tokens.get(0)); assertEquals("TOKEN_2", tokens.get(1)); assertEquals("TOKEN_3", tokens.get(2)); }
@Test public void Channel_GetInputStream() throws Exception { ArgumentCaptor<ChannelGetInputStreamSingle> captor = ArgumentCaptor.forClass(ChannelGetInputStreamSingle.class); rxWear.channel().getInputStream(channel); rxWear.channel().getInputStream(channel, TIMEOUT_TIME, TIMEOUT_TIMEUNIT); PowerMockito.verifyStatic(times(2)); Single.create(captor.capture()); ChannelGetInputStreamSingle single = captor.getAllValues().get(0); assertEquals(channel, single.channel); assertNoTimeoutSet(single); single = captor.getAllValues().get(1); assertEquals(channel, single.channel); assertTimeoutSet(single); }
@Test public void testValidDomainNameUmlaut() { String name = "ä"; AbstractDnsRecord record = new AbstractDnsRecord(name, DnsRecordType.A, 0) { }; Assert.assertEquals("xn--4ca.", record.name()); }
@Test public void test_getPathInfo_null_JENKINS_40116() throws IOException, ServletException { Mockito.when(servletRequest.getPathInfo()).thenReturn(null); Assert.assertFalse(resourceCacheControl.isCacheableResourceRequest(servletRequest)); }
@Test public void nextLevel_ok_increaseLassPassedWithCurrent() { json = new JSONObject("{'a':'data','levelProgress':{'total':4,'current':0,'lastPassed':-1}}"); assertJson("{'a':'data','levelProgress':{'total':4,'current':0,'lastPassed':-1}}"); json = LevelProgress.winLevel(json); assertJson("{'a':'data','levelProgress':{'total':4,'current':1,'lastPassed':0}}"); json = LevelProgress.winLevel(json); assertJson("{'a':'data','levelProgress':{'total':4,'current':2,'lastPassed':1}}"); json = LevelProgress.winLevel(json); assertJson("{'a':'data','levelProgress':{'total':4,'current':3,'lastPassed':2}}"); json = LevelProgress.winLevel(json); assertJson("{'a':'data','levelProgress':{'total':4,'current':4,'lastPassed':3}}"); json = LevelProgress.winLevel(json); assertEquals(null, json); }
@Test public void testUpdateWhenCompassViewHidden() { CameraPosition cameraPosition = new CameraPosition.Builder(CameraPosition.DEFAULT).bearing(24.0f).build(); when(compassView.isHidden()).thenReturn(true); uiSettings.update(cameraPosition); verify(compassView).update(-24.0f); }
@Test public void testRequestExpectContinueNotGenerated() throws Exception { final HttpContext context = new BasicHttpContext(null); final RequestConfig config = RequestConfig.custom().setExpectContinueEnabled(false).build(); context.setAttribute(HttpClientContext.REQUEST_CONFIG, config); final ClassicHttpRequest request = new BasicClassicHttpRequest("POST", "/"); final String s = "whatever"; final StringEntity entity = new StringEntity(s, StandardCharsets.US_ASCII); request.setEntity(entity); final RequestExpectContinue interceptor = new RequestExpectContinue(); interceptor.process(request, null, context); final Header header = request.getFirstHeader(HeaderElements.CONTINUE); Assert.assertNull(header); }
@Test public void testGetDINTER() { String actual = table.getDINTER(); String expected = "dinter"; assertEquals(expected, actual); }
@Test public void testGetLabel() { Category trivial = Category.createTrivial(ExampleData.buildDrugFluoxetine()); assertEquals(trivial.getCategorization().getDrug().getLabel(), trivial.getLabel()); Category catA = new Category(d_catz1, "A"); String expected = catA.getCategorization().getDrug().getLabel() + " " + catA.getName(); assertEquals(expected, catA.getLabel()); }
@Test public void formatsEachItem() { Collection<?> items = Arrays.asList("A", "B"); separatorIs(";"); formatStringIs("prefix:%s:suffix"); assertEquals("prefix:A:suffix;prefix:B:suffix", FormatJoinHelper.INSTANCE.apply(items, options)); }
@Test public void fetchItemWithRuntimeExceptionOnStoreTop() throws IOException { RuntimeException cause = new RuntimeException(); doThrow( cause ).when( sessionStorage ).storeTop( any( Item.class ) ); Throwable actual = thrownBy( () -> timeline.fetchItems() ); assertNotNull( actual ); assertSame( cause, actual ); }
@Test public void testGetQueryRunnerConnectionTypeHandler() throws Exception { Assert.assertEquals(true, MjdbcFactory.getQueryRunner(conn, EmptyTypeHandler.class) instanceof QueryRunner); }
@Test public void cdpDatahubClusterRequested() { long timestamp = System.currentTimeMillis(); UsageProto.CDPDatahubClusterRequested proto = UsageProto.CDPDatahubClusterRequested.newBuilder() .setAccountId(dummy) .setCdpdVersion(dummy) .setClusterId(dummy) .setClusterName(dummy) .setCreatorCrn(dummy) .setDatalakeCrn(dummy) .build(); usageReporter.cdpDatahubClusterRequested(timestamp, proto); ArgumentCaptor<UsageProto.Event> captor = ArgumentCaptor.forClass(UsageProto.Event.class); verify(usageReporter).log(captor.capture()); assertEquals(timestamp, captor.getValue().getTimestamp()); assertEquals(dummy, captor.getValue().getCdpDatahubClusterRequested().getCreatorCrn()); }
@Test public void shouldSaveANMLocation() { org.smartregister.domain.jsonmapping.util.LocationTree locationTree = new org.smartregister.domain.jsonmapping.util.LocationTree(); org.smartregister.domain.jsonmapping.Location location = new org.smartregister.domain.jsonmapping.Location(); location.setName("test location"); location.setLocationId("Test location ID"); locationTree.addLocation(location); userService.saveAnmLocation(locationTree); String locationString = AssetHandler.javaToJsonString(locationTree); verify(saveANMLocationTask).save(locationString); }
@Test public void initialiseProjectSetup_Procurement() { Competition competition = newCompetition().withFundingType(PROCUREMENT).build(); Competition competitionWithFinanceTypes = initialiseProjectSetupColumns(competition); assertTrue(competitionWithFinanceTypes.getProjectSetupStages().containsAll(EnumSet.of( PROJECT_DETAILS, PROJECT_TEAM, MONITORING_OFFICER, BANK_DETAILS, FINANCE_CHECKS, SPEND_PROFILE, GRANT_OFFER_LETTER ))); }
@Test(expected = IllegalArgumentException.class) public void addJavascriptInterfaceWithReservedName() { turbolinksSession.addJavascriptInterface(new Object(), TurbolinksSession.JAVASCRIPT_INTERFACE_NAME); }
@Test public void testFromHL7Null() { PatientInfo patientInfo = new PatientInfo(); transformer.fromHL7(null, patientInfo); assertNull(patientInfo.getName()); }
@Test public void testSetValue() { edge.setValue("newVal"); assertEquals("newVal", edge.getValue()); }
@Test public void testBooleanAlgorithms() throws InvalidIdentification { final ArrayList<ParameterValue> params = new ArrayList<>(); prm.addRequest(Arrays.asList( prm.getParameter("/REFMDB/SUBSYS1/AlgoBooleanTrueOutcome"), prm.getParameter("/REFMDB/SUBSYS1/AlgoBooleanFalseOutcome")), (ParameterConsumer) (subscriptionId, items) -> params.addAll(items)); proc.start(); tmGenerator.generate_PKT1_9(); assertEquals(2, params.size()); assertEquals(true, params.get(0).getEngValue().getBooleanValue()); assertEquals(false, params.get(1).getEngValue().getBooleanValue()); }
@Test public void findPiirhinnadDetailandmedv1() throws XRoadServiceConsumptionException { String piirhinnaKood = "32120"; List<String> koodid = Collections.singletonList(piirhinnaKood); List<Piirhind> items = ravimiametXRoadServiceImpl.findPiirhinnadDetailandmed(koodid); Assert.assertNotNull(items); Assert.assertTrue(items.size() == 1); }
@Test public void names_with_different_names_nas_aliases_should_not_be_equal() { final DoubleName aName = new DoubleName("a", asList("b", "c")); final DoubleName otherName = new DoubleName("1", asList("2", "3")); assertFalse(aName.equals(otherName)); }
@Test public void testStandardScenario() throws Exception { File testPom = new File(getBasedir(), "src/test/resources/unit/generate-open-api-standard/pom.xml"); GenerateOpenApiSchemaMojo mojo = (GenerateOpenApiSchemaMojo) lookupMojo("generateOpenApi", testPom); mojo.execute(); }
@Test public void shouldSuccessfullyCreateRequest() { final String symbol = "IBM"; final RestRequest<List<RecommendationTrends>> request = new RecommendationTrendsRequestBuilder() .withSymbol(symbol) .build(); assertThat(request.getMethodType()).isEqualTo(MethodType.GET); assertThat(request.getPath()).isEqualTo("/stock/{symbol}/recommendation-trends"); assertThat(request.getResponseType()).isEqualTo(new GenericType<List<RecommendationTrends>>() { }); assertThat(request.getPathParams()).containsExactly(entry("symbol", symbol)); assertThat(request.getQueryParams()).isEmpty(); }
@Test public void shouldAcceptKeyStoreFileAbsolutePath() throws Exception { configFile = createTempFileFromResource("org/kaazing/gateway/server/context/parse/data/gateway-config-abs-path-security" + "-files.xml", keyStoreFile.getAbsolutePath(), "keystore.pw", "truststore-JCEKS.db"); GatewayConfigDocument doc = parser.parse(configFile); Assert.assertNotNull(doc); resolver.resolve(doc); }
@Test public void tvTest7() throws BipSss.NotEnoughSharesException, BipSss.InvalidContentTypeException, BipSss.IncompatibleSharesException { Collection<Share> shares = addShareWithId("SSS-2mghkBRhDnYVjuy9JkUN9SMWEQfFeizsE", "6b91", new ArrayList<Share>()); addShareWithId("SSS-2mghkFR2Fm7psBGPYC5EAUSG12QjgytWq", "6b91", shares); addShareWithId("SSS-2mghkHpD5x8D6t1CitLCgNxPzRxna7Dy3", "6b91", shares); addShareWithId("SSS-2mghkQUfD3xh51X8ZKWKG5kfD5UGtB3YW", "6b91", shares); addShareWithId("SSS-2mghkTDKSbL766zz4GDLHiK1LdQR5hQYo", "6b91", shares); addShareWithId("SSS-2mghkUTqvgNqEPVMnVP7eNT5UfJ39GVv2", "6b91", shares); addShareWithId("SSS-2mghkZgCcPUhDY9wagDry9kF32fEkYDdN", "6b91", shares); addShareWithId("SSS-2mghkbtcpPWx6Y2g4k7t8feZ2UX71AAUN", "6b91", shares); addShareWithId("SSS-2mghkhWxkj6oBWvQwXpXQVaDEZzCefrn7", "6b91", shares); addShareWithId("SSS-2mghkmwiADHSYZwokYBMEtkJRm53xUPcH", "6b91", shares); addShareWithId("SSS-2mghkqSiSaiPMp9R81A7yCeojoQnhbkuK", "6b91", shares); addShareWithId("SSS-2mghktFpVoXVKVLLrDVNRryYQwxJEzMKX", "6b91", shares); addShareWithId("SSS-2mghkuYfqfAheZu6ywXfGoFmwxnqw64yw", "6b91", shares); addShareWithId("SSS-2mghkzvNoX6AupKpt9n9PVRMgZ6FPUSLe", "6b91", shares); addShareWithId("SSS-2mghm2UGDwYuVYTSx9YYiYDCzeCmS2XGH", "6b91", shares); addShareWithId("SSS-2mghm6ePLVPJQhsryzUfst9RWochCXK5j", "6b91", shares); String result1 = BipSss.combine(shares); assertResult(result1, HexUtils.toBytes("7f34fc0d96fe07c01e28b183a5711805")); }
@Test public void testBuildPackageName() { assertEquals("com.github.kklisura", StringUtils.buildPackageName("com.github", "kklisura")); }
@Test public void addCallsDatabaseInsert1times() throws Exception { String tablename = ""; String[] tableColumns = new String[]{}; commonRepository = new CommonRepository(tablename, tableColumns); repository = Mockito.mock(Repository.class); sqliteDatabase = Mockito.mock(SQLiteDatabase.class); Mockito.when(repository.getWritableDatabase()).thenReturn(sqliteDatabase); commonRepository.updateMasterRepository(repository); commonRepository.add(new CommonPersonObject("", "", new HashMap<String, String>(), "")); Mockito.verify(sqliteDatabase, Mockito.times(1)).insert(Mockito.anyString(), Mockito.isNull(String.class), Mockito.any(ContentValues.class)); }
@Test public void shouldMoveDownWithSplitTwice() { Numbers numbers = new Numbers(Arrays.asList(new Number(2, pt(1, 0)), new Number(2, pt(1, 1)), new Number(2, pt(1, 2)), new Number(2, pt(1, 3))), 4, EMPTY); assertN(".2.." + ".2.." + ".2.." + ".2..", numbers); numbers.move(Direction.DOWN); assertN("...." + "...." + ".4.." + ".4..", numbers); numbers.move(Direction.DOWN); assertN("...." + "...." + "...." + ".8..", numbers); }
@Test public void test_presentValue_position() { CurrencyAmount computed = PRICER.presentValue(POSITION, RATES_PROVIDER, ISSUER_RATES_PROVIDER); double expected1 = PRODUCT_PRICER.presentValue( RPRODUCT, RATES_PROVIDER, ISSUER_RATES_PROVIDER, VALUATION).getAmount() * QUANTITY; assertThat(computed.getAmount()).isCloseTo(expected1, offset(NOTIONAL * QUANTITY * TOL)); }
@Test public void listRequiredFields() { List<ExportField> fields = this.sut.listRequiredFields(); Assertions.assertThat(fields).hasSize(2); Assertions.assertThat(fields.get(0)).isNotNull(); Assertions.assertThat(fields.get(1)).isNotNull(); Assertions.assertThat(fields.get(0).getId()).isEqualTo(SquashExporter.PROJECT_NAME); Assertions.assertThat(fields.get(0).getName()).isEqualTo("Targeted project's name"); Assertions.assertThat(fields.get(0).getType()).isEqualTo("string"); Assertions.assertThat(fields.get(0).getDescription()).isNotBlank(); Assertions.assertThat(fields.get(1).getId()).isEqualTo(SquashExporter.USER); Assertions.assertThat(fields.get(1).getName()).isEqualTo("Targeted User's name"); Assertions.assertThat(fields.get(1).getType()).isEqualTo("string"); Assertions.assertThat(fields.get(1).getDescription()).isNotBlank(); }
@Test public void whenOneXWikiEventTypesIsEnabled() throws Exception { NotificationPreference pref = mock(NotificationPreference.class); when(pref.isNotificationEnabled()).thenReturn(true); Map<NotificationPreferenceProperty, Object> properties = new HashMap<>(); properties.put(NotificationPreferenceProperty.EVENT_TYPE, "update"); when(pref.getProperties()).thenReturn(properties); when(notificationPreferenceManager.getAllPreferences(eq(currentUser))).thenReturn(Arrays.asList(pref)); mocker.getComponentUnderTest().ensureXWikiNotificationsAreEnabled(currentUser); verify(notificationPreferenceManager, never()).savePreferences(anyList()); }
@Test public void testCreateSubDataType() { final DataType expectedDataType = mock(DataType.class); final ItemDefinition itemDefinition = mock(ItemDefinition.class); final List<String> subDataTypeStack = singletonList("type"); final String expectedParentUUID = "expectedParentUUID"; doReturn(expectedDataType).when(manager).getDataType(); doReturn(manager).when(manager).anotherManager(); doReturn(manager).when(manager).newDataType(anyBoolean()); doReturn(manager).when(manager).withUUID(); doReturn(manager).when(manager).withParentUUID(anyString()); doReturn(manager).when(manager).withItemDefinition(any()); doReturn(manager).when(manager).withItemDefinition(any()); doReturn(manager).when(manager).withItemDefinitionName(); doReturn(manager).when(manager).withItemDefinitionType(); doReturn(manager).when(manager).withItemDefinitionConstraint(); doReturn(manager).when(manager).withItemDefinitionCollection(); doReturn(manager).when(manager).withTypeStack(any()); doReturn(manager).when(manager).withItemDefinitionSubDataTypes(); doReturn(manager).when(manager).withIndexedItemDefinition(); doReturn(subDataTypeStack).when(manager).getSubDataTypeStack(); doReturn(expectedDataType).when(manager).get(); when(expectedDataType.isReadOnly()).thenReturn(false); when(expectedDataType.getUUID()).thenReturn(expectedParentUUID); final DataType actualDataType = manager.createSubDataType(itemDefinition); final InOrder inOrder = Mockito.inOrder(manager); inOrder.verify(manager).newDataType(false); inOrder.verify(manager).withUUID(); inOrder.verify(manager).withParentUUID(expectedParentUUID); inOrder.verify(manager).withItemDefinition(itemDefinition); inOrder.verify(manager).withItemDefinitionName(); inOrder.verify(manager).withItemDefinitionType(); inOrder.verify(manager).withTypeStack(subDataTypeStack); inOrder.verify(manager).withItemDefinitionSubDataTypes(); inOrder.verify(manager).withIndexedItemDefinition(); assertEquals(expectedDataType, actualDataType); }
@Test void shouldNotFilter() { when(request.getServletPath()).thenReturn("/someUrl/login"); boolean result = filter.shouldNotFilter(request); assertTrue(result); }
@Test public void testTrue() { assertTrue(RequiredFlag.choose(true, null)); assertTrue(RequiredFlag.choose(true, false)); assertTrue(RequiredFlag.choose(true, true)); }
@Test public void testCreateMosaicImage() throws Exception { final RenderedImage image1 = createRenderedImage(1); final RenderedImage image2 = createRenderedImage(2); final RenderedImage image3 = createRenderedImage(3); final RenderedImage image4 = createRenderedImage(4); final RenderedImage image5 = createRenderedImage(5); final RenderedImage mosaicImage = CameraImageMosaic.create(image1, image2, image3, image4, image5); assertNotNull(mosaicImage); assertEquals(50, mosaicImage.getWidth()); assertEquals(100, mosaicImage.getHeight()); final Raster data = mosaicImage.getData(); for (int x = 0; x < mosaicImage.getWidth(); x++) { assertEquals(x / 10 + 1, data.getSample(x, 0, 0)); } }
@Test public void shouldEvaluateGivenSimpleNumber() { String testTest = "1234"; ComparisonResult comparisonResult = placeholderHandler.evaluate(testTest); assertThat(comparisonResult, equalTo(ComparisonResult.EQUAL)); }
@Test public void managementEnabledByAttribute() throws Exception { pool.getProduct().setAttribute(Product.Attributes.MANAGEMENT_ENABLED, "1"); certServiceAdapter.createX509Certificate(consumer, owner, pool, entitlement, product, new HashSet<>(), getProductModels(product, new HashSet<>(), "prefix", entitlement), new BigInteger("1234"), keyPair, true); verify(mockedPKI).createX509Certificate(any(String.class), argThat(new ListContainsProvidesManagement("1")), any(Set.class), any(Date.class), any(Date.class), any(KeyPair.class), any(BigInteger.class), nullable(String.class)); }
@Test public void testCompleteName_WithAlias() { String buffer = "a.acc"; int cursor = 4; List<InterpreterCompletion> candidates = new ArrayList<>(); Map<String, String> aliases = new HashMap<>(); aliases.put("a", "prod_dds.financial_account"); sqlCompleter.completeName(buffer, cursor, candidates, aliases); assertEquals(2, candidates.size()); assertTrue(candidates.contains(new InterpreterCompletion("account_rk", "account_rk", CompletionType.column.name()))); assertTrue(candidates.contains(new InterpreterCompletion("account_id", "account_id", CompletionType.column.name()))); }
@Test public void create(MockitoComponentManager mocker) throws Exception { XWikiDocument document = mock(XWikiDocument.class); DocumentReference documentReference = new DocumentReference("wiki", "Space", "Page"); when(this.xcontext.getWiki().getDocument(documentReference, this.xcontext)).thenReturn(document); this.modelBridge.create(documentReference); verify(this.xcontext.getWiki()).saveDocument(document, this.xcontext); assertLog(Level.INFO, "Document [{}] has been created.", documentReference); }
@Test public void testPutAttributeValues() { List<Column> columnList = generateColumnList(); DataSet dataSet = new DataSet(columnList); dataSet.initData(generateInputData()); TimeService ts = new TimeService(dataSet); ts.putAttributeValues("date1"); ts.putAttributeValues("date2"); ts.putAttributeValues("date3"); ts.putAttributeValues("date4"); Assert.assertEquals("longestValueMap size should be 4", 4, ts.earliestValueMap.size()); Assert.assertEquals("secondLongestValueMap size should be 4", 4, ts.latestValueMap.size()); Assert.assertEquals("secondShortestValueMap size should be 4", 4, ts.secondEarliestValueMap.size()); Assert.assertEquals("shortestValueMap size should be 4", 4, ts.secondLatestValueMap.size()); Assert.assertEquals("The result of firstName column should be 2000-06-06", "2000-06-06", SampleData.dateToString(ts.latestValueMap.get("date1"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-01-01", "2000-01-01", SampleData.dateToString(ts.latestValueMap.get("date2"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-06-06", "2000-06-06", SampleData.dateToString(ts.latestValueMap.get("date3"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-04-04", "2000-04-04", SampleData.dateToString(ts.latestValueMap.get("date4"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-05-05", "2000-05-05", SampleData.dateToString(ts.secondLatestValueMap.get("date1"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-01-01", "2000-01-01", SampleData.dateToString(ts.secondLatestValueMap.get("date2"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-05-05", "2000-05-05", SampleData.dateToString(ts.secondLatestValueMap.get("date3"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-03-03", "2000-03-03", SampleData.dateToString(ts.secondLatestValueMap.get("date4"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-01-01", "2000-01-01", SampleData.dateToString(ts.earliestValueMap.get("date1"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-01-01", "2000-01-01", SampleData.dateToString(ts.earliestValueMap.get("date2"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-01-01", "2000-01-01", SampleData.dateToString(ts.earliestValueMap.get("date3"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-03-03", "2000-03-03", SampleData.dateToString(ts.earliestValueMap.get("date4"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-02-02", "2000-02-02", SampleData.dateToString(ts.secondEarliestValueMap.get("date1"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-01-01", "2000-01-01", SampleData.dateToString(ts.secondEarliestValueMap.get("date2"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-02-02", "2000-02-02", SampleData.dateToString(ts.secondEarliestValueMap.get("date3"), "yyyy-MM-dd")); Assert.assertEquals("The result of firstName column should be 2000-04-04", "2000-04-04", SampleData.dateToString(ts.secondEarliestValueMap.get("date4"), "yyyy-MM-dd")); ts.init(); }
@Test public void testZeroRecordFile() { DataFile empty = new TestDataFile("file.parquet", Row.of(), 0); Expression[] exprs = new Expression[] { lessThan("id", 5), lessThanOrEqual("id", 30), equal("id", 70), greaterThan("id", 78), greaterThanOrEqual("id", 90), notEqual("id", 101), isNull("some_nulls"), notNull("some_nulls") }; for (Expression expr : exprs) { boolean shouldRead = new StrictMetricsEvaluator(SCHEMA, expr).eval(empty); Assert.assertTrue("Should always match 0-record file: " + expr, shouldRead); } }
@Test public void testSaveHeapDumpToFile() { Assume.assumeFalse("Unified pipeline import cannot yet be tested because of dependencies on TransportService.getInstance().", myUnifiedPipeline); long startTimeNs = 3; long endTimeNs = 8; HeapDumpInfo dumpInfo = HeapDumpInfo.newBuilder().setStartTime(startTimeNs).setEndTime(endTimeNs).build(); SnapshotBuilder snapshotBuilder = new SnapshotBuilder(2, 0, 0) .addReferences(1, 2) .addRoot(1); byte[] buffer = snapshotBuilder.getByteBuffer(); myTransportService.addFile(Long.toString(startTimeNs), ByteString.copyFrom(buffer)); ByteArrayOutputStream baos = new ByteArrayOutputStream(); MemoryProfiler.saveHeapDumpToFile(myStudioProfiler.getClient(), ProfilersTestData.SESSION_DATA, dumpInfo, baos, myStudioProfiler.getIdeServices().getFeatureTracker()); assertArrayEquals(buffer, baos.toByteArray()); }
@Test public void testLoginWithCredentials_ValidUserName_ValidPassword() throws ZaasClientException { prepareResponse(HttpStatus.SC_NO_CONTENT); String token = tokenService.login(VALID_USER, VALID_PASSWORD); assertNotNull("null Token obtained", token); assertNotEquals("Empty Token obtained", EMPTY_STRING, token); assertEquals("Token Mismatch","token", token); }
@Test public void ShouldConvertMgDlToA1cExactly_WhenA1CNeeded() { assertThat(GlucosioConverter.glucoseToA1C(18)).isEqualTo(2.25); }
@Test public void testReadSimple() throws IOException { MarkovNetwork mk = MarkovUaiReader.ex( basePath + "sampler/markov/378-Promedus_33.uai"); p(mk.n_var); mk.sample(10); }
@Test public void should_be_activated_when_sys_property_maven_color_is_true() { System.setProperty("maven.color", "true"); assertThat(ColorActivation.isActivated()).isTrue(); }
@Test public void testMavenGav() { MavenArtifactDescriptor desc = MavenArtifactDescriptor.build() .groupId("org.wildfly.swarm") .artifactId("fish") .version("1.0").build(); assertThat(desc.mavenGav()).isEqualTo("org.wildfly.swarm:fish:jar:1.0"); }
@Test public void testToString() { assertEquals("0001", new FileAccessPermissions(01).toString()); assertEquals("0123", new FileAccessPermissions(0123).toString()); assertEquals("7777", new FileAccessPermissions(07777).toString()); }
@Test(timeOut = 20_000) public void testCreateCustomCommitTableSucceeds() throws Throwable { String[] args = new String[]{COMMIT_TABLE_COMMAND_NAME, "-tableName", "my-commit-table", "-numRegions", "1"}; OmidTableManager omidTableManager = new OmidTableManager(args); omidTableManager.executeActionsOnHBase(hbaseConf); TableName tableName = TableName.valueOf("my-commit-table"); assertTrue(hBaseAdmin.tableExists(tableName)); int numRegions = hBaseAdmin.getTableRegions(tableName).size(); assertEquals(numRegions, 1, "Should have only 1 regions"); }
@Test public void add() throws Exception { mockMvc.perform(MockMvcRequestBuilders.post("/group/add") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(requestJson) .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()); }
@Test void tbody() { assertNotNull(Elements.tbody()); }
@Test public void executeWithObjectKeyOnlyForSuccess() throws Exception { setupValuesWithObject(false); final String contextJson = "{\"userInfo\":{\"name\":{\"firstName\":\"John\",\"lastName\":\"Silver\"}}}"; final ContextMatcher.ObjectValue objectValue = new ContextMatcher.ObjectValue("someKeyPath", null); when(jsonSerialization.deserialize(eq(contextJson), eq(Object.class))).thenAnswer(invocation -> objectValue); when(jsonSerialization.serialize(eq(objectValue))). thenAnswer(invocation -> contextJson); when(currentStep.getAllData(eq("context"))).then(invocation -> { LinkedList<IData<Context>> ret = new LinkedList<>(); ret.add(new MockData<>("context:someContextKey", new Context(Context.ContextType.object, jsonSerialization.deserialize(contextJson, Object.class)))); return ret; }); IBehaviorCondition.ExecutionState actualExecutionState = contextMatcher.execute(conversationMemory, new LinkedList<>()); verify(currentStep).getAllData("context"); verify(jsonSerialization).serialize(objectValue); verify(jsonSerialization).deserialize(contextJson, Object.class); Assert.assertEquals(IBehaviorCondition.ExecutionState.SUCCESS, actualExecutionState); }
@Test(expected = SourceControlException.class) public void testFromIsNull() throws SourceControlException { revisionResolver.resolve(null, DiffConstants.LOCAL_CHANGES_NOT_COMMITTED); }
@Test public void parser_is_null_safe() throws Exception { assertThat(parser.acceptBrotliEncoding((String)null)).isFalse(); }
@Test public void testPartition() throws Exception{ int a[]={2,5,3,0,2,3,0,3}; int b[]={9,6,7,3,8,2,4,5}; int c[]={1,2,3,4,5,6,7,9}; int result = selectIndexDataActivity.partition(b,0,b.length-1); System.out.println("result =" + result); Random random = new Random(); }
@Test public void returnsErrorResponseCode() { HttpBindingIndex index = model.getKnowledge(HttpBindingIndex.class); ShapeId id = ShapeId.from("ns.foo#ErrorExplicitStatus"); assertThat(index.getResponseCode(id), is(403)); }
@Test public void testBuild() throws Exception { MarkScaleValue context = new MarkScaleValue(); String expected = "SELECT e FROM MarkScaleValue e WHERE e.status=:status AND e.crtUserGroup IN (:userGroups) "; MultiplePagedSearch<MarkScaleValue> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); String actualQuery = unit.build(pagedSearch); assertEquals(expected, actualQuery); }
@Test public void testVariance_withMoreNumbers() throws Exception { final double[] data = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}; assertEquals(7.5, SelectionTool.variance(data), 0.0); }
@Test public void compactTest() { char[] letters = array( 'a', 'b', '\0', '\0', '\0', '\0', '\0', 'c', '\0', 'd', 'e' ); letters = compact( letters ); assertArrayEquals( array( 'a', 'b', 'c', 'd', 'e' ), letters ); }
@Test void curateFile_addTgt_moveSrc_deleteTgt() { SimplePendingActionFactory actionFactory = new SimplePendingActionFactory(REF_A1); PendingActionCurator curator = new PendingActionCurator(actionFactory); Map<String, MockVirtualFile> fs = MockVirtualFileSystem.createTree( "a.txt", "abc", "b.txt", "def" ); MockVirtualFile src = fs.get("a.txt"); MockVirtualFile tgt = fs.get("b.txt"); List<ActionStore.PendingAction> actions = new ArrayList<>(); P4ChangelistIdImpl cl1 = new P4ChangelistIdImpl(100, REF_A1); P4ChangelistIdImpl cl2 = new P4ChangelistIdImpl(100, REF_A1); ActionStore.PendingAction addFile = ActionStore.createPendingAction(REF_A1, new AddEditAction(tgt.asFilePath(), null, cl1, (String) null)); actions.add(addFile); ActionStore.PendingAction moveFile = ActionStore.createPendingAction(REF_A1, new MoveFileAction(src.asFilePath(), tgt.asFilePath(), cl1)); actions.add(moveFile); ActionStore.PendingAction deleteFile = ActionStore.createPendingAction(REF_A1, new DeleteFileAction(tgt.asFilePath(), cl2)); curator.curateActionList(deleteFile, actions); assertSize(1, actionFactory.created); ActionStore.PendingAction createdDelete = actionFactory.created.get(0); assertNull(createdDelete.serverAction); assertNotNull(createdDelete.clientAction); assertEquals(createdDelete.clientAction.getClass(), DeleteFileAction.class); DeleteFileAction deleteAction = (DeleteFileAction) createdDelete.clientAction; assertEquals(src.asFilePath(), deleteAction.getFile()); assertEquals(cl1, deleteAction.getChangelistId()); assertContainsExactly(actions, addFile, createdDelete); }
@Test public void hasAGaugeForTheJVMUptime() throws Exception { final Gauge gauge = (Gauge) gauges.getMetrics().get(MetricName.build("uptime")); assertThat(gauge.getValue()) .isEqualTo(100L); }
@Test public void testFirstRunEmptyDatabase() throws Exception { when(SQLUtility.getMostRecentRebuild(mockRWConnection)) .thenReturn(-1L); test.checkRebuildHasRun(true); verifyStatic(); SQLUtility.recordSuccessfulRebuild( eq(mockRWConnection), any(Long.class)); }
@Test public void testActivate(){ for(int i = 0; i < INPUT_VALUES.length; i++){ double functOutput = function.activate(INPUT_VALUES[i]); assertEquals("The function output is not as expected.", EXPECTED_FUNCT_OUT_VALUES[i], functOutput, DOUBLES_EQUAL_DELTA); } }
@Test public void testCombineMINUS() { DoubleArrCombiner combiner = new DoubleArrCombiner(Operation.MINUS); int length = 128; DoubleArray a1 = new DoubleArray(createArr(length, (double) 1), 0, length); DoubleArray a2 = new DoubleArray(createArr(length, (double) 2), 0, length); combiner.combine(a1, a2); for (int i = 0; i < length; i++) { Assert.assertEquals((byte)-1, a1.get()[i], 0.00001); } }
@Test public void rejectValidConnectionWithInvalidNumberTargetPayloadMapping() { exception.expect(ConnectionConfigurationInvalidException.class); final Connection connection = createConnection(CONNECTION_ID) .toBuilder() .setTargets(TestConstants.Targets.TARGET_WITH_INVALID_MAPPING_NUMBER) .build(); final ConnectionValidator underTest = getConnectionValidator(); underTest.validate(connection, DittoHeaders.empty(), actorSystem); }
@Test public void getRegionsThatUseDataSourceGivenNoRegionsReturnsEmptyList() { regionConfigs.clear(); List<String> result = command.getRegionsThatUseDataSource(cacheConfig, ""); assertThat(result).isEmpty(); }
@Test void shouldThrowIfRunningWouldOverflow() { long nodeCount = runQuery("MATCH (n) RETURN count(n) AS count", result -> result.<Long>columnAs("count").stream().findFirst().orElse(-1L) ); var query = GdsCypher.call() .loadEverything() .algo("gds.alpha.node2vec") .streamMode() .addParameter("walksPerNode", Integer.MAX_VALUE) .addParameter("walkLength", Integer.MAX_VALUE) .yields(); Throwable throwable = rootCause(assertThrows(QueryExecutionException.class, () -> runQuery(query))); assertEquals(IllegalArgumentException.class, throwable.getClass()); String expectedMessage = formatWithLocale( "Aborting execution, running with the configured parameters is likely to overflow: node count: %d, walks per node: %d, walkLength: %d." + " Try reducing these parameters or run on a smaller graph.", nodeCount, Integer.MAX_VALUE, Integer.MAX_VALUE ); assertEquals(expectedMessage, throwable.getMessage()); }
@Test public void testCalculateRangeForPartitioningKey() { assertEquals( calculateRangeForPartitioningKey( PARTITION_COLUMN_1, VARCHAR, ImmutableList.of(partition("p1=string1/p2=1234"))), Optional.empty()); assertEquals( calculateRangeForPartitioningKey( PARTITION_COLUMN_2, BIGINT, ImmutableList.of(partition("p1=string1/p2=__HIVE_DEFAULT_PARTITION__"))), Optional.empty()); assertEquals( calculateRangeForPartitioningKey( PARTITION_COLUMN_2, BIGINT, ImmutableList.of(partition("p1=string1/p2=__HIVE_DEFAULT_PARTITION__"), partition("p1=string1/p2=__HIVE_DEFAULT_PARTITION__"))), Optional.empty()); assertEquals( calculateRangeForPartitioningKey( PARTITION_COLUMN_2, BIGINT, ImmutableList.of(partition("p1=string1/p2=__HIVE_DEFAULT_PARTITION__"), partition("p1=string1/p2=1"))), Optional.of(new DoubleRange(1, 1))); assertEquals( calculateRangeForPartitioningKey( PARTITION_COLUMN_2, BIGINT, ImmutableList.of(partition("p1=string1/p2=2"), partition("p1=string1/p2=1"))), Optional.of(new DoubleRange(1, 2))); }
@Test public void testEM() { System.out.println("EM"); MathEx.setSeed(19650218); double[] data = new double[2000]; GaussianDistribution gaussian = new GaussianDistribution(-2.0, 1.0); for (int i = 0; i < 500; i++) data[i] = gaussian.rand(); ExponentialDistribution exponential = new ExponentialDistribution(0.8); for (int i = 500; i < 1000; i++) data[i] = exponential.rand(); GammaDistribution gamma = new GammaDistribution(2.0, 3.0); for (int i = 1000; i < 2000; i++) data[i] = gamma.rand(); ExponentialFamilyMixture mixture = ExponentialFamilyMixture.fit(data, new Mixture.Component(0.25, new GaussianDistribution(0.0, 1.0)), new Mixture.Component(0.25, new ExponentialDistribution(1.0)), new Mixture.Component(0.5, new GammaDistribution(1.0, 2.0)) ); System.out.println(mixture); assertEquals(0.30, mixture.components[0].priori, 1E-2); assertEquals(0.13, mixture.components[1].priori, 1E-2); assertEquals(0.57, mixture.components[2].priori, 1E-2); }
@Test public void testCreateCData() throws XMLStreamException { Characters event = factory.createCData("foobar"); verify(event, XMLStreamConstants.CDATA, "<![CDATA[foobar]]>"); }
@Test(expected = IllegalStateException.class) public void testMissingJcrSystem() { initializer.initialize(mock(NodeBuilder.class)); }
@Test public void testCreateTemplateItemAuth() throws Exception { doNothing().when(authorizeServiceSpy).authorizeAction(context, collection, Constants.ADMIN); itemService.createTemplateItem(context, collection); assertThat("testCreateTemplateItemAuth 0", collection.getTemplateItem(), notNullValue()); }
@Test public void testGenerateTestStaffAssignment() { StaffAssignment staffAssignment = SifEntityGenerator.generateTestStaffAssignment(); Assert.assertEquals(SifEntityGenerator.TEST_STAFFASSIGNMENT_REFID, staffAssignment.getRefId()); Assert.assertEquals(SifEntityGenerator.TEST_SCHOOLINFO_REFID, staffAssignment.getSchoolInfoRefId()); Assert.assertEquals(SifEntityGenerator.TEST_STAFFPERSONAL_REFID, staffAssignment.getStaffPersonalRefId()); Assert.assertEquals(SifEntityGenerator.TEST_EMPLOYEEPERSONAL_REFID, staffAssignment.getEmployeePersonalRefId()); Assert.assertEquals(2013, staffAssignment.getSchoolYear().intValue()); Assert.assertEquals("Twelfth grade computer science teacher", staffAssignment.getDescription()); Assert.assertEquals(YesNo.YES.getValue(), staffAssignment.getPrimaryAssignment()); Calendar jobStartDate = staffAssignment.getJobStartDate(); Assert.assertEquals(2010, jobStartDate.get(Calendar.YEAR)); Assert.assertEquals(7, jobStartDate.get(Calendar.MONTH)); Assert.assertEquals(1, jobStartDate.get(Calendar.DATE)); Calendar jobEndDate = staffAssignment.getJobEndDate(); Assert.assertEquals(2013, jobEndDate.get(Calendar.YEAR)); Assert.assertEquals(6, jobEndDate.get(Calendar.MONTH)); Assert.assertEquals(31, jobEndDate.get(Calendar.DATE)); Assert.assertEquals(new BigDecimal(1.00), staffAssignment.getJobFTE()); JobFunction jobFunction = staffAssignment.getJobFunction(); Assert.assertEquals(JobFunctionCode.INSTRUCTION.getValue(), jobFunction.getCode()); TeachingAssignment teachingAssignment = staffAssignment.getTeachingAssignment(); Assert.assertEquals(TeachingArea.COMPUTER_SCIENCE.getValue(), teachingAssignment.getCode()); GradeLevels gradeLevels = staffAssignment.getGradeLevels(); Assert.assertEquals(1, gradeLevels.size()); GradeLevel gradeLevel1 = gradeLevels.get(0); Assert.assertEquals(GradeLevelCode._12.getValue(), gradeLevel1.getCode()); Assert.assertEquals(YesNo.NO.getValue(), staffAssignment.getItinerantTeacher()); InstructionalLevel instructionalLevel = staffAssignment.getInstructionalLevel(); Assert.assertEquals(InstructionalLevelCode.COLLEGE_LEVEL.getValue(), instructionalLevel.getCode()); }
@Test public void annotatePlot_annotates_ifEnabled() { ps.onAfterDraw(plot, canvas); verify(canvas).drawText(anyString(), anyFloat(), anyFloat(), any(Paint.class)); }
@Test public void read_whenBufferIsEmpty() throws IOException { ByteBuffer emptyBuffer = ByteBuffer.wrap(new byte[0]); Storage storage = new Storage(HTTP_TRANSPORT, JSON_FACTORY, r -> {}); GoogleCloudStorageReadChannel readChannel = createReadChannel(storage, newLazyReadOptionsBuilder().build()); assertThat(readChannel.read(emptyBuffer)).isEqualTo(0); }
@Test public void testClear() { myTestObject.clear(); assertEquals(0, myTestObject.size()); }
@Test public void testConvertShouldReturnWhatConverterReturns() { given(entity.getBody()).willReturn("data"); given(converter.convert("data", "name")).willReturn("converted data"); String result = underTest.convert("name"); assertEquals("converted data", result); }
@Test public void testParseMacEUI48ToEUI64() { assertArrayEquals(new byte[]{0, (byte) 0xaa, 0x11, (byte) 0xff, (byte) 0xfe, (byte) 0xbb, 0x22, (byte) 0xcc}, parseMAC("00-AA-11-FF-FE-BB-22-CC")); assertArrayEquals(new byte[]{0, (byte) 0xaa, 0x11, (byte) 0xff, (byte) 0xfe, (byte) 0xbb, 0x22, (byte) 0xcc}, parseMAC("00:AA:11:FF:FE:BB:22:CC")); }
@Test void get_semantic_model() { assertThat(context.getSemanticModel()).isNull(); }
@Test public void targetedGroupFiftyFalse() { FeatureFilterEvaluationContext context = new FeatureFilterEvaluationContext(); LinkedHashMap<String, Object> parameters = new LinkedHashMap<String, Object>(); LinkedHashMap<String, Object> groups = new LinkedHashMap<String, Object>(); LinkedHashMap<String, String> g1 = new LinkedHashMap<String, String>(); g1.put("name", "g1"); g1.put("rolloutPercentage", "50"); groups.put("0", g1); parameters.put(USERS, new LinkedHashMap<String, Object>()); parameters.put(GROUPS, groups); parameters.put(DEFAULT_ROLLOUT_PERCENTAGE, 0); context.setParameters(parameters); context.setFeatureName("testFeature"); TargetingContext targetingContext = new TargetingContext(); ArrayList<String> targetedGroups = new ArrayList<String>(); targetedGroups.add("g1"); targetingContext.setUserId("Doe"); targetingContext.setGroups(targetedGroups); when(contextAccessor.getContextAsync()).thenReturn(Mono.just(targetingContext)); TargetingFilter filter = new TargetingFilter(contextAccessor); assertFalse(filter.evaluate(context)); }
@Test(expected = IllegalArgumentException.class) public void testPutThrowsExceptionWhenKeyIsNull() throws DatabaseCorruptedException { Table test = new TableClass(testDir, tableName, provider, columnTypes); test.put(null, testStoreableValue); }
@Test public void isEnable0() { RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start() .setEventBusEnable(false).build(); eventBus = new DefaultEventBus(config); assertFalse(eventBus.isEnable()); }
@Test public void testGetEntityToStrip_withLtrMarker() { final String result = TweetTextLinkifier.stripLtrMarker(TEST_RLT_STRING); assertNotEquals(TEST_RLT_STRING, result); assertFalse(result.endsWith(Character.toString('\u200E'))); }
@Test public void testOnCloseItemClicked() throws Exception { Notification.CloseNotificationHandler closeNotificationHandler = mock(Notification.CloseNotificationHandler.class); Notification notification = new Notification("test message", INFO, closeNotificationHandler); manager.showNotification(notification); reset(view); manager.onCloseItemClicked(notification); verify(closeNotificationHandler).onCloseClicked(); verify(notificationContainer).removeNotification(eq(notification)); verify(notificationMessageStack).removeNotification(eq(notification)); verify(view).setNotificationCount(eq(0)); }
@Test public void providesUptime() { metricRegistry.register("jvm.uptime.formatted", gauge("1d 3h 2m")); assertThat(newDashboardData().server().uptime(), is("1d 3h 2m")); }
@Test public void getImpressionTrackers_shouldReturnImpressionTrackersFromMoPubAndFromBaseNativeAd() { final List<String> impressionTrackers = subject.getImpressionTrackers(); assertThat(impressionTrackers).containsOnly("moPubImpressionTrackerUrl", "impressionUrl"); }
@Test public void testContentTypeStringParameters() throws Exception { Map<String, String> parameters = new HashMap<String, String>(); parameters.put("boundary", "-=Part.0.37877968dd4f6595.11eccf0271c.2dce5678cbc933d5=-"); ContentTypeField field = Fields.contentType("multipart/mixed", parameters); Assert.assertTrue(field.isValidField()); String expectedRaw = "Content-Type: multipart/mixed;\r\n " + "boundary=\"-=Part.0.37877968dd4f6595.11eccf0271c" + ".2dce5678cbc933d5=-\""; Assert.assertEquals(expectedRaw, decode(field)); }
@Test public void subpath() { ImmutableListPathCore sub = relative.subpath(1, 3); assertThat(sub, hasPath("to", "file")); }
@Test public void shouldReturnAnEmptyListWithElementsOfTheSpecifiedType() throws Exception { List<Integer> expected = new ArrayList<Integer>(); assertThat(listOf(Integer.class), is(expected)); }
@Test public void getWrappedClass_nonPrimitiveClass_returnsSameClass() { assertThat(ReflectionUtils.getWrappedClass(String.class), is(equalTo(String.class))); }
@Test public void testIsContentProvider() throws NotFoundException { CtClass clazz = ClassPool.getDefault().get(ContentProvider.class.getName()); assertThat(JavassistUtils.isContentProvider(clazz), is(true)); }
@Test public void testRemoveDrgElementsWithoutShapeWhenAllElementsHaveShape() { final String id1 = "id1"; final String id2 = "id2"; final String id3 = "id3"; final DRGElement e1 = createDRGElement(id1); final DRGElement e2 = createDRGElement(id2); final DRGElement e3 = createDRGElement(id3); final List<org.kie.dmn.model.api.DRGElement> drgElements = new ArrayList<>(Arrays.asList(e1, e2, e3)); final DMNShape s1 = createDMNShape(id1); final DMNShape s2 = createDMNShape(id2); final DMNShape s3 = createDMNShape(id3); final List<DMNShape> dmnShapes = new ArrayList<>(Arrays.asList(s1, s2, s3)); getDMNMarshaller().removeDrgElementsWithoutShape(drgElements, dmnShapes); assertEquals(3, drgElements.size()); assertEquals(e1, drgElements.get(0)); assertEquals(e2, drgElements.get(1)); assertEquals(e3, drgElements.get(2)); }
@Test public void clampToNearestBounds_toUpperBound() { assertEpsilonEquals(10., MathUtil.clampToNearestBounds(7., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(8., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(9., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(10., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(11., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(13., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(14., 2., 10.)); assertEpsilonEquals(10., MathUtil.clampToNearestBounds(15., 2., 10.)); }
@Test public void closedShouldSendEventsRegisteredOnTheCommandContext() { processEngineEventsAggregator.add(event); given(commandContext.getGenericAttribute(MessageProducerCommandContextCloseListener.PROCESS_ENGINE_EVENTS)) .willReturn(Collections.singletonList(event)); closeListener.closed(commandContext); verify(auditChannel).send(messageArgumentCaptor.capture()); assertThat(messageArgumentCaptor.getValue() .getPayload()).containsExactly(event); CloudRuntimeEvent<?, ?>[] result = messageArgumentCaptor.getValue().getPayload(); assertThat(result).hasSize(1); assertThat(result[0].getProcessInstanceId()).isEqualTo(MOCK_PROCESS_INSTANCE_ID); assertThat(result[0].getParentProcessInstanceId()).isEqualTo(MOCK_PARENT_PROCESS_INSTANCE_ID); assertThat(result[0].getBusinessKey()).isEqualTo(MOCK_BUSINESS_KEY); assertThat(result[0].getProcessDefinitionId()).isEqualTo(MOCK_PROCESS_DEFINITION_ID); assertThat(result[0].getProcessDefinitionKey()).isEqualTo(MOCK_PROCESS_DEFINITION_KEY); assertThat(result[0].getProcessDefinitionVersion()).isEqualTo(MOCK_PROCESS_DEFINITION_VERSION); assertThat(result[0].getAppName()).isEqualTo(APP_NAME); assertThat(result[0].getServiceName()).isEqualTo(SPRING_APP_NAME); assertThat(result[0].getServiceType()).isEqualTo(SERVICE_TYPE); assertThat(result[0].getServiceVersion()).isEqualTo(SERVICE_VERSION); }
@Test public void testEquals() { Assert.assertEquals(make(null, null, 0, 1), make(null, null, 0, 1)); Assert.assertEquals(make(null, 10, 0, 1), make(null, 10, 0, 1)); Assert.assertEquals(make(10, null, 0, 1), make(10, null, 0, 1)); Assert.assertEquals(make(10, 11, 0, 1), make(10, 11, 0, 1)); }
@Test public void nextUp1() { TimeScales.TimePeriod nextUp = TimeScales.nextUp(new TimePeriod(SECOND, 1)); assertThat(nextUp, equalTo(new TimePeriod(SECOND, 2))); }
@Test public void shouldGetRightsForUserAndWarehouse() { List<Right> expectedRights = new ArrayList<>(); Long userId = 1l; Long warehouseId = 2l; when(roleRightsMapper.getRightsForUserAndWarehouse(userId, warehouseId)).thenReturn(expectedRights); List<Right> rights = roleRightsRepository.getRightsForUserAndWarehouse(userId, warehouseId); assertThat(rights, is(expectedRights)); verify(roleRightsMapper).getRightsForUserAndWarehouse(userId, warehouseId); }
@Test public final void testInitTrustAllTrustManager() throws Exception { SettableJargonPropertiesMBean settableJargonProperties = new SettableJargonProperties(); settableJargonProperties.setBypassSslCertChecks(true); IRODSSession irodsSession = new IRODSSession(settableJargonProperties); Assert.assertTrue("did't set trust all", irodsSession.getX509TrustManager() instanceof TrustAllX509TrustManager); }
@Test public void testGetAllImagesForPagination() throws IOException { Image image1 = new Image(); image1.setId("image1"); Image image2 = new Image(); image2.setId("image2"); Image image3 = new Image(); image3.setId("image3"); String nextPageLink = "nextPageLink"; ResourceList<Image> imageResourceList = new ResourceList<>(Arrays.asList(image1, image2), nextPageLink, null); ResourceList<Image> imageResourceListNextPage = new ResourceList<>(Arrays.asList(image3)); ObjectMapper mapper = new ObjectMapper(); String serializedTask = mapper.writeValueAsString(imageResourceList); String serializedTaskNextPage = mapper.writeValueAsString(imageResourceListNextPage); setupMocksForPagination(serializedTask, serializedTaskNextPage, nextPageLink, HttpStatus.SC_OK); ImagesApi imagesApi = new ImagesRestApi(this.restClient); ResourceList<Image> response = imagesApi.getImages(); assertEquals(response.getItems().size(), imageResourceList.getItems().size() + imageResourceListNextPage .getItems().size()); assertTrue(response.getItems().containsAll(imageResourceList.getItems())); assertTrue(response.getItems().containsAll(imageResourceListNextPage.getItems())); }
@Test public void testToQueryString() { assertEquals("rootEntity.name in :rootEntity_name" + instance.hashCode(), instance.toQueryString()); InCriterion other = new InCriterion("name", Arrays.asList(1, 2)); assertEquals("rootEntity.name in :rootEntity_name" + other.hashCode(), other.toQueryString()); }
@Test public void shouldAllowUnauthenticatedRestUsersEndpointWithPOSTAndActionRegister() throws IOException, ServletException, NotFoundException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); FilterChain filterChain = mock(FilterChain.class); given(request.getContextPath()).willReturn("/openam"); given(request.getRequestURI()).willReturn("/openam/json/users"); given(request.getQueryString()).willReturn("other1=valueA&_action=register&other2=valueb"); given(request.getMethod()).willReturn("POST"); Map<String, String> details = new HashMap<String, String>(); details.put("resourceName", "/users"); given(restDispatcher.getRequestDetails("/users")).willReturn(details); amAuthNFilter.doFilter(request, response, filterChain); verify(filterChain).doFilter(request, response); }
@Test(expected = ObjectNotFoundException.class) public void populateForm_withErrors() { when(questionSetupCompetitionRestService.getByQuestionId(questionNotFoundId)).thenThrow( new ObjectNotFoundException()); CompetitionSetupForm result = populator.populateForm(competitionResource, Optional.of(questionNotFoundId)); assertEquals(null, result); }
@Test public void mapB() { Pair<Integer, Character> expectedResult = Pair.of(1, 'a'); Optional<Pair<Integer, String>> boxedPair = Optional.of(Pair.of(1, "a")); Pair<Integer, Character> result = boxedPair.map(Pair.mapB(b -> b.charAt(0))).get(); assertEquals(expectedResult, result); }
@Test void testHeaderIsNotMatched() throws MessagingException { setRegex("\\d"); setupAll(); Collection<MailAddress> matchedRecipients = matcher.match(mockedMail); assertNull(matchedRecipients); }
@Test public void testUpdateLoadBalancerWithCachingFalse() throws Exception { lb.setContentCaching(false); when(objectMessage.getObject()).thenReturn(lb); when(loadBalancerService.getWithUserPages(LOAD_BALANCER_ID, ACCOUNT_ID)).thenReturn(lb); when(config.getString(Matchers.<ConfigurationKey>any())).thenReturn("REST"); updateContentCachingListener.doOnMessage(objectMessage); verify(reverseProxyLoadBalancerStmService).updateLoadBalancer(lb, lb); verify(notificationService).saveLoadBalancerEvent(eq(USERNAME), eq(ACCOUNT_ID), eq(LOAD_BALANCER_ID), anyString(), anyString(), eq(EventType.UPDATE_CONTENT_CACHING), eq(CategoryType.UPDATE), eq(EventSeverity.INFO)); verify(loadBalancerService).setStatus(lb, LoadBalancerStatus.ACTIVE); }
@Test public void testIntersection() { List<IntCollection> clusters = ImmutableList.<IntCollection>builder() .add(new IntOpenHashSet(Arrays.asList(1, 2, 3, 4))) .add(new IntOpenHashSet(Arrays.asList(2, 3, 4, 5))) .add(new IntOpenHashSet(Arrays.asList(1, 3, 4))) .build(); Assert.assertThat(CollectionUtils.intersection(clusters), isPresentAnd(hasSize(2))); Assert.assertThat(CollectionUtils.intersection(clusters), isPresentAnd(hasItems(3, 4))); }
@Test public void testValidationSuccess() { Stack stack = getStack(); when(stackService.findStackByNameAndWorkspaceId(any(), anyLong())).thenReturn(Optional.of(stack)); when(stackService.getByNameOrCrnInWorkspace(any(), anyLong())).thenReturn(stack); when(requestValidator.validate(any(), any(), any())).thenReturn(getValidationResult(null)); service.validate(WORKSPACE_ID, ofName, null, null); }
@Test(expected = IllegalArgumentException.class) public void missingShouldFail() throws Exception { ProvisioningUtil.realLocation("mvn:missing:artifact:c56dfhrvfjc"); }
@Test(expected=NumberFormatException.class) public void parseEmptyIntegerTest() throws NumberFormatException { ParametersConverter.parseInteger(""); }
@Test public void listArgs() { String DN1 = "CN=adminuser, C=XX, O=Default Company Ltd"; String DN2 = "CN=Max Mustermann, C=DE, O=Volkswagen"; OptionsAndArgs o = opts("--clientPrincipal",DN1,"--clientPrincipal",DN2); assertTrue(o.toAgentArg().contains(EscapeUtil.escape(DN1,EscapeUtil.CSV_ESCAPE,","))); assertTrue(o.toAgentArg().contains(EscapeUtil.escape(DN2,EscapeUtil.CSV_ESCAPE,","))); assertTrue(o.toAgentArg().contains("clientPrincipal")); assertTrue(o.toAgentArg().contains("clientPrincipal.1")); assertFalse(o.toAgentArg().contains("clientPrincipal.0")); assertFalse(o.toAgentArg().contains("clientPrincipal.2")); }
@Test public void testTableCaching() throws IOException { File mapFile = File.createTempFile(getClass().getSimpleName() + ".testTableCaching", ".txt"); Files.write("a.b.c /rack1\n" + "1.2.3.4\t/rack2\n", mapFile, Charsets.UTF_8); mapFile.deleteOnExit(); TableMapping mapping = new TableMapping(); Configuration conf = new Configuration(); conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, mapFile.getCanonicalPath()); mapping.setConf(conf); List<String> names = new ArrayList<String>(); names.add("a.b.c"); names.add("1.2.3.4"); List<String> result1 = mapping.resolve(names); assertEquals(names.size(), result1.size()); assertEquals("/rack1", result1.get(0)); assertEquals("/rack2", result1.get(1)); conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, "some bad value for a file"); List<String> result2 = mapping.resolve(names); assertEquals(result1, result2); }
@Test public void parseRegion_coordinateIsInvalidNumber_IllegalArgumentException() throws Exception { final String str = "-1,-1,-1,-2"; exception.expect(IllegalArgumentException.class); InputParser.parseRegion(str); }
@Test public void testAggregationResponseParsingWithoutConfUpdate() throws Exception { ConfigurationListener<AggregatorConfiguration> aggregatorConfigurationListener = mock(ConfigurationListener.class); PduV2Factory pduFactoryWithConfListener = new PduV2Factory(new AggregatorPduV2Factory(aggregatorConfigurationListener)); KSIRequestContext context = new KSIRequestContext(123456L, 42L, 42L); AggregationResponse response = pduFactoryWithConfListener.readAggregationResponse(context, CREDENTIALS, loadTlv("pdu/aggregation/aggregation-response-v2.tlv")); Assert.assertNotNull(response); verify(aggregatorConfigurationListener, times(0)).updated(any(AggregatorConfiguration.class)); verify(aggregatorConfigurationListener, times(0)).updateFailed(any(Throwable.class)); }
@Test public void testPropertyIndex3() throws NoSuchIndexException { for (int i = 0; i < 10000; i++) { ps.putInt(i, i); } assertEquals(10000, ps.getSize()); assertEquals(0, ps.getFirstPropertyIndex()); assertEquals(9999, ps.getLastPropertyIndex()); assertEquals(1, ps.getNextPropertyIndex(0)); assertEquals(2, ps.getPreviousPropertyIndex(3)); assertEquals(2, ps.getNextPropertyIndex(1)); assertEquals(1, ps.getPreviousPropertyIndex(2)); LongIterator it = ps.getPropertyIterator(); int count = 0; while (it.hasNext()) { it.next(); count++; } assertEquals(10000, count); }
@Test public void testGetScope_1() throws Exception { final OAuth2Arguments fixture = new OAuth2Arguments(requestMock); final String result = fixture.getScope(); Assert.assertNotNull(result); Assert.assertEquals(MockUtils.SCOPE, result); }
@Test public void testisPurchaseValid() { AmazonInAppPurchase purchase = new AmazonInAppPurchase(); AReceiptVerifier verifier = mock(AReceiptVerifier.class); purchase.registerReceiptVerification(verifier); purchase.isPurchaseValid("", new UserData("", ""), new Receipt()); verify(verifier).validateReceipt(any(Context.class), any(String.class), any(String.class), any (UserData.class), any(Receipt.class), any(IPurchase.PurchaseListener.class)); }
@Test public void testEmptyContext() { String inputExpression = "{}"; BaseNode context = parse( inputExpression ); assertThat( context, is( instanceOf( ContextNode.class ) ) ); assertThat( context.getText(), is( inputExpression ) ); ContextNode ctx = (ContextNode) context; assertThat( ctx.getEntries(), is( empty() )); }
@Test void getSpeedAtTime_realExample() { assertThat(realTraversal.getSpeedAtTime(4968.894977362377)).isCloseTo(8.000102181418545E-5, within(1e-9)); }
@Test public void deleteConsumerGroupHasConsumerTest() { ConsumerGroupEntity consumerGroupEntity=buildConsumerGroupEntity(); consumerGroupEntity.setMode(2); consumerGroupEntity.setOriginName(consumerGroupEntity.getName()); when(consumerGroupRepository.getById(anyLong())).thenReturn(consumerGroupEntity); Map<String, ConsumerGroupEntity> consumerGroupRefMap=new HashMap<String, ConsumerGroupEntity>(); ConsumerGroupEntity consumerGroupEntity2=new ConsumerGroupEntity(); consumerGroupEntity2.setName(consumerGroupEntity.getName()); consumerGroupEntity2.setOriginName(consumerGroupEntity.getName()); consumerGroupEntity2.setId(consumerGroupEntity.getId()); consumerGroupRefMap.put(consumerGroupEntity2.getName(), consumerGroupEntity2); consumerGroupServiceImpl.consumerGroupRefMap.set(consumerGroupRefMap); when(userInfoHolder.getUserId()).thenReturn("1"); when(roleService.getRole(anyString(), anyString())).thenReturn(1); when(consumerService.getConsumerGroupByConsumerGroupIds(anyListOf(Long.class))).thenReturn(Arrays.asList(new ConsumerGroupConsumerEntity())); assertEquals("1", consumerGroupServiceImpl.deleteConsumerGroup(1L,true).getCode()); }
@Test public void testGetPID() { Assert.assertTrue(OSUtils.isUnix() || OSUtils.isWindows()); Assert.assertTrue(OSUtils.getPID() != -1); }
@Test @Repeat(iterations = 100) public void testCliInvocation() throws Exception { final Path input = newTempFile(); final Path output = newTempFile(); Set<String> sequences = new LinkedHashSet<>(); for (int seqs = randomIntBetween(0, 100); --seqs >= 0;) { sequences.add(randomAsciiLettersOfLengthBetween(1, 10)); } try (OutputStream os = Files.newOutputStream(input)) { Iterator<String> i = sequences.iterator(); while (i.hasNext()) { os.write(i.next().getBytes(StandardCharsets.UTF_8)); if (!i.hasNext() && randomBoolean()) { break; } else { os.write('\n'); if (randomBoolean()) { os.write('\n'); } } } } SerializationFormat format = randomFrom(SerializationFormat.values()); Assertions.assertThat(new FSACompile( input, output, format, false, false, true).call()).isEqualTo(ExitStatus.SUCCESS); try (InputStream is = Files.newInputStream(output)) { FSA fsa = FSA.read(is); Assertions.assertThat(fsa).isNotNull(); Set<String> result = new HashSet<>(); for (ByteBuffer bb : fsa) { result.add(BufferUtils.toString(bb, StandardCharsets.UTF_8)); } Assertions.assertThat(result).containsOnlyElementsOf(sequences); } }
@Test public void executeUpdateSystemParams_9() throws ApsSystemException { when(configManager.getConfigItem(ArgumentMatchers.anyString())).thenReturn(CONFIG_PARAMETER); Mockito.doThrow(ApsSystemException.class).when(configManager).updateConfigItem(Mockito.anyString(), Mockito.anyString()); actionAspect.executeUpdateSystemParams(joinPoint); Mockito.verify(storageManager, Mockito.times(1)).deleteFile(Mockito.anyString(), Mockito.anyBoolean()); Assert.assertFalse(pageSettingsAction.hasFieldErrors()); Assert.assertTrue(pageSettingsAction.hasActionErrors()); }
@Test public void testPollLast() { List<Integer> control = new ArrayList<Integer>(Arrays.asList(1, 2, 3)); LinkedDeque<Integer> q = new LinkedDeque<Integer>(control); Assert.assertEquals(q.pollLast(), control.remove(control.size() - 1)); Assert.assertEquals(q, control); }
@Test @Category(NeedsRunner.class) public void testGlobalAggregation() { Collection<Basic> elements = ImmutableList.of( Basic.of("key1", 1, "value1"), Basic.of("key1", 1, "value2"), Basic.of("key2", 2, "value3"), Basic.of("key2", 2, "value4")); PCollection<Long> count = pipeline .apply(Create.of(elements)) .apply(Group.<Basic>globally().aggregate(Count.combineFn())); PAssert.that(count).containsInAnyOrder(4L); pipeline.run(); }
@Test public void unmarshalHardConstraintMatch() throws RuleModelDRLPersistenceException { String actionString = "scoreHolder.addHardConstraintMatch(kcontext, -1);"; IAction action = extension.unmarshal(actionString); assertTrue(action instanceof ActionHardConstraintMatch); ActionHardConstraintMatch actionHardConstraintMatch = (ActionHardConstraintMatch) action; assertEquals("-1", actionHardConstraintMatch.getConstraintMatch()); }
@Test public void parseBytes_missingTraceOptions() { assertThat(TraceContextBinaryFormat.parseBytes(new byte[] { 0, 0, 127, -1, -1, -1, -1, -1, -1, -1, -128, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, }, null)).isEqualTo(context); }
@Test public void testUIWhenSomeDataIsNull() { GuidanceManeuverData data = createData(0, null, null, null); mGuidanceManeuverView.setViewState(new GuidanceManeuverView.State(data)); final TextView distanceView = (TextView) mGuidanceManeuverView.findViewById(R.id.distanceView); final TextView infoView1 = (TextView) mGuidanceManeuverView.findViewById(R.id.infoView1); final TextView infoView2 = (TextView) mGuidanceManeuverView.findViewById(R.id.infoView2); final ImageView iconView = (ImageView) mGuidanceManeuverView.findViewById(R.id.maneuverIconView); assertEquals(distanceView.getVisibility(), View.GONE); assertEquals(infoView1.getVisibility(), View.GONE); assertEquals(infoView2.getVisibility(), View.GONE); assertEquals(iconView.getVisibility(), View.GONE); }
@Test public void testRingClosure() throws Exception { SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer mol = sp.parseSmiles("C12(OC1)CCC2"); Assert.assertEquals(6, mol.getAtomCount()); Assert.assertEquals("C", mol.getAtom(0).getSymbol()); Assert.assertEquals("O", mol.getAtom(1).getSymbol()); Assert.assertEquals("C", mol.getAtom(2).getSymbol()); Assert.assertEquals(4, mol.getConnectedBondsCount(mol.getAtom(0))); Assert.assertEquals(2, mol.getConnectedBondsCount(mol.getAtom(1))); Assert.assertEquals(2, mol.getConnectedBondsCount(mol.getAtom(2))); }
@Test public void testOnInboundMessage() throws Exception { Provider mockProvider = Mockito.mock(Provider.class); ProviderWrapper<Provider> wrapper = new ProviderWrapper<Provider>(mockProvider); JmsInboundMessageDispatch envelope = Mockito.mock(JmsInboundMessageDispatch.class); ProviderListener listener = Mockito.mock(ProviderListener.class); wrapper.setProviderListener(listener); wrapper.onInboundMessage(envelope); Mockito.verify(listener).onInboundMessage(envelope); }
@Test public void getCerticatesDetailsTest() throws Exception { when(certificateRepository.getCertificatesDetails(anyString(), anyString(), anyObject())).thenReturn(new ArrayList<>()); assertThat(certificateService.getCerticatesDetails("ag","",new HashMap<>()), is(notNullValue())); }
@Test public void testHasPermission_3args_delete_isNotWidgetOwner() { EasyMock.<Collection<? extends GrantedAuthority>>expect(mockAuthentication.getAuthorities()).andReturn(grantedAuthoritiesList); expect(mockAuthentication.getPrincipal()).andReturn(user2); expect(mockWidgetRepository.get(VALID_WIDGET_ID)).andReturn(widget); replay(mockAuthentication); replay(mockWidgetRepository); assertThat(defaultWidgetPermissionEvaluator.hasPermission(mockAuthentication, widget, ModelPermissionEvaluator.Permission.DELETE), is(false)); verify(mockAuthentication); verify(mockWidgetRepository); }
@Test public void breadthFirstDecode_emptyTrie() { List<Node<Bytes>> result = TrieNodeDecoder.breadthFirstDecoder( (h) -> Optional.empty(), MerklePatriciaTrie.EMPTY_TRIE_NODE_HASH) .collect(Collectors.toList()); assertThat(result.size()).isEqualTo(0); }
@Test public void testReturnsInputInstance() { String path = "/b/c/d/e/f"; String expr = "/a/b/{c}/d/e"; PathFilter regexpPathUriFilter = new DefaultPathFilter("XXX", expr); String result = regexpPathUriFilter.filter(path); assertThat(result, sameInstance(path)); }
@Test public void clickEventShouldBePerformedWhenRunnerStatusIsNotFailedOrStopped() throws Exception { when(runner.getStatus()).thenReturn(DONE); runnerWidget.update(runner); reset(itemWidget); verify(imagePanel).addDomHandler(clickCaptor.capture(), eq(ClickEvent.getType())); clickCaptor.getValue().onClick(clickEvent); verify(delegate, never()).removeRunnerWidget(runner); }
@Test public void shouldCreateDistributionInInitiatedState() throws Exception { Distribution distribution = new Distribution(); doNothing().when(mapper).insert(distribution); Distribution initiatedDistribution = repository.create(distribution); assertThat(initiatedDistribution.getStatus(), is(INITIATED)); verify(mapper).insert(distribution); }
@Test public void testData_onCancelled() { TestObserver<DataSnapshot> sub = TestObserver.create(); RxFirebaseDatabase.data(mockDatabaseReference).subscribe(sub); verifyAddListenerForSingleValueEvent(); callValueEventOnCancelled(new DatabaseException("foo")); sub.assertError(DatabaseException.class); sub.assertNoValues(); sub.dispose(); callValueEventOnCancelled(new DatabaseException("foo")); assertThat(sub.errorCount()).isEqualTo(1); }
@Test( expected = ValueFormatException.class ) public void shouldNotCreateDoubleFromByteArrayContainingUtf8EncodingOfStringWithContentsOtherThanDouble() throws Exception { factory.create("something".getBytes("UTF-8")); }
@Test void testBitString() { final BitString b0 = new BitString("", 0); final BitString b1 = new BitString("1", 1); final BitString b2 = new BitString("10", 2); final BitString b4 = new BitString("100", 3); final BitString b8 = new BitString("1000", 4); final BitString b16 = new BitString("10000", 5); final BitString b32 = new BitString("100000", 6); final BitString b64 = new BitString("1000000", 7); final BitString b128 = new BitString("10000000", 8); final BitString b256 = new BitString("100000000", 9); final BitString b0x1 = new BitString("", 1); final BitString b0x12 = new BitString("", 12); assertEquals( "", b0.toHexString()); assertEquals( "1", b1.toHexString()); assertEquals( "2", b2.toHexString()); assertEquals( "4", b4.toHexString()); assertEquals( "8", b8.toHexString()); assertEquals( "10", b16.toHexString()); assertEquals( "20", b32.toHexString()); assertEquals( "40", b64.toHexString()); assertEquals( "80", b128.toHexString()); assertEquals( "100", b256.toHexString()); assertEquals( "0", b0x1.toHexString()); assertEquals( "000", b0x12.toHexString()); assertByteArray("01", "1", 1); assertByteArray("01", "1", 5); assertByteArray("01", "1", 8); assertByteArray("00, 01", "1", 9); assertByteArray("", "", 0); assertByteArray("00", "0", 1); assertByteArray("00", "0000", 2); assertByteArray("00", "000", 5); assertByteArray("00", "0", 8); assertByteArray("00, 00", "00", 9); assertReversible(""); assertReversible("1"); assertReversible("10"); assertReversible("100"); assertReversible("1000"); assertReversible("10000"); assertReversible("100000"); assertReversible("1000000"); assertReversible("10000000"); assertReversible("100000000"); assertReversible("01"); assertReversible("001010"); assertReversible("000000000100"); final byte[] b255 = {(byte) 0xFF}; assertThat(BitString.createFromBytes(b255).toString(), is("11111111")); final byte[] b11 = {(byte) 0x0B}; assertThat(BitString.createFromBytes(b11).toString(), is("00001011")); final byte[] b011 = {(byte) 0x00, 0x0B}; assertThat(BitString.createFromBytes(b011).toString(), is("0000000000001011")); }
@Test void shouldReturnEmptyListForUnknownRepositoryInPath() { Session session = new Session(DEFAULT_CONFIGURATION, new Token("/unknown_repository", "alias", "token")); assertEquals(Collections.emptyList(), session.getRepositories()); }
@Test public void testTaskPollException() { Task task = testTask(); Worker worker = mock(Worker.class); when(worker.getPollingInterval()).thenReturn(3000); when(worker.getTaskDefName()).thenReturn("test"); when(worker.execute(any())).thenReturn(new TaskResult(task)); TaskClient taskClient = Mockito.mock(TaskClient.class); when(taskClient.pollTask(any(), any(), any())) .thenThrow(ConductorClientException.class) .thenReturn(task); TaskPollExecutor taskPollExecutor = new TaskPollExecutor(null, taskClient, 1, 1, "test-worker-"); CountDownLatch latch = new CountDownLatch(1); doAnswer(invocation -> { Object[] args = invocation.getArguments(); TaskResult result = (TaskResult) args[0]; assertEquals(IN_PROGRESS, result.getStatus()); assertEquals(task.getTaskId(), result.getTaskId()); latch.countDown(); return null; } ).when(taskClient).updateTask(any()); Executors.newSingleThreadScheduledExecutor() .scheduleAtFixedRate(() -> taskPollExecutor.pollAndExecute(worker), 0, 1, TimeUnit.SECONDS); Uninterruptibles.awaitUninterruptibly(latch); verify(taskClient).updateTask(any()); }
@Test(expected = SuperCsvCellProcessorException.class) public void testWithNull() { processor.execute(null, ANONYMOUS_CSVCONTEXT); }
@Test void testToString() { assertThat(this.track.toString(), equalTo(NAME + " from: Dieter, Hans, ")); this.track = new TrackEntity(); assertThat(this.track.toString(), equalTo("No song data available")); }
@Test public void testRemoveDefaultSavedFilter() { String defaultFilterKey = "key"; String nextSavedFilterKey = "next"; ArrayList<String> savedFiltersIds = new ArrayList<>(); savedFiltersIds.addAll(Arrays.asList(nextSavedFilterKey, "filter2", "filter3")); when(multiGridPreferencesStore.getDefaultGridId()).thenReturn(defaultFilterKey); when(multiGridPreferencesStore.getGridsId()).thenReturn(savedFiltersIds); filterSettingsManagerImpl.removeSavedFilter(multiGridPreferencesStore, defaultFilterKey); verify(multiGridPreferencesStore).removeTab(defaultFilterKey); verify(multiGridPreferencesStore).setDefaultGridId(nextSavedFilterKey); }
@Test public void shouldReturnEmptyAgentUserId_withNoAgentInContext() { final String userId = randomId(); final String teamId = randomBoolean() ? null : randomId(); final DefaultSecurityContext context = new DefaultSecurityContext(userId, teamId); assertEquals(Optional.empty(), context.agentUserId()); }
@Test public void testEquals() throws Exception { BinaryPredicate<Object, Object> f = new IsEqual<Object, Object>(); assertEquals(f, f); assertObjectsAreEqual(f, new IsEqual<Object, Object>()); assertObjectsAreEqual(f, IsEqual.instance()); assertObjectsAreNotEqual(f, Constant.truePredicate()); }
@Test public void shouldGetNoFeaturesIfEmpty() { final BasicSection section = createSection(); assertThat(section.getFeatures()).isEmpty(); }
@Test public void testEmptyDirectoryDelete() { String directoryName = "FileUtilsTest-testRecursiveDelete"; File test = new File(directoryName); String path = test.getAbsolutePath(); File[] filesBefore = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles(); int fileCountBefore = filesBefore.length; final boolean condition1 = !test.exists(); assertTrue("Directory exists", condition1); test.mkdir(); test.deleteOnExit(); assertTrue("Non Empty Directory was successfully deleted.", FileUtils.deleteDirectory(directoryName)); final boolean condition = !test.exists(); assertTrue("Directory was deleted.", condition); File[] filesAfter = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles(); int fileCountAfter = filesAfter.length; assertEquals("File creation was no registered", (long) fileCountBefore, (long) fileCountAfter); checkFileLists(filesBefore, filesAfter); }
@Test public void testCreateNewRequest() { System.out.println("testCreateNewRequest"); JAXBElement<PRPAMT201301UV02Person> queryPerson = HL7PatientTransforms.create201301PatientPerson("Joe", "Smith", "M", null, null); PRPAMT201301UV02Patient queryPatient = HL7PatientTransforms.create201301Patient(queryPerson, "1234", "1.1.1"); PRPAIN201305UV02 query = HL7PRPA201305Transforms.createPRPA201305(queryPatient, "1.1", "2.2", "1.1.1"); JAXBElement<PRPAMT201301UV02Person> person = HL7PatientTransforms.create201301PatientPerson("Joe", "Smith", "M", null, null); PRPAMT201301UV02Patient patient = HL7PatientTransforms.create201301Patient(person, null, null); PRPAIN201306UV02 msg = HL7PRPA201306Transforms.createPRPA201306(patient, "2.2", "1.1.1", "1.1", "2.2.2", query); String targetCommunityId = "3.3"; PatientDiscovery201306Processor instance = new PatientDiscovery201306Processor(); PRPAIN201306UV02 result = instance.createNewRequest(msg, targetCommunityId); assertEquals(targetCommunityId, result.getReceiver().get(0).getDevice().getAsAgent().getValue() .getRepresentedOrganization().getValue().getId().get(0).getRoot()); }
@Test @SuppressWarnings("unchecked") public void classIsCreatedFromFullyQualifiedClassName() { Class<Annotator> clazz = converter.convert(Annotator.class.getName()); assertThat(clazz, is(equalTo(Annotator.class))); }
@Test(expected = HiveException.class) public void testBothNull() throws Exception { udf.evaluate(0.1, null, null); }
@Test public void shouldDetectPossibleSyntheticJoinColumns() { assertThat(ColumnNames.maybeSyntheticJoinKey(ColumnName.of("ROWKEY")), is(true)); assertThat(ColumnNames.maybeSyntheticJoinKey(ColumnName.of("ROWKEY_0")), is(true)); assertThat(ColumnNames.maybeSyntheticJoinKey(ColumnName.of("ROWKEY_1")), is(true)); assertThat(ColumnNames.maybeSyntheticJoinKey(ColumnName.of("Rowkey_2")), is(false)); assertThat(ColumnNames.maybeSyntheticJoinKey(ColumnName.of("other_2")), is(false)); assertThat(ColumnNames.maybeSyntheticJoinKey(ColumnName.of("NotROWKEY_2")), is(false)); }
@Test public void checkLogicalReplacementWithOneChild() { final CaseManagementShapeView child = createShapeView("child"); final CaseManagementShapeView replacement = createShapeView("replacement"); shape.add(child); verify(layoutHandler, times(1)).requestLayout(shape); assertEquals(1, shape.getChildShapes().size()); assertEquals(child, shape.getChildShapes().get(0)); assertEquals(shape, child.getParent()); shape.logicallyReplace(child, replacement); assertEquals(1, shape.getChildShapes().size()); assertEquals(replacement, shape.getChildShapes().get(0)); assertEquals(shape, replacement.getParent()); assertNull(child.getParent()); verify(layoutHandler, times(2)).requestLayout(shape); }
@Test public void testAddTypeCriteria() { EntityDefinition def = entityDefs.lookupByResourceName(ResourceNames.TEACHERS); ApiQuery query = new ApiQuery(); query = resourceServiceHelper.addTypeCriteria(def, query); List<NeutralCriteria> criteriaList = query.getCriteria(); assertEquals("Should match", 1, criteriaList.size()); NeutralCriteria criteria = criteriaList.get(0); assertEquals("Should match", "type", criteria.getKey()); assertEquals("Should match", NeutralCriteria.CRITERIA_IN, criteria.getOperator()); assertEquals("Should match", Arrays.asList(def.getType()), criteria.getValue()); }
@Test public void testFindNullTopicFilter() { Assert.assertNull(TopicSubscriptionHelper.findByTopicFilter(null, topicSubscriptions)); }
@Test public void getSerializer1() { Serializer serializer = SerializerFactory.getSerializer("test"); Assert.assertNotNull(serializer); Assert.assertEquals(TestSerializer.class, serializer.getClass()); }
@Test public void testFileConnection() throws Exception { final String curDir = System.getProperty("user.dir"); log.info("curDir: {}", curDir); final String path = "src/test/resources/test-connection.txt"; final File file = new File(path); log.info("exists : {}", file.exists()); log.info("getAbsolutePath : {}", file.getAbsolutePath()); final URLConnection conn = ResourceManagerUDT.fileConnection(file); assertTrue(conn.getLastModified() > 0); log.info("getLastModified : {}", conn.getLastModified()); assertTrue(conn.getContentLength() > 0); log.info("getContentLength : {}", conn.getContentLength()); }
@Test(expected = FormatException.class) public void testRejectsInvalidMacForActivate() throws Exception { BdfList body = BdfList.of(ACTIVATE.getValue(), sessionId.getBytes(), previousMsgId.getBytes(), getRandomBytes(MAC_BYTES - 1)); validator.validateMessage(message, group, body); }
@Test public void testHeatmapDensity() throws Exception { Object[] expected = new Object[] {"heatmap-density"}; Object[] actual = heatmapDensity().toArray(); assertTrue("expression should match", Arrays.deepEquals(expected, actual)); }
@Test public void test_ObjectEqualsUtils_isEqual_NotNullValues() { assertTrue(ObjectEqualsUtils.isEqual(VALUE, VALUE)); }
@Test(expected = DirectiveParseException.class) public void testSyntaxFailure1() throws Exception { String[] directives = new String[] { "flatten", }; JsonArray fname = new JsonArray(); fname.add(new JsonPrimitive("SADASD")); fname.add(new JsonPrimitive("ROOT")); JsonArray lname = new JsonArray(); lname.add(new JsonPrimitive("SADASDMR")); lname.add(new JsonPrimitive("JOLTIE")); List<Row> rows = Arrays.asList( new Row("FirstName", fname).add("LastName", lname) ); TestingRig.execute(directives, rows); }
@Test public void testCreateObjectBuilderWithMapFlatItems() { Map<String, Object> jsonItems = new HashMap<>(); { jsonItems.put("bigDecimalVal", new BigDecimal(1234567.89)); jsonItems.put("bigIntegerVal", BigInteger.valueOf(54321L)); jsonItems.put("booleanVal", true); jsonItems.put("doubleVal", 1234567.89d); jsonItems.put("intVal", 4711); jsonItems.put("jsonValueVal", JsonValue.FALSE); jsonItems.put("longVal", 123_456_789L); jsonItems.put("stringVal", "b"); jsonItems.put("nullVal", null); Assert.assertEquals(9, jsonItems.size()); } JsonObjectBuilder builder = Json.createObjectBuilder(jsonItems); JsonObject jsonObject = builder.build(); Assert.assertEquals(new BigDecimal(1234567.89), jsonObject.getJsonNumber("bigDecimalVal").bigDecimalValue()); Assert.assertEquals(BigInteger.valueOf(54321L), jsonObject.getJsonNumber("bigIntegerVal").bigIntegerValue()); Assert.assertEquals(true, jsonObject.getBoolean("booleanVal")); Assert.assertEquals(1234567.89d, jsonObject.getJsonNumber("doubleVal").doubleValue(), 0.01d); Assert.assertEquals(4711, jsonObject.getInt("intVal")); Assert.assertEquals(JsonValue.FALSE, jsonObject.get("jsonValueVal")); Assert.assertEquals(123_456_789L, jsonObject.getJsonNumber("longVal").longValue()); Assert.assertEquals("b", jsonObject.getString("stringVal")); Assert.assertEquals(true, jsonObject.isNull("nullVal")); }
@Test public void testThatEachBranchIsConjunctive() { final List<List<Parameter>> branches = new ArrayList<>(); final ArrayList<Parameter> branch = new ArrayList<>(); branches.add(branch); branch.add(new ImmutableParameter("firstName", Collections.emptySet(), new int[]{0}, operatorContext.getBySuffix("Equals"))); branch.add(new ImmutableParameter("lastName", Collections.emptySet(), new int[]{1}, operatorContext.getBySuffix("IsNot"))); final DefaultQueryDescriptor descriptor = new DefaultQueryDescriptor(false, null, 0, null, null, branches, null, null); final Person person = new Person().setFirstName("X").setLastName("Y"); assertThat(descriptor.matches(person, new ImmutableInvocation(null, new Object[]{"A", "Y"})), is(false)); assertThat(descriptor.matches(person, new ImmutableInvocation(null, new Object[]{"X", "Y"})), is(false)); assertThat(descriptor.matches(person, new ImmutableInvocation(null, new Object[]{"A", "B"})), is(false)); assertThat(descriptor.matches(person, new ImmutableInvocation(null, new Object[]{"X", "B"})), is(true)); }
@Test public void testLastMatchingTokenNameIsChoosen() { String sentence[] = {"a", "b", "c", "Vanessa"}; Span names[] = mNameFinder.find(sentence); assertTrue(names.length == 1); assertTrue(names[0].getStart() == 3 && names[0].getEnd() == 4); }
@Test public void testTooLongLine1() throws Exception { DecoderEmbedder<ChannelBuffer> embedder = new DecoderEmbedder<ChannelBuffer>( new LineBasedFrameDecoder(16, false, false)); try { embedder.offer(copiedBuffer("12345678901234567890\r\nfirst\nsecond", CharsetUtil.US_ASCII)); fail(); } catch (CodecEmbedderException e) { assertThat(e.getCause(), is(instanceOf(TooLongFrameException.class))); } embedder.offer(wrappedBuffer(new byte[1])); assertThat(embedder.size(), is(1)); assertTrue(embedder.finish()); assertThat(embedder.size(), is(1)); assertThat(embedder.poll().toString(CharsetUtil.US_ASCII), is("first\n")); }
@Test public void testParseExtensionDescriptorYaml() throws Exception { tester.test(() -> parser.parseExtensionDescriptorYaml(extensionDescriptorsYaml), expectations[1]); }
@Test public void validateThatIdleTimeoutSecondsConvertedToIdleTimeout() throws Exception { Properties poolProperties = new Properties(); poolProperties.setProperty("idle-timeout-seconds", "20"); Properties hikariProperties = instance.convertToHikari(poolProperties); assertThat(hikariProperties.stringPropertyNames()).contains("idleTimeout"); }
@Test public void shouldFailIfCommandNameIsQuoted() { when(lineSupplier.get()) .thenReturn("'some' 'command' " + "Arg0" + WHITE_SPACE + "'Arg 1'") .thenReturn("not a CLI command;"); console.readLine(); verify(cliCommand, never()).execute(any(), any()); }
@Test(expected = EOFException.class) public void readAINT16MissingHeader() throws IOException { byte[] given = new byte[]{}; InputStream givenInputStream = new ByteArrayInputStream(given); PtpInputStream pis = new PtpInputStream(givenInputStream); pis.readAINT16(); }
@Test void shouldThrowAnErrorWhenCantReadFromLocalFile() { final String file = System.getProperty("user.dir") + FILESEPARATOR + "src" + FILESEPARATOR + "test" + FILESEPARATOR + "resources" + FILESEPARATOR + "data" + FILESEPARATOR + "multilinguism" + FILESEPARATOR + "wrong.csv"; assertThrows(RuntimeException.class, () -> { I18N.loadFromFile(file); }); }
@Test public void testParseToBytesValue() { final BytesValue expected = BytesValue.of(randomUUID().toString().getBytes()); final ByteString byteString = copyFrom(expected); assertEquals(expected, parseToBytesValue(byteString)); }
@Test public void testCoveredStartKey() throws Exception { TableName table = TableName.valueOf("tableCoveredStartKey"); try { setupTable(table); assertEquals(ROWKEYS.length, countRows()); HRegionInfo hriOverlap = createRegion(conf, tbl.getTableDescriptor(), Bytes.toBytes("A2"), Bytes.toBytes("B2")); TEST_UTIL.getHBaseCluster().getMaster().assignRegion(hriOverlap); TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager() .waitForAssignment(hriOverlap); ServerName server = regionStates.getRegionServerOfRegion(hriOverlap); TEST_UTIL.assertRegionOnServer(hriOverlap, server, REGION_ONLINE_TIMEOUT); HBaseFsck hbck = doFsck(conf, false); assertErrors(hbck, new ERROR_CODE[] { ERROR_CODE.OVERLAP_IN_REGION_CHAIN, ERROR_CODE.OVERLAP_IN_REGION_CHAIN }); assertEquals(3, hbck.getOverlapGroups(table).size()); assertEquals(ROWKEYS.length, countRows()); doFsck(conf, true); HBaseFsck hbck2 = doFsck(conf, false); assertErrors(hbck2, new ERROR_CODE[0]); assertEquals(0, hbck2.getOverlapGroups(table).size()); assertEquals(ROWKEYS.length, countRows()); } finally { deleteTable(table); } }
@Test public void isAlphaNumbericTest() { assertTrue(WordUtil.isAlphaNumberic("TEST1")); assertTrue(WordUtil.isAlphaNumberic("test1")); }
@Test public void testExpireKeySet() { JedisCluster mockJedisClient = mock(JedisCluster.class); CacheRedisClient mockedCachedRedisClient = mock(CacheRedisClient.class); when(mockedCachedRedisClient.getJedisClusterClient()).thenReturn(mockJedisClient); RedisCacheService redisCacheService = new RedisCacheService(config, mockedCachedRedisClient); Set<String> keys = new HashSet<>(Arrays.asList("key1", "key2")); redisCacheService.expire(keys, 10); verify(mockJedisClient, times(2)).expire(anyString(), anyInt()); }
@Test public void shouldGetRandomString() { String firstRandomString = getRandomString(); String secondRandomString = getRandomString(); assertThat(firstRandomString).isNotEqualTo(secondRandomString); }
@Test public void testGemvSizeCheck() throws Exception { thrown.expect(IllegalArgumentException.class); DenseVector y = DenseVector.ones(2); BLAS.gemv(2.0, mat, false, dv1, 0., y); }
@Test public void serializationErrorSkipsAddingPayload() throws IOException { PayloadQueue payloadQueue = mock(PayloadQueue.class); Cartographer cartographer = mock(Cartographer.class); TrackPayload payload = new TrackPayload.Builder().event("event").userId("userId").build(); SegmentIntegration segmentIntegration = new SegmentBuilder() .cartographer(cartographer) .payloadQueue(payloadQueue) .build(); when(cartographer.toJson(anyMap())).thenReturn(null); segmentIntegration.performEnqueue(payload); verify(payloadQueue, never()).add((byte[]) any()); when(cartographer.toJson(anyMap())).thenReturn(""); segmentIntegration.performEnqueue(payload); verify(payloadQueue, never()).add((byte[]) any()); StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i < SegmentIntegration.MAX_PAYLOAD_SIZE + 1; i++) { stringBuilder.append("a"); } when(cartographer.toJson(anyMap())).thenReturn(stringBuilder.toString()); segmentIntegration.performEnqueue(payload); verify(payloadQueue, never()).add((byte[]) any()); }
@Test(expected = AccessRestrictionException.class) public void insufficientAccessTest() { doThrow(new AccessRestrictionException()).when(aclService) .assertHasAccess(anyString(), any(PID.class), any(AccessGroupSet.class), eq(reindex)); service.reindexObject(agent, objPid); }
@Test(dependsOnMethods = "testCreateEntity") public void testBug37860() throws Exception { String dslQuery = "hive_table as t where name = 'bar' " + "database where name = 'foo' and description = 'foo database' select t"; TestUtils.dumpGraph(TestUtils.getGraph()); System.out.println("Executing dslQuery = " + dslQuery); String jsonResults = discoveryService.searchByDSL(dslQuery, queryParams); Assert.assertNotNull(jsonResults); JSONObject results = new JSONObject(jsonResults); Assert.assertEquals(results.length(), 3); System.out.println("results = " + results); Object query = results.get("query"); Assert.assertNotNull(query); JSONObject dataType = results.getJSONObject("dataType"); Assert.assertNotNull(dataType); JSONArray rows = results.getJSONArray("rows"); Assert.assertEquals(rows.length(), 1); }
@Test public void testGetParameters1() throws Exception { DDMFormField ddmFormField = new DDMFormField("field", "select"); ddmFormField.setProperty("dataSourceType", "data-provider"); DDMFormFieldRenderingContext ddmFormFieldRenderingContext = new DDMFormFieldRenderingContext(); ddmFormFieldRenderingContext.setLocale(LocaleUtil.US); ddmFormFieldRenderingContext.setValue("[\"value 1\"]"); _setUpDDMFormFieldOptionsFactory( ddmFormField, ddmFormFieldRenderingContext); SelectDDMFormFieldTemplateContextContributor spy = _createSpy(); Map<String, Object> parameters = spy.getParameters( ddmFormField, ddmFormFieldRenderingContext); Assert.assertTrue(parameters.containsKey("dataSourceType")); Assert.assertEquals("data-provider", parameters.get("dataSourceType")); Assert.assertTrue(parameters.containsKey("multiple")); Assert.assertEquals(false, parameters.get("multiple")); Assert.assertTrue(parameters.containsKey("options")); List<Object> options = (List<Object>)parameters.get("options"); Assert.assertEquals(options.toString(), 3, options.size()); Map<String, String> optionMap = (Map<String, String>)options.get(0); Assert.assertEquals("Label 1", optionMap.get("label")); Assert.assertEquals("value 1", optionMap.get("value")); optionMap = (Map<String, String>)options.get(1); Assert.assertEquals("Label 2", optionMap.get("label")); Assert.assertEquals("value 2", optionMap.get("value")); optionMap = (Map<String, String>)options.get(2); Assert.assertEquals("Label 3", optionMap.get("label")); Assert.assertEquals("value 3", optionMap.get("value")); List<String> value = (List<String>)parameters.get("value"); Assert.assertEquals(value.toString(), 1, value.size()); Assert.assertTrue(value.toString(), value.contains("value 1")); }
@Test public void testGetNext() throws Exception { innerTestGetPrepare(); innerTestGetNext(new BeanLazyScrollUpdateOutputHandler<Character>(Character.class).handle(new QueryParametersLazyList(stmt, typeHandler, false))); }
@Test public void emptyPlan_errorPropagation() { ExceptionPlan<String> plan = new ExceptionPlan<>(); MyError error = new MyError(); Maybe<ExceptionPlan.Execution<String>, MyError> maybe = plan.execute(error); assertSame(error, assertThrows(MyError.class, () -> maybe.orElseThrow(e -> e))); }
@Test public void handleFluxExceptions_returns_ignoreResponse_if_passed_exception_it_does_not_want_to_handle() { ApiExceptionHandlerListenerResult result = listener.handleSpringMvcOrWebfluxSpecificFrameworkExceptions( new ApiException(testProjectApiErrors.getGenericServiceError()) ); validateResponse(result, false, null); }
@Test public void countDistinct() { SQLSerializer serializer = new SQLSerializer(Configuration.DEFAULT); SQLQuery<?> query = new SQLQuery<Void>(); query.from(QEmployeeNoPK.employee); query.distinct(); serializer.serializeForQuery(query.getMetadata(), true); assertEquals("select count(*)\n" + "from (select distinct EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, " + "EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID\n" + "from EMPLOYEE EMPLOYEE) internal", serializer.toString()); }
@Test public void testTraits() throws StoreException { final ParquetStore store = new ParquetStore(); final Set<StoreTrait> expectedTraits = new HashSet<>(); expectedTraits.add(StoreTrait.INGEST_AGGREGATION); expectedTraits.add(StoreTrait.PRE_AGGREGATION_FILTERING); expectedTraits.add(StoreTrait.ORDERED); assertEquals(expectedTraits, store.getTraits()); }
@Test public void shouldShowIconWhenExpireDateInCurrentMonth() throws Exception { StockCard stockCard = StockCardBuilder.buildStockCard(); Lot lot = new Lot(); lot.setExpirationDate(DateUtil.parseString("2016-02-16", DateUtil.DB_DATE_FORMAT)); LotOnHand lotOnHand = new LotOnHand(lot, stockCard, 100L); stockCard.getLotOnHandListWrapper().add(lotOnHand); InventoryViewModel inventoryViewModel = new InventoryViewModel(stockCard); Date mockCurrentDate = DateUtil.parseString("15/02/2016", DateUtil.SIMPLE_DATE_FORMAT); LMISTestApp.getInstance().setCurrentTimeMillis(mockCurrentDate.getTime()); viewHolder.populate(inventoryViewModel, ""); assertThat(viewHolder.lyExpiryDateWarning.getVisibility()).isEqualTo(View.VISIBLE); }
@Test public void searchShouldSortByGivenFields() throws Exception { Map<String, FieldType> columnMetadata = new HashMap<>(); columnMetadata.put("sortByStringDesc", FieldType.TEXT); columnMetadata.put("sortByIntAsc", FieldType.INTEGER); setup(RestStatus.OK, 25, columnMetadata); SortField[] expectedSortFields = { sortBy("sortByStringDesc", SortOrder.DESC), sortBy("sortByIntAsc", SortOrder.ASC), sortBy("sortByUndefinedDesc", SortOrder.DESC) }; final List<String> indices = Arrays.asList("bro", "snort"); SearchRequest searchRequest = new SearchRequest(); searchRequest.setSize(2); searchRequest.setIndices(indices); searchRequest.setFrom(5); searchRequest.setSort(Arrays.asList(expectedSortFields)); searchRequest.setQuery("some query"); SearchResponse searchResponse = dao.search(searchRequest); assertNotNull(searchResponse); ArgumentCaptor<org.elasticsearch.action.search.SearchRequest> argument = ArgumentCaptor .forClass(org.elasticsearch.action.search.SearchRequest.class); verify(requestSubmitter).submitSearch(argument.capture()); org.elasticsearch.action.search.SearchRequest request = argument.getValue(); JSONParser parser = new JSONParser(); JSONObject json = (JSONObject) parser.parse(ElasticsearchUtils.toJSON(request).orElse("???")); JSONArray sortFields = (JSONArray) json.get("sort"); assertEquals(3, sortFields.size()); { JSONObject aSortField = (JSONObject) sortFields.get(0); JSONObject sortBy = (JSONObject) aSortField.get("sortByStringDesc"); assertEquals("desc", sortBy.get("order")); assertEquals("_last", sortBy.get("missing")); assertEquals("text", sortBy.get("unmapped_type")); } { JSONObject aSortField = (JSONObject) sortFields.get(1); JSONObject sortByIntAsc = (JSONObject) aSortField.get("sortByIntAsc"); assertEquals("asc", sortByIntAsc.get("order")); assertEquals("_first", sortByIntAsc.get("missing")); assertEquals("integer", sortByIntAsc.get("unmapped_type")); } { JSONObject aSortField = (JSONObject) sortFields.get(2); JSONObject sortByUndefinedDesc = (JSONObject) aSortField.get("sortByUndefinedDesc"); assertEquals("desc", sortByUndefinedDesc.get("order")); assertEquals("_last", sortByUndefinedDesc.get("missing")); assertEquals("other", sortByUndefinedDesc.get("unmapped_type")); } }
@Test public void testRemoveSpecificQueryByAlias() throws Exception { String alias = "get_dataobject_ids"; GeneralAdminInpForSQ pi = GeneralAdminInpForSQ.instanceForRemoveSpecificQueryByAlias(alias); Assert.assertNotNull(pi); }
@Test public void saveCloudCredentials() { CloudCredentialsDTO cloudCredentialsDTO = new CloudCredentialsDTO(); UUID uuid = UUID.randomUUID(); cloudCredentialsDTO.setUuid(uuid.toString()); CloudCredentialsDTO savedCloudCredentials = cloudCredentialsService.saveCloudCredentials(cloudCredentialsDTO); Assert.assertNotNull(savedCloudCredentials); Assert.assertEquals(cloudCredentialsDTO.getUuid(), savedCloudCredentials.getUuid()); }
@Test public void parameters() { final BoltzmannSelector<DoubleGene, Double> selector = new BoltzmannSelector<>(2); final ISeq<Phenotype<DoubleGene, Double>> population = TestUtils.newDoublePopulation(20, 0, 0); selector.probabilities(population, 10); }
@Test public void testServiceSupportsConfigItem_shouldAcceptImportConfiguration() throws Exception { assertTrue(service.supports(RuleBaseConfiguration.class)); assertFalse(service.supports(GlobalConfiguration.class)); }
@Test public void testStateAfterCtor() { TransmissionPolicyState tested = new TransmissionPolicyState(); assertEquals(TransmissionPolicy.UNBLOCKED, tested.getCurrentState()); }
@Test public void testCustomResourceUsingForward() throws IOException, ServletException { init(true); doTestResource(MONITORING_CSS, true); }
@Test public void isEffectiveTest() throws ParseException { Assert.assertNotNull(dateBasedEffectivityConfigSpec_withConfigurationItem.getConfigurationItem()); Assert.assertNotNull(dateBasedEffectivityConfigSpec_withProductConfiguration.getConfigurationItem()); when(tmp_DBE.getConfigurationItem()).thenReturn(configurationItem_tmp); boolean result = dateBasedEffectivityConfigSpec_withConfigurationItem.isEffective(tmp_DBE); Assert.assertFalse(result); when(tmp_DBE.getConfigurationItem()).thenReturn(configurationItem); when(tmp_DBE.getStartDate()).thenReturn(after); result = dateBasedEffectivityConfigSpec_withConfigurationItem.isEffective(tmp_DBE); Assert.assertFalse(result); when(tmp_DBE.getStartDate()).thenReturn(date); when(tmp_DBE.getEndDate()).thenReturn(before); result = dateBasedEffectivityConfigSpec_withConfigurationItem.isEffective(tmp_DBE); Assert.assertFalse(result); when(tmp_DBE.getStartDate()).thenReturn(before); when(tmp_DBE.getEndDate()).thenReturn(after); result = dateBasedEffectivityConfigSpec_withConfigurationItem.isEffective(tmp_DBE); Assert.assertTrue(result); result = dateBasedEffectivityConfigSpec_withConfigurationItem.isEffective(new LotBasedEffectivity()); Assert.assertFalse(result); dateBasedEffectivityConfigSpec_withConfigurationItem.setDate(dateFormat.parse("11/04/2001")); Assert.assertEquals(dateFormat.parse("11/04/2001"),dateBasedEffectivityConfigSpec_withConfigurationItem.getDate()); }
@Test public void process_noExceptionWithNullArguments() { try { initializer.process(null, servletContext); } catch (Exception e) { Assert.fail( "WebComponentRegistryInitializer.process should not throw with null argument"); } Mockito.verify(registry).setConfigurations(Collections.emptySet()); }
@Test public void testDownloadComplexTable() throws OdpsException, IOException { WareHouse.getInstance().dropTableIfExists(project, complexTable); Assert.assertEquals(false, WareHouse.getInstance().existsTable(project, complexTable)); TableInfo tableInfo = TableInfo.builder().projectName(project).tableName(complexTable).build(); DownloadUtils.downloadTableSchemeAndData(odps, tableInfo, 10, ','); List<Object[]> dataList = WareHouse.getInstance().readData(project, complexTable, null, null, ','); Assert.assertNotNull(dataList); Assert.assertEquals(1, dataList.size()); Object[] record = dataList.get(0); Assert.assertTrue(record[0] instanceof Map); Assert.assertTrue(((Map) record[0]).containsKey("key1")); Assert.assertTrue(record[1] instanceof List); Assert.assertTrue(((List) record[1]).contains(2)); Assert.assertTrue(record[2] instanceof Struct); Assert.assertEquals(new Char("a"), ((Struct) record[2]).getFieldValue(0)); Assert.assertTrue(record[3] instanceof Struct); Assert.assertEquals((byte)1, ((Struct) record[3]).getFieldValue(0)); Assert.assertTrue(((Struct) record[3]).getFieldValue(1) instanceof Struct); }
@Test public void getEncodedUrlTest() { assertEquals("api-v1", UrlUtils.getEncodedUrl("api/v1")); assertEquals("-api-v1", UrlUtils.getEncodedUrl("/api/v1")); assertEquals("-api-v1-", UrlUtils.getEncodedUrl("/api/v1/")); assertNotNull(UrlUtils.getEncodedUrl(null)); }
@Test public void toStringContainsAllVariables() { assertThat(value.toString()).contains(COLUMN_NAME).contains(VALUE.toString()) .contains(DATA_TYPE.toString()); }
@Test public void testToStringFromString() { OptimizelyJSON oj1 = new OptimizelyJSON(orgJson, parser); assertEquals(compact(oj1.toString()), compact(orgJson)); }
@Test public void testGetRegion_1() throws Exception { JobNodeBean fixture = new ProjectNodeBean(new Project()); String result = fixture.getRegion(); assertNotNull(result); }
@Test public void shouldNeverReturnNullWhenGettingLocalizationProblemsForSuppliedLocale() { assertThat(I18n.getLocalizationProblems(TestI18n.class, Locale.US), notNullValue()); }
@Test public void test() throws Exception { assertThat(results(DateTime.parse("20180101"), 10), AllOf.<Matcher<RecurrenceRule>>allOf( matches(new RecurrenceRule("FREQ=DAILY;COUNT=10")), mismatches(new RecurrenceRule("FREQ=DAILY;COUNT=9"), "number of instances was <9>"), mismatches(new RecurrenceRule("FREQ=DAILY;COUNT=12"), "number of instances was <12>"), describesAs("number of instances is <10>") )); assertThat(results(DateTime.parse("20180101"), lessThan(20)), AllOf.<Matcher<RecurrenceRule>>allOf( matches(new RecurrenceRule("FREQ=DAILY;COUNT=1")), matches(new RecurrenceRule("FREQ=DAILY;COUNT=19")), mismatches(new RecurrenceRule("FREQ=DAILY;COUNT=20"), "number of instances <20> was equal to <20>"), mismatches(new RecurrenceRule("FREQ=DAILY;COUNT=21"), "number of instances <21> was greater than <20>"), describesAs("number of instances is a value less than <20>") )); }
@Test public void testExecute() { ConsumerConnectionSubCommand cmd = new ConsumerConnectionSubCommand(); Options options = ServerUtil.buildCommandlineOptions(new Options()); String[] subargs = new String[] {"-g default-consumer-group"}; final CommandLine commandLine = ServerUtil.parseCmdLine("mqadmin " + cmd.commandName(), subargs, cmd.buildCommandlineOptions(options), new PosixParser()); cmd.execute(commandLine, options, null); }
@Test void testSVGFileDirectStream() throws Exception { Pair<MockSlingHttpServletRequest, MockSlingHttpServletResponse> requestResponsePair = prepareRequestResponsePair(IMAGE24_PATH, 1489998822138L, "img", "svg"); MockSlingHttpServletRequest request = requestResponsePair.getLeft(); MockSlingHttpServletResponse response = requestResponsePair.getRight(); servlet.doGet(request, response); ByteArrayInputStream stream = new ByteArrayInputStream(response.getOutput()); InputStream directStream = this.getClass().getClassLoader().getResourceAsStream("image/Adobe_Systems_logo_and_wordmark.svg"); assertTrue(IOUtils.contentEquals(stream, directStream)); }
@Test public void testStartProcessFromDisplayer() { when(displayer.isValid()).thenReturn(true); when(formRenderingSettings.getTimestamp()).thenReturn(100000l); MapModelRenderingContext mapModelRenderingContext = mock(MapModelRenderingContext.class); when(formRenderingSettings.getRenderingContext()).thenReturn(mapModelRenderingContext); when(service.call(any())).thenReturn(kieWorkbenchFormsEntryPoint); ProcessDefinitionKey processDefinitionKey = new ProcessDefinitionKey( "test-serverTemplateId", "test-deploymentId", "test-processId", "test-processDefName"); ProcessDisplayerConfig processDisplayerConfig = new ProcessDisplayerConfig(processDefinitionKey, "test", false); processDisplayerConfig.setRenderingSettings(formRenderingSettings); kieWorkbenchFormsStartProcessDisplayer.initConfigs(processDisplayerConfig, null, null); kieWorkbenchFormsStartProcessDisplayer.startProcessFromDisplayer(); verify(service).call(any()); verify(kieWorkbenchFormsEntryPoint).startProcessFromRenderContext(100000l, null, "test-serverTemplateId", "test-deploymentId", "test-processId", ""); }
@Test public void shouldReturnNullWithNoIdentifierTypeProvided() { final Element element = mock(Element.class); final ExtractId extractor = new ExtractId(); final Object result = extractor.apply(element); assertNull(result); }
@Test(expected = NullPointerException.class) public void testExecuteCellProcessorsWithNullDestination() { Util.executeCellProcessors(null, LIST, PROCESSORS, LINE_NO, ROW_NO); }
@Test public void testDumpString95() throws Throwable { byte[] b = new byte[4]; b[1] = (byte) 6; b[2] = (byte) 25; String result = ISOUtil.dumpString(b); assertEquals("{NULL}{ACK}[19]{NULL}", result, "result"); }
@Test public void testRemoveSuffixes() { assertThat(removeSuffixes(null, Collections.emptySet()), is(nullValue())); assertThat(removeSuffixes(Collections.emptySet(), null), is(empty())); assertThat(removeSuffixes(Collections.emptySet(), Collections.emptySet()), is(empty())); List<String> seed = Arrays.asList("%example.com%", "^test.net$", "touch", "click.net", "three", "%a%", "^b$"); List<String> suffixes = Arrays.asList(".com", ".net", "a", "b"); Collection<String> output = removeSuffixes(seed, suffixes); assertThat(output, hasSize(7)); assertThat(output, contains("%example%", "^test$", "touch", "^click$", "three", "%%", "^$")); }
@Test public void whenEnterEndThenResultProgramTerminate() { String stopKey = String.format("end%stest%scontinue%sstop", sep, sep, sep); System.setIn(new ByteArrayInputStream(stopKey.getBytes())); try { new ConsoleChat(this.filePathPhrase, this.filePathLog).init(); } catch (IOException ioe) { ioe.printStackTrace(); } assertThat(this.out.toString().isEmpty(), is(true)); }
@Test public void annotationQuerySkipsEmptyKeys() { Map<String, String> query = new LinkedHashMap<>(); query.put("", "bar"); assertThat(queryBuilder.annotationQuery(query).build().annotationQuery()) .isEmpty(); }
@Test public void testFormatNullableBoolean() { byte[] data = Json.createObjectNode() .put("test_some", true).set("test_none", NullNode.getInstance()) .toString().getBytes(StandardCharsets.UTF_8); PubsubMessage message = new PubsubMessage(data, Collections.emptyMap()); Schema schema = SchemaBuilder .record("root").fields() .name("test_none").type().unionOf().nullType().and().booleanType().endUnion().noDefault() .name("test_some").type().unionOf().nullType().and().booleanType().endUnion().noDefault() .endRecord(); PubsubMessageRecordFormatter formatter = new PubsubMessageRecordFormatter(); GenericRecord record = formatter.formatRecord(message, schema); assertEquals(null, record.get("test_none")); assertEquals(true, record.get("test_some")); }
@Test public void testFromIntent() { Bundle bundle = new Bundle(); Intent intent = new Intent(); intent.putExtra(PushManager.EXTRA_PUSH_MESSAGE_BUNDLE, bundle); PushMessage message = PushMessage.fromIntent(intent); assertNotNull(message); assertBundlesEquals(bundle, message.getPushBundle()); }
@Test public void testWithNoneBuildCommit() { Manifest manifest = mock(Manifest.class); Attributes attributes = mock(Attributes.class); when(manifest.getMainAttributes()).thenReturn(attributes); when(attributes.getValue("Implementation-Version")).thenReturn("0.1.2-SNAPSHOT"); when(attributes.getValue("Build-Commit")).thenReturn("[none]"); when(attributes.getValue("Build-Time")).thenReturn("xyz"); String version = Version.getVersion(manifest); assertThat(version).isEqualTo("0.1.2-SNAPSHOT, built xyz"); }
@Test public void testMod() { final BigInteger TWO = BigInteger.ONE.add(BigInteger.ONE); for(long n = 3; n < 100; n++) { for (long e = 1; e < 100; e++) { final long r = TWO.modPow( BigInteger.valueOf(e), BigInteger.valueOf(n)).longValue(); Assert.assertEquals("e=" + e + ", n=" + n, r, BaileyBorweinPlouffe .mod(e, n)); } } }
@Test public void test_merged_resultset() throws IOException { SensorContextTester context = getSensorContext("merged_resultset.json", "file1.rb", "file2.rb"); new SimpleCovSensor().execute(context); String file1Key = MODULE_KEY + ":file1.rb"; assertThat(context.lineHits(file1Key, 1)).isEqualTo(0); assertThat(context.lineHits(file1Key, 2)).isEqualTo(0); assertThat(context.lineHits(file1Key, 3)).isEqualTo(1); assertThat(context.lineHits(file1Key, 4)).isEqualTo(0); assertThat(context.lineHits(file1Key, 5)).isNull(); assertThat(context.lineHits(file1Key, 6)).isEqualTo(1); assertThat(context.lineHits(file1Key, 7)).isEqualTo(1); assertThat(context.lineHits(file1Key, 8)).isEqualTo(1); assertThat(context.lineHits(file1Key, 9)).isEqualTo(2); String file2Key = MODULE_KEY + ":file2.rb"; assertThat(context.lineHits(file2Key, 1)).isEqualTo(3); }
@Test public void default_event_strategy_works_as_expected() { BreakingEventStrategy<Object> dm = (BreakingEventStrategy<Object>) CircuitBreakerImpl.DEFAULT_BREAKING_EVENT_STRATEGY; assertThat(dm.isEventACircuitBreakerFailure(new Object())).isFalse(); assertThat(dm.isEventACircuitBreakerFailure("foo")).isFalse(); assertThat(dm.isEventACircuitBreakerFailure(null)).isFalse(); }
@Test public void testGetManifestUrl() throws URISyntaxException { Assert.assertEquals(ConfigurationTest.APPLICATION_ROOT_URL + "rest/records/PI-SAMPLE/manifest", handler.getManifestUrl("PI-SAMPLE")); }
@Test public void testOnEnableReadExternalStorageButtonClicked() throws Exception { model.onEnableReadExternalStorageButtonClicked(); verify(propertyChangedListener, times(1)).onPropertyChanged(MainActivityModel.PROPERTY_READ_EXTERNAL_STORAGE_PERMISSION); }
@Test public void setContextValueNullValue() { context = new RuntimeContexts(); context.setContextValue("context", 5, "key", null); assertContextMapContains(context, "context", "key", null); assertLifespanMapContains(context, "context",5); }
@Test public void testEmptyLines() throws Exception { SimpleFeatureCollection features = fsLines.getFeatures(); ClipProcess cp = new ClipProcess(); SimpleFeatureCollection result = cp.execute( features, new WKTReader().read("POLYGON((-8 -7, -8 3, 2 3, -8 -7))"), true); assertEquals(0, result.size()); SimpleFeatureIterator fi = result.features(); assertFalse(fi.hasNext()); fi.close(); }
@Test public void import_detekt_issues_with_rule_loader() throws IOException { List<ExternalIssue> externalIssues = importIssues("detekt-checkstyle.xml"); assertThat(externalIssues).hasSize(3); ExternalIssue first = externalIssues.get(0); assertThat(first.primaryLocation().inputComponent().key()).isEqualTo("externalreport-project:main.kt"); assertThat(first.ruleKey().rule()).isEqualTo("detekt.EmptyIfBlock"); assertThat(first.type()).isEqualTo(RuleType.CODE_SMELL); assertThat(first.severity()).isEqualTo(Severity.MINOR); assertThat(first.primaryLocation().message()).isEqualTo("This empty block of code can be removed."); assertThat(first.primaryLocation().textRange().start().line()).isEqualTo(3); ExternalIssue second = externalIssues.get(1); assertThat(second.primaryLocation().inputComponent().key()).isEqualTo("externalreport-project:main.kt"); assertThat(second.ruleKey().rule()).isEqualTo("detekt.MagicNumber"); assertThat(second.type()).isEqualTo(RuleType.CODE_SMELL); assertThat(second.severity()).isEqualTo(Severity.INFO); assertThat(second.remediationEffort().longValue()).isEqualTo(10L); assertThat(second.primaryLocation().message()).isEqualTo("This expression contains a magic number. Consider defining it to a well named constant."); assertThat(second.primaryLocation().textRange().start().line()).isEqualTo(3); ExternalIssue third = externalIssues.get(2); assertThat(third.primaryLocation().inputComponent().key()).isEqualTo("externalreport-project:A.kt"); assertThat(third.ruleKey().rule()).isEqualTo("detekt.EqualsWithHashCodeExist"); assertThat(third.type()).isEqualTo(RuleType.CODE_SMELL); assertThat(third.severity()).isEqualTo(Severity.CRITICAL); assertThat(third.primaryLocation().message()).isEqualTo("A class should always override hashCode when overriding equals and the other way around."); assertThat(third.primaryLocation().textRange().start().line()).isEqualTo(3); assertThat(logTester.logs(LoggerLevel.ERROR)).isEmpty(); }
@Ignore @Test @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class) public void testRegisterDownloadFile() throws IOException, ClassNotFoundException, InterruptedException, ParseException, NoSuchAlgorithmException, VcfReadingException { FeatureIndexedFileRegistrationRequest request = new FeatureIndexedFileRegistrationRequest(); request.setReferenceId(referenceId); request.setType(BiologicalDataItemResourceType.DOWNLOAD); request.setPath(HTTP_VCF); VcfFile vcfFile = vcfManager.registerVcfFile(request); Assert.assertNotNull(vcfFile); Assert.assertNotNull(vcfFile.getId()); }
@Test public void testSendMessage_NoRoute() throws RemotingException, InterruptedException, MQBrokerException { when(mQClientAPIImpl.getNameServerAddressList()).thenReturn(Collections.singletonList("127.0.0.1:9876")); try { producer.send(message); failBecauseExceptionWasNotThrown(MQClientException.class); } catch (MQClientException e) { assertThat(e).hasMessageContaining("No route info of this topic"); } }
@Test(expected = AssertionError.class) public void linking_same_scope_twice() throws Exception { TestScope s1 = new TestScope(); TestScope l = new TestScope(); s1.link(l); s1.link(l); }
@Test public void shouldCreateItemId_withId() throws Exception { final String itemIdStr = randomId(); final ItemId itemId = new ItemId(itemIdStr); assertNotNull(itemId); assertEquals(itemIdStr, itemId.value()); }
@Test @DisplayName("Should generate project files with basic spring web context") void generateFilesWithSpringControllerResource() throws Exception { final ProjectWriter mockWriter = mock(ProjectWriter.class); final Path mockProjectPath = mock(Path.class); final BasicRestProjectGenerator basicRestProjectGenerator = new BasicRestProjectGenerator(); when(mockWriter.mkdirs(anyString())).thenAnswer(invocationOnMock -> invocationOnMock.getArgument(0, String.class)); QuarkusCommandInvocation springContext = createQuarkusCommandInvocation(mockProjectPath); springContext.setValue(IS_SPRING, Boolean.TRUE); basicRestProjectGenerator.generate(mockWriter, springContext); verify(mockWriter, times(1)).write(eq("src/main/java/org/example/ExampleResource.java"), argThat(argument -> argument.contains("@RequestMapping(\"/hello\")"))); verify(mockWriter, times(1)).write(eq("src/main/java/org/example/ExampleResource.java"), argThat(argument -> argument.contains("@RestController"))); }
@Test public void hasAGaugeForTheNumberOfDaemonThreads() throws Exception { clock.addSeconds(61); assertThat(((Gauge) gauges.getMetrics().get(DAEMON_COUNT)).getValue()) .isEqualTo(13); }
@Test public void setFlexibleMode() { RouteSearchParameters routeSearchParameters = new RouteSearchParameters(); routeSearchParameters.setFlexibleMode(true); Assert.assertTrue(routeSearchParameters.getFlexibleMode()); }
@Test public void mapRoleRefsToServiceComponents() { underTest = new CmTemplateProcessor(getBlueprintText("input/clouderamanager.bp")); Map<String, ServiceComponent> expected = new HashMap<>(); expected.put("hbase-MASTER-BASE", ServiceComponent.of("HBASE", "MASTER")); expected.put("hbase-REGIONSERVER-BASE", ServiceComponent.of("HBASE", "REGIONSERVER")); expected.put("hdfs-BALANCER-BASE", ServiceComponent.of("HDFS", "BALANCER")); expected.put("hdfs-DATANODE-BASE", ServiceComponent.of("HDFS", "DATANODE")); expected.put("hdfs-NAMENODE-BASE", ServiceComponent.of("HDFS", "NAMENODE")); expected.put("hdfs-SECONDARYNAMENODE-BASE", ServiceComponent.of("HDFS", "SECONDARYNAMENODE")); expected.put("hive-GATEWAY-BASE", ServiceComponent.of("HIVE", "GATEWAY")); expected.put("hive-HIVEMETASTORE-BASE", ServiceComponent.of("HIVE", "HIVEMETASTORE")); expected.put("hive-HIVESERVER2-BASE", ServiceComponent.of("HIVE", "HIVESERVER2")); expected.put("impala-CATALOGSERVER-BASE", ServiceComponent.of("IMPALA", "CATALOGSERVER")); expected.put("impala-IMPALAD-BASE", ServiceComponent.of("IMPALA", "IMPALAD")); expected.put("impala-STATESTORE-BASE", ServiceComponent.of("IMPALA", "STATESTORE")); expected.put("kafka-KAFKA_BROKER-BASE", ServiceComponent.of("KAFKA", "KAFKA_BROKER")); expected.put("spark_on_yarn-GATEWAY-BASE", ServiceComponent.of("SPARK_ON_YARN", "GATEWAY")); expected.put("spark_on_yarn-SPARK_YARN_HISTORY_SERVER-BASE", ServiceComponent.of("SPARK_ON_YARN", "SPARK_YARN_HISTORY_SERVER")); expected.put("yarn-JOBHISTORY-BASE", ServiceComponent.of("YARN", "JOBHISTORY")); expected.put("yarn-NODEMANAGER-BASE", ServiceComponent.of("YARN", "NODEMANAGER")); expected.put("yarn-RESOURCEMANAGER-BASE", ServiceComponent.of("YARN", "RESOURCEMANAGER")); expected.put("zookeeper-SERVER-BASE", ServiceComponent.of("ZOOKEEPER", "SERVER")); Map<String, ServiceComponent> actual = underTest.mapRoleRefsToServiceComponents(); assertSortedEquals(expected, actual); }
@Test public void deleteEvse() { ChargingStationType chargingStationType = getChargingStationTypeNonTransient(entityManagerFactory); Long evseId = Iterables.get(chargingStationType.getEvses(), 0).getId(); domainService.deleteEvse(chargingStationType.getId(), evseId); }
@Test public void testGetUnSystemJobNames() throws SaturnJobConsoleException { JobConfig4DB jobConfig4DB = new JobConfig4DB(); jobConfig4DB.setJobName(jobName); when(currentJobConfigService.findConfigsByNamespace(namespace)).thenReturn(Lists.newArrayList(jobConfig4DB)); assertEquals(jobService.getUnSystemJobs(namespace).size(), 1); }
@Test public void testMarkAsFilterExists() throws Exception { List<Path> files = createTempTestFiles(1); Path file = files.get(0); when(imageRepository.getByPath(file)).thenReturn(new ImageRecord(file.toString(), 42)); dupOp.markAs(file, TAG_FOO); verify(filterRepository).store(new FilterRecord(42, TAG_FOO)); }
@Ignore @Test public void testExtractOpenstackImagesFromServers() { Server server1 = mock(Server.class); Server server2 = mock(Server.class); List<Server> servers = Arrays.asList(server1, server2); Image image1 = mock(Image.class); Image image2 = mock(Image.class); when(image1.getId()).thenReturn("1"); when(image2.getId()).thenReturn("1"); List<Image> expectedDistinctImages = Collections.singletonList(image1); when(server1.getImage()).thenReturn(image1); when(server2.getImage()).thenReturn(image2); List<Image> images = heatbridge.extractOpenstackImagesFromServers(servers); assertEquals(expectedDistinctImages, images); }
@Test public void testAddExclusion() { final Dependency dependency = new Dependency(DEPENDENCY_GROUP_ID, DEPENDENCY_ARTIFACT_ID, DEPENDENCY_VERSION); final int originalExclusionCount = dependency.getExclusions().size(); dependency.addExclusion(EXCLUSION_GROUP_ID, EXCLUSION_ARTIFACT_ID); assertEquals(originalExclusionCount + 1, dependency.getExclusions().size()); }
@Test public void notNullArg() { SetLocaleEvent victim = new SetLocaleEvent("ChuckNorris"); assertEquals("ChuckNorris", victim.getLocaleString()); }
@Test public void shouldSetAcceptedStatus() throws Exception { status.accepted(); verify(response).setStatus(202); }
@Test public void invokingSetConfiCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.CONFIG_SET, () -> getConnection().setConfig("param", "val")); verify(mockRedisConnection()).setConfig("param", "val"); }
@Test public void canResolve_should_returnFalseWhenPropertyIsNotAuthenticatedUser() { boolean canResolve = resolver.canResolve("anyOtherProperty", mock(VariableScope.class)); assertThat(canResolve).isFalse(); }
@Test public void testRemoveAlertHandler() throws Exception { AlertHandler alertHandler = mock( AlertHandler.class ); environmentManager.alertHandlers.put( "ID", alertHandler ); doReturn( "ID" ).when( alertHandler ).getId(); environmentManager.removeAlertHandler( alertHandler ); assertFalse( environmentManager.alertHandlers.containsValue( alertHandler ) ); }
@Test public void relativeTemplateDefaultTemplateContextWiki() throws Exception { setUpUserObject(); String templateStringReference = "Some.Template"; parameters.put(WatchListEventMimeMessageFactory.TEMPLATE_PARAMETER, templateStringReference); DocumentReference userWikiTemplateReference = new DocumentReference("wiki", "Some", "Template"); when( mockExplicitDocumentReferenceResolver.resolve(templateStringReference, testSubscriberReference.getWikiReference())).thenReturn(userWikiTemplateReference); when(mockWiki.exists(userWikiTemplateReference, mockContext)).thenReturn(false); String currentWikiId = "xwiki"; when(mockContext.getWikiId()).thenReturn(currentWikiId); WikiReference currentWikiReference = new WikiReference(currentWikiId); DocumentReference currentWikiTemplateReference = new DocumentReference(currentWikiId, "Some", "Template"); when(mockExplicitDocumentReferenceResolver.resolve(templateStringReference, currentWikiReference)).thenReturn( currentWikiTemplateReference); when(mockWiki.exists(currentWikiTemplateReference, mockContext)).thenReturn(false); DocumentReference defaultCurrentWikiTemplateReference = new DocumentReference(currentWikiId, "Some", "Template"); when(mockExplicitDocumentReferenceResolver.resolve(WatchListJob.DEFAULT_EMAIL_TEMPLATE, currentWikiReference)) .thenReturn(defaultCurrentWikiTemplateReference); when(mockWiki.exists(defaultCurrentWikiTemplateReference, mockContext)).thenReturn(true); testTemplateReference = defaultCurrentWikiTemplateReference; WatchListMessageData result = extractor.extract(testSubscriberReference, mockDocument, mockUserObject); assertResult(result); }
@Test public void testEvaluateBinaryLong() { OpBehaviorFloatFloat2Float op = new OpBehaviorFloatFloat2Float(); FloatFormat ff8 = FloatFormatFactory.getFloatFormat(8); FloatFormat ff4 = FloatFormatFactory.getFloatFormat(4); long a = ff4.getEncoding(1.75); long result = op.evaluateUnary(8, 4, a); Assert.assertEquals(1.75, ff8.getHostFloat(result), 0); a = ff4.getEncoding(-1.75); result = op.evaluateUnary(8, 4, a); Assert.assertEquals(-1.75, ff8.getHostFloat(result), 0); a = ff4.getEncoding(Float.POSITIVE_INFINITY); result = op.evaluateUnary(8, 4, a); Assert.assertEquals(Double.POSITIVE_INFINITY, ff8.getHostFloat(result), 0); a = ff4.getEncoding(Float.NEGATIVE_INFINITY); result = op.evaluateUnary(8, 4, a); Assert.assertEquals(Double.NEGATIVE_INFINITY, ff8.getHostFloat(result), 0); a = ff4.getEncoding(Float.NaN); result = op.evaluateUnary(8, 4, a); Assert.assertEquals(Double.NaN, ff8.getHostFloat(result), 0); }
@Test public void testClientLog() { Invocation invocation = Mockito.mock(Invocation.class); InvocationStageTrace stageTrace = Mockito.mock(InvocationStageTrace.class); OperationMeta operationMeta = Mockito.mock(OperationMeta.class); long startMillisecond = 1416863450581L; when(stageTrace.getStartSend()).thenReturn(0L); when(stageTrace.getStart()).thenReturn(0L); when(stageTrace.getFinish()).thenReturn(0L); when(stageTrace.getStartCurrentTime()).thenReturn(startMillisecond); when(invocation.getOperationMeta()).thenReturn(operationMeta); when(invocation.getInvocationStageTrace()).thenReturn(stageTrace); InvocationFinishEvent finishEvent = new InvocationFinishEvent(invocation, null); SimpleDateFormat simpleDateFormat = new SimpleDateFormat(ConfigurableDatetimeAccessItem.DEFAULT_DATETIME_PATTERN, ConfigurableDatetimeAccessItem.DEFAULT_LOCALE); simpleDateFormat.setTimeZone(TimeZone.getDefault()); when(operationMeta.getHttpMethod()).thenReturn(HttpMethod.DELETE.toString()); String log = LOG_GENERATOR.generateClientLog(finishEvent); Assert.assertEquals("DELETE" + " - " + simpleDateFormat.format(startMillisecond), log); }
@Test public void testPacketOutInputWithNoData() throws Exception { PacketOutInputBuilder builder = new PacketOutInputBuilder(); BufferHelper.setupHeader(builder, EncodeConstants.OF13_VERSION_ID); builder.setBufferId(256L); builder.setInPort(new PortNumber(256L)); List<Action> actions = new ArrayList<>(); builder.setAction(actions); builder.setData(null); PacketOutInput message = builder.build(); ByteBuf out = UnpooledByteBufAllocator.DEFAULT.buffer(); packetOutFactory.serialize(message, out); BufferHelper.checkHeaderV13(out, MESSAGE_TYPE, 24); out.skipBytes(16); Assert.assertTrue("Unexpected data", out.readableBytes() == 0); }
@Test public void exists() { Logger logger = LogManager.exists("test.example.NewClass"); assertThat(logger).isNull(); LogManager.getLogger("test.example.NewClass"); logger = LogManager.exists("test.example.NewClass"); assertThat(logger).isNotNull(); }
@Test(expected = IllegalArgumentException.class) public void preVisitDirectoryNull1() { final Path dir = newTempDir(null); final Path file = Files.createTempFile(dir, "foo", "bar"); simple.preVisitDirectory(null, Files.readAttributes(file, BasicFileAttributes.class)); }
@Test public void testConvertToTalendField() { assertNotNull(ClouderaFieldConvertor.convertToTalendField(null).size()); assertEquals(0, ClouderaFieldConvertor.convertToTalendField(null).size()); Map<String, String> schema = new HashMap<String, String>(); schema.put("id", "int"); schema.put("name", "String"); List<TalendField> fields = ClouderaFieldConvertor.convertToTalendField(schema); assertNotNull(fields); assertEquals("[{\"name\":\"name\", \"dataType\":\"String\"}, {\"name\":\"id\", \"dataType\":\"int\"}]", fields.toString()); }
@Test public void testInstanceTwoArgsValid() throws Exception { String query = "query"; String arg1 = "arg1"; String arg2 = "arg2"; AbstractAliasedQuery sq = SimpleQuery.instanceWithTwoArguments(query, arg1, arg2, 0); Assert.assertEquals("invalid query value", query, sq.getQueryString()); Assert.assertEquals("invalid args", 2, sq.getArguments().size()); Assert.assertEquals("did not set args correctly", arg1, sq.getArguments().get(0)); Assert.assertEquals("did not set args correctly", arg2, sq.getArguments().get(1)); }
@Test public void validAuthenticate() { Mockito.when(this.mockRequest.getHeaderString("Authorization")).thenReturn("Basic YWRtaW46YWRtaW4xMjM="); this.authUtil.authenticate(this.mockRequest, USER, ENCRYPTED_PASSWORD); }
@Test public void testValidVolumesPass() { final Job j = Job.newBuilder().setName("foo").setVersion("1").setImage("foobar").build(); assertThat(validator.validate(j.toBuilder().addVolume("/foo", "bar").build()), is(empty())); assertThat(validator.validate(j.toBuilder().addVolume("/foo").build()), is(empty())); assertThat(validator.validate(j.toBuilder().addVolume("/foo", "/").build()), is(empty())); assertThat(validator.validate(j.toBuilder().addVolume("/foo:ro", "/").build()), is(empty())); assertThat(validator.validate(j.toBuilder().addVolume("/foo", "/bar").build()), is(empty())); assertThat(validator.validate(j.toBuilder().addVolume("/foo:ro", "/bar").build()), is(empty())); }
@Test public void nonProductionMode_writeCacheHeadersDoNotCacheResource() { Mockito.when(configuration.isProductionMode()).thenReturn(false); fileServer.overrideCacheTime = 0; fileServer.writeCacheHeaders("/folder/myfile.txt", response); Assert.assertTrue(headers.get("Cache-Control").equals("no-cache")); }
@Test public void testAddTransactionsDependingOn() throws Exception { CoinSelector originalCoinSelector = wallet.getCoinSelector(); try { wallet.allowSpendingUnconfirmedTransactions(); sendMoneyToWallet(AbstractBlockChain.NewBlockType.BEST_CHAIN, valueOf(2, 0)); Transaction send1 = checkNotNull(wallet.createSend(OTHER_ADDRESS, valueOf(1, 0))); Transaction send2 = checkNotNull(wallet.createSend(OTHER_ADDRESS, valueOf(1, 20))); wallet.commitTx(send1); Transaction send1b = checkNotNull(wallet.createSend(OTHER_ADDRESS, valueOf(0, 50))); wallet.commitTx(send1b); Transaction send1c = checkNotNull(wallet.createSend(OTHER_ADDRESS, valueOf(0, 25))); wallet.commitTx(send1c); wallet.commitTx(send2); Set<Transaction> txns = new HashSet<>(); txns.add(send1); wallet.addTransactionsDependingOn(txns, wallet.getTransactions(true)); assertEquals(3, txns.size()); assertTrue(txns.contains(send1)); assertTrue(txns.contains(send1b)); assertTrue(txns.contains(send1c)); } finally { wallet.setCoinSelector(originalCoinSelector); } }
@Test public void testReplaceVariable() { Map<String, String> result = configTransformer.transform(MY_CONNECTOR, Collections.singletonMap(MY_KEY, "${test:testPath:testKey}")); assertEquals(TEST_RESULT, result.get(MY_KEY)); }
@Test public void testLargeBioclipseUseCase() throws Exception { String smiles = "COc1ccc2[C@@H]3[C@H](COc2c1)C(C)(C)OC4=C3C(=O)C(=O)C5=C4OC(C)(C)[C@@H]6COc7cc(OC)ccc7[C@H]56"; SmilesParser smilesParser = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer molecule = smilesParser.parseSmiles(smiles); molecule = fbot.kekuliseAromaticRings(molecule); Assert.assertNotNull(molecule); molecule = (IAtomContainer) AtomContainerManipulator.removeHydrogens(molecule); Assert.assertEquals(40, molecule.getAtomCount()); int doubleBondCount = 0; for (int i = 0; i < molecule.getBondCount(); i++) { IBond bond = molecule.getBond(i); if (bond.getOrder() == Order.DOUBLE) doubleBondCount++; } Assert.assertEquals(10, doubleBondCount); }
@Test public void testIsSatisfiedBy() throws Exception { PresentationToken pt = (PresentationToken) XmlUtils.getObjectFromXML(getClass().getResourceAsStream( "/eu/abc4trust/sampleXml/presentationTokens/presentationTokenHotelOption1.xml"), true); PresentationTokenDescription ptd = pt.getPresentationTokenDescription(); PresentationPolicyAlternatives ppa = (PresentationPolicyAlternatives) XmlUtils.getObjectFromXML(getClass().getResourceAsStream( "/eu/abc4trust/sampleXml/presentationPolicies/presentationPolicyAlternativesHotel.xml"), true); MyPresentationPolicy mypp = new MyPresentationPolicy(ppa.getPresentationPolicy().get(0)); assertTrue(mypp.isSatisfiedBy(ptd, null, null)); }
@Test public void shouldReturnTrueWhenIsColumnsForDeliveriesEmpty() { given( columnExtensionService.isColumnsEmpty(DeliveriesConstants.PLUGIN_IDENTIFIER, DeliveriesConstants.MODEL_COLUMN_FOR_DELIVERIES)).willReturn(true); boolean result = deliveriesColumnLoaderService.isColumnsForDeliveriesEmpty(); assertTrue(result); }
@Test public void updateOrchestrationStatusVolumeGroupTest() throws Exception { volumeGroup.setOrchestrationStatus(OrchestrationStatus.ASSIGNED); doNothing().when(MOCK_aaiResourcesClient).update(isA(AAIResourceUri.class), isA(org.onap.aai.domain.yang.VolumeGroup.class)); aaiVolumeGroupResources.updateOrchestrationStatusVolumeGroup(volumeGroup, cloudRegion, OrchestrationStatus.ACTIVE); verify(MOCK_aaiResourcesClient, times(1)).update(any(AAIResourceUri.class), ArgumentMatchers.isNull()); assertEquals(OrchestrationStatus.ACTIVE, volumeGroup.getOrchestrationStatus()); }
@Test public void testCompareToEqualsNullType1() { Span a = new Span(30, 1000); Span b = new Span(30, 1000, "b"); Assert.assertEquals(true, a.compareTo(b) == 1); }
@Test public void invalidTransactionsWithSameNonceAndSameSender() { RskAddress sender = TestUtils.randomAddress(); initialNonce(sender, 42); Block block = block(transaction(sender, 42), transaction(sender, 42)); Assert.assertFalse(rule.isValid(block, parent)); }
@Test public void testOnNonDictionary() { Token token = new CW(jCas, 46, 53); assertEquals(ImmutableList.<String> of("DL=Unknown"), gen.extract(token, null)); }
@Test public void testCreateConfArchive() throws IOException { File confDir = TEMP_FOLDER.newFolder(); File confFile = new File(confDir, "testing.conf"); Files.write("Testing Message", confFile, Charsets.UTF_8); SparkConf conf = new SparkConf(); conf.set("testing", "value"); File archiveFile = SparkRuntimeUtils.createConfArchive(conf, "test.properties", confDir.getAbsolutePath(), TEMP_FOLDER.newFile()); try (ZipFile zipFile = new ZipFile(archiveFile)) { Properties properties = new Properties(); try (InputStream is = zipFile.getInputStream(zipFile.getEntry("test.properties"))) { properties.load(is); Assert.assertEquals("value", properties.getProperty("testing")); } try (InputStream is = zipFile.getInputStream(zipFile.getEntry("testing.conf"))) { Assert.assertEquals("Testing Message", Bytes.toString(ByteStreams.toByteArray(is))); } } }
@Test public void runWithDefaultFilesToStage() throws Exception { DataflowPipelineOptions options = buildPipelineOptions(); options.setFilesToStage(null); DataflowRunner.fromOptions(options); assertFalse(options.getFilesToStage().isEmpty()); }
@Test public void shouldAddMissingLabels() throws Exception { String[] toAdd = new String[] {"Add1", "Add2"}; InputEntityVisitor node = additiveLabels( toAdd ).apply( entity ); String[] nodeLabels = new String[] {"SomeOther"}; node( node, "source", 1, 0, "id", NO_PROPERTIES, null, nodeLabels, null ); assertEquals( asSet( ArrayUtil.union( toAdd, nodeLabels ) ), asSet( entity.labels() ) ); }
@Test public void test()throws Exception{ ConfigurationRecorder dt = new ConfigurationRecorder(); dt.setName("test"); Collection<ConfigurationRecorder> li = new ArrayList<>(); li.add(dt); DescribeConfigurationRecordersResult describeConfigurationRecordersResult = new DescribeConfigurationRecordersResult(); describeConfigurationRecordersResult.setConfigurationRecorders(li); Collection<ConfigurationRecorder> emptyList = new ArrayList<>(); DescribeConfigurationRecordersResult emptyDetectorsResult = new DescribeConfigurationRecordersResult(); emptyDetectorsResult.setConfigurationRecorders(emptyList); mockStatic(PacmanUtils.class); when(PacmanUtils.doesAllHaveValue(anyString(),anyString(),anyString())).thenReturn( true); Map<String,Object>map=new HashMap<String, Object>(); map.put("client", awsConfigClient); CheckAWSConfigEnabled spy = Mockito.spy(new CheckAWSConfigEnabled()); Mockito.doReturn(map).when((BaseRule)spy).getClientFor(anyObject(), anyString(), anyObject()); when(awsConfigClient.describeConfigurationRecorders()).thenReturn(describeConfigurationRecordersResult); spy.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 ")); when(awsConfigClient.describeConfigurationRecorders()).thenReturn(emptyDetectorsResult); spy.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 ")); when(awsConfigClient.describeConfigurationRecorders()).thenThrow(new InvalidInputException()); assertThatThrownBy( () -> configEnabled.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 "))).isInstanceOf(InvalidInputException.class); when(PacmanUtils.doesAllHaveValue(anyString(),anyString(),anyString())).thenReturn( false); assertThatThrownBy( () -> configEnabled.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getMapString("r_123 "))).isInstanceOf(InvalidInputException.class); }
@Test public void linksGoTo_PageRelevant() { PDAnnotationLink annotation = new PDAnnotationLink(); PDPageDestination dest = new PDPageFitDestination(); dest.setPage(oldPage); PDActionGoTo action = new PDActionGoTo(); action.setDestination(dest); annotation.setAction(action); List<PDAnnotation> annotations = Arrays.asList(annotation); oldPage.setAnnotations(annotations); PDDocument doc = new PDDocument(); doc.addPage(oldPage); LookupTable<PDAnnotation> annotationsLookup = new AnnotationsDistiller(doc).retainRelevantAnnotations(lookup); assertEquals(annotationsLookup.lookup(annotation), newPage.getAnnotations().get(0)); }
@Test public void testProjection4() { BayesVariable a = new BayesVariable<String>( "A", 0, new String[] {"A1", "A2"}, new double[][] {{0.1, 0.2}}); BayesVariable b = new BayesVariable<String>( "B", 1, new String[] {"B1", "B2"}, new double[][] {{0.1, 0.2}}); BayesVariable c = new BayesVariable<String>( "C", 2, new String[] {"C1", "C2"}, new double[][] {{0.1, 0.2}}); Graph<BayesVariable> graph = new BayesNetwork(); GraphNode x0 = addNode(graph); GraphNode x1 = addNode(graph); GraphNode x2 = addNode(graph); GraphNode x3 = addNode(graph); x0.setContent( a ); x1.setContent( b ); x2.setContent( c ); JunctionTreeClique node1 = new JunctionTreeClique(0, graph, bitSet("0111") ); JunctionTreeClique node2 = new JunctionTreeClique(1, graph, bitSet("0110") ); SeparatorState sep = new JunctionTreeSeparator(0, node1, node2, bitSet("0101"), graph).createState(); double v = 0.1; for ( int i = 0; i < node1.getPotentials().length; i++ ) { node1.getPotentials()[i] = v; v = scaleDouble(3, v + 0.1 ); } BayesVariable[] vars = new BayesVariable[] {a, b, c}; BayesVariable[] sepVars = new BayesVariable[] { b, c }; int[] sepVarPos = PotentialMultiplier.createSubsetVarPos(vars, sepVars); int sepVarNumberOfStates = PotentialMultiplier.createNumberOfStates(sepVars); int[] sepVarMultipliers = PotentialMultiplier.createIndexMultipliers(sepVars, sepVarNumberOfStates); double[] projectedSepPotentials = new double[ sep.getPotentials().length]; BayesProjection p = new BayesProjection(vars, node1.getPotentials(), sepVarPos, sepVarMultipliers, projectedSepPotentials); p.project(); assertArray(new double[]{0.167, 0.222, 0.278, 0.333}, scaleDouble(3, projectedSepPotentials)); }
@Test public void test_should_continue_escalating_remaining_complaints_when_failure_of_a_single_complaint_happens() { List<ServiceRequest> serviceRequestList = asList( getServiceRequest(null), getServiceRequest(null) ); ServiceResponse serviceResponse = new ServiceResponse(null, serviceRequestList); when(tenantRepository.getAllTenants()).thenReturn(getTenantDetails()); when(complaintRestRepository.getComplaintsEligibleForEscalation("default", 1L)) .thenReturn(serviceResponse); when(userService.getUserByUserName("system", "default")).thenReturn(getUser()); when(workflowService.enrichWorkflowForEscalation(eq(serviceRequestList.get(0)), any())) .thenThrow(new RuntimeException()); escalationService.escalateComplaintForAllTenants(); verify(workflowService).enrichWorkflowForEscalation(eq(serviceRequestList.get(0)), any()); verify(workflowService).enrichWorkflowForEscalation(eq(serviceRequestList.get(1)), any()); }
@Test public void testCreateExecutableFlow() throws Exception { final Flow flow = FlowUtils.getFlow(this.project, "jobe"); final ExecutableFlow exFlow = FlowUtils.createExecutableFlow(this.project, flow); Assert.assertEquals(exFlow.getProjectId(), this.project.getId()); Assert.assertEquals(exFlow.getFlowId(), flow.getId()); Assert.assertEquals(exFlow.getProxyUsers(), this.project.getProxyUsers()); }
@Test public void testDebugIdWithTraceHeader() { Map<String, String> extractCarrier = new HashMap<>(); TextMapAdapter textMap = new TextMapAdapter(extractCarrier); textMap.put(TRACE_PARENT, EXAMPLE_TRACE_PARENT); textMap.put(Constants.DEBUG_ID_HEADER_KEY, EXAMPLE_DEBUG_ID); JaegerSpanContext spanContext = traceContextCodec.extract(textMap); JaegerTracer tracer = new JaegerTracer.Builder("service").withReporter(new InMemoryReporter()).build(); assertEquals("1", spanContext.getTraceId()); JaegerSpan child = tracer.buildSpan("span").asChildOf(spanContext).start(); assertFalse(child.context().isDebug()); child.finish(); tracer.close(); }
@Test public void testGetElement() { System.out.println("getElement"); long value = 100L; AbstractGraphPanelChartElement expResult = new GraphPanelChartAverageElement(10); instance.add(value, 10); AbstractGraphPanelChartElement result = instance.getElement(value); Assert.assertTrue(instance.getElement(value).getValue() == expResult.getValue()); }
@Test public void shouldNotBeApplicableToIncompatibleSecondArgument() { final NotMatchingBinaryMatcher matcher = new NotMatchingBinaryMatcher(); assertFalse(matcher.isApplicableTo(String.class, String.class, Integer.class)); }
@Test public void isAccountNumberValid_isEmptyPassed_returnsFalse() { String accountNo = ""; boolean isAccountNoValid = SUT.isAccountNumberValid(accountNo); assertThat(false, is(isAccountNoValid)); }
@Test public void shouldMapAuthAttributesToCRESTAttributesWithNulls() throws IOException, ServletException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); FilterChain filterChain = mock(FilterChain.class); given(request.getHeader(AMAuthNFilter.ATTRIBUTE_AUTH_PRINCIPAL)).willReturn(null); given(request.getAttribute(AMAuthNFilter.ATTRIBUTE_AUTH_CONTEXT)).willReturn(null); restSecurityContextMapper.doFilter(request, response, filterChain); verify(request).setAttribute(SecurityContextFactory.ATTRIBUTE_AUTHCID, null); verify(request).setAttribute(SecurityContextFactory.ATTRIBUTE_AUTHZID, null); verify(filterChain).doFilter(request, response); }
@Test public void testEqualsFalseNull() throws Exception { final Link link = mock(Link.class); final ConnectedAgentAttache agentAttache1 = new ConnectedAgentAttache(null, 0, null, link, false); assertFalse(agentAttache1.equals(null)); }
@Test public void testFormatBGP_2() { IndentedLineBuffer b = new IndentedLineBuffer() ; BasicPattern bgp = SSE.parseBGP("(prefix ((zz: <"+aUri+">)) (bgp (zz:s zz:p zz:o) (zz:s zz:p 123) ))") ; FmtUtils.formatPattern(b, bgp, getContext()) ; assertEquals("zz:s zz:p zz:o .\nzz:s zz:p 123 .", b.toString()) ; }
@Test public void testCreate() throws Exception { try (OperationContext ctx = new OperationContext(session)) { Map<String, Object> params = new HashMap<>(); params.put("username", USERNAME); params.put("password", PASSWORD); params.put("groups", new String[] { MEMBERS }); Properties properties = new Properties(); properties.put("firstName", FIRSTNAME); params.put("properties", properties); automationService.run(ctx, CreateOrUpdateUser.ID, params); NuxeoPrincipal principal = userManager.getPrincipal(USERNAME); assertEquals(FIRSTNAME, principal.getFirstName()); assertEquals(Arrays.asList(MEMBERS), principal.getGroups()); params.put("mode", "create"); try { automationService.run(ctx, CreateOrUpdateUser.ID, params); } catch (OperationException e) { String msg = e.getMessage(); assertTrue(msg, msg.contains("Cannot create already-existing user: testuser")); } } }
@Test public void testGetConnectionSimulateInterruptedExceptionWithNullReturn() throws NoSuchFieldException, IllegalAccessException, InterruptedException { reset(mockPartition, mockConnectionHandles, mockConnection); expect(mockPartition.isUnableToCreateMoreTransactions()).andReturn(true).once(); expect(mockPartition.getFreeConnections()).andReturn(mockConnectionHandles).anyTimes(); testClass.nullOnConnectionTimeout = true; expect(mockConnectionHandles.poll()).andReturn(null).once(); expect(mockConnectionHandles.poll(Long.MAX_VALUE, TimeUnit.MILLISECONDS)).andThrow(new InterruptedException()).once(); replay(mockPartition, mockConnectionHandles, mockConnection); try{ assertNull(testClass.getConnection()); } catch (SQLException e){ fail("Should not have throw an SQL Exception"); } verify(mockPartition, mockConnectionHandles, mockConnection); }
@Test public void deleteFeatureManagerTest() throws FeatureNotExistException{ String idApplication = "9"; String idFeature = "1"; featureManagerImpl.deleteFeature(idApplication, idFeature); Mockito.verify(validatorExistFeature).checkFeatureExist(idApplication,idFeature); Mockito.verify(featureRepository).delete(idApplication,idFeature); }
@Test public void checkFuzzyNegativeTest() { SpeciesMatchRequest matchRequest = SpeciesMatchRequest.builder() .withKingdom("") .withPhylum("") .withClazz("") .withOrder("") .withFamily("something") .withGenus("something") .build(); NameUsageMatch usageMatch = new NameUsageMatch(); Diagnostics diagnostics = new Diagnostics(); diagnostics.setMatchType(MatchType.FUZZY); usageMatch.setDiagnostics(diagnostics); boolean result = TaxonomyInterpreter.checkFuzzy(usageMatch, matchRequest); Assert.assertFalse(result); }
@Test public void testResolveGeneralInsideInvalidRanges() throws Exception { FirmwareUpdateResolver resolver = getResolver("firmware-cases.xml"); FirmwareResult result = resolver.getTargetForVersion("IH200", "2.1.0.006", Population.NAME_GENERAL); Assert.assertEquals(FirmwareResult.Result.UPGRADE_NOT_NEEDED, result.getResult()); Assert.assertEquals(null, result.getTarget()); result = resolver.getTargetForVersion("IH200", "2.1.0.007", Population.NAME_GENERAL); Assert.assertEquals(FirmwareResult.Result.UPGRADE_NOT_NEEDED, result.getResult()); Assert.assertEquals(null, result.getTarget()); }
@Test public void testGetSourceAreaReturnsAZeroedOriginAndImageSizedArea() { RenderImage image = createMock(RenderImage.class); expect(image.getWidth()).andReturn(1); expect(image.getHeight()).andReturn(2); replay(image); FullImageAreaProvider areaProvider = new FullImageAreaProvider(); assertEquals(new Box(0, 0, 1, 2), areaProvider.getSourceArea(image)); }
@TargetApi(11) @Test public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception { Activity activity = Robolectric.buildActivity(Activity.class).create().get(); activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED); View mockView = mock(View.class); when(mockView.isHardwareAccelerated()).thenReturn(false); when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE); assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse(); }
@Test public void canInstantiateSimpleMetric() throws Exception { Metric m = manager.instantiateMetric("io.sease.rre.core.domain.metrics.impl.PrecisionAtOne"); assertNotNull(m); assertTrue(m instanceof io.sease.rre.core.domain.metrics.impl.PrecisionAtOne); }
@Test void getFormatter() { assertNotNull(instance.getFormatter()); instance.setFormatter(FORMATTER); assertEquals(FORMATTER, instance.getFormatter()); }
@Test public void isAvailableReturnsTrueIfApmConfigHasRangesInTheCartCurrencyAndWithinTheSpecifiedRange() { when(cartModelMock.getCurrency().getIsocode()).thenReturn(Currency.getInstance(Locale.UK).getCurrencyCode()); when(cartModelMock.getTotalPrice()).thenReturn(15d); final boolean result = testObj.isAvailable(apmConfigurationMock, cartModelMock); assertTrue(result); }
@Test public void testGetMin() { double[] array = { 5.0, 2.0, 6.0, 12.0 }; assertEquals( 2.0, MathUtils.getMin( array ), DELTA ); }
@Test public void testBuildResponse() throws SAMLException, MetadataProviderException, SecurityException, MarshallingException, SignatureException { String authenticationId = UUID.randomUUID().toString(); Authentication authentication = samlTestUtils.mockUaaAuthentication(authenticationId); SAMLMessageContext context = samlTestUtils.mockSamlMessageContext(); IdpWebSSOProfileOptions options = new IdpWebSSOProfileOptions(); options.setAssertionsSigned(false); profile.buildResponse(authentication, context, options); AuthnRequest request = (AuthnRequest) context.getInboundSAMLMessage(); Response response = (Response) context.getOutboundSAMLMessage(); assertEquals(request.getID(), response.getInResponseTo()); Assertion assertion = response.getAssertions().get(0); Subject subject = assertion.getSubject(); assertEquals("marissa", subject.getNameID().getValue()); assertEquals(NameIDType.UNSPECIFIED, subject.getNameID().getFormat()); SubjectConfirmation subjectConfirmation = subject.getSubjectConfirmations().get(0); SubjectConfirmationData subjectConfirmationData = subjectConfirmation.getSubjectConfirmationData(); assertEquals(request.getID(), subjectConfirmationData.getInResponseTo()); verifyAssertionAttributes(authenticationId, assertion); }
@SuppressWarnings("unchecked") @Test public void from() { TestSubscriber<Integer> ts = new TestSubscriber<Integer>(); ParallelFlowable.fromArray(Flowable.range(1, 5), Flowable.range(6, 5)) .sequential() .subscribe(ts); ts.assertValueSet(new HashSet<Integer>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))) .assertNoErrors() .assertComplete(); }
@SuppressWarnings("unchecked") @Test public void testCreate(@Mocked final MessageProducer<?, ?> mockMessageProducer) { new Expectations() { { new MessageProducer<String, String>(anyString, anyString, anyString, (Properties) any, (Set<String>)any); } }; assertTrue(testSerializableMessageProducerPool.create() instanceof MessageProducer); }
@Test public void testIsYearsOrMonthsInput() { final boolean isMonthInput = view.isYearsOrMonthsInput(monthInput); assertTrue(isMonthInput); final boolean isYearInput = view.isYearsOrMonthsInput(yearInput); assertTrue(isYearInput); }
@Test public void testRotate_IAtom_Point3d_Point3d_double() { Atom atom1 = new Atom("C"); atom1.setPoint3d(new Point3d(1, 1, 0)); GeometryTools.rotate(atom1, new Point3d(2, 0, 0), new Point3d(2, 2, 0), 90); assertEquals(new Point3d(2.0, 1.0, 1.0), atom1.getPoint3d(), 0.2); }
@Test (expected = MetaException.class) public void testGetFunctionInValidWithMetaException() throws Exception { when(glueClient.getUserDefinedFunction(any(GetUserDefinedFunctionRequest.class))) .thenThrow(new InternalServiceException("")); metastoreClient.getFunction(testDB.getName(), testFunction.getFunctionName()); }
@Test public void testJacksonSerialization() { assertThat( BatfishObjectMapper.clone(AllStandardCommunities.instance(), AllStandardCommunities.class), equalTo(AllStandardCommunities.instance())); }
@Test public void testRefreshErrorDetails() { presenter.refreshExecutionErrorDataRemote(serverTemplateId, deploymentId, errorId); assertRefresErrorDetails(); }
@Test public void testAcceptInvalidType() { DefaultValueStandardizer standardizer = new DefaultValueStandardizer("default"); Double doubleValue = 100.01d; assertFalse(standardizer.accepts(doubleValue)); }
@Test public void testSpreadAmountQuantityBased() { double spread; spread = book.getSpread(50.0); assertEquals(0.006, spread, 0.0001); spread = book.getSpread(2000.0); assertEquals(0.011730481500000778, spread, 0.0001); }
@SuppressWarnings("unchecked") @Test public void testGetPropertiesValues07() throws Exception { Properties input = new Properties(); String key1 = "property.test001.id.0"; String value1 = "test"; input.setProperty(key1, value1); @SuppressWarnings("rawtypes") Enumeration em = new StringTokenizer(""); Set<?> result = PropertyUtil.getPropertiesValues(input, em); assertTrue(result.isEmpty()); }
@Test public void hasAvoidBorders() { RouteSearchParameters routeSearchParameters = new RouteSearchParameters(); Assert.assertFalse(routeSearchParameters.hasAvoidBorders()); routeSearchParameters.setAvoidBorders(BordersExtractor.Avoid.CONTROLLED); Assert.assertTrue(routeSearchParameters.hasAvoidBorders()); }
@Test public void testNotLoginData() { httpClientAdapter.setAccountToken(null); apiManager.accountApi.testNotLoginData(); Result<Void> result = apiManager.accountApi.testLogin(); Assert.assertEquals(result.getStatus(), Result.ACCOUNT_ERROR); }
@Test public void DueDateDiffText_ShouldShowMinutesOnly_IfDecreasedBy15Minutes_AndCrossesToPreviousHour() { _now = new DateTime(2015, 12, 25, 9, 0, 0, 0); when(_coreDateUtils.now()).thenReturn(_now); _taskCreatePresenter = new TaskCreatePresenter(_coreDateUtils); assertThat(_taskCreatePresenter.getDueDateDiffText( _now.minus(0, 0, 0, 0, 15, 0, 0, DateTime.DayOverflow.LastDay))) .isEqualTo("(~15 Mts back)"); }
@Test void testWriteValueAsPrettyFromObject() { @Data class TestObject { String foo = "bar"; } String pretty = FactCastJson.writeValueAsPrettyString(new TestObject()); System.out.println(pretty); assertTrue(pretty.contains("\"foo\" : \"bar\"")); }
@Test public void testConvertValue() throws Exception { DefaultValueStandardizer standardizer = new DefaultValueStandardizer("default"); assertEquals("default", standardizer.convertValue("")); assertEquals("default", standardizer.convertValue(null)); assertEquals("foo", standardizer.convertValue("foo")); }
@Test(expectedExceptions = { NullPointerException.class, IllegalStateException.class }) public void testNullIsBad() { fn.apply(null); }
@Test public void testWeightedHostsWithNonZeroWeights() { Map<InetSocketAddress, CassandraClientPoolingContainer> pools = ImmutableMap.of( new InetSocketAddress(0), createMockClientPoolingContainerWithUtilization(5), new InetSocketAddress(1), createMockClientPoolingContainerWithUtilization(10), new InetSocketAddress(2), createMockClientPoolingContainerWithUtilization(15)); NavigableMap<Integer, InetSocketAddress> result = WeightedHosts.create(pools).hosts; int prevKey = 0; for (Map.Entry<Integer, InetSocketAddress> entry : result.entrySet()) { int currWeight = entry.getKey() - prevKey; assertThat(currWeight, Matchers.greaterThan(0)); prevKey = entry.getKey(); } }
@Test public void shouldThrowInvalidJsonRpcParametersExceptionWhenOnlyBadEnode() { final ArrayList<String> enodeList = Lists.newArrayList(badEnode); final JsonRpcRequestContext request = buildRequest(enodeList); final JsonRpcResponse expected = new JsonRpcErrorResponse( request.getRequest().getId(), JsonRpcError.NODE_ALLOWLIST_INVALID_ENTRY); when(nodeLocalConfigPermissioningController.addNodes(eq(enodeList))) .thenThrow(IllegalArgumentException.class); final JsonRpcResponse actual = method.response(request); assertThat(actual).isEqualToComparingFieldByFieldRecursively(expected); }
@Test public void testResumeOK() throws UnknownDeviceException { MediaManager mediaManager = createMock(MediaManager.class); StreamingManager streamingManager = createMock(StreamingManager.class); streamingManager.resume(eq("deviceId")); expectLastCall().atLeastOnce(); replay(mediaManager, streamingManager); StreamingHandler streamingHandler = new StreamingHandler(mediaManager, streamingManager); String result = streamingHandler.resume("deviceId"); assertNull(result); verify(mediaManager, streamingManager); }
@Test public void testApplicationContextWithParent() { applicationContextListener.handleEvent(mockStartupEvent); verify(Config.jvmServiceMock, never()).updateJvm(any(UpdateJvmRequest.class), eq(true)); verify(Config.mediaServiceMock, never()).create(anyMap(), anyMap()); }
@Test(expected = IllegalArgumentException.class) public void extraShortArrayEmptyValue() { short[] array = new short[]{}; new IntentBuilder().extra("my_key", array); }
@Test void testNoneMatch() { final Predicate<Map.Entry<String, Integer>> predicate = e -> e.getKey().isEmpty(); final boolean expected = refStream().noneMatch(predicate); final boolean actual = instance.noneMatch((k, v) -> k.isEmpty()); assertEquals(expected, actual); }
@Test public void testIsMember() throws Exception { User u = new UserImpl(memberDlg, autosaveMgr); assertFalse(group.isMember(memberDlg)); assertTrue(group.isMember(u)); verify(dlg, times(1)).isMember(memberDlg); verify(dlg, never()).isMember(u); }
@Test public void testPutFile_Does_Not_Delete() throws Exception { OverwriteIfExistsWorker worker = createWorker(); File failingFile = Mockito.mock(File.class); Mockito.when(failingFile.exists()).thenReturn(true); Mockito.when(failingFile.delete()).thenReturn(false); try { worker.put(DATA.getBytes(), failingFile); fail(); } catch (FsException expected) { } }
@Test public void testPerformReplacementWithPatternGroupAndMatching() throws IOException { Properties actualProperties = build("git.branch", "feature/feature_name", "git.commit.author", "author/name"); List<ReplacementProperty> replacementProperties = new ArrayList<>(); replacementProperties.add(new ReplacementProperty("git.branch", null, "^([^\\/]*)\\/([^\\/]*)$", "$1-$2", true, false, null)); propertiesReplacer.performReplacement(actualProperties, replacementProperties); Properties exptecedProperties = build("git.branch", "feature-feature_name", "git.commit.author", "author/name"); assertEquals(exptecedProperties, actualProperties); }
@Test public void test_of_map_empty() { LocalDateDoubleTimeSeries series = LocalDateDoubleTimeSeries.builder().putAll(ImmutableMap.of()).build(); assertThat(series).isEqualTo(empty()); }
@Test public void shouldCopyFromPathToAnotherPathInSameWorkspace() throws Exception { workspace.copy("/a/b", "/b/b-copy"); }
@Test public void testIntroduceNoNamespace() { cut.introduceServiceToEV(ev, ev, compoundExecutableResolver); verify(compoundExecutableResolver).registerExecutableResolver(eq((String)null), eq(executableResolver)); verify((ServiceRegistrar)ev).registerService(eq((String)null), eq(serviceDefinition), any(Service.class), eq(compoundExecutableResolver)); verify(ev, never()).execute(any(ExecutionContext.class), any(OperationKey.class), any(Object[].class), any(ExecutionObserver.class), any(TimeConstraints.class)); }
@Test public void getScmConnectionByMavenProject() { MavenProject project = new MavenProject(); assertNull( ScmUtils.getScmConnection( project ) ); project.setScm( new Scm() ); assertNull( ScmUtils.getScmConnection( project ) ); String connection = "scmConnection"; project.getScm().setConnection( connection ); assertEquals( connection, ScmUtils.getScmConnection( project ) ); }
@Test public void testPostProcess() throws NamingException { tested.postProcess(null); verify(processor1Mock).postProcess(null); verify(processor2Mock).postProcess(null); }
@Test public void equals_null_returnFalse() { assertThat(target.equals(null), is(false)); }
@Test void putEvents_multipleEvents() { final HBaseStatisticsConfig hBaseStatisticsConfig = new HBaseStatisticsConfig(); hBaseStatisticsConfig.setDocRefType(DOC_REF_TYPE_1); hBaseStatisticsConfig.getKafkaTopicsConfig().setCount("MyTopic"); initMocks(); StroomStatsInternalStatisticsService stroomStatsInternalStatisticsService = new StroomStatsInternalStatisticsService( mockStroomKafkaProducerFactory, hBaseStatisticsConfig); InternalStatisticEvent event1 = InternalStatisticEvent.createPlusOneCountStat( InternalStatisticKey.MEMORY, 0, Collections.emptyMap()); InternalStatisticEvent event2 = InternalStatisticEvent.createPlusOneCountStat( InternalStatisticKey.MEMORY, 1, Collections.emptyMap()); InternalStatisticEvent event3 = InternalStatisticEvent.createPlusOneCountStat( InternalStatisticKey.MEMORY, 1, Collections.emptyMap()); DocRef docRefA = new DocRef(DOC_REF_TYPE_1, UUID.randomUUID().toString(), "myStat1"); DocRef docRefB = new DocRef(DOC_REF_TYPE_2, UUID.randomUUID().toString(), "myStat2"); Map<DocRef, List<InternalStatisticEvent>> map = Map.of( docRefA, Arrays.asList(event1, event2), docRefB, Collections.singletonList(event3)); stroomStatsInternalStatisticsService.putEvents(map); Mockito.verify(mockKafkaProducer, Mockito.times(2)) .send(Mockito.any(ProducerRecord.class)); }
@Test public void testAcceptString() throws FileSystemException { final PrefixFileFilter filter = new PrefixFileFilter("test"); Assert.assertTrue(filter.accept(createFileSelectInfo(new File("test1.txt")))); Assert.assertTrue(filter.accept(createFileSelectInfo(new File("test2.txt")))); Assert.assertFalse(filter.accept(createFileSelectInfo(new File("Test2.txt")))); Assert.assertTrue(filter.accept(createFileSelectInfo(new File("test.xxx")))); }
@Test public void testGetLineStrings() { List<GeoJsonLineString> lineStrings = new ArrayList<>(); lineStrings.add( new GeoJsonLineString( new ArrayList<>(Arrays.asList(new LatLng(0, 0), new LatLng(50, 50))))); lineStrings.add( new GeoJsonLineString( new ArrayList<>(Arrays.asList(new LatLng(80, 10), new LatLng(-54, 12.7))))); mls = new GeoJsonMultiLineString(lineStrings); assertEquals(lineStrings, mls.getLineStrings()); lineStrings = new ArrayList<>(); mls = new GeoJsonMultiLineString(lineStrings); assertEquals(new ArrayList<GeoJsonLineString>(), mls.getLineStrings()); try { mls = new GeoJsonMultiLineString(null); fail(); } catch (IllegalArgumentException e) { assertEquals("Geometries cannot be null", e.getMessage()); } }
@Test public void testGetParametersWithDefaultEntityAndDisabledStatus() throws Exception { unit.setActive(false); AssetType entity = new AssetType(); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("userGroups", groups); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void testSelectCount() { List<SeriesPoint> points = NumentaDAO.selectAll(); assert (!points.isEmpty()); }
@Test public void testClass() { Object object = ClassImposterizer.INSTANCE.imposterise(interceptor, TestingClass.class); assertTrue(object instanceof TestingClass); }
@Test public void doFilter() { OrMovieFilter orMovieFilter = new OrMovieFilter(); orMovieFilter.addFilter(new TitleMovieFilter("露脸")); orMovieFilter.addFilter(new TitleMovieFilter("学生")); orMovieFilter.doFilter(tobeFilter); assertFilterCorrect(); }
@Test public void dispose() { TestCompletable tc = new TestCompletable(); tc.dispose(); assertTrue(tc.isDisposed()); Disposable d = Disposables.empty(); tc.onSubscribe(d); assertTrue(d.isDisposed()); assertEquals(0, tc.start); }
@Test public void testRandomInt() { for (int i = 0; i < 100; i++) { assertEquals(0, RandomUtil.randomInt(0, 1)); } }
@Test public void toPageDestinationEmpty() { PDOutlineItem victim = new PDOutlineItem(); assertFalse(OutlineUtils.toPageDestination(victim, null).isPresent()); }
@Test(expected = IllegalArgumentException.class) public void testNullCannotBeAppended() { QueryBuilder builder = new QueryBuilder(); builder.append(null); }
@Test void testUpload() throws IOException { underTest.upload(CONTENT); verify(s3Client).putObject(putObjectRequestArgumentCaptor.capture(), requestBodyArgumentCaptor.capture()); final PutObjectRequest putObjectRequest = putObjectRequestArgumentCaptor.getValue(); assertThat(putObjectRequest.bucket(), is(BUCKET_NAME)); assertThat(putObjectRequest.key(), is(FILE_NAME)); assertThat(putObjectRequest.contentType(), is(CONTENT_TYPE)); assertThat(putObjectRequest.storageClass(), is(StorageClass.REDUCED_REDUNDANCY)); final RequestBody requestBody = requestBodyArgumentCaptor.getValue(); assertThat(requestBody.contentStreamProvider().newStream().readAllBytes(), is(CONTENT)); }
@Test public void getStackTraceOfThread() { List<String> stackTrace = StacktraceUtil.getStackTraceOfThread(Thread.currentThread()); Assert.assertTrue(String.valueOf(stackTrace).contains(StacktraceUtilTest.class.getSimpleName())); }
@Test(expected = NullPointerException.class) public void testCreate_Null2() { ConjugatedAtomEncoder.create(mock(AtomEncoder.class), null); }
@Test public void modifyReferencesWhiteList() throws Exception { Contract contract = new Contract(TestKeys.privateKey(0)); contract.getDefinition().getData().put("type","Good Bank"); ModifyDataPermission modifyDataPermission = new ModifyDataPermission(contract.getRole("owner"),new Binder()); Contract referencedContract = new Contract(TestKeys.privateKey(1)); referencedContract.seal(); List<String> listConditionsForDefinition = new ArrayList<>(); listConditionsForDefinition.add("ref.definition.data.type == \"Good Bank\""); Binder conditionsForDefinition = new Binder(); conditionsForDefinition.set("all_of", listConditionsForDefinition); Reference ref = new Reference(referencedContract); ref.name = "bank_certificate"; ref.type = Reference.TYPE_EXISTING_STATE; ref.setConditions(conditionsForDefinition); modifyDataPermission.addField("/references", Do.listOf(ref)); contract.addPermission(modifyDataPermission); contract.seal(); ref = Boss.load(Boss.dump(ref)); Contract changed = contract.createRevision(); changed.addSignerKey(TestKeys.privateKey(0)); ref.setContract(changed); changed.addReference(ref); changed.seal(); changed.check(); changed.traceErrors(); assertTrue(changed.isOk()); ref.name = "stepa_certificate"; changed = contract.createRevision(); changed.addSignerKey(TestKeys.privateKey(0)); ref.setContract(changed); changed.addReference(ref); changed.seal(); changed.check(); changed.traceErrors(); assertFalse(changed.isOk()); ref.name = "bank_certificate"; ref.type = Reference.TYPE_TRANSACTIONAL; changed = contract.createRevision(); changed.addSignerKey(TestKeys.privateKey(0)); ref.setContract(changed); changed.addReference(ref); changed.seal(); changed.check(); changed.traceErrors(); assertFalse(changed.isOk()); ref.type = Reference.TYPE_EXISTING_STATE; conditionsForDefinition = new Binder(); conditionsForDefinition.set("any_of", listConditionsForDefinition); ref.setConditions(conditionsForDefinition); changed = contract.createRevision(); changed.addSignerKey(TestKeys.privateKey(0)); ref.setContract(changed); changed.addReference(ref); changed.seal(); changed.check(); changed.traceErrors(); assertFalse(changed.isOk()); listConditionsForDefinition = new ArrayList<>(); listConditionsForDefinition.add("ref.definition.data.type == \"Stepa Bank\""); conditionsForDefinition = new Binder(); conditionsForDefinition.set("all_of", listConditionsForDefinition); ref.setConditions(conditionsForDefinition); changed = contract.createRevision(); changed.addSignerKey(TestKeys.privateKey(0)); ref.setContract(changed); changed.addReference(ref); changed.seal(); changed.check(); changed.traceErrors(); assertFalse(changed.isOk()); listConditionsForDefinition = new ArrayList<>(); listConditionsForDefinition.add("ref.definition.data.type == \"Good Bank\""); conditionsForDefinition = new Binder(); conditionsForDefinition.set("all_of", listConditionsForDefinition); ref.setConditions(conditionsForDefinition); changed = contract.createRevision(); changed.addSignerKey(TestKeys.privateKey(0)); ref.setContract(changed); changed.addReference(ref); changed.seal(); changed.check(); changed.traceErrors(); assertTrue(changed.isOk()); }
@Test public void testFetchAll() throws Exception { List<HttpRequest> requests = createRequestArray(); expect(requestPipeline.execute(eq(reqCxt1.getHttpReq()))).andReturn(reqCxt1.getHttpResp()); expect(requestPipeline.execute(eq(reqCxt2.getHttpReq()))).andReturn(reqCxt2.getHttpResp()); expect(requestPipeline.execute(eq(reqCxt3.getHttpReq()))).andReturn(reqCxt3.getHttpResp()); replay(); List<Pair<Uri, FutureTask<RequestContext>>> futureTasks = fetcher.fetchAll(requests); assertEquals(3, futureTasks.size()); assertEquals(IMG_URI, futureTasks.get(0).one); assertEquals(reqCxt1, futureTasks.get(0).two.get()); assertEquals(CSS_URI, futureTasks.get(1).one); assertEquals(reqCxt2, futureTasks.get(1).two.get()); assertEquals(IMG_URI, futureTasks.get(2).one); assertEquals(reqCxt3, futureTasks.get(2).two.get()); verify(); }
@Test(expected = IllegalArgumentException.class) public void testNullModelId() { service.deleteModel(null).execute(); }
@Test public void createsContainerAndAddsFileWithoutMimeType() throws Exception { this.systemExit.expectSystemExitWithStatus(2); String file = this.getFileBy("bdoc"); String[] parameters = new String[]{"-in", file, "-add", "src/test/resources/testFiles/helper-files/test.txt", "-pkcs12", "src/test/resources/testFiles/p12/signout.p12", "test"}; DigiDoc4J.main(parameters); }
@Test @RunWithCustomExecutor public void whenEnableControlAndAccessExternalThenCheckContractOK() throws Exception { when(httpServletRequest.getAttribute("javax.servlet.request.X509Certificate")) .thenReturn(new X509Certificate[] {cert}); when(httpServletRequest.getHeader(GlobalDataRest.X_TENANT_ID)).thenReturn(TENANT_ID.toString()); when(httpServletRequest.getHeader(GlobalDataRest.X_ACCESS_CONTRAT_ID)).thenReturn("fakeAccessContract"); when(internalSecurityClient.findIdentity(any())).thenReturn(getIdentityModel(cert)); when(uriInfo.getPath()).thenReturn("/access-external/"); when(adminManagementClient.findContextById(anyString())) .thenReturn(getTestContext(ContextStatus.ACTIVE, true, "fakeAccessContract", null)); internalSecurityFilter.filter(containerRequestContext); }
@Test public void getInstancesCount() { long count = abstractScesimGridModelSpy.getInstancesCount(FULL_CLASS_NAME); assertEquals(1, count); }
@Test public void testBjs() { assertThat(parseSigningRegion("iam.cn-north-1.amazonaws.com.cn", "iam")).hasValue(Region.CN_NORTH_1); assertThat(parseSigningRegion("ec2.cn-north-1.amazonaws.com.cn", "ec2")).hasValue(Region.CN_NORTH_1); assertThat(parseSigningRegion("s3.cn-north-1.amazonaws.com.cn", "s3")).hasValue(Region.CN_NORTH_1); assertThat(parseSigningRegion("bucket.name.with.periods.s3.cn-north-1.amazonaws.com.cn", "s3")).hasValue(Region.CN_NORTH_1); assertThat(parseSigningRegion("cloudsearch.cn-north-1.amazonaws.com.cn", "cloudsearch")).hasValue(Region.CN_NORTH_1); assertThat(parseSigningRegion("domain.cn-north-1.cloudsearch.amazonaws.com.cn", "cloudsearch")).hasValue(Region.CN_NORTH_1); }
@Test public void getProcessManagementViewsTest() { List<? extends MenuItem> processManagementMenuItems = menusHelper.getProcessManagementViews(); assertEquals(2, processManagementMenuItems.size()); assertEquals(menusHelper.constants.ProcessDefinitions(), processManagementMenuItems.get(0).getCaption()); assertEquals(menusHelper.constants.ProcessInstances(), processManagementMenuItems.get(1).getCaption()); }
@Test public void testCreateSubject1() { if (Situation.createSubject() != null) { fail("Should be null subject"); } }
@Test public void testYesterdayRange() { DateRangeAndType thisMonth = DateRangeAndType.fromString("YESTERDAY"); testDateRange(thisMonth, "20131001", "20131001"); }
@Test public void failAnomalyQuestionTooOld() { final DateTime nightDate = today.withTimeAtStartOfDay().minusDays(QuestionProcessor.ANOMALY_TOO_OLD_THRESHOLD); final boolean result = this.questionProcessor.insertLightAnomalyQuestion(ACCOUNT_ID_PASS, nightDate, today); assertThat(result, is(false)); }
@Test public void disabledByDefault() throws ManipulationException { final RelocationState state = new RelocationState( new Properties() ); assertThat( state.isEnabled(), equalTo( false ) ); }
@Test public void test() throws Exception { DynamicModelLearning.main(null); }
@Test public void testApply() throws ParseException { Geometry originalGeometry = wktReader.read(REALLY_LONG_LINESTRING); Geometry transformedGeometry = simplifyGeometryFunction.apply(originalGeometry, new GeometryOperator.Context()); assertThat( transformedGeometry.getCoordinates().length, Matchers.lessThan(originalGeometry.getCoordinates().length)); }
@Test public void constuctorTest_Default() { assertEquals(1, pbftStatus.getUnConfirmedPbftMessageMap().size()); assertEquals(5, pbftStatus2.getUnConfirmedPbftMessageMap().size()); assertEquals(9, pbftStatus3.getUnConfirmedPbftMessageMap().size()); assertEquals(4, pbftStatus4.getUnConfirmedPbftMessageMap().size()); }
@Test public void bugfix_41_3_handle_arrays_simplified() throws Exception { String script = TestScriptLoader.loadScriptFromTestScripts("bugfix_41_3.sh"); BashScriptModel bashScriptModel = builderToTest.build(script); assertThat(bashScriptModel).hasErrors(0); }
@Test(timeout = 10000) public void shouldStartTwoIfTableNotExist() throws Exception { final JdbcSharedStateManager liveSharedStateManager = createSharedStateManager(); final JdbcSharedStateManager backupSharedStateManager = createSharedStateManager(); backupSharedStateManager.stop(); try { liveSharedStateManager.destroy(); } finally { liveSharedStateManager.stop(); } }
@Test public void testToListBitSet() { BitSet bitSet = new BitSet(10); assertEquals(BitSets.toList(bitSet), Collections.<Integer>emptyList()); bitSet.set(5); assertEquals(BitSets.toList(bitSet), Arrays.asList(5)); bitSet.set(3); assertEquals(BitSets.toList(bitSet), Arrays.asList(3, 5)); }
@Test public void isEnabled_Enabled() { ctx.registerInjectActivateService(new CopyAssetPublishUrlFeature(), "feature.flag.active.status", "true"); Feature feature = ctx.getService(Feature.class); assertTrue(feature.isEnabled(null)); }
@Test public void basic_replace_heap() throws Exception { String expected = "Used Heap: 42"; String template = "Used Heap: ${usedHeapSize}"; Snapshot snapshot = new Snapshot.Builder().usedHeapSize(42).build(); String result = instance.processBasicMessage(template, snapshot); assertEquals(expected, result); }
@Test public void testGetIMARecordsForDEVICEFilteredAll() { final String deviceId = "testDevice-" + UUID.randomUUID(); final TestIMAMeasurementReport report1 = new TestIMAMeasurementReport(deviceId, getExtraRecords()); final TestIMAMeasurementReport report2 = new TestIMAMeasurementReport(deviceId, getExtraRecords()); FilteredRecordsList<IMAMeasurementRecord> records = reportManager.getOrderedRecordList(DEVICE, deviceId, false, PATH, DESCENDING, START, Integer.MAX_VALUE, INSENSITIVE_SEARCH); assertResults(records, TOTAL * 2, TOTAL * 4, TOTAL * 2, PATH, DESCENDING, report1, report2); }
@Test(timeout = 60000, expected = LockingException.class) public void testRenameLockedLog() throws Exception { String logName = testName.getMethodName(); String logIdentifier = "<default>"; int numSegments = 5; createLog( zkc, uri, logName, logIdentifier, numSegments); String logRootPath = getLogRootPath(uri, logName, logIdentifier); String lockPath = logRootPath + LOCK_PATH; zkc.get().create(lockPath + "/test", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL); String newLogName = "path_rename_locked/to/new/" + logName; FutureUtils.result(metadataStore.renameLog(uri, logName, newLogName)); }
@Test @SmallTest public void testNotEnqueued() { OneTimeWorkRequest work = new OneTimeWorkRequest.Builder(TestWorker.class) .setInitialState(RUNNING) .build(); insertWork(work); new WorkerWrapper.Builder(mContext, mConfiguration, mDatabase, work.getStringId()) .withListener(mMockListener) .build() .run(); verify(mMockListener).onExecuted(work.getStringId(), false, true); }
@Test public void testInfoLogCallsMadeForCancel() throws Exception { PowerMockito .when( TransferListener.getInstance(null, null) ).thenReturn(mockTransferListener); PowerMockito .when( faspmanager2.stopTransfer(anyString()) ).thenReturn(true); when(mockLog.isDebugEnabled()).thenReturn(false); AsperaFaspManagerWrapper wrapper = new AsperaFaspManagerWrapper(); wrapper.log = mockLog; boolean rtn = wrapper.cancel("xyz123"); assertTrue(rtn); verify(mockLog, times(1)).info(Mockito.eq("Cancel transfer with xferId [xyz123]")); }
@Test public void testOutElementsMapLocalToLocal() throws Exception { JSONProvider<TagVO> provider = new JSONProvider<>(); Map<String, String> map = new HashMap<>(); map.put("tagVO", "supertag"); map.put("group", "group2"); provider.setOutTransformElements(map); TagVO tag = new TagVO("A", "B"); ByteArrayOutputStream bos = new ByteArrayOutputStream(); provider.writeTo(tag, TagVO.class, TagVO.class, new Annotation[0], MediaType.TEXT_XML_TYPE, new MetadataMap<String, Object>(), bos); String expected = "{\"supertag\":{\"group2\":\"B\",\"name\":\"A\"}}"; assertEquals(expected, bos.toString()); }
@Test void fetchShouldWork() { final Manifest manifest = new Manifest(objectMapper, new ClassPathResource("fetchShouldWork.json")); assertThat(manifest.fetch("bums")).isEmpty(); assertThat(manifest.fetch("app.js")).contains("app-723a7d7a249d998465d650e19bdca289.js"); assertThat(manifest.fetch("app2.js")).contains("app2.js"); }
@Test public void testSetUpNewTable() { testSetUpNewTable(2, 1, 4, true); testSetUpNewTable(2, 3, 0, false); testSetUpNewTable(2, 3, 4, false); testSetUpNewTable(2, 3, 8, false); testSetUpNewTable(8, 10, 4, false); }
@Test void toTuple4OfNullables() { final Function<Integer, Tuple4OfNullables<Integer, Integer, Integer, Integer>> mapper = TuplesOfNullables.toTupleOfNullables(i -> i + 0, i -> i + 1, i -> i + 2, i -> i + 3); assertTuple(mapper.apply(0), 4); }
@Test public void isNull() { String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is("loginDate").nullValue().query(); assertEquals("loginDate==" + SpecialAttr.NULL, fiql); Filter filter = FilterBuilder.not( FilterBuilder.startsWith(AttributeBuilder.build("loginDate", StringUtils.EMPTY))); Filter converted = FilterConverter.convert(fiql); assertTrue(converted instanceof NotFilter); assertTrue(equals( ((NotFilter) filter).getFilter(), ((NotFilter) converted).getFilter())); }
@Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullAttributeObject() { AttributesModified.of(TestConstants.Thing.THING_ID, null, TestConstants.Thing.REVISION_NUMBER, TestConstants.EMPTY_DITTO_HEADERS); }
@Test public void shouldThrowExceptionIfReplicationFactorIsLargerThenClusterSize() { final BrokerCfg brokerCfg = new BrokerCfg(); brokerCfg.getCluster().setReplicationFactor(2); expectedException.expect(IllegalArgumentException.class); expectedException.expectMessage( "Replication factor 2 needs to be larger then zero and not larger then cluster size 1."); initSystemContext(brokerCfg); }
@Test public void getHeaderNames() { initExpectedException(); part.getHeaderNames(); }
@Test public void testCustomMessage() { assertEquals("Custom.", new S3ExceptionMappingService().map("custom", new ServiceException("message")).getMessage()); assertEquals("Message. Please contact your web hosting service provider for assistance.", new S3ExceptionMappingService().map("custom", new ServiceException("message")).getDetail()); }
@Test public void canGetPathParameters(){ final Set<String> parts = UrlUtility.getPathParameters("/rest/api/user/{userId}/"); Assert.assertEquals(1, parts.size()); Assert.assertTrue(parts.contains("userId")); }
@Test public void testSecurityProtocol_fromCLIMultipleMixed() throws Exception { testConfigOption(ParserTopologyCLI.ParserOptions.SECURITY_PROTOCOL , "PLAINTEXT" , input -> input.getSecurityProtocol().equals("PLAINTEXT") , () -> { SensorParserConfig config = getBaseConfig(); config.setSecurityProtocol("PLAINTEXT"); SensorParserConfig config2 = getBaseConfig(); config2.setSecurityProtocol("KERBEROS"); SensorParserConfig config3 = getBaseConfig(); config3.setSecurityProtocol("PLAINTEXT"); List<SensorParserConfig> configs = new ArrayList<>(); configs.add(config); configs.add(config2); configs.add(config3); return configs; } , input -> input.getSecurityProtocol().equals("KERBEROS") ); }
@Test public void setCounterBlankNameShouldFail() throws Exception { try { counterDelegator.setCounter("", mockCounterValue, true); } catch (IllegalArgumentException e) { return; } fail("Did not throw exception if counter name was blank"); }
@Test public void postProcessBeforeInitialization() { Object bean = new Object(); Assert.assertSame(bean, producer.postProcessBeforeInitialization(bean, "test")); }
@Test public void testNullIsAccepted() { assertTrue(NullValuePredicate.INSTANCE.apply(null)); }
@Test public void testDirection() throws Exception { CSSRTLConverter cssRTLConverter = new CSSRTLConverter(); Assert.assertEquals( "p{direction:ltr}", cssRTLConverter.process("p{direction:rtl}")); Assert.assertEquals( "p{direction:rtl}", cssRTLConverter.process("p{direction:ltr}")); Assert.assertEquals( "p{direction:foo}", cssRTLConverter.process("p{direction:foo}")); }
@Test public void getExpectedJarBaseNameTestSource() { final String expectedJarBaseName = artifactRequester.getExpectedJarBaseName(mavenCoordinate, ClassifierInformation.DEFAULT_SOURCE_JAR); assertThat(expectedJarBaseName).endsWith("-sources" + MavenInvokerRequester.JAR_EXTENSION); assertThat(expectedJarBaseName).contains(mavenCoordinate.getName()); assertThat(expectedJarBaseName).contains(mavenCoordinate.getVersion()); assertThat(expectedJarBaseName).doesNotContain("/"); }
@Test public void inboundStatusShouldSetStatus() throws Exception { stream().transportState().setId(STREAM_ID); stream().transportState().transportHeadersReceived(grpcResponseHeaders(), false); stream().transportState().transportHeadersReceived(grpcResponseTrailers(Status.INTERNAL), true); ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class); verify(listener).closed(captor.capture(), same(PROCESSED), any(Metadata.class)); assertEquals(Status.INTERNAL.getCode(), captor.getValue().getCode()); }
@Test public void printPercentAsBar() throws Exception { Assert.assertEquals("|||||-----", CallStackElement.printPercentAsBar(0.54d, 10, false)); char[] chars = {9608, 9608, 9608, 9608, 9608, 9619, 9617, 9617, 9617, 9617}; Assert.assertEquals(new String(chars), CallStackElement.printPercentAsBar(0.56d, 10, true)); }
@Test public void when_summingLong() { validateOp(summingLong(Long::longValue), LongAccumulator::get, 1L, 2L, 1L, 3L, 3L); }
@Test public void nonRetryableClientException_ReturnsFalse() { assertFalse(condition.shouldRetry(RetryPolicyContexts.withException(new NonRetryableClientException()))); }
@Test public void createCredentialsProviderTest(){ CredentialsProviderFactory factory = new CredentialsProviderFactory(); SystemPropertiesCredentialsProvider provider = new SystemPropertiesCredentialsProvider(); Assert.assertTrue(factory.createCredentialsProvider(provider) == provider); }
@Test public void fileLinkIsResolvedToContent() throws IOException { URI schemaFile = createSchemaFile(); JsonNode uriContent = resolver.resolve(schemaFile); assertThat(uriContent.path("type").asText(), is(equalTo("string"))); }
@Test void isRawType() { JavaTree.CompilationUnitTreeImpl cu = test("class C {} class D<T> { void foo(D d, Unknown u) {} }"); ClassTreeImpl c = (ClassTreeImpl) cu.types().get(0); ClassTreeImpl dGeneric = (ClassTreeImpl) cu.types().get(1); MethodTreeImpl m = (MethodTreeImpl) dGeneric.members().get(0); VariableTreeImpl dRaw = (VariableTreeImpl) m.parameters().get(0); VariableTreeImpl unknown = (VariableTreeImpl) m.parameters().get(1); assertThat(JUtils.isRawType(c.symbol().type())) .isSameAs(JUtils.isRawType(dGeneric.symbol().type())) .isSameAs(JUtils.isRawType(unknown.symbol().type())) .isFalse(); assertThat(JUtils.isRawType(dRaw.type() .symbolType())) .isTrue(); }
@Test public void testGetParsingGeometry() { Geometry geometry = GEOMETRY_FACTORY.createPoint(new Coordinate(1.0, 2.0)); String sourceSRSURI = SRS_URI.WGS84_CRS; GeometryWrapper instance = new GeometryWrapper(geometry, sourceSRSURI, WKTDatatype.URI, DimensionInfo.XY_POINT); Geometry expResult = GEOMETRY_FACTORY.createPoint(new Coordinate(1.0, 2.0)); Geometry result = instance.getParsingGeometry(); assertEquals(expResult, result); }
@Test public void testShowAssetUsagesWithoutResponse() { displayer.showAssetUsages(currentAssetPath, RESOURCE_FQN, ResourceType.JAVA, okCommand, cancelCommand); verify(translationService).format(anyString(), anyString()); verify(view).getDefaultMessageContainer(); verify(htmlElement).setInnerHTML(anyString()); verify(assetsUsageService).getAssetUsages(anyString(), any(), any()); verify(view, never()).show(htmlElement, queryResults); verify(okCommand).execute(); }
@Test public void testFilter() throws Throwable { Configuration cfg = new SimpleConfiguration(); BSHFilter bSHFilter = new BSHFilter(); bSHFilter.setConfiguration(cfg); ISOMsg result = bSHFilter.filter(new PADChannel(), null, new LogEvent("testBSHFilterTag", "testString")); assertNull(result, "result"); assertSame(cfg, bSHFilter.cfg, "bSHFilter.cfg"); }
@Test public void testHashMD504() throws Exception { String paramStr = null; byte[] resultHashValue = HashUtil.hashMD5(paramStr); assertNull(resultHashValue); }
@Test(dataProvider = "windowsPaths") public void testWindowsPaths(String path) throws Exception { assertNotNull(SakuliFolderHelper.normalizePath(path)); }
@Ignore("Remove to run test") @Test public void testCanIdentifyMultipleSaddlePointsInARow() { Matrix matrix = new Matrix(Arrays.asList( Arrays.asList(6, 7, 8), Arrays.asList(5, 5, 5), Arrays.asList(7, 5, 6) )); Set<MatrixCoordinate> expectedSaddlePoints = new HashSet<>(Arrays.asList( new MatrixCoordinate(2, 1), new MatrixCoordinate(2, 2), new MatrixCoordinate(2, 3) )); assertEquals(expectedSaddlePoints, matrix.getSaddlePoints()); }
@Test void operationType() { NestedPatch NestedPatch = new NestedPatch(metaResource, metaResourceField, relatedMetaResource); Assert.assertEquals(OperationType.PATCH, NestedPatch.operationType()); }
@Test public void testEquals() { EqualsVerifier.forClass(NonnullPair.class).withNonnullFields("lhs", "rhs").usingGetClass().verify(); }
@Test public void testFrozenWithoutBrackets() { String input = "frozen int <>"; String res = Strings.removeFrozenBrackets(input); assertThat(res).isEqualTo(input); }
@Test public void testForwardedNoArrowOneString() { String[] forwardedFields = {"f2;f3;f0"}; SingleInputSemanticProperties sp = new SingleInputSemanticProperties(); SemanticPropUtil.getSemanticPropsSingleFromString(sp, forwardedFields, null, null, fiveIntTupleType, fiveIntTupleType); assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).contains(3)); forwardedFields[0] = "2;3;0"; sp = new SingleInputSemanticProperties(); SemanticPropUtil.getSemanticPropsSingleFromString(sp, forwardedFields, null, null, fiveIntTupleType, fiveIntTupleType); assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).contains(3)); forwardedFields[0] = "2;3;0;"; sp = new SingleInputSemanticProperties(); SemanticPropUtil.getSemanticPropsSingleFromString(sp, forwardedFields, null, null, fiveIntTupleType, fiveIntTupleType); assertTrue(sp.getForwardingTargetFields(0, 0).contains(0)); assertTrue(sp.getForwardingTargetFields(0, 2).contains(2)); assertTrue(sp.getForwardingTargetFields(0, 3).contains(3)); }
@Test public void should_return_all_headers() { HttpHeadersProvider provider = new CompositeHttpHeadersProvider(asList(i -> { HttpHeaders headers = new HttpHeaders(); headers.set("a", "1"); headers.set("b", "2-a"); return headers; }, i -> { HttpHeaders headers = new HttpHeaders(); headers.set("b", "2-b"); headers.set("c", "3"); return headers; })); HttpHeaders headers = provider.getHeaders(null); assertThat(headers.get("a")).isEqualTo(singletonList("1")); assertThat(headers.get("b")).isEqualTo(asList("2-a", "2-b")); assertThat(headers.get("c")).isEqualTo(singletonList("3")); }
@Test public void shouldCreateAnErrorMessageWhenUserNameCharactersAreNotValid() { mockStatic(OpenmrsUtil.class); createAccountWithUsernameAs("usern@me"); Errors errors = new BindException(account, "account"); validator.validate(account, errors); assertTrue(errors.hasErrors()); List<FieldError> errorList = errors.getFieldErrors("username"); assertThat(errorList.size(), is(1)); }
@Test void doNotInitializeInteropValidatorsWhenInteropIsDisabled() { final int ownedValidatorCount = 10; final TekuConfiguration tekuConfiguration = TekuConfiguration.builder() .setInteropEnabled(false) .setInteropOwnedValidatorCount(ownedValidatorCount) .setValidatorKeystoreFiles(emptyList()) .setValidatorKeystorePasswordFiles(emptyList()) .build(); final Map<BLSPublicKey, Validator> validators = ValidatorLoader.initializeValidators(tekuConfiguration); assertThat(validators).isEmpty(); }
@Test public void testGetImportBehaviorDefault() { AuthorizationConfiguration config = when(mock(AuthorizationConfiguration.class).getParameters()).thenReturn(ConfigurationParameters.EMPTY).getMock(); assertSame(ImportBehavior.ABORT, Util.getImportBehavior(config)); }
@Test public void testMatch2() throws Exception { System.setProperty("config.file", "src/test/resources/test.conf"); ConfigFactory.invalidateCaches(); final Config config = ConfigFactory.load(); final TalismaneSession session = new TalismaneSession(config, "test"); final Sentence sentence = new Sentence("Qu'ensuite il aille...", session); TokenSequence tokenSequence = new TokenSequence(sentence, session); tokenSequence.findDefaultTokens(); TokenPattern tokenPattern = new TokenPattern("{(?![cdjlmnstCDJLMNST]\\z|qu\\z|jusqu\\z|puisqu\\z|lorsqu\\z|aujourd\\z|prud\\z|quelqu\\z|quoiqu\\z).+'}.+", Tokeniser.getTokenSeparators(session)); List<TokenPatternMatchSequence> patternMatches = tokenPattern.match(tokenSequence); assertEquals(0, patternMatches.size()); }
@Test public void shouldEquals_withSameObject() { final String expectedKey = Randoms.randomString(20); final Direction expectedDirection = Randoms.randomEnum(Direction.class); final SortingOption sortingOption = new SortingOption(expectedKey, expectedDirection); assertTrue(sortingOption.equals(sortingOption)); }
@Test public void assignDepth_forked() { List<Node> ordered = createBranchA(); SequenceForwardOrder alg = new SequenceForwardOrder((List)ordered); alg.assignDepth(); assertEquals(0,alg.sequence.get(0).depth); assertEquals(1,alg.sequence.get(1).depth); assertEquals(1,alg.sequence.get(2).depth); assertEquals(2,alg.sequence.get(3).depth); assertEquals(3,alg.sequence.get(4).depth); assertEquals(4,alg.sequence.get(5).depth); }
@Test public void testThatWhenMainMenuIsNotPresentThenAddMainMenuPerformsReplaceAndCommit() { givenThatMainMenuIsNotPresent(); menuSwitcher.addMainMenu(); InOrder inOrder = inOrder(fragmentTransaction, fragmentTransaction); inOrder.verify(fragmentTransaction).replace(eq(R.id.menu_container), any(MainMenuFragment.class), eq(MainMenuFragment.TAG)); inOrder.verify(fragmentTransaction).commit(); }
@Test void readValue_with_invalid_json_and_TypeReference_test() { TypeReference<ConverterTestDto> typeReference = new TypeReference<ConverterTestDto>() {}; assertThrows(DataConversionException.class, () -> jsonConverter.readValue("{value:\"dummy\"}", typeReference) ); }
@Test public void canCloseShouldReturnTrueWhenNull() throws Exception { final boolean actual = underTest.canClose(null); assertThat(actual) .overridingErrorMessage("Expected value returned by canClose is true, but was false") .isTrue(); }
@Test public void rateEquipmentByTypeForJediThrowApplicationException() throws Exception { int jediId = RandomUtils.randomSmallInteger(); EquipmentType type = RandomUtils.randomEnum(EquipmentType.class); when(jediDao.findOne(jediId)).thenReturn(null); assertThatThrownBy(() -> serviceUnderTest.rateEquipmentByTypeForJedi(jediId, type)) .isInstanceOf(ApplicationException.class) .hasMessage(ApplicationConstants.JEDI_NOT_FOUND); verify(jediDao).findOne(jediId); }
@Test public void testGetProjectHasReferencedConfigs() { List<Integer> hasReferencedConfigs = configDao.getProjectHasReferencedConfigs(Project_Foo_Id); assertNotNull(hasReferencedConfigs); assertEquals(1, hasReferencedConfigs.size()); hasReferencedConfigs = configDao.getProjectHasReferencedConfigs(Project_Loo_Id); assertNotNull(hasReferencedConfigs); assertEquals(0, hasReferencedConfigs.size()); }
@Test public void shouldRefreshLocalContext() throws Throwable { try { workflowInterceptor.invoke(dummyInvocation(simpleWorkflowForTest.getClass().getDeclaredMethod("badWorkflow"))); } catch (IllegalSignatureException e) { } verify(localContext, times(1)).reset(); }
@Test public void testRequestFileWithExceptions() throws IOException { ArtifactResolutionResult result = new ArtifactResolutionResult() .setOriginatingArtifact(stubbedMavenArtifact) .addMissingArtifact(stubbedMavenArtifact); doReturn(stubbedMavenArtifact) .when(repositorySystem) .createArtifact(anyString(), anyString(), anyString(), anyString()); doReturn(result) .when(repositorySystem) .resolve(any()); Path targetDirectory = temporaryFolder.newFolder("dependencies").toPath(); Optional<File> file = mavenRuntimeRequester.requestFile(coordinate, targetDirectory, ClassifierInformation.DEFAULT_JAR); assertThat(file).isEmpty(); }
@Test public void reportsByteGaugeValues() throws Exception { reporter.report(map("gauge", gauge((byte) 1)), emptyMap(), emptyMap(), emptyMap(), emptyMap()); InOrder inOrder = inOrder(graphite); inOrder.verify(graphite).connect(); inOrder.verify(graphite).send("prefix.gauge", "1", TIMESTAMP); inOrder.verify(graphite).flush(); inOrder.verify(graphite).close(); verifyNoMoreInteractions(graphite); }
@Test void shouldThrowExceptionForUnknownName() { String unknownName = "UNKNOWN_NAME"; String expectedMessage = String.format("Could not find type alias for given name: %s", unknownName); assertThatThrownBy(() -> resolver.getAliasFor(unknownName)) .isInstanceOf(IllegalArgumentException.class) .hasMessage(expectedMessage); }
@Test public void testExprs() { Map<String, IpAccessList> namedAcls = ImmutableMap.of(); assertThat(referencedSources(namedAcls, TRUE), empty()); assertThat(referencedSources(namedAcls, FALSE), empty()); assertThat( referencedSources(namedAcls, ORIGINATING_FROM_DEVICE), contains(SOURCE_ORIGINATING_FROM_DEVICE)); assertThat(referencedSources(namedAcls, matchDst(Ip.AUTO)), empty()); assertThat( referencedSources(namedAcls, matchSrcInterface("a", "b", "c")), containsInAnyOrder("a", "b", "c")); assertThat( referencedSources(namedAcls, and(matchSrcInterface("a"), matchSrcInterface("b", "c"))), containsInAnyOrder("a", "b", "c")); assertThat( referencedSources(namedAcls, not(matchSrcInterface("a", "b", "c"))), containsInAnyOrder("a", "b", "c")); assertThat( referencedSources(namedAcls, or(matchSrcInterface("a"), matchSrcInterface("b", "c"))), containsInAnyOrder("a", "b", "c")); }
@Test public void testParse8006() throws Exception { final List<String> lines = Arrays.asList( "212-Status of /cgi-bin:", " drwxr-xr-x 3 1564466 15000 4 Jan 19 19:56 .", " drwxr-x--- 13 1564466 15000 44 Jun 13 18:36 ..", " drwxr-xr-x 2 1564466 15000 2 May 25 2009 tmp", " End of status", "212 -rw-r--r-- 1 1564466 15000 9859 Jan 19 19:56 adoptees.php"); final FTPFileEntryParser parser = new UnixFTPEntryParser(); final List<String> list = new FTPStatListService(null, parser).parse( 212, lines.toArray(new String[lines.size()])); assertEquals(6, list.size()); final Path parent = new Path("/cgi-bin", EnumSet.of(Path.Type.directory)); final AttributedList<Path> parsed = new FTPListResponseReader(parser, true).read( parent, list, new DisabledListProgressListener() ); assertEquals(2, parsed.size()); assertTrue(parsed.contains(new Path(parent, "tmp", EnumSet.of(Path.Type.directory)))); assertTrue(parsed.contains(new Path(parent, "adoptees.php", EnumSet.of(Path.Type.file)))); }
@Test @SuppressWarnings("unchecked") public void builder_constructor_sets_up_options_as_specified_in_the_builder() { int expectedOrder = 42; HttpTagAndSpanNamingStrategy<ServerWebExchange, ServerHttpResponse> expectedTagStrategyMock = mock(HttpTagAndSpanNamingStrategy.class); HttpTagAndSpanNamingAdapter<ServerWebExchange, ServerHttpResponse> expectedTagAdapterMock = mock(HttpTagAndSpanNamingAdapter.class); List<String> expectedUserIdHeaderKeys = Arrays.asList("foo", "bar"); WingtipsSpringWebfluxWebFilter.Builder builder = WingtipsSpringWebfluxWebFilter .newBuilder() .withOrder(expectedOrder) .withTagAndNamingStrategy(expectedTagStrategyMock) .withTagAndNamingAdapter(expectedTagAdapterMock) .withUserIdHeaderKeys(expectedUserIdHeaderKeys); WingtipsSpringWebfluxWebFilter impl = new WingtipsSpringWebfluxWebFilter(builder); assertThat(impl.order).isEqualTo(expectedOrder); assertThat(impl.tagAndNamingStrategy).isSameAs(expectedTagStrategyMock); assertThat(impl.tagAndNamingAdapter).isSameAs(expectedTagAdapterMock); assertThat(impl.userIdHeaderKeys).isEqualTo(expectedUserIdHeaderKeys); verifyUserIdHeaderKeysIsUnmodifiable(impl); }
@Test public void testUpdateCondition() { try { TextDocument doc = TextDocument.loadDocument(ResourceUtilities.getTestResourceAsStream(TEST_DOCUMENT)); VariableField simpleVariableField = Fields.createSimpleVariableField(doc, "test_con_variable"); Paragraph varParagraph = doc.addParagraph("test_con_variable:"); simpleVariableField.updateField("true", varParagraph.getOdfElement()); Paragraph newParagraph = doc.addParagraph("Condition Field Test:"); ConditionField conditionField = Fields.createConditionField(newParagraph.getOdfElement(), "test_con_variable == \"true\"", "trueText", "falseText"); Assert.assertNotNull(conditionField); conditionField.updateCondition("test_con_variable == \"false\""); TextConditionalTextElement textCondEle = (TextConditionalTextElement) conditionField.getOdfElement(); Assert.assertEquals("ooow:test_con_variable == \"false\"", textCondEle.getTextConditionAttribute()); } catch (Exception e) { Logger.getLogger(ConditionFieldTest.class.getName()).log(Level.SEVERE, null, e); Assert.fail(e.getMessage()); } }
@Test public void testClusterProxyErroCodeWithoutClusterProxyPrefix() throws IOException { ObjectNode jsonNode = toObjectNode(JSON_CODE_WITHOUT_CLUSTER_PROXY_PREFIX); clusterProxyErrorRpcListener.onBeforeResponseProcessed(null, jsonNode); }
@Test public void testExecuteProductWithOptions() throws Exception { MutableShoppingCart shoppingCart = new ShoppingCartImpl(); shoppingCart.initialise(ctx().getBean("amountCalculationStrategy", AmountCalculationStrategy.class)); final ShoppingCartCommandFactory commands = ctx().getBean("shoppingCartCommandFactory", ShoppingCartCommandFactory.class); commands.execute(shoppingCart, (Map) singletonMap(ShoppingCartCommand.CMD_SETSHOP, 10)); commands.execute(shoppingCart, (Map) singletonMap(ShoppingCartCommand.CMD_CHANGECURRENCY, "EUR")); assertEquals(MoneyUtils.ZERO, shoppingCart.getTotal().getSubTotal()); Map<String, String> params = new HashMap<>(); params.put(ShoppingCartCommand.CMD_ADDTOCART, "NOPROD-SKU"); commands.execute(shoppingCart, (Map) params); params.clear(); params.put(ShoppingCartCommand.CMD_ADDTOCART, "001_CFG01"); params.put(ShoppingCartCommand.CMD_P_ITEM_GROUP, "001_CFG01-A"); params.put("MATERIAL", "001_CFG_OPT1_A"); commands.execute(shoppingCart, (Map) params); params.clear(); params.put(ShoppingCartCommand.CMD_ADDTOCART, "001_CFG01"); params.put(ShoppingCartCommand.CMD_P_ITEM_GROUP, "001_CFG01-B"); params.put("MATERIAL", "001_CFG_OPT1_B"); commands.execute(shoppingCart, (Map) params); assertEquals("45049.99", shoppingCart.getTotal().getSubTotal().toPlainString()); assertEquals(3, shoppingCart.getCartItemsCount()); assertEquals(5, shoppingCart.getCartItemList().size()); params.clear(); params.put(ShoppingCartCommand.CMD_REMOVEALLSKU, "001_CFG01"); params.put(ShoppingCartCommand.CMD_P_ITEM_GROUP, "001_CFG01-A"); commands.execute(shoppingCart, (Map) params); assertEquals("25049.99", shoppingCart.getTotal().getSubTotal().toPlainString()); assertEquals(2, shoppingCart.getCartItemsCount()); assertEquals(3, shoppingCart.getCartItemList().size()); params.clear(); params.put(ShoppingCartCommand.CMD_REMOVEALLSKU, "001_CFG01"); params.put(ShoppingCartCommand.CMD_P_ITEM_GROUP, "001_CFG01-B"); commands.execute(shoppingCart, (Map) params); assertEquals("49.99", shoppingCart.getTotal().getSubTotal().toPlainString()); assertEquals(1, shoppingCart.getCartItemsCount()); assertEquals(1, shoppingCart.getCartItemList().size()); }
@Test public void klDivergenceIsZeroIfPAndQAreIdentical() { double identicalProb = Math.log(0.5); when(qDist.getLogOfMasterP(any(NetworkState.class))).thenReturn(identicalProb); NetworkSamples samples = createNetworkSamplesWithOneVertexAndOneSample(identicalProb); assertEquals(0., KLDivergence.compute(qDist, samples), 1e-6); }
@Test public void testJoin() { byte[] comp1 = Bytes.toBytes("abc"); byte[] comp2 = Bytes.toBytes("def"); byte[] comp3 = Bytes.toBytes("ghi"); byte[] joined = ByteUtil.join(Constants.SEP_BYTES); assertNotNull(joined); assertEquals(0, joined.length); joined = ByteUtil.join(null, comp1, comp2, comp3); assertNotNull(joined); assertArrayEquals(Bytes.toBytes("abcdefghi"), joined); joined = ByteUtil.join(Constants.SEP_BYTES, comp1, comp2, comp3); assertNotNull(joined); assertArrayEquals( Bytes.toBytes("abc"+Constants.SEP+"def"+Constants.SEP+"ghi"), joined); }
@Test public void testExecuteRound() { Club gremio = TestFixtures.GREMIO; Club internacional = TestFixtures.INTERNACIONAL; MatchResultGenerator mockResultGenerator = mock(MatchResultGenerator.class); MatchResult fakeResult = MatchResult.builder() .homeGoals(Collections.singletonList(newGoal(10, gremio))) .awayGoals(emptyList()) .build(gremio, internacional); when(clubDataStore.squad(any())).thenReturn(ClubSquad.create(0, emptyList())); ClubSquad homeSquad = ClubSquad.create(0, emptyList()); ClubSquad awaySquad = ClubSquad.create(0, emptyList()); when(mockResultGenerator.generate(gremio, homeSquad, internacional, awaySquad)) .thenReturn(fakeResult); LeagueDetails leagueDetails = new LeagueDetails( persistenceService, clubDataStore, roundGenerator, mockResultGenerator); Match match = Match.create(gremio, internacional); LeagueRound round = LeagueRound.create(1, Collections.singletonList(match)); LeagueRound leagueRound = leagueDetails.executeRound(round); verify(mockResultGenerator).generate(gremio, homeSquad, internacional, awaySquad); assertThat(leagueRound.matches().get(0).result()).isEqualTo(fakeResult); }
@Test public void testGetString() { assertNull(TreeUtil.getString(nonExisting, "p")); assertNull(TreeUtil.getString(child, "pp")); assertEquals(STRING_VALUE, TreeUtil.getString(child, "p")); }
@Test public void createProviderWithEmptyConstructor_getColorWithNodeReturnBeakerColorWithRGB() { RandomColorProvider randomColorProvider = new RandomColorProvider(); Assertions.assertThat(randomColorProvider.getColor(node01).getRGB()).isNotZero(); Assertions.assertThat(randomColorProvider.getColor(node02).getRGB()).isNotZero(); }
@Test public void testUnsignedBigInt() { ColumnSchema schema = new ColumnSchema("id", DataType.BIGINT, "bigint(20) unsigned", true, "", ""); Long testBigInteger; BigInteger expected; Object actual; { testBigInteger = 0L; expected = new BigInteger("0"); actual = MysqlTypeDeserializer.convertToObject(testBigInteger, schema, null); assertEquals(expected, actual); } { testBigInteger = 9223372036854775807L; expected = new BigInteger("9223372036854775807"); actual = MysqlTypeDeserializer.convertToObject(testBigInteger, schema, null); assertEquals(expected, actual); } { testBigInteger = -9223372036854775808L; expected = new BigInteger("9223372036854775808"); actual = MysqlTypeDeserializer.convertToObject(testBigInteger, schema, null); assertEquals(expected, actual); } { testBigInteger = -1L; expected = new BigInteger("18446744073709551615"); actual = MysqlTypeDeserializer.convertToObject(testBigInteger, schema, null); assertEquals(expected, actual); } }
@Test public void testConcat_List() { Collection<Series<String>> ss = asList( Series.forData("m", "n"), Series.forData("a", "b"), Series.forData("d")); Series<String> c = SeriesConcat.concat(ss); new SeriesAsserts(c).expectData("m", "n", "a", "b", "d"); }
@Test public void testCoordinates() throws UserIdentityUnauthorizedException { JsonObject commandObject = gson.fromJson("{coordinates:{latitude:'0.0',longitude:'0.0'},accessibility:'PUBLIC'}", JsonObject.class); handler.handle(OperatorApiJsonTestUtils.CHARGING_STATION_ID_STRING, commandObject, IDENTITY_CONTEXT); }
@Test public void testLocateInNSAliased() { final Import i = makeImport("nsA", "aliased", "m1"); final List<QName> available = Arrays.asList(new QName("nsA", "m1"), new QName("nsA", "m2"), new QName("nsB", "m3")); final Either<String, QName> result = ImportDMNResolverUtil.resolveImportDMN(i, available, Function.identity()); assertTrue(result.isRight()); assertEquals(new QName("nsA", "m1"), result.getOrElse(null)); }
@Test public void testAddFeatures() throws Exception { FeaturesService featureService = mock(FeaturesService.class); featureService.installFeature(anyString()); EasyMock.expectLastCall().times(3); replay(featureService); RunMojo mojo = new RunMojo(); setPrivateField(mojo, "featuresToInstall", "liquibase-core, ukelonn-db-derby-test, ukelonn"); mojo.addFeatures(featureService); verify(featureService); }
@Test @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class) public void testLoadRead() throws IOException { final String path = resource.getFile().getAbsolutePath() + TEST_BAM_NAME; IndexedFileRegistrationRequest request = new IndexedFileRegistrationRequest(); request.setPath(path); request.setIndexPath(path + BAI_EXTENSION); request.setName(TEST_NSAME); request.setReferenceId(testReference.getId()); request.setType(BiologicalDataItemResourceType.FILE); BamFile bamFile = bamManager.registerBam(request); Assert.assertNotNull(bamFile); Track<Read> fullTrackQ = getBaseReadTrack(bamFile); BamQueryOption option = getBaseBamQueryOption(); ResponseEmitterMock emitterMock = new ResponseEmitterMock(); bamManager.sendBamTrackToEmitter(fullTrackQ, option, emitterMock); BamTrack<Read> fullTrack = emitterMock.getBamTrack(); Assert.assertTrue(!fullTrack.getBlocks().isEmpty()); Read read = fullTrack.getBlocks().get(0); ReadQuery query = new ReadQuery(); query.setName(read.getName()); query.setChromosomeId(testChromosome.getId()); query.setStartIndex(read.getStartIndex()); query.setEndIndex(read.getEndIndex()); query.setId(bamFile.getId()); Read loadedRead = bamManager.loadRead(query, null, null); Assert.assertNotNull(loadedRead); Assert.assertTrue(StringUtils.isNotBlank(loadedRead.getSequence())); Assert.assertTrue(!loadedRead.getTags().isEmpty()); Assert.assertTrue(StringUtils.isNotBlank(loadedRead.getQualities())); Assert.assertEquals(read.getName(), loadedRead.getName()); }
@Test public void testToAttributeValueV2_NS() { software.amazon.awssdk.services.dynamodb.model.AttributeValue convertedAttributeValueNS = DynamodbAttributeValueTransformer.toAttributeValueV2(attributeValueNS_event); Assertions.assertEquals(attributeValueNS_v2, convertedAttributeValueNS); }
@Test public void testGetHdfsServiceConfigsWithoutS3Guard() { doNothing().when(s3GuardConfigProvider).getServiceConfigs(any(TemplatePreparationObject.class), any(StringBuilder.class)); TemplatePreparationObject preparationObject = getTemplatePreparationObject(false, false, false); String inputJson = getBlueprintText("input/clouderamanager.bp"); CmTemplateProcessor cmTemplateProcessor = new CmTemplateProcessor(inputJson); List<ApiClusterTemplateConfig> serviceConfigs = underTest.getServiceConfigs(cmTemplateProcessor, preparationObject); assertEquals(0, serviceConfigs.size()); }
@Test void setDefaultTimeout() { cameraDefaultConstructor.setDefaultTimeout(Duration.ofSeconds(30)); cameraWithSerialNumber.setDefaultTimeout(Duration.ofSeconds(30)); Assertions.assertTrue(cameraDefaultConstructor.getDefaultTimeout().isPresent()); Assertions.assertTrue(cameraWithSerialNumber.getDefaultTimeout().isPresent()); }
@Test public void fromJson() throws IOException { final String json = "{ \"type\": \"MultiPoint\"," + "\"coordinates\": [ [100, 0], [101, 1] ] } "; MultiPoint geo = MultiPoint.fromJson(json); assertEquals(geo.type(), "MultiPoint"); assertEquals(geo.coordinates().get(0).longitude(), 100.0, DELTA); assertEquals(geo.coordinates().get(0).latitude(), 0.0, DELTA); assertEquals(geo.coordinates().get(1).longitude(), 101.0, DELTA); assertEquals(geo.coordinates().get(1).latitude(), 1.0, DELTA); assertFalse(geo.coordinates().get(0).hasAltitude()); assertEquals(Double.NaN, geo.coordinates().get(0).altitude(), DELTA); }
@Test public void test_that_cmsCanScheduleKeyDeletion_returns_true_when_cms_can_delete() throws IOException { InputStream policy = getClass() .getClassLoader() .getResourceAsStream( "com/nike/cerberus/service/valid-cerberus-iam-auth-kms-key-policy.json"); String policyJsonAsString = IOUtils.toString(policy, "UTF-8"); assertTrue(kmsPolicyService.cmsHasKeyDeletePermissions(policyJsonAsString)); policy.close(); }
@Test public void testGettersReturnCorrectValues() throws Exception { List<FieldValueGetter> getters = new GeneratedGetterFactory().generateGetters(Pojo.class); assertEquals(ImmutableSet.<Object>of("privateStringValue", 15), getValues(getters, new Pojo())); }
@Test public void testSparseInterpolation2() throws Exception { IntegersZp domain = new IntegersZp(24001871); MultivariatePolynomial<BigInteger> a = parse("3*b^4*c^2+7*b^4*c^3+4*a*b^5*c^3+6*a^4*b^6+24001865*a^5*b", domain, MonomialOrder.DEFAULT, "a", "b", "c"), b = parse("5*a*c^4+9*a^4*b^4*c^2+9*a^6*b*c^6", domain, MonomialOrder.DEFAULT, "a", "b", "c"), gcd = parse("5*a*b^2*c^2+a*b^2*c^4+24001866*a*b^4*c^3 + 1", domain, MonomialOrder.DEFAULT, "a", "b", "c"); a = a.multiply(gcd); b = b.multiply(gcd); assertEquals(asOverZp64(gcd).monic(), interpolateGCD(asOverZp64(a), asOverZp64(b), asOverZp64(gcd), getRandom()).monic()); }
@Test public void ingressVlan() throws Exception { VlanId ingressVlan = config.ingressVlan(); assertNotNull("ingressVlan should not be null", ingressVlan); assertThat(ingressVlan, is(INGRESS_VLAN_1)); }
@Test public void testEncryptShouldThrowExceptionIfRequestFailed() throws Exception { AmazonServiceException exception = mock(AmazonServiceException.class); when(mockKms.encrypt(isA(EncryptRequest.class))) .thenThrow(exception); Aead aead = new AwsKmsAead(mockKms, KEY_ID); byte[] aad = Random.randBytes(20); byte[] message = Random.randBytes(20); try { aead.encrypt(message, aad); fail("Expected GeneralSecurityException"); } catch (GeneralSecurityException e) { } }
@Test public void testExceptionPredicateNotMatching() throws Exception { final AtomicInteger count = new AtomicInteger(); boolean threwExpectedException = false; try { RetryUtils.retry( () -> { if (count.incrementAndGet() >= 2) { return "hey"; } else { throw new IOException("uhh"); } }, IS_TRANSIENT, 3 ); } catch (IOException e) { threwExpectedException = e.getMessage().equals("uhh"); } Assert.assertTrue("threw expected exception", threwExpectedException); Assert.assertEquals("count", 1, count.get()); }
@Test public void apply() { project.getPlugins().apply(CompressPlugin.class); }
@Test void initializationLoadsRepositoryConfigurationFromFileWithAbsolutePathAndCreatesRepo() throws Exception { final Path file = Files.createTempFile("memory-rdfs", ".ttl"); try (final BufferedReader in = new BufferedReader( new InputStreamReader( getClass().getClassLoader().getResourceAsStream("repo-configs/memory-rdfs.ttl")))) { final String content = in.lines().collect(Collectors.joining("\n")); Files.write(file, content.getBytes()); } file.toFile().deleteOnExit(); final DriverConfiguration conf = TestUtils.createDriverConfig("urn:test"); conf.setProperty(SesameConfigParam.REPOSITORY_CONFIG, file.toString()); this.connector = new StorageConnector(conf); final Repository repo = connector.unwrap(Repository.class); assertTrue(repo instanceof SailRepository); assertTrue(((SailRepository) repo).getSail() instanceof ForwardChainingRDFSInferencer); }
@Test public void testWriteArgs() { String TEMPLATE_NAME = "the.Template"; tc.writeArgs(TEMPLATE_NAME, "path.to.file", ".ext", ASTNodeMock.INSTANCE, new ArrayList<>()); assertEquals(1, freeMarkerTemplateEngine.getProcessedTemplates().size()); FreeMarkerTemplateMock template = freeMarkerTemplateEngine.getProcessedTemplates().iterator() .next(); assertTrue(template.isProcessed()); assertEquals(TEMPLATE_NAME, template.getName()); assertNotNull(template.getData()); assertEquals(1, fileHandler.getStoredFilesAndContents().size()); Path writtenFilePath = Paths.get(TARGET_DIR.getAbsolutePath(), "path/to/file.ext"); assertTrue(fileHandler.getStoredFilesAndContents().containsKey(writtenFilePath)); assertEquals("Content of template: " + TEMPLATE_NAME, fileHandler.getContentForFile(writtenFilePath.toString()).get()); }
@Test public void toCertificateTokens() { List<RemoteCertificate> remoteCertificates = new ArrayList<>(); remoteCertificates.add(new RemoteCertificate(encodedCertificate)); remoteCertificates.add(new RemoteCertificate(null)); remoteCertificates.add(null); List<CertificateToken> certificateTokens = RemoteCertificateConverter.toCertificateTokens(remoteCertificates); assertEquals(1, certificateTokens.size()); assertTrue(Arrays.equals(certificateTokens.get(0).getEncoded(), remoteCertificates.get(0).getEncodedCertificate())); }
@Test public void validate_shouldPassValidationIfFieldLengthsAreCorrect() { RelationshipType type = new RelationshipType(); type.setaIsToB("A is To B"); type.setbIsToA("B is To A"); type.setDescription("description"); type.setRetireReason("retireReason"); Errors errors = new BindException(type, "type"); new RelationshipTypeValidator().validate(type, errors); Assert.assertFalse(errors.hasErrors()); }
@Test public void testEquals7() { ElementSymbol es = sampleElement3(); helpEquals(es, es.clone(), true); }
@Test public void testserializeConfidentialDataNotRealCode() { exception.expect(IllegalArgumentException.class); OSSerializer.serializeConfidentialData(options, payload, -1); }
@Test public void testRatMul() { assertEquals(Rat(1, 1), simplify(Mul(Rat(2, 1), Rat(1, 1), Rat(1, 2)))); assertEquals(Rat(3, 4), simplify(Mul(Rat(3, 2), Rat(1, 1), Rat(1, 2)))); assertEquals(Mul(Rat(3, 4), d), simplify(Mul(Rat(3, 2), d, Rat(1, 2)))); assertEquals(Mul(Rat(3, 4), d), simplify(Mul(Rat(3, 2), Mul(d, Rat(1, 2))))); assertEquals(Rat(0, 1), simplify(Mul(Rat(3, 2), Rat(0, 1), Rat(1, 2)))); }
@Test public void getProfileAddress() throws Exception { Long userId = 1L; UserProfileResource profileDetails = newUserProfileResource().build(); when(profileServiceMock.getUserProfile(userId)).thenReturn(serviceSuccess(profileDetails)); mockMvc.perform(get("/profile/id/{userId}/get-user-profile", userId) .contentType(APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(toJson(profileDetails))); verify(profileServiceMock, only()).getUserProfile(userId); }
@Test public void testCountWhileMulti() { DefaultJavadocScanner scanner = scanner("kinds.txt"); { EnumSet<JavadocTokenKind> set = EnumSet.of(ASTERISK, IDENTIFIER); int count = JavadocScannerUtil.countWhile(set, scanner, 0); assertEquals(4, count); } { EnumSet<JavadocTokenKind> set = EnumSet.of(ASTERISK, IDENTIFIER, QUESTION); int count = JavadocScannerUtil.countWhile(set, scanner, 0); assertEquals(8, count); } { EnumSet<JavadocTokenKind> set = EnumSet.of(QUESTION, WHITE_SPACES); int count = JavadocScannerUtil.countWhile(set, scanner, 0); assertEquals(0, count); } { EnumSet<JavadocTokenKind> set = EnumSet.of(QUESTION, WHITE_SPACES); int count = JavadocScannerUtil.countWhile(set, scanner, 4); assertEquals(5, count); } { EnumSet<JavadocTokenKind> set = EnumSet.allOf(JavadocTokenKind.class); int count = JavadocScannerUtil.countWhile(set, scanner, 0); assertEquals(scanner.getTokens().size(), count); } }
@Test public void testMapRange2() throws Exception { Pair<String, String> results = lookupTable.mapRange("WEEK_BEG_DT", millis("2013-05-01"), millis("2013-08-01"), "CAL_DT"); System.out.println(DateFormat.formatToDateStr(Long.parseLong(results.getFirst()))); System.out.println(DateFormat.formatToDateStr(Long.parseLong(results.getSecond()))); Assert.assertEquals(millis("2013-05-05"), results.getFirst()); Assert.assertEquals(millis("2013-08-03"), results.getSecond()); }
@Test public void test_should_not_throw_exception_when_mandatory_attribute_entries_are_present_in_service_request() { final MandatoryAttributeValidator validator = new MandatoryAttributeValidator(); final ServiceRequest serviceRequest = mock(ServiceRequest.class); when(serviceRequest.getAttributeEntries()) .thenReturn(Arrays.asList( new AttributeEntry("code1", "value1"), new AttributeEntry("code2", "value2"), new AttributeEntry("code2", "value3"), new AttributeEntry("code3", "value4") )); final AuthenticatedUser user = AuthenticatedUser.builder() .roleCodes(Collections.singletonList("CITIZEN")) .build(); when(serviceRequest.getAuthenticatedUser()).thenReturn(user); final AttributeDefinition attributeDefinition1 = AttributeDefinition.builder() .required(true) .code("code1") .roles(Collections.singletonList(new AttributeRolesDefinition("CITIZEN"))) .actions(Collections.singletonList(new AttributeActionsDefinition(ServiceStatus.COMPLAINT_REGISTERED))) .build(); final AttributeDefinition attributeDefinition2 = AttributeDefinition.builder() .required(true) .code("code2") .roles(Collections.singletonList(new AttributeRolesDefinition("CITIZEN"))) .actions(Collections.singletonList(new AttributeActionsDefinition(ServiceStatus.COMPLAINT_REGISTERED))) .build(); final List<AttributeDefinition> attributeDefinitions = Arrays.asList(attributeDefinition1, attributeDefinition2); final ServiceDefinition serviceDefinition = ServiceDefinition.builder() .attributes(attributeDefinitions) .build(); validator.validate(serviceRequest, serviceDefinition, ServiceStatus.COMPLAINT_REGISTERED); }
@Test public void populateDeleteHeaders_acceptXml() { HashMap<String, String> headers = new HashMap<>(); headers.put(RequestHeaders.ACCEPT, ACCEPT_XML); Map<String, String> actual = accountInformationService.populateDeleteHeaders(headers); assertThat(actual).isNotEmpty(); assertThat(actual.get(RequestHeaders.ACCEPT)).isEqualTo(ACCEPT_XML); }
@Test public void should_update_document_if_already_present() { offsetRepository.createOrUpdateOffset(1, "default", "Unit", 1); offsetRepository.createOrUpdateOffset(1, "default", "Unit", 15); assertThat(mongoCollection.countDocuments()).isEqualTo(1); assertThat(mongoCollection.find()) .extracting("offset", "collection", "strategy", "_tenant") .contains(Tuple.tuple(15L, "Unit", "default", 1)); }
@Test public void doNotAddModuleOnCapabilityEventWhenWrongEvent() throws Exception { reset(locator); when(capabilityDescriptor.type()).thenReturn(capabilityType); when(capabilityContext.descriptor()).thenReturn(capabilityDescriptor); underTest.handle(capabilityEvent); verify(locator, never()).add(any()); }
@SuppressWarnings("ConstantConditions") @Test public void tryToGetModifyFeaturePropertiesLiveCommandForNull() { assertThatExceptionOfType(NullPointerException.class) .isThrownBy(() -> ModifyFeaturePropertiesLiveCommandImpl.of(null)) .withMessage(MessageFormat.format("The {0} must not be null!", "command")) .withNoCause(); }
@Test public void testView() { assertEquals(view, tested.getWidget()); }
@Test public void testDetect() throws MalformedObjectNameException, AttributeNotFoundException, MBeanException, ReflectionException, InstanceNotFoundException { String version = "6.0.1"; MBeanServer mockServer = createMock(MBeanServer.class); ObjectName oName = new ObjectName("com.lightstreamer:type=Server"); expect(mockServer.queryNames(new ObjectName("com.lightstreamer:type=Server"), null)). andReturn(new HashSet<ObjectName>(Arrays.asList(oName))).anyTimes(); expect(mockServer.isRegistered(oName)).andStubReturn(true); expect(mockServer.getAttribute(oName,"LSVersion")).andStubReturn(version); replay(mockServer); ServerHandle handle = detector.detect(getMBeanServerManager(mockServer)); assertNotNull(handle); assertEquals(handle.getVersion(),version); }
@Test public void nested() throws Exception { Throwable t = TestHelper.makeNestedException(3); ThrowableProxy tp = new ThrowableProxy(t); PackagingDataCalculator pdc = tp.getPackagingDataCalculator(); pdc.calculate(tp); verify(tp); }
@Test public void testV10() throws Exception { GetFeaturesInputBuilder gfib = new GetFeaturesInputBuilder(); BufferHelper.setupHeader(gfib, EncodeConstants.OF10_VERSION_ID); GetFeaturesInput gfi = gfib.build(); ByteBuf out = UnpooledByteBufAllocator.DEFAULT.buffer(); featuresFactory.serialize(gfi, out); BufferHelper.checkHeaderV10(out, FEATURES_REQUEST_MESSAGE_CODE_TYPE, 8); }
@Test public void splitDates_onlyBirthDates() { final String [] test = {"1988- ","1988 - ", "1988", "1988 ", "d. 1988 "}; final String expectedBirth = "1988"; for (final String dateExpression : test) { assertEquals(dateExpression, expectedBirth, cut.splitDateAndPartialGet(dateExpression, true)); assertNull(dateExpression, cut.splitDateAndPartialGet(dateExpression, false)); } }
@Test public void testFromOverflow() throws Exception { expectedEx.expect(TypeConverterException.class); expectedEx.expectMessage("Field to small for value"); byte[] bytes = typeConverter.from(new BigInteger("12147483648"), 4, -1, true); }
@Test public void convert_test() { CollectedClientData expected = TestDataUtil.createClientData(ClientDataType.GET); String source = new CollectedClientDataConverter(objectConverter).convertToBase64UrlString(expected); CollectedClientData result = new Base64UrlStringToCollectedClientDataConverter(objectConverter).convert(source); assertThat(result).isEqualTo(expected); }
@Test void stat() { log.stat("stat", 1); assertThat(log.stats.get("stat").intValue()).isEqualTo(1); log.stat("stat", 1); assertThat(log.stats.get("stat").intValue()).isEqualTo(2); }
@Test public void testDate() throws Exception { Date date = new Date(); SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); CSVFormat csvFormat = new CSVFormat(); final StringWriter out = new StringWriter(); csvFormat.print(out, date, true); assertEquals("Unexpected format ", simpleDateFormat.format(date), out.toString()); }
@Test public void testFileToDirectory() throws Exception { Task task = decider.getTask(existingTestNode, directoryTestNode, stateDecider, bufferedStateDecider); checkAction(task.getCurrentAction(), ActionType.DIR_HERE_FILE_THERE_ERROR, Location.DESTINATION, BufferUpdate.NONE); }
@Test public void testGetJmsDestinationWithEmptyLegacyTypeAnnotationWithQueueConsumerDest() throws Exception { String testAddress = "testAddress"; AmqpJmsMessageFacade message = Mockito.mock(AmqpJmsMessageFacade.class); AmqpConnection conn = Mockito.mock(AmqpConnection.class); Mockito.when(message.getConnection()).thenReturn(conn); Mockito.when(message.getToAddress()).thenReturn(testAddress); Mockito.when(message.getMessageAnnotation(LEGACY_TO_TYPE_MSG_ANNOTATION_SYMBOL)).thenReturn(""); JmsQueue consumerDestination = new JmsQueue("ConsumerDestination"); JmsDestination destination = AmqpDestinationHelper.getJmsDestination(message, consumerDestination); assertNotNull(destination); assertTrue(destination.isQueue()); assertFalse(destination.isTemporary()); assertEquals(testAddress, destination.getAddress()); }
@Test public void shouldCorrectlySetExtensions() { properties.put(PebbleProperty.EXTENSION.key(), String.format("%s,%s", CustomExtensionOne.class.getCanonicalName(), CustomExtensionTwo.class.getCanonicalName())); pebbleEngineProducer.pebbleEngine(); properties.put(PebbleProperty.EXTENSION.key(), String.format("%s , %s", CustomExtensionOne.class.getCanonicalName(), CustomExtensionTwo.class.getCanonicalName())); pebbleEngineProducer.pebbleEngine(); }
@Test public void testGetChildFolders() { VersionManager versionManager = createMock(VersionManager.class); replay(versionManager); UtilHandler utilHandler = new UtilHandler(versionManager); Collection<UtilHandler.Folder> folders = utilHandler.getChildFolders("/"); assertNotNull(folders); verify(versionManager); }
@Test public void testDecomposing4x4MatrixToProduceAccurateZaxisAngles() { MatrixMathHelper.MatrixDecompositionContext ctx = new MatrixMathHelper.MatrixDecompositionContext(); MatrixMathHelper.decomposeMatrix( new double[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}, ctx); assertThat(ctx.rotationDegrees).containsSequence(0d, 0d, 0d); double[] angles = new double[]{30, 45, 60, 75, 90, 100, 115, 120, 133, 167}; for (double angle : angles) { verifyZRotatedMatrix(angle, 0d, 0d, angle); verifyZRotatedMatrix(-angle, 0d, 0d, -angle); } verifyZRotatedMatrix(180d, 0d, 0d, 180d); verifyZRotatedMatrix(222, 0d, 0d, -138d); verifyZRotatedMatrix(270, 0d, 0d, -90d); verifyZRotatedMatrix(360, 0d, 0d, 0d); verifyZRotatedMatrix(33.33333333, 0d, 0d, 33.333d); verifyZRotatedMatrix(86.75309, 0d, 0d, 86.753d); verifyZRotatedMatrix(42.00000000001, 0d, 0d, 42d); verifyZRotatedMatrix(42.99999999999, 0d, 0d, 43d); verifyZRotatedMatrix(42.99999999999, 0d, 0d, 43d); verifyZRotatedMatrix(42.49999999999, 0d, 0d, 42.5d); verifyZRotatedMatrix(42.55555555555, 0d, 0d, 42.556d); }
@Test public void ordersANDNodesLastInTrees() throws QueryException { Map<String, Object> nameMap = new HashMap<String, Object>(); nameMap.put("name", "mike"); Map<String, Object> petMap = new HashMap<String, Object>(); petMap.put("pet", "cat"); Map<String, Object> lvl2 = new HashMap<String, Object>(); lvl2.put("$and", Arrays.<Object>asList(nameMap, petMap)); Map<String, Object> query = new LinkedHashMap<String, Object>(); query.put("$and", Arrays.<Object>asList(lvl2, nameMap, petMap)); query = QueryValidator.normaliseAndValidateQuery(query); QueryNode node = QuerySqlTranslator.translateQuery(query, indexes, indexesCoverQuery); assertThat(node, is(instanceOf(AndQueryNode.class))); assertThat(indexesCoverQuery[0], is(true)); AndQueryNode andNode = (AndQueryNode) node; assertThat(andNode.children.size(), is(2)); String select = "SELECT _id FROM \"_t_cloudant_sync_query_index_basic\""; String where = " WHERE \"name\" = ? AND \"pet\" = ?"; String sql = String.format("%s%s", select, where); SqlQueryNode sqlNode = (SqlQueryNode) andNode.children.get(0); assertThat(sqlNode.sql.sqlWithPlaceHolders, is(sql)); assertThat(sqlNode.sql.placeHolderValues, is(arrayContainingInAnyOrder("mike", "cat"))); sqlNode = (SqlQueryNode) ((AndQueryNode) andNode.children.get(1)).children.get(0); assertThat(sqlNode.sql.sqlWithPlaceHolders, is(sql)); assertThat(sqlNode.sql.placeHolderValues, is(arrayContainingInAnyOrder("mike", "cat"))); }
@Test public void errorMessageShouldBeShownWhenUsedMemoryMoreAvailableMemory() throws Exception { when(locale.messagesAvailableRamLessCustom(anyInt(), anyInt(), anyInt())).thenReturn(SOME_TEXT); boolean isCorrect = util.isRunnerMemoryCorrect(257, 200, 128); verifyShowWarning(); verify(locale).messagesAvailableRamLessCustom(200, 257, 129); assertThat(isCorrect, is(false)); }
@Test public void testInputStream() throws Exception { Path filePath = new Path("/foo/bar"); byte[] data = new byte[100]; for (int i = 0; i < 100; ++i) { data[i] = (byte)i; } byte [] readBuf = new byte[1000]; ByteBuf byteBuf = Unpooled.wrappedBuffer(data, 0, 100); setupRPC( DFS.RpcType.GET_FILE_DATA_REQUEST, DFS.GetFileDataRequest.newBuilder().setPath(filePath.toString()).setStart(0).setLength(100).build(), DFS.RpcType.GET_FILE_DATA_RESPONSE, DFS.GetFileDataResponse.newBuilder().setRead(100).build(), byteBuf); FileSystem fs = newRemoteNodeFileSystem(); FSDataInputStream inputStream = fs.open(filePath, 100); int read = inputStream.read(readBuf, 0, 50); assertEquals(50, read); setupRPC( DFS.RpcType.GET_FILE_DATA_REQUEST, DFS.GetFileDataRequest.newBuilder().setPath(filePath.toString()).setStart(100).setLength(100).build(), DFS.RpcType.GET_FILE_DATA_RESPONSE, DFS.GetFileDataResponse.newBuilder().setRead(-1).build()); read = inputStream.read(readBuf, 50, 1000); assertEquals(50, read); for (int i = 0; i < 100; ++i) { assertEquals((byte)i, readBuf[i]); } }
@Test public void loadTemplatesFromPropertiesWithLocaleTest() throws Exception { Alert openAlert = JvmGarbageCollectionData.getOpenAlert(); Action openAction = new Action(openAlert.getTriggerId(), "email", "email-to-test", openAlert); openAction.setProperties(properties); ActionMessage openMessage = new TestActionMessage(openAction); properties.put("template.plain", "Tiny template: ${emailSubject}"); properties.put("template.plain.es", "ES Tiny template: ${emailSubject}"); properties.put("template.plain.fr", "FR Tiny template: ${emailSubject}"); properties.put("template.locale", "es"); EmailTemplate template = new EmailTemplate(); Map<String, String> processed = template.processTemplate(openMessage); assertNotNull(processed.get("emailBodyPlain")); assertEquals("Processed template", processed.get("emailBodyPlain"), "ES Tiny template: Alert [open] message: " + "GC Duration greater than 1000.0 ms for App Server thevault~Local"); properties.put("template.locale", "fr"); processed = template.processTemplate(openMessage); assertNotNull(processed.get("emailBodyPlain")); assertEquals("Processed template", processed.get("emailBodyPlain"), "FR Tiny template: Alert [open] message: " + "GC Duration greater than 1000.0 ms for App Server thevault~Local"); properties.remove("template.plain"); properties.remove("template.locale"); }
@Test(expected = IllegalArgumentException.class) public void shouldNotAccept16BitRegistersAsDestiny() { Instruction load8BitImm = new Load8BitImmPCInto8BitRegister(z80, mmu, ANY_16BIT_DESTINY_REGISTER); load8BitImm.execute(); }
@Test public void test_lte_null() { FunctionExpression lte = dsl.lte(DSL.literal(1), DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER)); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_NULL, lte.valueOf(valueEnv())); lte = dsl.lte(DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER), DSL.literal(1)); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_NULL, lte.valueOf(valueEnv())); lte = dsl.lte(DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER), DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER)); assertEquals(BOOLEAN, lte.type()); assertEquals(LITERAL_NULL, lte.valueOf(valueEnv())); }
@Test public void testUnusedWarning() { assertWithMessage("Defaults to true").that(Options.unused_warning).isTrue(); task.setUnusedWarning(false); assertThat(Options.unused_warning).isFalse(); }
@Test public void testGetMissRate() throws Exception { CacheEntry cacheEntry = new CacheEntry(); final int hits = 7; final int misses = 3; final float expResult = 0.3F; for(int i = 0; i < hits; i++) { cacheEntry.incrementHits(); } for(int i = 0; i < misses; i++) { cacheEntry.incrementMisses(); } final float result = cacheEntry.getMissRate(); assertEquals(expResult, result, 0.001); }
@Test public void shouldBuildQueryParamsFromGridSettings() { when(gridSettings.getPage()).thenReturn(3); when(gridSettings.getRows()).thenReturn(50); when(gridSettings.getSortColumn()).thenReturn("field"); when(gridSettings.getSortDirection()).thenReturn("desc"); QueryParams queryParams = QueryParamsBuilder.buildQueryParams(gridSettings); assertNotNull(queryParams); assertPagination(queryParams, 3, 50); assertEquals(2, queryParams.getOrderList().size()); assertOrderPresent(queryParams, 0, "field", Order.Direction.DESC); assertDefaultIdOrder(queryParams, 1); }
@Test(expected = UnsupportedOperationException.class) public void testgetPersistenceType() { entityType.getPersistenceType(); }
@Test public void testFindSnapshotSetToRollback() { configReleaseDao.createConfigSnapshotSet(buildConfigSnapshotSet(Project_Foo_Id, Env1_Id, Task_1)); configReleaseDao.createConfigSnapshotSet(buildConfigSnapshotSet(Project_Foo_Id, Env1_Id, Task_2)); ConfigSnapshotSet snapshotSet = configReleaseDao.findSnapshotSetToRollback(Project_Foo_Id, Env1_Id, Task_1); assertNotNull(snapshotSet); assertEquals(Task_2, snapshotSet.getTask()); snapshotSet = configReleaseDao.findSnapshotSetToRollback(Project_Foo_Id, Env2_Id, Task_1); assertNull(snapshotSet); }
@Test public void jitPattern_jdk6() throws Exception { List<String> lines = Resources.readLines( Resources.getResource(LogMessageParserTest.class, "jdk6-compilation.txt"), UTF_8); for (String line : lines) { assertTrue(parser.parse(line) instanceof HotspotLogMessage); } }
@Test public void testInTmp() throws IOException { final File testDir = new File(new File("/tmp/IOUtilTest"), "testDir"); testDir.mkdir(); final File subFolder = new File(testDir, "subFolder"); final File fileName = new File(subFolder, "fileName"); final String relPath = IoFileRelativePathUtil.getRelativePath(testDir, fileName); requireNonNull(relPath); assertTrue(fileName.getAbsolutePath().endsWith(relPath)); assertEquals("subFolder/fileName", relPath); }
@Test(expected = WrongReferenceAttributeValueException.class) public void testCheckValueExistIfAdNameSetWithNull() throws Exception { System.out.println("testCheckValueExistIfAdNameSetWithNull()"); attributeToCheck.setValue(null); classInstance.checkAttributeSemantics(session, group, resource, attributeToCheck); }
@Test public void checkRangeLengthMin4Max6Invalid7() { mField.set("1234567"); mField.addRangeLengthValidator("must be between 4 and 6", 4, 6); assertThat(mField.isValid(), is(false)); }
@Test public void writing_response_if_request_is_member_contains_request_and_response() throws IOException { this.strategy.writeCreated(this.appendable, this.memberRequest, this.response); assertEquals("request = response\n", this.appendable.toString()); }
@Test public void testOutlierTooShort() { Assert.assertTrue(AlgorithmUtils.getOutliers(this.outlierData, new Duration(86400000L * 3)).allFalse()); }
@Test public void testGetTargetId() { Assert.assertEquals( VmwareIaasHandler.TARGET_ID, new VmwareIaasHandler().getTargetId()); }
@Test(expected = GdxRuntimeException.class) public void testGet() { Gdx.files = mock(Files.class); Asset.get("", Texture.class); }
@Test void delete_feedSource_테스트() { feedService.deleteFeedSource(1L); verify(feedInternalService, times(1)).deleteFeedSource(1L); }
@Test public void test_areAWSIAMRoleInputsValid() throws TVaultValidationException { AWSIAMRole awsiamRole = new AWSIAMRole(); awsiamRole.setAuth_type("iam"); String[] arns = {"arn:aws:iam::123456789012:user/tst"}; awsiamRole.setBound_iam_principal_arn(arns); String[] policies = {"default"}; awsiamRole.setPolicies(policies); awsiamRole.setResolve_aws_unique_ids(true); awsiamRole.setRole("string"); boolean valid = ControllerUtil.areAWSIAMRoleInputsValid(awsiamRole); assertTrue(valid); }
@Test public void handleMessage_ignoredSlashing() { final ProposerSlashing slashing = dataStructureUtil.randomProposerSlashing(); when(validator.validate(slashing)).thenReturn(IGNORE); Bytes serialized = gossipEncoding.encode(slashing); final ValidationResult result = topicHandler.handleMessage(serialized); assertThat(result).isEqualTo(ValidationResult.Ignore); verifyNoInteractions(consumer); }
@Test public void testDeleteInvalidDatabaseVirtualIps() throws Exception { when(objectMessage.getObject()).thenReturn(messageDataContainer); when(messageDataContainer.getAccountId()).thenReturn(ACCOUNT_ID); when(messageDataContainer.getLoadBalancerId()).thenReturn(LOAD_BALANCER_ID); when(messageDataContainer.getUserName()).thenReturn(USERNAME); when(messageDataContainer.getIds()).thenReturn(vipIdsToDelete); when(loadBalancerService.getWithUserPages(LOAD_BALANCER_ID, ACCOUNT_ID)).thenReturn(lb); doThrow(Exception.class).when(virtualIpService).removeVipsFromLoadBalancer(lb, vipIdsToDelete); when(config.getString(Matchers.<ConfigurationKey>any())).thenReturn("REST"); deleteVirtualIpsListener.doOnMessage(objectMessage); verify(reverseProxyLoadBalancerStmService).deleteVirtualIps(lb, vipIdsToDelete, null); verify(virtualIpService).removeVipsFromLoadBalancer(lb, vipIdsToDelete); verify(loadBalancerService).setStatus(lb, LoadBalancerStatus.ERROR); verify(notificationService).saveAlert(eq(ACCOUNT_ID), eq(LOAD_BALANCER_ID), isA(Exception.class), eq(AlertType.DATABASE_FAILURE.name()), anyString()); verify(notificationService).saveVirtualIpEvent(eq(USERNAME), eq(ACCOUNT_ID), eq(LOAD_BALANCER_ID), anyInt(), anyString(), anyString(), eq(EventType.DELETE_VIRTUAL_IP), eq(CategoryType.DELETE), eq(EventSeverity.CRITICAL)); verify(loadBalancerStatusHistoryService).save(ACCOUNT_ID, LOAD_BALANCER_ID, LoadBalancerStatus.ERROR); }
@Test(expected = IllegalArgumentException.class) public void assertGetCellWithNegativeColumnIndex() { memoryResultSetRow.getCell(-1); }
@Test public void testIndexJoinOrder() { PlanBuilder planBuilder = new PlanBuilder(new PlanNodeIdAllocator(), dummyMetadata()); TableScanNode a = planBuilder.tableScan(emptyList(), emptyMap()); TableScanNode b = planBuilder.tableScan(emptyList(), emptyMap()); List<PlanNodeId> order = scheduleOrder(planBuilder.indexJoin(IndexJoinNode.Type.INNER, a, b)); assertEquals(order, ImmutableList.of(b.getId(), a.getId())); }
@Test public void setMyLocationEnabled_shouldRemoveMapDataIfDisabled() throws Exception { overlayManager.setMyLocationEnabled(true); overlayManager.setMyLocationEnabled(false); assertThat(mapDataManager.getMapData()).isEmpty(); }
@Test public void BigDecimalからのconvertテスト() { BigDecimal f = new BigDecimal("255"); Long expected = 255L; Long actual = new LongConverter().convert(f); assertEquals(expected, actual); }
@Test public void testIsThreadSafeTT() { when(mockAccessorFactory.getPlugin(mockContext)).thenReturn(mockAccessor); when(mockResolverFactory.getPlugin(mockContext)).thenReturn(mockResolver); when(mockAccessor.isThreadSafe()).thenReturn(true); when(mockResolver.isThreadSafe()).thenReturn(true); bridge = new TestBridge(mockContext, mockAccessorFactory, mockResolverFactory); assertTrue(bridge.isThreadSafe()); }
@Test public void testSimpleBatchIteration() throws IOException { try (FileRecords fileRecords = FileRecords.open(tempFile())) { SimpleRecord firstBatchRecord = new SimpleRecord(3241324L, "a".getBytes(), "foo".getBytes()); SimpleRecord secondBatchRecord = new SimpleRecord(234280L, "b".getBytes(), "bar".getBytes()); fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord)); fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord)); fileRecords.flush(); FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes()); FileChannelRecordBatch firstBatch = logInputStream.nextBatch(); assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecord); assertNoProducerData(firstBatch); FileChannelRecordBatch secondBatch = logInputStream.nextBatch(); assertGenericRecordBatchData(secondBatch, 1L, 234280L, secondBatchRecord); assertNoProducerData(secondBatch); assertNull(logInputStream.nextBatch()); } }
@Test public void testCapitalizeFirst() throws Exception { assertEquals("", MessageGenerator.capitalizeFirst("")); assertEquals("AbC", MessageGenerator.capitalizeFirst("abC")); }
@Test public void convertExpiredTokenVerifyReturnValue() { AuthorisationData authorisationData = service.convertIdentifyingToken(IDENTIFYING_TOKEN_EXPIRED); assertEquals(IDENTIFYING_TOKEN_EXPIRED.getToken(), authorisationData.getIdTag()); assertEquals(AuthorizationStatus.EXPIRED, authorisationData.getIdTagInfo().getStatus()); }
@Test public void testReadForTargetBytesTargetOffsetTargetLen_throw_exception_if_target_length_less_than_zero() throws Exception { byte[] targetBytes = new byte[1001]; expectThrows(P4JavaError.class, () -> rpcInputStream.read(targetBytes, 0, -1)); }
@Test public final void test_isValidEnums_happyPath() { List<RangerEnumDef> input = _utils.createEnumDefs(enums_good); assertTrue(_validator.isValidEnums(input, _failures)); assertTrue(_failures.isEmpty()); }
@Test public void testSetOozieUrl() { namedClusterBridge.setOozieUrl( oozieUrl ); verify( legacyNamedCluster ).setOozieUrl( oozieUrl ); }
@Test public void assertOthersDeletesAreVisible() { assertFalse(metaData.othersDeletesAreVisible(0)); }
@Test public void testExpandForCopyingTable() { CopyTable operation = SchemaOperations.copyTable("users", "customers"); changelog.addChangeSet("Michael de Jong", "Copying 'users' table to 'customers'.", operation); migrator.migrate(catalog, refLog, changelog.getLastAdded(), operation); String refId = refLog.getTableRef(changelog.getLastAdded(), "customers").getRefId(); Table ghostTable = catalog.getTable(refId); Table expectedGhostTable = new Table(refId) .addColumn(new Column("id", integer(), IDENTITY, NOT_NULL, AUTO_INCREMENT)) .addColumn(new Column("name", varchar(255), NOT_NULL)); Table originalTable = catalog.getTable("users"); Table expectedOriginalTable = new Table("users") .addColumn(new Column("id", integer(), IDENTITY, NOT_NULL, AUTO_INCREMENT)) .addColumn(new Column("name", varchar(255), NOT_NULL)); assertEquals(expectedGhostTable, ghostTable); assertEquals(expectedOriginalTable, originalTable); assertEquals("customers", refLog.getTableRefById(ghostTable.getName()).getName()); }
@Test public void filterResultsWithTwoColumnsButNotString() { List<Object> results = Collections.singletonList(new Object[]{ 23, "Path.To.Page" }); assertSame(results, this.filter.filterResults(results)); }
@Test public void testCreateEventModel() { AlertMessageEntity message = new AlertMessageEntity("Test", "test", Lists.newArrayList("test-list")); message.setAlert(new AlertEntity(new HostPort("192.168.0.1", 1234), dcNames[0], "clusterId", "shardId", "message", ALERT_TYPE.CLIENT_INSTANCE_NOT_OK)); }
@Test public void bytesToHexDump_hello_returns_68_65_6c_6c_6f() { assertThat(bytesToHexDump("hello".getBytes())).isEqualTo("68 65 6c 6c 6f"); }
@Test public void testGetApplicationFolder() { assertEquals(new File(rootPath + "/applications/manager"), coreService.getApplicationFolder(environment, "manager")); }
@Test public void testGetPrincipalLocalGroup() throws Exception { Group gr = createTestGroup(); assertNull(principalProvider.getPrincipal(gr.getPrincipal().getName())); }
@Test public void testReturnExisting() throws GeneralSecurityException, IOException { Consumer consumer = mock(Consumer.class); IdentityCertificate mockic = mock(IdentityCertificate.class); when(consumer.getIdCert()).thenReturn(mockic); when(idcur.get(mockic.getId())).thenReturn(mockic); when(idcur.get(consumer.getId())).thenReturn(mockic); IdentityCertificate ic = dicsa.generateIdentityCert(consumer); assertNotNull(ic); assertEquals(ic, mockic); }
@Test public void testGetTrades() { assertNotNull(trades.getTrades()); assertEquals(1, trades.getTrades().size()); }
@Test public void extractPeerObject_failsBeforeHandshake() throws GeneralSecurityException { try { clientHandshaker.extractPeerObject(); fail("Exception expected"); } catch (IllegalStateException ex) { } }
@Test public void testGetCytoPanel() { assertEquals(cp, event.getCytoPanel()); }
@Test public void testPT4HOrPT6H() { NotificationRow notification = new NotificationRow(); notification.setExpiresAt("PT4H,PT6H"); boolean result = validator.isValid(notification, context); assertTrue(result); assertTrue(errorMessages.isEmpty()); }
@Test void aesCodecShouldDecryptPayloadContentWhenReading() throws Exception { Payload payload = new Payload(Payloads.newInputStreamPayload(new ByteArrayInputStream(ENCRYPTED_BYTES)), Optional.empty()); InputStream actual = codec().read(payload); assertThat(actual).hasSameContentAs(expected()); }
@Test public void testGetBeanNames() throws Exception { List<String> names = springJavaConfigService.getBeanNames(GetBeanDefinitionConfig.class, project, JmsEndpoint.class); Assert.assertEquals(names.size(), 2L); Assert.assertTrue(names.stream().anyMatch(name -> name.equals("jmsInboundEndpoint"))); Assert.assertTrue(names.stream().anyMatch(name -> name.equals("jmsOutboundEndpoint"))); names = springJavaConfigService.getBeanNames(GetBeanDefinitionConfig.class, project, WebServiceClient.class); Assert.assertEquals(names.size(), 0L); names = springJavaConfigService.getBeanNames(GetBeanDefinitionConfig.class, project, TestActor.class); Assert.assertEquals(names.size(), 1L); Assert.assertTrue(names.stream().anyMatch(name -> name.equals("testActor"))); }
@Test public void testProcessAnalysisAnswers() throws IOException { String questionName = "q"; String columnName = "issue"; int maxRows = 1; int rowOffset = 0; TableAnswerElement table = new TableAnswerElement( new TableMetadata( ImmutableList.of(new ColumnMetadata(columnName, Schema.ISSUE, "foobar")))); table.addRow(Row.of(columnName, new Issue("blah", 5, new Issue.Type("m", "n")))); Answer answer = new Answer(); answer.addAnswerElement(table); answer.setStatus(AnswerStatus.SUCCESS); String answerStr = BatfishObjectMapper.writePrettyString(answer); Map<String, String> rawAnswers = ImmutableMap.of(questionName, answerStr); AnswerRowsOptions options = new AnswerRowsOptions( ImmutableSet.of(columnName), ImmutableList.of(), maxRows, rowOffset, ImmutableList.of(new ColumnSortOption(columnName, true)), false); Map<String, AnswerRowsOptions> analysisAnswersOptions = ImmutableMap.of(questionName, options); Map<String, Answer> processedAnswers = _manager.processAnalysisAnswers(rawAnswers, analysisAnswersOptions); List<Row> processedRows = ((TableAnswerElement) processedAnswers.get(questionName).getAnswerElements().get(0)) .getRowsList(); assertThat(processedRows, equalTo(table.getRowsList())); }
@Test public void testGetWorkflowReport() { assertNotNull(execution.getWorkflowReport()); }
@Test public void testGetPropertyBooleanReturnsCorrectValue() { AppProperties properties = new AppProperties(); Boolean value = properties.getPropertyBoolean(PROP_KEY); Assert.assertNotNull(value); Assert.assertFalse(value); properties.setProperty(PROP_KEY, TEST_VAL_TRUE); value = properties.getPropertyBoolean(PROP_KEY); Assert.assertNotNull(value); Assert.assertTrue(value); }
@Test public void isOversizedAttribute() { final String attributeName = "testAttribute"; when(_nextVersionLegacyConfiguredObject.isOversizedAttribute(attributeName)).thenReturn(true); assertThat(_object.isOversizedAttribute(attributeName), is(equalTo(true))); verify(_nextVersionLegacyConfiguredObject).isOversizedAttribute(attributeName); }
@Test public void testAcceptValidParameter2() { final ConsoleState state = new ConsoleState(null); state.setInput("get something"); assertThat(command.accept(state), is(true)); }
@Test public void shouldFailToParseEmptyString() { assertThatThrownBy(() -> Interval.parse("")).isInstanceOf(DateTimeParseException.class); }
@Test(expected = IllegalArgumentException.class) public void testLoginUserNoName() throws P4JavaException { IUser user = mock(IUser.class); when(user.getLoginName()).thenReturn(""); LoginOptions options = new LoginOptions().setHost(TEST_HOST).setDontWriteTicket(true) .setAllHosts(true); StringBuffer ticketBuffer = new StringBuffer(); loginDelegator.login(user, ticketBuffer, options); }
@Test public void unknowAncestorsHashesUsingUncles() { BlockChainBuilder blockChainBuilder = new BlockChainBuilder(); BlockGenerator blockGenerator = new BlockGenerator(); Genesis genesis = blockGenerator.getGenesisBlock(); BlockChainImpl blockChain = blockChainBuilder.setGenesis(genesis).build(); BlockStore store = new BlockStore(); genesis.setStateRoot(blockChain.getRepository().getRoot()); genesis.flushRLP(); BlockBuilder blockBuilder = new BlockBuilder(blockChain, blockGenerator); Block block1 = blockBuilder.parent(genesis).build(); Block block1b = blockBuilder.parent(genesis).build(); Block block2 = blockBuilder.parent(block1).build(); Block uncle1 = blockBuilder.parent(block1).build(); Block uncle2 = blockBuilder.parent(block1).build(); List<BlockHeader> uncles = new ArrayList<>(); uncles.add(uncle1.getHeader()); uncles.add(uncle2.getHeader()); Block block3 = blockBuilder.parent(block2).uncles(uncles).build(); store.saveBlock(block3); blockChain.tryToConnect(genesis); blockChain.tryToConnect(block1); blockChain.tryToConnect(block1b); Set<Keccak256> hashes = BlockUtils.unknownAncestorsHashes(genesis.getHash(), blockChain, store); Assert.assertNotNull(hashes); Assert.assertTrue(hashes.isEmpty()); hashes = BlockUtils.unknownAncestorsHashes(block1.getHash(), blockChain, store); Assert.assertNotNull(hashes); Assert.assertTrue(hashes.isEmpty()); hashes = BlockUtils.unknownAncestorsHashes(block1b.getHash(), blockChain, store); Assert.assertNotNull(hashes); Assert.assertTrue(hashes.isEmpty()); hashes = BlockUtils.unknownAncestorsHashes(block2.getHash(), blockChain, store); Assert.assertNotNull(hashes); Assert.assertFalse(hashes.isEmpty()); Assert.assertEquals(1, hashes.size()); Assert.assertTrue(hashes.contains(block2.getHash())); hashes = BlockUtils.unknownAncestorsHashes(block3.getHash(), blockChain, store); Assert.assertNotNull(hashes); Assert.assertFalse(hashes.isEmpty()); Assert.assertEquals(3, hashes.size()); Assert.assertTrue(hashes.contains(block2.getHash())); Assert.assertTrue(hashes.contains(uncle1.getHash())); Assert.assertTrue(hashes.contains(uncle2.getHash())); }
@Test public void testHeader() throws Exception { HttpRequest req = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"); req.headers().add(HeaderNames.ACCEPT_ENCODING, "gzip, deflate"); req.headers().add(HeaderNames.ACCEPT_LANGUAGE, "en-US"); req.headers().add(HeaderNames.ACCEPT_CHARSET, "utf-8"); req.headers().add("test", "a").add("test", "b"); ContextFromVertx context = new ContextFromVertx(vertx, vertx.getOrCreateContext(), accessor, RequestFromVertXTest.create(req)); assertThat(context.headers().containsKey(HeaderNames.ACCEPT_LANGUAGE)).isTrue(); assertThat(context.header(HeaderNames.ACCEPT_LANGUAGE)).isEqualTo("en-US"); assertThat(context.headers().get("test")).containsExactly("a", "b"); assertThat(context.headers("test")).containsExactly("a", "b"); assertThat(context.headers().get("missing")).isNull(); assertThat(context.header("missing")).isNull(); }
@Test public void testCapacityIsExactAboveMinimum() { WritableBuffer buffer = allocator().allocate(9000); assertEquals(0, buffer.readableBytes()); assertEquals(9000, buffer.writableBytes()); }
@Test public void shouldNotThrowExceptionWhenUserNamespaceIsMissing() throws InfrastructureException { String jsonResponse = generateResponse(ROUTE_PREFIX, CLUSTER_URL, NAMESPACE, NAMESPACE_TYPE_CHE, false); when(httpJsonResponse.asString()).thenReturn(jsonResponse); TenantDataCacheKey cacheKey = new TenantDataCacheKey("token", "user"); UserCheTenantData data = cacheLoader.load(cacheKey); assertEquals(data.getRouteBaseSuffix(), ""); assertEquals(data.getClusterUrl(), ""); assertEquals(data.getNamespace(), ""); assertEquals(data.isClusterCapacityExhausted(), false); }
@Test public void moduleProviderDependenciesCircular() { BQModuleProvider testModuleProvider1 = mock(BQModuleProvider.class); BQModuleProvider testModuleProvider2 = mock(BQModuleProvider.class); BQModuleProvider testModuleProvider3 = mock(BQModuleProvider.class); when(testModuleProvider1.dependencies()).thenReturn(asList(testModuleProvider2, testModuleProvider3)); BQModuleMetadata.Builder builder1 = mock(BQModuleMetadata.Builder.class); BQModuleMetadata metadata1 = mock(BQModuleMetadata.class); when(builder1.build()).thenReturn(metadata1); when(testModuleProvider1.moduleBuilder()).thenReturn(builder1); BQModuleMetadata.Builder builder2 = mock(BQModuleMetadata.Builder.class); BQModuleMetadata metadata2 = mock(BQModuleMetadata.class); when(builder2.build()).thenReturn(metadata2); when(testModuleProvider2.moduleBuilder()).thenReturn(builder2); BQModuleMetadata.Builder builder3 = mock(BQModuleMetadata.Builder.class); BQModuleMetadata metadata3 = mock(BQModuleMetadata.class); when(builder3.build()).thenReturn(metadata3); when(testModuleProvider3.moduleBuilder()).thenReturn(builder3); Collection<BQModuleMetadata> bqModuleMetadata = BootiqueUtils.moduleProviderDependencies(singletonList(testModuleProvider1)); assertEquals(3, bqModuleMetadata.size()); assertTrue(bqModuleMetadata.contains(metadata1)); assertTrue(bqModuleMetadata.contains(metadata2)); assertTrue(bqModuleMetadata.contains(metadata3)); verify(testModuleProvider1, times(1)).dependencies(); verify(testModuleProvider1, times(1)).moduleBuilder(); verify(testModuleProvider2, times(1)).dependencies(); verify(testModuleProvider2, times(1)).moduleBuilder(); verify(testModuleProvider3, times(1)).dependencies(); verify(testModuleProvider3, times(1)).moduleBuilder(); verifyNoMoreInteractions(testModuleProvider1, testModuleProvider2, testModuleProvider3); }
@SuppressWarnings("rawtypes") @Test public final void testSubmitBatchCommand() throws InterruptedException { BatcherImpl batcher = new BatcherImpl(2); batcher.setBatchRunner(new RetryingTxnBatchRunner()); batcher.startup(); try { for (int i = 0; i < 100; i++) { batcher.submitBatchCommand(new TestBatchCommand("Test#" + i)); } Thread.sleep(5000); } finally { batcher.shutdown(); } }
@Test(dataProvider = "allCreatedBy") public void testReadStatsBinary(Optional<String> fileCreatedBy) { PrimitiveType varbinary = new PrimitiveType(OPTIONAL, BINARY, "Test column"); Statistics statistics = new Statistics(); statistics.setNull_count(13); statistics.setMin(fromHex("6162")); statistics.setMax(fromHex("DEAD5FC0DE")); assertThat(MetadataReader.readStats(fileCreatedBy, Optional.of(statistics), varbinary)) .isInstanceOfSatisfying(BinaryStatistics.class, columnStatistics -> { assertEquals(columnStatistics.getNumNulls(), 13); assertNull(columnStatistics.getMin()); assertNull(columnStatistics.getMax()); assertNull(columnStatistics.getMinBytes()); assertNull(columnStatistics.getMaxBytes()); assertNull(columnStatistics.genericGetMin()); assertNull(columnStatistics.genericGetMax()); }); statistics = new Statistics(); statistics.setNull_count(13); statistics.setMin_value("a".getBytes(UTF_8)); statistics.setMax_value("é".getBytes(UTF_8)); assertThat(MetadataReader.readStats(fileCreatedBy, Optional.of(statistics), varbinary)) .isInstanceOfSatisfying(BinaryStatistics.class, columnStatistics -> { assertEquals(columnStatistics.getNumNulls(), 13); assertEquals(columnStatistics.getMin().getBytes(), new byte[] {'a'}); assertEquals(columnStatistics.getMax().getBytes(), new byte[] {(byte) 0xC3, (byte) 0xA9}); assertEquals(columnStatistics.getMinBytes(), new byte[] {'a'}); assertEquals(columnStatistics.getMaxBytes(), new byte[] {(byte) 0xC3, (byte) 0xA9}); assertEquals(columnStatistics.genericGetMin().getBytes(), new byte[] {'a'}); assertEquals(columnStatistics.genericGetMax().getBytes(), new byte[] {(byte) 0xC3, (byte) 0xA9}); }); }
@Test public void shouldNotAlterNonStringConfigIfMatchingConfigOverrideExists() { givenTopicConfigs( "peter", overriddenConfigEntry(TopicConfig.RETENTION_MS_CONFIG, "12345"), defaultConfigEntry(TopicConfig.COMPRESSION_TYPE_CONFIG, "snappy") ); final Map<String, ?> overrides = ImmutableMap.of( TopicConfig.RETENTION_MS_CONFIG, 12345L ); final boolean result = kafkaTopicClient.addTopicConfig("peter", overrides); assertThat("should return false", !result); verify(adminClient, never()).incrementalAlterConfigs(any()); }
@Test public void testSerializeEmpty() throws IOException, ClassNotFoundException { EasyMockSupport support = new EasyMockSupport(); @SuppressWarnings("unchecked") ListDataListener<ColumnLabel> listener = support.createMock(ListDataListener.class); support.replayAll(); ColumnLabels model = new ColumnLabels(); ByteArrayOutputStream out = new ByteArrayOutputStream(); ObjectOutputStream objectOut = new ObjectOutputStream(out); objectOut.writeObject(model); ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray()); ObjectInputStream objectIn = new ObjectInputStream(in); ColumnLabels actual = (ColumnLabels)objectIn.readObject(); actual.getColumnsInLabel().addChangeListener(listener); support.verifyAll(); }
@Test public void testWriteBuffer() throws IOException { Writer writer = mock(Writer.class); assertTrue(this.selectorDoc.writeSelectorDocumentationToFile("foo", writer)); }
@Test public void executeMcsBasedTask_taskIsNotKilled_verifyUpdateTaskInfoInCassandra() { task.addDataEntry(InputDataType.FILE_URLS, Collections.singletonList(FILE_URL_1)); submiter.execute(submitParameters); verify(taskStatusUpdater).updateStatusExpectedSize(eq(TASK_ID), eq(String.valueOf(TaskState.QUEUED)),eq(1)); }
@Test public void schemaEquality_same_equal() { ForeignKeyBundle bundle = new ForeignKeyBundle("table", "onDelete", "onUpdate", Arrays.asList("col1", "col2"), Arrays.asList("target1", "target2")); ForeignKeyBundle other = new ForeignKeyBundle("table", "onDelete", "onUpdate", Arrays.asList("col1", "col2"), Arrays.asList("target1", "target2")); assertThat(bundle.isSchemaEqual(other), is(true)); }
@Test public void secondStore_NodeExist_PropertyExist_DifferentValue() throws Exception{ defnb.indexRule("nt:base").property("foo").unique(); NodeBuilder rootBuilder = root.builder(); rootBuilder.child("b").setProperty("foo", "bar2"); root = rootBuilder.getNodeState(); PropertyIndexUpdateCallback callback = newCallback(); propertyUpdated(callback, "/a", "foo", "bar"); callback.getUniquenessConstraintValidator() .setSecondStore((propertyRelativePath, value) -> singletonList("/b")); callback.done(); }
@Test public void containsSimilarString() { assertTrue(similarityChecker.containsSimilarString(ImmutableSet.of("danmarks", "tekniske", "universitet"), "university", 0.8)); }
@Test public void testSonar() { Dataset<Instance> dataset = DatasetFixture.sonar(); assertEquals(60, dataset.attributeCount()); assertEquals(208, dataset.size()); }
@SuppressWarnings("unchecked") @Test public void testHandleSpecialField351() throws Throwable { int[] sequence = new int[0]; VISA1Packager vISA1Packager = new VISA1Packager(sequence, 100, "testVISA1PackagerBadResultCode", "testVISA1PackagerOkPattern"); ByteArrayOutputStream bout = new ByteArrayOutputStream(100); int result = vISA1Packager.handleSpecialField35(new ISOMsg(100), bout); assertEquals(0, result, "result"); }
@Test public void testIsAssumeIdentity() { policy.setAnonymousAccessAllowed(true); assertTrue(policy.isAssumeIdentity(null)); }
@Test(expected = IllegalArgumentException.class) public void testTileInvalidLat1() { GeoSpatialUtils.tile(GeoSpatialUtils.MIN_LATITUDE - 0.1, 0, 4); }
@Test @RunWithCustomExecutor public void givenTestFindByFakeID() throws Exception { VitamThreadUtils.getVitamSession().setTenantId(TENANT_ID); final SelectParserSingle parser = new SelectParserSingle(new SingleVarNameAdapter()); final Select select = new Select(); parser.parse(select.getFinalSelect()); parser.addCondition(QueryHelper.eq("#id", "fakeid")); final JsonNode queryDsl = parser.getRequest().getFinalSelect(); final RequestResponseOK<ProfileModel> profileModelList = profileService.findProfiles(queryDsl); assertThat(profileModelList.getResults()).isEmpty(); }
@Test public void testDifferentGet() { PeerRoutingInformationBase base1 = manager.peerRoutingInformationBase("foo"); PeerRoutingInformationBase base2 = manager.peerRoutingInformationBase("bar"); Assert.assertFalse(base1.equals(base2)); Assert.assertEquals(2, createCatcher.pribSize()); Assert.assertEquals(1, createCatcher.getPRIBCreatedCount("foo")); Assert.assertEquals(1, createCatcher.getPRIBCreatedCount("bar")); }
@SuppressWarnings("unchecked") @Test public void testGetQueries() throws IOException, BlurException, TException { Iface client = Config.getClient(); UserContext.setUser(new User("testUser",null)); BlurQuery query = new BlurQuery( new Query("fam0.col0:*", true, ScoreType.SUPER, null, null), null, null, false, 0, 10, 1, 2000, UUID.randomUUID().toString(), "testUser", false, System.currentTimeMillis(), null, null); int currentCount = 0; { Map<String, Object> queries = QueryUtil.getQueries(); Object o = queries.get("queries"); if (o != null) { currentCount = ((List<Map<String, Object>>) o).size(); } } client.query("queryUnitTable", query); UserContext.reset(); Map<String, Object> queries = QueryUtil.getQueries(); assertEquals(0, queries.get("slowQueries")); assertEquals(currentCount + 1, ((List<Map<String, Object>>) queries.get("queries")).size()); assertEquals("testUser", ((List<Map<String, Object>>) queries.get("queries")).get(0).get("user")); }
@Test public void get_put() { this.testObj.put("A", 1); Assert.assertEquals(MutableList.of(1), this.testObj.get("A")); Assert.assertEquals(1, this.testObj.size()); this.testObj.put("A", 2); Assert.assertEquals(MutableList.of(1, 2), this.testObj.get("A")); Assert.assertEquals(2, this.testObj.size()); this.testObj.put("A", 1); Assert.assertEquals(MutableList.of(1, 2, 1), this.testObj.get("A")); Assert.assertEquals(3, this.testObj.size()); this.testObj.put("B", 10); Assert.assertEquals(MutableList.of(10), this.testObj.get("B")); Assert.assertEquals(4, this.testObj.size()); this.testObj.put("B", 11); Assert.assertEquals(MutableList.of(10, 11), this.testObj.get("B")); Assert.assertEquals(5, this.testObj.size()); this.testObj.put("A", 2); Assert.assertEquals(MutableList.of(1, 2, 1, 2), this.testObj.get("A")); Assert.assertEquals(6, this.testObj.size()); }
@Test public void builderHonorsFetchTranslations() { C10NInspector inspector = C10NTools.inspectorBuilder() .checkLocales(Locale.ENGLISH, Locale.FRENCH) .fetchTranslations(false) .module(C10N.configure(new DefaultC10NAnnotations())) .build(); List<C10NUnit> units = inspector.inspect(getClass().getPackage().getName()); checkUnit(units, C10NToolsTestMsg.class, method("greeting", String.class), anyKey(), annotationTr(Locale.ENGLISH, null), annotationTr(Locale.FRENCH, null)); }
@Test(groups = "unit") public void requestRateTooLarge_BubbleUp() { long lsn = 651175; long globalCommittedLsn = 651174; String partitionKeyRangeId = "73"; RequestRateTooLargeException requestTooLargeException = new RequestRateTooLargeException(); requestTooLargeException.getResponseHeaders().put(HttpConstants.HttpHeaders.SESSION_TOKEN, partitionKeyRangeId + ":-1#" + lsn); requestTooLargeException.getResponseHeaders().put(WFConstants.BackendHeaders.LSN, Long.toString(651175)); requestTooLargeException.getResponseHeaders().put(WFConstants.BackendHeaders.LOCAL_LSN, Long.toString(651175)); requestTooLargeException.getResponseHeaders().put(WFConstants.BackendHeaders.GLOBAL_COMMITTED_LSN, Long.toString(globalCommittedLsn)); TransportClientWrapper transportClientWrapper = new TransportClientWrapper.Builder.ReplicaResponseBuilder .SequentialBuilder() .then(requestTooLargeException) .then(requestTooLargeException) .then(requestTooLargeException) .then(requestTooLargeException) .build(); Uri primaryUri = Uri.create("primary"); Uri secondaryUri1 = Uri.create("secondary1"); Uri secondaryUri2 = Uri.create("secondary2"); Uri secondaryUri3 = Uri.create("secondary3"); AddressSelectorWrapper addressSelectorWrapper = AddressSelectorWrapper.Builder.Simple.create() .withPrimary(primaryUri) .withSecondary(ImmutableList.of(secondaryUri1, secondaryUri2, secondaryUri3)) .build(); ISessionContainer sessionContainer = Mockito.mock(ISessionContainer.class); TimeoutHelper timeoutHelper = Mockito.mock(TimeoutHelper.class); RxDocumentServiceRequest dsr = RxDocumentServiceRequest.createFromName( OperationType.Read, "/dbs/db/colls/col/docs/docId", ResourceType.Document); dsr.getHeaders().put(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL, ConsistencyLevel.Session.name()); dsr.requestContext = new DocumentServiceRequestContext(); Utils.ValueHolder<ISessionToken> sessionToken = Utils.ValueHolder.initialize(null); assertThat(VectorSessionToken.tryCreate("-1#" + lsn , sessionToken)).isTrue(); dsr.requestContext.timeoutHelper = timeoutHelper; dsr.requestContext.resolvedPartitionKeyRange = partitionKeyRangeWithId(partitionKeyRangeId); dsr.requestContext.requestChargeTracker = new RequestChargeTracker(); Mockito.doReturn(sessionToken.v).when(sessionContainer).resolvePartitionLocalSessionToken(Mockito.eq(dsr), Mockito.anyString()); Configs configs = new Configs(); GatewayServiceConfiguratorReaderMock gatewayServiceConfigurationReaderWrapper = GatewayServiceConfiguratorReaderMock.from(ConsistencyLevel.Strong, 4, 3, 4, 3); IAuthorizationTokenProvider authTokenProvider = Mockito.mock(IAuthorizationTokenProvider.class); ConsistencyReader consistencyReader = new ConsistencyReader(configs, addressSelectorWrapper.addressSelector, sessionContainer, transportClientWrapper.transportClient, gatewayServiceConfigurationReaderWrapper.gatewayServiceConfigurationReader, authTokenProvider); Single<StoreResponse> storeResponseSingle = consistencyReader.readAsync(dsr, timeoutHelper, false, false); FailureValidator failureValidator = FailureValidator.builder().instanceOf(RequestRateTooLargeException.class).unknownSubStatusCode().build(); validateException(storeResponseSingle, failureValidator); }
@Test public void testStarAs() { VirtualDatasetState ds = extract( getQueryFromSQL("select * from " + table + " as foo")); assertEquals( new VirtualDatasetState() .setFrom(new FromTable(table).setAlias("foo").wrap()).setContextList(Collections.<String>emptyList()) .setReferredTablesList(Arrays.asList("tpch/supplier.parquet")) .setColumnsList(cols("s_suppkey", "s_name", "s_address", "s_nationkey", "s_phone", "s_acctbal", "s_comment")), ds); }
@Test public void testGetNamespace() { assertThat("testGetNamespace 0", ms.getNamespace(), notNullValue()); assertThat("testGetNamespace 1", ms.getNamespace(), not(equalTo(""))); }
@Test void testConvertToJson() { assertEquals(STRING, convertToJson("\"a\"", "x").getNodeType()); assertEquals(NUMBER, convertToJson(1, "x").getNodeType()); assertEquals(NUMBER, convertToJson("1", "x").getNodeType()); assertEquals(NUMBER, convertToJson(1.0, "x").getNodeType()); assertEquals(NUMBER, convertToJson("1.0", "x").getNodeType()); assertEquals(OBJECT, convertToJson("{\"a\":1}", "x").getNodeType()); assertEquals(ARRAY, convertToJson("[1 ,2, 3]", "x").getNodeType()); assertEquals(BOOLEAN, convertToJson("true", "x").getNodeType()); assertEquals(BOOLEAN, convertToJson(true, "x").getNodeType()); assertEquals(BOOLEAN, convertToJson("false", "x").getNodeType()); assertEquals(BOOLEAN, convertToJson(false, "x").getNodeType()); assertTrue(convertToJson("null", "x").isNull()); assertTrue(convertToJson(null, "x").isNull()); }
@Test public void testRegistersRootPath() throws Exception { Path rootPath = mock(Path.class); WatchKey watchKeyForRootPath = mock(WatchKey.class); WatchService watchService = mock(WatchService.class); when(rootPath.register(eq(watchService), Matchers.<WatchEvent.Kind>anyVararg())).thenReturn(watchKeyForRootPath); strategy.registerRoot(watchService, rootPath); assertEquals(1, keys.size()); assertTrue(keys.containsKey(watchKeyForRootPath)); assertEquals(rootPath, keys.get(watchKeyForRootPath)); }
@Test public void parseEnableSamplerForDurationMinutesRegExp() { final ControlCommand expected = mock(ControlCommand.class); when(factory.enableSamplerForDuration("^what.*ever.+$", 300L)).thenReturn(expected); final ControlCommand result = testee.parse("sampler ^what.*ever.+$ enable for 5 minutes"); assertSame(expected, result); }
@Test(expected = IllegalArgumentException.class) public void testMix_WithNull() throws Exception { PowerMockito.mockStatic(Logger.class); final double weight = 5d; Vec3 u = new Vec3(3, 4, 5); u.mix(null, weight); fail("Expected an IllegalArgumentException to be thrown."); }
@Test public void countShouldReturnZeroIfUnknownContractNumber() throws Exception { createConsumer(owner); List<String> c = new ArrayList<>(); c.add("unknown-contract"); int count = consumerCurator.countConsumers(owner.getKey(), typeLabels, skus, subscriptionIds, c); assertEquals(0, count); }
@Test(dependsOnMethods = {"initTokenHandler"}) public void replaceTokenWithDotNotationAbsolute() throws BadRequestException { String queryString = "select ${dotnotation:jsonpath} from ${unquoted:_resource} where firstname = ${firstname} and lastname like '${unquoted:lastname}%'"; Map params = new HashMap(); params.put("jsonpath", "/sunset/date"); params.put("_resource", "managed/user"); params.put("firstname", "John"); params.put("lastname", "D"); String result = tokenHandler.replaceTokensWithValues(queryString, params); assertEquals(result, "select sunset.date from managed/user where firstname = 'John' and lastname like 'D%'"); }
@Test public void testParcelableState() { ParseUser.State state = new ParseUser.State.Builder() .objectId("test") .isNew(true) .build(); ParseUser user = ParseObject.from(state); assertTrue(user.isNew()); Parcel parcel = Parcel.obtain(); user.writeToParcel(parcel, 0); parcel.setDataPosition(0); user = (ParseUser) ParseObject.CREATOR.createFromParcel(parcel); assertTrue(user.isNew()); }
@Test public void testMakeOffsetTime() { assertEquals("10:20:00Z", this.dateTimeLib.makeOffsetTime("10:20:00").format(BaseDateTimeLib.FEEL_TIME_FORMAT)); assertEquals("10:20:00Z", this.dateTimeLib.makeOffsetTime("10:20:00Z").format(BaseDateTimeLib.FEEL_TIME_FORMAT)); assertEquals("10:20:00+01:00", this.dateTimeLib.makeOffsetTime("10:20:00+01:00").format(BaseDateTimeLib.FEEL_TIME_FORMAT)); assertEquals("10:20:00-01:00", this.dateTimeLib.makeOffsetTime("10:20:00-01:00").format(BaseDateTimeLib.FEEL_TIME_FORMAT)); assertEquals("10:20:00+01:00", this.dateTimeLib.makeOffsetTime("10:20:00@Europe/Paris").format(BaseDateTimeLib.FEEL_TIME_FORMAT)); assertEquals("10:20:00Z", this.dateTimeLib.makeOffsetTime("10:20:00@UTC").format(BaseDateTimeLib.FEEL_TIME_FORMAT)); }
@Test public void MustInCorrectPrepareWhenIOCResolveThrowException() throws ReadValueException, InvalidArgumentException, ResolutionException, TaskPrepareException, ChangeValueException { IObject query = mock(IObject.class); IObject document = mock(IObject.class); when(documentField.in(query)).thenReturn(document); String collectionName = "example"; IKey upsertTaskKey = mock(IKey.class); when(Keys.getOrAdd("db.collection.upsert")).thenReturn(upsertTaskKey); when(collectionNameField.in(query)).thenReturn(collectionName); when(IOC.resolve(upsertTaskKey, connection, collectionName, document)).thenThrow(new ResolutionException("")); try { testTask.prepare(query); } catch (TaskPrepareException e) { verify(documentField).in(query); verify(doneFlagField).out(document, true); verifyStatic(); Keys.getOrAdd("db.collection.upsert"); verifyStatic(); IOC.resolve(upsertTaskKey, connection, collectionName, document); return; } assertTrue(false); }
@Test public void testFragmenterErrorsWhenPathDoesNotExist() throws Exception { expectedException.expect(InvalidInputException.class); expectedException.expectMessage("Input path does not exist:"); String path = this.getClass().getClassLoader().getResource("csv/").getPath(); RequestContext context = new RequestContext(); context.setConfig("default"); context.setUser("test-user"); context.setProfileScheme("localfile"); context.setDataSource(path + "non-existent"); Fragmenter fragmenter = new HdfsFileFragmenter(); fragmenter.initialize(context); fragmenter.getFragments(); }
@Test public void testDesEncrypt() { try { assertEquals("7772841DC6099402", desEncrypt("123456")); } catch (Exception e) { e.printStackTrace(); } }
@Test public void testSortByDistance() throws Exception { NodeBase[] testNodes = new NodeBase[4]; testNodes[0] = dataNodes[1]; testNodes[1] = dataNodes[2]; testNodes[2] = dataNodes[3]; testNodes[3] = dataNodes[0]; cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length, 0xDEADBEEF, false); assertTrue(testNodes[0] == dataNodes[0]); assertTrue(testNodes[1] == dataNodes[1]); assertTrue(testNodes[2] == dataNodes[2]); assertTrue(testNodes[3] == dataNodes[3]); testNodes[0] = dataNodes[3]; testNodes[1] = dataNodes[4]; testNodes[2] = dataNodes[1]; testNodes[3] = dataNodes[0]; cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length, 0xDEADBEEF, false); assertTrue(testNodes[0] == dataNodes[0]); assertTrue(testNodes[1] == dataNodes[1]); testNodes[0] = dataNodes[5]; testNodes[1] = dataNodes[3]; testNodes[2] = dataNodes[2]; testNodes[3] = dataNodes[0]; cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length, 0xDEADBEEF, false); assertTrue(testNodes[0] == dataNodes[0]); assertTrue(testNodes[1] == dataNodes[2]); testNodes[0] = dataNodes[6]; testNodes[1] = dataNodes[7]; testNodes[2] = dataNodes[2]; testNodes[3] = dataNodes[0]; cluster.sortByDistance(computeNode, testNodes, testNodes.length, 0xDEADBEEF, false); assertTrue(testNodes[0] == dataNodes[0]); assertTrue(testNodes[1] == dataNodes[2]); }
@Test public void shouldAddToppingToRightHalfAndLoadToppingOptions() { when(mockOrderService.loadPizza(1L)) .thenReturn(currentPizza); Topping sausage = new Topping("Sausage", BigDecimal.ZERO); when(mockMenuService.loadTopping(1L)) .thenReturn(sausage); expectedUpdatePizza.addRightTopping(sausage); ChooseToppingsViewHelper helper = new ChooseToppingsViewHelper( expectedToppings, expectedUpdatePizza ); String view = orderController.addTopping(1L, 1L, ChooseToppingsViewHelperLocation.RIGHT, modelMap); verify(mockOrderService).loadPizza(1L); verify(mockMenuService).loadTopping(1L); verify(mockOrderService).updatePizza(expectedUpdatePizza); verify(mockMenuService).loadToppingOptions(); assertThat(modelMap.get("helper"), is(equalTo(helper))); assertThat(view, is(equalTo("chooseToppings"))); }
@Test public void testToJson() { JsonNodeFactory jsonNodeFactory = new JsonNodeFactory(true); JsonNode jsonNode = doubleType.toJson(jsonNodeFactory, Double.MAX_VALUE); assertTrue(new Double(jsonNode.asDouble()).equals(Double.MAX_VALUE)); }
@Test public void testConvertLong() { Object[] input = {String.valueOf(Long.MIN_VALUE), "-17", "-1", "0", "1", "17", String.valueOf(Long.MAX_VALUE), new Byte((byte)7), new Short((short)8), new Integer(9), new Long(10), new Float(11.1), new Double(12.2), Boolean.TRUE, Boolean.FALSE}; Long[] expected = {new Long(Long.MIN_VALUE), new Long(-17), new Long(-1), new Long(0), new Long(1), new Long(17), new Long(Long.MAX_VALUE), new Long(7), new Long(8), new Long(9), new Long(10), new Long(11), new Long(12), new Long(1), new Long(0)}; for (int i = 0; i < expected.length; i++) { assertEquals(input[i].getClass().getName() + " to Long", expected[i], converter.convert(input[i], Long.class, null)); assertEquals(input[i].getClass().getName() + " to long", expected[i], converter.convert(input[i], Long.TYPE, null)); } }
@Test public void updateContributorsTest() { final Space space = new Space("space"); doReturn(space).when(repository).getSpace(); doReturn("alias").when(repository).getAlias(); doReturn(repository).when(configuredRepositories).getRepositoryByRepositoryAlias(any(), any()); final SpaceConfigStorage spaceConfigStorage = mock(SpaceConfigStorage.class); doReturn(new SpaceInfo("space", "Test space", "defaultGroupId", Collections.emptyList(), new ArrayList<>(Arrays.asList(new RepositoryInfo("alias", false, new RepositoryConfiguration()))), Collections.emptyList())).when(spaceConfigStorage).loadSpaceInfo(); doReturn(true) .when(spaceConfigStorage).isInitialized(); when(registry.get(anyString())).thenReturn(spaceConfigStorage); when(registry.getBatch(anyString())).thenReturn(new SpaceConfigStorageRegistryImpl.SpaceStorageBatchImpl(spaceConfigStorage)); String username = "admin1"; repositoryService.updateContributors(repository, Collections.singletonList(new Contributor(username, ContributorType.OWNER))); verify(updatedEvent).fire(captor.capture()); assertEquals("alias", captor.getValue().getRepository().getAlias()); assertEquals("space", captor.getValue().getRepository().getSpace().getName()); verify(repositoryService).saveRepositoryConfig(eq("space"), configCaptor.capture()); assertEquals(username, configCaptor.getValue().getContributors().get(0).getUsername()); assertEquals(ContributorType.OWNER, configCaptor.getValue().getContributors().get(0).getType()); verify(spaceConfigStorage).startBatch(); verify(spaceConfigStorage).saveSpaceInfo(any()); verify(spaceConfigStorage).endBatch(); }
@Test public void testExtractValidMethods() { List<Method> filteredMethods = MethodFilter.extractValidMethods(greeterContractClass); filteredMethods.forEach(m -> assertFalse(m.getName().toLowerCase().contains("event"))); }
@Test public void testIsValid() { SeLionElement element = new SeLionElement("com.foo.Bar"); SeLionElementSet elementSet = new DummySeLionElementSet(new SeLionElement[] { element }); assertTrue(elementSet.isValid("Bar")); assertFalse(elementSet.isValid("Baz")); }
@Test public void emit_default_style() { DecimalOptionFieldAdapter adapter = DecimalOptionFieldAdapter.builder().build(); checkEmit(adapter, new DecimalOption(new BigDecimal(BigInteger.valueOf(12), -10)), "1.2E+11"); }
@Test public void setValueShort() throws NoSuchMethodException, SecurityException, InvocationTargetException { Method setter = MyModuleMock.class.getMethod("setMockShort", Short.class); Property p = new Property(new MyModuleMock(), null, Short.TYPE, null, setter, Collections.<Annotation> emptySet()); p.setValue("250"); }
@Test public void getDistances() { Assert.assertNull(durationsMatrixResponse.getDistances()); Assert.assertArrayEquals(new Double[]{0.0, 1.0, 2.0}, distancesMatrixResponse.getDistances()[0]); Assert.assertArrayEquals(new Double[]{3.0,4.0,5.0}, combinedMatrixResponse.getDistances()[1]); }
@Test public void testToString() { assertTrue(getTestObject().toString().contains("SchemaImplementationQuery")); }
@Test public void testAddNoteToRow() throws Exception { store.addNoteToRow(10, new Note("A")); AssertJUnit.assertEquals("A", store.getNote(10).getNote()); }
@Test public void testMatchIpRangeMatchWhenIpWrongException() throws UnknownHostException { UnknownHostException thrown = assertThrows(UnknownHostException.class, () -> NetUtils.matchIpRange("192.168.1.63", "192.168.1.ff", 90)); assertTrue(thrown.getMessage().contains("192.168.1.ff")); }
@Test public void updateProjectWhenPartnersChange_thereAreOnlyRejectedDocuments() { List<ProjectDocument> documents = Collections.singletonList(projectDocument); when(projectDocumentRepository.findAllByProjectId(1L)).thenReturn(documents); service.updateProjectWhenPartnersChange(1L); verify(projectDocumentRepository, times(0)).saveAll(any()); }
@Test public void testGetDefaultValue() { Object defaultValue = AvroCompatibilityHelper.getDefaultValue(_schema.getField("strField")); Assert.assertEquals(defaultValue, new Utf8("str")); }
@Test public void failure_commit() { Assume.assumeTrue( "This test only makes sense when commit is forced", DocumentCommitStrategy.FORCE.equals( commitStrategy ) ); Long work1Result = 42L; Long work2Result = 41L; Long work3Result = 43L; Capture<CompletableFuture<Long>> work1FutureCapture = Capture.newInstance(); Capture<CompletableFuture<Long>> work2FutureCapture = Capture.newInstance(); Capture<CompletableFuture<Long>> work3FutureCapture = Capture.newInstance(); CompletableFuture<IndexIndexingPlanExecutionReport<StubEntityReference>> planExecutionFuture; resetAll(); LuceneIndexIndexingPlanExecution<StubEntityReference> execution = new LuceneIndexIndexingPlanExecution<>( orchestratorMock, entityReferenceFactoryMock, commitStrategy, refreshStrategy, createWorkMocks( 3 ) ); replayAll(); verifyAll(); resetAll(); orchestratorMock.submit( capture( work1FutureCapture ), eq( workMocks.get( 0 ) ) ); orchestratorMock.submit( capture( work2FutureCapture ), eq( workMocks.get( 1 ) ) ); orchestratorMock.submit( capture( work3FutureCapture ), eq( workMocks.get( 2 ) ) ); replayAll(); planExecutionFuture = execution.execute(); verifyAll(); resetAll(); replayAll(); work2FutureCapture.getValue().complete( work2Result ); work1FutureCapture.getValue().complete( work1Result ); verifyAll(); FutureAssert.assertThat( planExecutionFuture ).isPending(); RuntimeException commitException = new RuntimeException( "Some message" ); resetAll(); orchestratorMock.forceCommitInCurrentThread(); expectLastCall().andThrow( commitException ); expectWorkGetInfo( 0, 1, 2 ); replayAll(); work3FutureCapture.getValue().complete( work3Result ); verifyAll(); FutureAssert.assertThat( planExecutionFuture ).isSuccessful( report -> { assertThat( report ).isNotNull(); SoftAssertions.assertSoftly( softly -> { softly.assertThat( report.throwable() ).containsSame( commitException ); softly.assertThat( report.failingEntityReferences() ) .containsExactly( entityReference( 0 ), entityReference( 1 ), entityReference( 2 ) ); } ); } ); }
@Test void getGroupName() { MavenMetadata mavenMetadata = MavenMetadata.ofSystemPath(DEPOSITORY_PATH); assertEquals(mavenMetadata.getGroupName(), "org.panda-lang"); }
@Test public void testGetMediaInfoIdWithoutPrefix() throws IOException, MediaWikiApiErrorException { Map<String, String> parameters = new HashMap<>(); parameters.put("action", "query"); parameters.put("format", "json"); parameters.put("titles", "File:Albert Einstein Head.jpg"); con.setWebResourceFromPath(parameters, getClass(), "/query-Albert Einstein Head.jpg.json", CompressionType.NONE); MediaInfoIdValue result = wdf.getMediaInfoIdByFileName("Albert Einstein Head.jpg"); assertEquals("M925243", result.getId()); }
@Test public void evaluate_shouldCalculateEligibility() throws Exception { Program hivProgram = MetadataUtils.existing(Program.class, HivMetadata._Program.HIV); TestUtils.enrollInProgram(TestUtils.getPatient(6), hivProgram, TestUtils.date(2011, 1, 1)); TestUtils.enrollInProgram(TestUtils.getPatient(7), hivProgram, TestUtils.date(2011, 1, 1)); TestUtils.enrollInProgram(TestUtils.getPatient(8), hivProgram, TestUtils.date(2011, 1, 1)); Concept cd4 = Dictionary.getConcept(Dictionary.CD4_COUNT); TestUtils.saveObs(TestUtils.getPatient(6), cd4, 1001, TestUtils.date(2015, 1, 1)); TestUtils.saveObs(TestUtils.getPatient(7), cd4, 101, TestUtils.date(2011, 1, 1)); TestUtils.saveObs(TestUtils.getPatient(8), cd4, 101, TestUtils.date(2011, 1, 1)); Concept stavudine = Dictionary.getConcept(Dictionary.STAVUDINE); TestUtils.saveDrugOrder(TestUtils.getPatient(8), stavudine, TestUtils.date(2011, 1, 1), null); List<Integer> cohort = Arrays.asList(6, 7, 8, 999); CalculationResultMap resultMap = new EligibleForArtCalculation().evaluate(cohort, null, Context.getService(PatientCalculationService.class).createCalculationContext()); Assert.assertTrue((Boolean) resultMap.get(6).getValue()); Assert.assertTrue((Boolean) resultMap.get(7).getValue()); Assert.assertFalse((Boolean) resultMap.get(8).getValue()); Assert.assertFalse((Boolean) resultMap.get(999).getValue()); }
@Test public void testDefault() throws ServletException { InitializeSessionManagement ism = new InitializeSessionManagement(); Set<Class<?>> classes = Collections.emptySet(); ServletContext context = mock(ServletContext.class); Dynamic dynamic = mock(Dynamic.class); when(context.addFilter(any(String.class), any(Filter.class))).thenReturn(dynamic); when(context.getClassLoader()).thenReturn(this.getClass().getClassLoader()); ism.onStartup(classes, context); verify(context).addFilter(eq("com.amdeus.session.filter"), any(SessionFilter.class)); }
@Test public void sendFailed() { ZonedDateTime now = ZonedDateTime.now(); long applicationId = 7L; String message = "message"; GrantProcess grantProcess = new GrantProcess(applicationId); when(grantProcessRepository.findOneByApplicationId(applicationId)).thenReturn(grantProcess); when(grantProcessRepository.save(grantProcess)).thenReturn(grantProcess); service.sendFailed(applicationId, message); verify(grantProcessRepository).findOneByApplicationId(applicationId); verify(grantProcessRepository).save(createLambdaMatcher(g -> { assertEquals(applicationId, g.getApplicationId()); assertFalse(g.isPending()); assertEquals(message, g.getMessage()); assertNull(g.getSentRequested()); assertNull(g.getSentSucceeded()); assertNotNull(g.getLastProcessed()); })); }
@Test public void testProtect8() throws Throwable { String result = ISOUtil.protect("#<gF=uG!"); assertEquals("#<gF=___", result, "result"); }
@Test(expected = GriffinException.BadRequestException.class) public void testCreateForFailureWithConnectorNull() throws Exception { String measureName = "view_item_hourly"; DataConnector dcSource = createDataConnector(null, "default", "test_data_src", "dt=#YYYYMMdd# AND hour =#HH#"); DataConnector dcTarget = createDataConnector(null, "default", "test_data_tgt", "dt=#YYYYMMdd# AND hour =#HH#"); GriffinMeasure measure = createGriffinMeasure(measureName, dcSource, dcTarget); operator.create(measure); }
@Test public void testRepromptWhenEndingInputWithoutMatchingDigitsPattern() throws InterruptedException, MalformedURLException, ResourceUnavailableException { final Map<String, String> parameters = new HashMap<>(5); parameters.put("na", "2"); parameters.put("ip", "prompt.wav"); parameters.put("rp", "reprompt.wav"); parameters.put("dp", "xxA"); final AudioPlayerImpl player = mock(AudioPlayerImpl.class); final DtmfSinkFacade detector = mock(DtmfSinkFacade.class); final ListeningScheduledExecutorService executor = MoreExecutors.listeningDecorator(threadPool); final MgcpEventObserver observer = mock(MgcpEventObserver.class); final PlayCollect pc = new PlayCollect(player, detector, 1, parameters, executor); final ArgumentCaptor<MgcpEvent> eventCaptor = ArgumentCaptor.forClass(MgcpEvent.class); pc.observe(observer); pc.execute(); Thread.sleep(20); pc.playerListener.process(new AudioPlayerEvent(player, PlayerEvent.STOP)); Thread.sleep(10); pc.detectorObserver.onDtmfEvent(new DtmfEvent("1")); pc.detectorObserver.onDtmfEvent(new DtmfEvent("2")); pc.detectorObserver.onDtmfEvent(new DtmfEvent("B")); pc.detectorObserver.onDtmfEvent(new DtmfEvent("#")); Thread.sleep(20); pc.playerListener.process(new AudioPlayerEvent(player, PlayerEvent.STOP)); Thread.sleep(10); pc.detectorObserver.onDtmfEvent(new DtmfEvent("1")); pc.detectorObserver.onDtmfEvent(new DtmfEvent("2")); pc.detectorObserver.onDtmfEvent(new DtmfEvent("A")); pc.detectorObserver.onDtmfEvent(new DtmfEvent("#")); verify(player, times(2)).activate(); verify(player, times(1)).setURL("prompt.wav"); verify(player, times(1)).setURL("reprompt.wav"); verify(observer, timeout(50)).onEvent(eq(pc), eventCaptor.capture()); assertEquals(String.valueOf(ReturnCode.SUCCESS.code()), eventCaptor.getValue().getParameter("rc")); assertEquals("12A", eventCaptor.getValue().getParameter("dc")); assertEquals("2", eventCaptor.getValue().getParameter("na")); }
@Test public void buildWithNegativeDuration() { thrown.expect(IllegalArgumentException.class); thrown.expectMessage("Interval duration must be positive"); SignalFxStatsConfiguration.builder() .setToken(TEST_TOKEN) .setExportInterval(Duration.create(-1, 0)) .build(); }
@Test public void execute_insert_createsRecordsCorrectly() throws Exception { engine.create(testIndex); IndexCommit commit = mock(IndexCommit.class); when(commit.getTimestamp()).thenReturn(new Date(42)); List models = new ArrayList<>(); models.add(new TestModel("A", 42)); models.add(new TestModel("B", -42)); InsertOperation operation = new InsertOperation(commit, testIndex, models); engine.execute(operation); try (ResultSet rs = connection.createStatement().executeQuery("SELECT * FROM HISTORY_TABLE")) { assertTrue(rs.next()); assertEquals("A", rs.getString("TESTID")); assertEquals(42, rs.getInt("TESTINTEGER")); assertEquals(1L, rs.getLong("REV_ID")); assertEquals("INSERT", rs.getString("REV_OPERATION")); assertEquals(new Date(42), rs.getTimestamp("REV_TIMESTAMP")); assertTrue(rs.next()); assertEquals("B", rs.getString("TESTID")); assertEquals(-42, rs.getInt("TESTINTEGER")); assertEquals(2L, rs.getLong("REV_ID")); assertEquals("INSERT", rs.getString("REV_OPERATION")); assertEquals(new Date(42), rs.getTimestamp("REV_TIMESTAMP")); assertFalse(rs.next()); } }
@Test public void testTrainAndTest() throws Exception { TestableEvaluation evaluation = new TestableEvaluation(this.outputDirectory); List<String> trainItems = Arrays.asList("a", "b", "c"); List<String> testItems = Arrays.asList("d", "e", "f"); evaluation.trainAndTest(trainItems, testItems); Assert.assertEquals(1, evaluation.trainDirectories.size()); Assert.assertEquals(1, evaluation.testDirectories.size()); Assert.assertEquals(1, evaluation.trainDirectoryItems.size()); Assert.assertEquals(1, evaluation.testDirectoryItems.size()); Assert.assertEquals(Collections.singletonList(trainItems), evaluation.trainDirectoryItems); Assert.assertEquals(Collections.singletonList(testItems), evaluation.testDirectoryItems); for (File dir : evaluation.trainDirectories) { Assert.assertTrue(dir.getPath().startsWith(this.outputDirectory.getPath())); } for (File dir : evaluation.testDirectories) { Assert.assertTrue(dir.getPath().startsWith(this.outputDirectory.getPath())); } }
@Test @SuppressWarnings("unchecked") public void testIncreaseSearchCount() throws IOException { SuggesterTestData t = initSuggester(); t.s.increaseSearchCount("test", new Term("test", "term2"), 100, true); List<Entry<BytesRef, Integer>> res = t.s.getSearchCounts("test", "test", 0, 10); assertThat(res, contains(new SimpleEntry<>(new BytesRef("term2"), 100))); t.close(); }
@Test public void testPercentEquals() { SizeValue a = SizeValue.percent(10); SizeValue b = new SizeValue(10, SizeValueType.Percent); SizeValue c = new SizeValue("10%"); assertEquals(a, b); assertEquals(a, c); }
@Test public void sendGrantOfferLetterNoProject() { when(projectRepositoryMock.findById(projectId)).thenReturn(Optional.empty()); ServiceResult<Void> result = service.sendGrantOfferLetter(projectId); assertTrue(result.isFailure()); }
@Test(timeout=500) public void testRefreshQueues() throws Exception { String[] args = { "-refreshQueues" }; assertEquals(0, rmAdminCLI.run(args)); verify(admin).refreshQueues(any(RefreshQueuesRequest.class)); }
@Test public void testFireNullArgArray() throws Exception { Invocation inv1 = new Invocation(this, _methodName, new Class[]{Object.class}); try { inv1.fire(null); fail(); } catch (IllegalArgumentException ex) { } }
@Test public void testGetQueueExecutionNameSpaceEmpty() { Assert.assertEquals(QueueUtils.getExecutionNameSpace("queueName"),""); }
@Test(expected = ConnectionException.class) public void testGetFilesConnectionException() throws P4JavaException { List<IFileSpec> specs = FileSpecBuilder.makeFileSpecList(DEPOT_DEV_PATH); when(server.execMapCmdList(eq(FILES.toString()), argThat(DEV_ALL_FS_MATCHER), eq(null))) .thenThrow(ConnectionException.class); filesDelegator.getDepotFiles(specs, true); }
@Test public void testRemove() throws Exception { FtpFileConnection conn = sample(); VirtualFile pom = VFS.getChild(new File("pom.xml").getAbsolutePath()); VirtualFile file = conn.getFile("pom.xml"); conn.add(pom.openStream(), pom.getName()); assertTrue(file.exists()); conn.remove("pom.xml"); assertFalse(file.exists()); conn.close(); }
@Test public void testUnmarshall() throws Exception { GameObjectInstanceAddedToSceneConditionUnmarshaller theUnmarshaller = new GameObjectInstanceAddedToSceneConditionUnmarshaller(); Map<String, Object> theData = new HashMap<>(); theData.put(GameObjectInstanceAddedToSceneCondition.TYPE_ATTRIBUTE, GameObjectInstanceAddedToSceneCondition.TYPE_VALUE); GameScene theScene = mock(GameScene.class); assertNotNull(theUnmarshaller.unmarshall(theScene, theData)); }
@Test public void testUndefinedRange19() { assertFalse(DataUtilities.isUndefinedRange(program, addr(0xe9), addr(0xe8))); }
@Test public void testModified() { String drl1 = "package org.drools\n" + "rule R1 when\n" + " $m : Message( message == \"Hello World\" )\n" + "then\n" + "end\n"; String drl2 = "package org.drools\n" + "rule R2 when\n" + " $m : Message( message == \"Hello World\" )\n" + "then\n" + "end\n"; String drl3 = "package org.drools\n" + "rule R3 when\n" + " $m : Message( message == \"Good bye World\" )\n" + "then\n" + "end\n"; InternalKieModule kieJar1 = createKieJar( drl1, drl2 ); InternalKieModule kieJar2 = createKieJar( drl1, drl3 ); KieJarChangeSet changes = ChangeSetBuilder.build( kieJar1, kieJar2 ); String modifiedFile = (String) kieJar2.getFileNames().toArray()[1]; assertThat( changes.getChanges()).hasSize(1); ResourceChangeSet cs = changes.getChanges().get( modifiedFile ); assertThat(cs).isNotNull(); assertThat(cs.getChangeType()).isEqualTo(ChangeType.UPDATED); assertThat( cs.getChanges()).hasSize(2); assertThat( cs.getChanges().get( 1 )).isEqualTo(new ResourceChange(ChangeType.ADDED, Type.RULE, "R3")); assertThat( cs.getChanges().get( 0 )).isEqualTo(new ResourceChange(ChangeType.REMOVED, Type.RULE, "R2")); }
@Test public void testVisualization() { CommentLineView view = mock( CommentLineView.class ); CommentLinePresenter presenter = new CommentLinePresenterWithNOGWTCode( view ); Date commentDate = new Date( ); DiscussionRecord record = new DiscussionRecord( commentDate.getTime(), "test user", "test note" ); presenter.setRecord( record ); verify( view, times( 1 ) ).setAuthor( eq ( expectedAuthorFormat( "test user" ) ) ); verify( view, times( 1 ) ).setComment( eq( expectedCommentFormat( "test note" ) ) ); verify( view, times( 1 ) ).setDate( expectedDateFormat( commentDate.getTime() ) ); }
@Test public void launchWorksWithCustomConfiguration() throws SQLException { Destination destination = mock(Destination.class); Connection connection = mock(Connection.class); when(destination.getConnection()).thenReturn(connection); Operation operation = mock(Operation.class); BinderConfiguration config = mock(BinderConfiguration.class); DbSetup setup = new DbSetup(destination, operation, config); setup.launch(); InOrder inOrder = inOrder(destination, connection, operation); inOrder.verify(destination).getConnection(); inOrder.verify(operation).execute(connection, config); inOrder.verify(connection).commit(); }
@Test public void testTwoRanges() throws ParseException { DateRangeVisitor visitor = new DateRangeVisitor("start", "end"); visitor.visit(buildRangeFeature("2008-10-31T00:00:00.000Z", "2008-11-01T00:00:00.000Z")); visitor.visit(buildRangeFeature("2008-11-05T00:00:00.000Z", "2008-11-07T00:00:00.000Z")); List<String> range = new ArrayList<String>(visitor.getRange()); assertEquals(2, range.size()); assertEquals("2008-10-31T00:00:00.000Z/2008-11-01T00:00:00.000Z/PT1S", range.get(0)); assertEquals("2008-11-05T00:00:00.000Z/2008-11-07T00:00:00.000Z/PT1S", range.get(1)); }
@Test @SuppressWarnings("NullAway") public void testNullIsEnabled() { assertThatExceptionOfType(NullPointerException.class) .isThrownBy(() -> LoggingInvocationEventHandler.isEnabled(getLogger(), null)); }
@Test public void test_should_set_context_with_correlation_id() { MockHttpServletRequest request = new MockHttpServletRequest(); RequestContext.getCurrentContext().setRequest(request); correlationIdFilter.run(); assertNotNull(RequestContext.getCurrentContext().get("CORRELATION_ID")); }
@Test public void testCalculateRayleighCrossSection() { double[] sectionSigma = algo.getCrossSection(new double[]{1., 2.}); assertEquals(2, sectionSigma.length); assertEquals(1.004158010817489E-9, sectionSigma[0], 1e-8); assertEquals(3.9154039638717356E-12, sectionSigma[1], 1e-8); }
@Test public void testImportMultiLineString() { Projection webMercator = ProjectionFactory.getProjection(ProjectionConstants.EPSG_WEB_MERCATOR); ProjectionTransform toMercator = ProjectionFactory.getProjection(ProjectionConstants.EPSG_WORLD_GEODETIC_SYSTEM) .getTransformation(ProjectionConstants.EPSG_WEB_MERCATOR); ProjectionTransform toGeodetic = webMercator.getTransformation(ProjectionConstants.EPSG_WORLD_GEODETIC_SYSTEM); mil.nga.sf.MultiLineString geometry = new mil.nga.sf.MultiLineString(true, false); mil.nga.sf.Point point1 = toMercator.transform(new mil.nga.sf.Point(true, false, 0, 0)); point1.setZ(0d); mil.nga.sf.Point point2 = toMercator.transform(new mil.nga.sf.Point(true, false, 10, 0)); point2.setZ(5d); mil.nga.sf.Point point3 = toMercator.transform(new mil.nga.sf.Point(true, false, 10, 10)); point3.setZ(10d); mil.nga.sf.Point point4 = toMercator.transform(new mil.nga.sf.Point(true, false, 0, 10)); point4.setZ(15d); mil.nga.sf.LineString lineString1 = new mil.nga.sf.LineString(true, false); lineString1.addPoint(point1); lineString1.addPoint(point2); mil.nga.sf.LineString lineString2 = new mil.nga.sf.LineString(true, false); lineString2.addPoint(point3); lineString2.addPoint(point4); geometry.addLineString(lineString1); geometry.addLineString(lineString2); FeatureTable table = new FeatureTable(ourTableName, New.list(FeatureColumn.createPrimaryKeyColumn(0, ourKeyColumn), FeatureColumn.createGeometryColumn(1, ourGeometryColumn, GeometryType.POINT, false, null))); MockFeatureRow row = new MockFeatureRow(table, geometry); GeometryImporter importer = new GeometryImporter(); Map<String, Serializable> importedRow = New.map(); importer.importGeometry(importedRow, row, toGeodetic); Geometry actual = (Geometry)importedRow.get(GeoPackageColumns.GEOMETRY_COLUMN); assertTrue(actual instanceof MultiLineString); MultiLineString actualLineString = (MultiLineString)actual; Coordinate[] coords = actualLineString.getCoordinates(); assertEquals(4, coords.length); assertEquals(0, coords[0].x, 0d); assertEquals(0, coords[0].y, 0d); assertEquals(0, coords[0].z, 0d); assertEquals(10, coords[1].x, 0d); assertEquals(0, coords[1].y, 0d); assertEquals(5, coords[1].z, 0d); assertEquals(10, coords[2].x, 0d); assertEquals(10, coords[2].y, 0d); assertEquals(10, coords[2].z, 0d); assertEquals(0, coords[3].x, 0d); assertEquals(10, coords[3].y, 0d); assertEquals(15, coords[3].z, 0d); }
@Test public void testSampleIndex_ImplicitRandom_NonRepeating_BetweenRuns() { IntSeries s1 = Sampler.sampleIndex(5, 100); IntSeries s2 = Sampler.sampleIndex(5, 100); boolean hasDifferences = false; for (int i = 0; i < 5; i++) { if (s1.getInt(i) != s2.getInt(i)) { hasDifferences = true; break; } } assertTrue(hasDifferences); }
@Test public void testGetAllCategories(){ long a = categoryService.createCategory("a"); long b = categoryService.createCategory("b"); long c = categoryService.createCategory("c"); categoryService.createSubCategory(a, "1"); categoryService.createSubCategory(b, "2"); categoryService.createSubCategory(c, "3"); List<Category> categories = categoryService.getAllCategories(false); assertEquals(3, categories.size()); Category first = categories.get(0); assertThrows(Exception.class, () -> first.getSubCategories().size()); categories = categoryService.getAllCategories(true); Category readBack = categories.get(0); assertEquals(1, readBack.getSubCategories().size()); }
@Test public void computeNewDirectionAfterAddingLink_shouldReturnSenderIncomingAndReceiverBoth_GivenSenderNoneAndReceiverIncoming() { Map<String, CommunicationService.Direction> expectedMap = new HashMap<>(); expectedMap.put("1", CommunicationService.Direction.INCOMING); expectedMap.put("2", CommunicationService.Direction.BOTH); Assert.assertEquals(expectedMap, this.service.computeNewDirectionAfterAddingLink("1" , CommunicationService.Direction.NONE , "2" , CommunicationService.Direction.INCOMING)); }
@Test public void deleteCohortReview() { when(workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain( WORKSPACE_NAMESPACE, WORKSPACE_NAME, WorkspaceAccessLevel.WRITER)) .thenReturn(WorkspaceAccessLevel.WRITER); CohortReview requestCohortReview = new CohortReview() .cohortReviewId(cohortReview.getCohortReviewId()) .etag(Etags.fromVersion(cohortReview.getVersion())); EmptyResponse emptyResponse = cohortReviewController .deleteCohortReview( WORKSPACE_NAMESPACE, WORKSPACE_NAME, requestCohortReview.getCohortReviewId()) .getBody(); assertThat(emptyResponse).isNotNull(); }
@Test public void testDeleteById1() { UUID assuranceId = UUID.randomUUID(); Mockito.doNothing().doThrow(new RuntimeException()).when(assuranceRepository).deleteById(assuranceId); Mockito.when(assuranceRepository.findById(assuranceId)).thenReturn(null); Response result = assuranceServiceImpl.deleteById(assuranceId, headers); Assert.assertEquals(new Response<>(1, "Delete Success with Assurance id", null), result); }
@Test public void testGetMapXML() throws Exception { TestResource testResource = new TestResource("path/", "<?xml>this is XML</xml>", null); SortedMap<String, String> map = testResource.getMap(); assertNotNull(map); assertTrue(map.isEmpty()); }
@Test public void returnsHealthyWhenCheckerPasses() throws Exception { when(checker.isSpaceAvailable()).thenReturn(true); Result result = healthCheck.check(); assertThat(result.isHealthy()).isTrue(); }
@Test public void decodeArrayWithSimpleStrings() throws Exception { final String[] decode = JsonUtil.decode("[\"one\", \"two\"]"); assertThat(decode.length, is(2)); assertThat(decode[0], equalTo("one")); assertThat(decode[1], equalTo("two")); }
@Test public void testIsBundlePendingRemoval() throws Exception { Bundle bundle = mock(Bundle.class); when(bundle.getSymbolicName()).thenReturn("org.apache.testb"); RequiredBundle reqBundle = mock(RequiredBundle.class); when(reqBundle.getBundle()).thenReturn(bundle); when(reqBundle.isRemovalPending()).thenReturn(true); PackageAdmin admin = mock(PackageAdmin.class); when(admin.getRequiredBundles("org.apache.testb")).thenReturn(new RequiredBundle[] { reqBundle }); assertTrue(isBundlePendingRemoval(bundle, admin)); }
@Test public void testSetRolloverCondition() { RolloverCondition rolloverCondition = mock(RolloverCondition.class); udpStreamMonitor.setRolloverCondition(rolloverCondition); verify(udpStreamProcessor).setRolloverCondition(rolloverCondition); }
@Test public void testRaw() { SecurityMarkerFilter mkt = new SecurityMarkerFilter(); mkt.setContext(loggerContext); mkt.start(); assertTrue(mkt.isStarted()); ILoggingEvent nulEvent = new LoggingEvent(); assertEquals(FilterReply.DENY, mkt.decide(nulEvent)); LoggingEvent confidentialEvent = new LoggingEvent(); confidentialEvent.setMarker(SecurityMarkers.SECURITY_SUCCESS); assertEquals(FilterReply.NEUTRAL, mkt.decide(confidentialEvent)); LoggingEvent restrictedEvent = new LoggingEvent(); restrictedEvent.setMarker(SecurityMarkers.SECURITY_FAILURE); assertEquals(FilterReply.NEUTRAL, mkt.decide(restrictedEvent)); LoggingEvent secretEvent = new LoggingEvent(); secretEvent.setMarker(SecurityMarkers.SECURITY_AUDIT); assertEquals(FilterReply.NEUTRAL, mkt.decide(secretEvent)); }
@Test public final void testGetReference() { Reference r1 = new ReferenceImpl(Collections.emptyList()); Reference r2 = factory.getReference(Collections.emptyList()); assertEquals(r1, r2); }
@Test public void getVersion() { PluginPropertiesUtil util = new PluginPropertiesUtil(); assertNotNull( "Should never be null", util.getVersion() ); }
@Test public void loadKeyFromProperties() { String privateKey = App.getProperty("500006.channel.lenovo.appsecret", ""); logger.debug("loadKeyFromProperties() privateKey = " + privateKey); PrivateKey priKey = null; try { priKey = RSAUtil.parsePrivateKey(privateKey); } catch (NoSuchAlgorithmException | InvalidKeySpecException e) { e.printStackTrace(); } Assert.assertNotNull(priKey); }
@Test public void emptyFormDataMacroRendered(@Mocked ModelSingleForm modelSingleForm) throws IOException { new Expectations() { { modelSingleForm.getEmptyFormDataMessage(withNotNull()); result = "EMPTY"; } }; macroFormRenderer.renderEmptyFormDataMessage(appendable, new HashMap<>(), modelSingleForm); assertAndGetMacroString("renderEmptyFormDataMessage", ImmutableMap.of("message", "EMPTY")); }
@Test public void testConvertTimestampToString() throws Exception { final Timestamp timestamp = Timestamp.valueOf("2005-03-10 01:02:03.4"); final String time = (String) converter.convert(String.class, timestamp); assertEquals(DateUtil.getDateTime(DateUtil.getDateTimePattern(), timestamp), time); }
@Test public void testDecryptProd() { System.out.println(Crypto.decrypt("CTRP0001A13504A392919A1EA7027E171C661150FCC3003C3B33C9B31C69A514")); }
@Test public void testNewOrphanChain() { assertNotNull(chainManager); Block block = createBlock(); chainManager.newOrphanChain(block); assertEquals(1, chainManager.getOrphanChains().size()); }
@Test(expected = InvalidSmilesException.class) public void tellurium_strict() throws IOException { Graph g = Parser.strict("[te]"); }
@Test public void testLunacek() { for (int i = 0; i < 1000; i++) { BBOBenchmarks instance = new BBOBenchmarks(); params.set(BASE.push(BBOBenchmarks.P_WHICH_PROBLEM), "lunacek"); instance.setup(state, BASE); final DoubleVectorIndividual ind = new DoubleVectorIndividual(); ind.setGenome(new double[] { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.0 }); ind.fitness = new SimpleFitness(); instance.evaluate(state, ind, 0, 0); assertTrue(instance.problemType == 23); assertTrue(ind.fitness.fitness() <= -instance.fOpt); } }
@Test public void testDotProduct() { Map<String, MutableDouble> x = new HashMap<String, MutableDouble>(); Map<String, MutableDouble> y = new HashMap<String, MutableDouble>(); double dotProduct = 0d; for (int i = 0; i < 10; i++) { double val = Math.random(); double va2 = Math.random(); x.put("X_" + i, new MutableDouble(val)); y.put("X_" + i, new MutableDouble(va2)); dotProduct += val * va2; } assertEquals(dotProduct, SparseVectors.dotProduct(x, y), 0.0001); }
@Test public void testDoubleZScore() { DoubleSeries s = DataFrame.toSeries(0.0, 1.0, 2.0).zscore(); assertEquals(s, -1, 0.0, 1); }
@Test public void testApproximateSingleSearch() { final List<SearchEntry> results = this.search.search( new SearchQuery("Melchizedc~", new String[] {"ESV_th"}, "false", 0, 1, 10, null), "ESV_th").getResults(); for (int i = 0; i < 10 || i < results.size(); i++) { LOGGER.debug(((VerseSearchEntry) results.get(i)).getKey()); } assertFalse(results.isEmpty()); }
@Test public void shouldEnableOAuthQueryParamWhenIgnoreNotSet() { KeycloakDeployment keycloakDeployment = new KeycloakDeploymentMock(); assertTrue(keycloakDeployment.isOAuthQueryParameterEnabled()); }
@Test public void testPrimitives() throws JSONException { String encodedStr = (String) testClassObject.encode("String"); assertEquals(encodedStr, "String"); int encodedInteger = (Integer) testClassObject.encode(5); assertEquals(5, encodedInteger); boolean encodedBoolean = (Boolean) testClassObject.encode(true); assertTrue(encodedBoolean); final double DELTA = 0.00001; double encodedDouble = (Double) testClassObject.encode(5.5); assertEquals(5.5, encodedDouble, DELTA); }
@Test public void testBuildLinkageCheckDependencyGraph_catchRootException() { DependencyGraph result = dependencyGraphBuilder.buildFullDependencyGraph( ImmutableList.of(new DefaultArtifact("ant:ant:jar:1.6.2"))); Set<UnresolvableArtifactProblem> problems = result.getUnresolvedArtifacts(); Truth.assertThat(problems) .comparingElementsUsing(problemOnArtifact) .containsAtLeast("xerces:xerces-impl:2.6.2", "xml-apis:xml-apis:2.6.2"); Truth.assertThat(problems).hasSize(2); Truth.assertThat(problems) .comparingElementsUsing( Correspondence.transforming(UnresolvableArtifactProblem::toString, "has description")) .containsExactly( "xerces:xerces-impl:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2" + " (compile) > xerces:xerces-impl:jar:2.6.2 (compile?)", "xml-apis:xml-apis:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2" + " (compile) > xml-apis:xml-apis:jar:2.6.2 (compile?)"); }
@Test public void getLabel() { assertEquals("Read ACL", validator.getLabel()); }
@Test public void testNavigation() { try { sink = new Xhtml5BaseSink( writer ); sink.navigation(); sink.navigation_(); } finally { sink.close(); } assertEquals( "<nav></nav>", writer.toString() ); writer = new StringWriter(); try { sink = new Xhtml5BaseSink( writer ); sink.navigation( attributes ); sink.navigation_(); } finally { sink.close(); } assertEquals( "<nav style=\"bold\"></nav>", writer.toString() ); }
@Test public void testParseInHandle() { TestIntentHandler underTest = new TestIntentHandler(mapper); when(mockInput.getRequestEnvelope()).thenReturn(RequestEnvelope.builder() .withRequest(IntentRequest.builder() .withIntent(com.amazon.ask.model.Intent.builder() .withName("TestIntent") .withSlots(Collections.singletonMap( "amazonDate", Slot.builder() .withName("amazonDate") .withValue("2018-12-01") .build() )) .build()) .build()) .build()); underTest.handle(mockInput); TestIntent expected = new TestIntent(); expected.setAmazonDate(new SpecificDate(Slot.builder() .withName("amazonDate") .withValue("2018-12-01") .build(), LocalDate.of(2018, 12, 1))); verify(spy).handle(mockInput, expected); }
@Test public void isSameTree() { TreeNode t0 = new TreeNode(0); assertFalse(SameTreeSolution.isSameTree(t0, new TreeNode(1))); TreeNode n0 = new TreeNode(0); assertTrue(SameTreeSolution.isSameTree(t0, n0)); TreeNode t11 = new TreeNode(11); TreeNode t12 = new TreeNode(12); t0.left = t11; t0.right = t12; assertTrue(SameTreeSolution.isSameTree(t0, t0)); TreeNode n11 = new TreeNode(11); TreeNode n12 = new TreeNode(12); TreeNode n21 = new TreeNode(21); n0.left = n11; n0.right = n12; n11.left = n21; assertFalse(SameTreeSolution.isSameTree(t0, n0)); TreeNode m0 = new TreeNode(0); TreeNode m11 = new TreeNode(11); TreeNode m12 = new TreeNode(12); TreeNode m22 = new TreeNode(21); m0.left = m11; m0.right = m12; m11.right = m22; assertFalse(SameTreeSolution.isSameTree(t0, m0)); TreeNode t21 = new TreeNode(21); TreeNode t23 = new TreeNode(23); t11.left = t21; t12.left = t23; n12.left = new TreeNode(23); assertTrue(SameTreeSolution.isSameTree(t0, n0)); }
@Test public void constructors() throws Exception { Configuration conf = new Configuration(false); assertEquals(conf.size(), 0); byte[] bytes = "<configuration><property><name>a</name><value>A</value></property></configuration>".getBytes(); InputStream is = new ByteArrayInputStream(bytes); conf = new Configuration(false); ConfigurationUtils.load(conf, is); assertEquals(conf.size(), 1); assertEquals(conf.get("a"), "A"); }
@Test public void testAcceptSymbolic() throws FileSystemException { final FileFilter testee = SymbolicLinkFileFilter.SYMBOLIC; Assert.assertTrue(linkFileInfo.toString(), testee.accept(linkFileInfo)); Assert.assertFalse(notExistingFileInfo.toString(), testee.accept(notExistingFileInfo)); }
@Test public void testFirstTxId() throws Exception { long txId = System.currentTimeMillis(); when(impl.getFirstTxId()).thenReturn(txId); assertEquals(txId, manager.getFirstTxId()); verify(impl, times(1)).getFirstTxId(); }
@Test public void testShowData() { final int layoutResId = R.id.content_view; mainViewModel.showData("abcdefghijklmn", "", layoutResId); verify(navigator, times(1)).replaceMainFragment(layoutResId); mainViewModel.showData("", "abcdefghijklmn", layoutResId); verify(navigator, times(1)).replaceMainFragment("abcdefghijklmn", layoutResId); mainViewModel.showData("", "", layoutResId); verify(navigator, times(1)).startLoginActivity(); }
@Test public void showDialogTest() { presenter.show(); verify(view).setProjectName(eq("")); verify(view).setProjectDescription(eq("")); verify(view).setProjectVisibility(eq(true)); verify(view).setSkipFirstLevel(eq(true)); verify(view).showDialog(); }
@Test public void setDevice() { try (EagerSession session = EagerSession.create()) { Ops tf = Ops.create(session); opBuilder(session, "Add", "SetDevice") .setDevice("/job:localhost/replica:0/task:0/device:CPU:0") .addInput(tf.constant(2).asOutput()) .addInput(tf.constant(4).asOutput()) .build(); } }
@Test(expectedExceptions=NullPointerException.class) public void convertToPicOut_Null_refs() { Tuple2<String, Iterable<Reference>> srcDocIdReferences = new Tuple2<>("XYZ", null); referenceToPicOutConverter.convertToPicOut(srcDocIdReferences); }
@Test public void findEmployeeById() { this.company.addEmployee(new Employee("123", "Dave", 100_000.00)); this.company.addEmployee(new Employee("456", "Alice", 100_000.00)); this.company.addEmployee(new Employee("789", "Bob", 100_000.00)); Employee hopefullyDave = this.company.findEmployeeById("123"); Employee hopefullyNoOne = this.company.findEmployeeById("999"); }
@Test public void shouldNotAddExcludedWordsToQuery() throws Exception { SearchRequest searchRequest = new SearchRequest(SearchSource.INTERNAL, SearchType.SEARCH, 0, 100); searchRequest.getInternalData().setForbiddenWords(Arrays.asList("notthis", "alsonotthis")); searchRequest.setQuery("query"); UriComponentsBuilder builder = testee.buildSearchUrl(searchRequest, 0, 100); assertThat(builder.toUriString(), not(containsString("notthis"))); }
@Test public void testMultiValue2() throws Exception { MultiValuedResourceAE.resources.clear(); ExternalResourceDescription extDesc1 = createResourceDescription(ResourceWithAssert.class); ExternalResourceDescription extDesc2 = createResourceDescription(ResourceWithAssert.class); AnalysisEngineDescription aed = createEngineDescription( createEngineDescription(MultiValuedResourceAE.class, MultiValuedResourceAE.RES_RESOURCE_ARRAY, asList(extDesc1, extDesc2)), createEngineDescription(MultiValuedResourceAE.class, MultiValuedResourceAE.RES_RESOURCE_ARRAY, asList(extDesc1, extDesc2))); AnalysisEngine ae = createEngine(aed); ae.process(ae.newJCas()); assertEquals(MultiValuedResourceAE.resources.get(0), MultiValuedResourceAE.resources.get(2)); assertEquals(MultiValuedResourceAE.resources.get(1), MultiValuedResourceAE.resources.get(3)); }
@Test public void testCanGetAccessThroughStudentsWithManySections() throws Exception { helper.generateTSA(TEACHER_ID, "0", false); for (int i = 0; i < 10; ++i) { helper.generateSSA("2", String.valueOf(i), false); studentIds.add("2"); } Assert.assertEquals(validator.validate(EntityNames.STUDENT, studentIds).size(), studentIds.size()); }
@Test public void testGetLogGroup() throws IOException { JsonNode node = mapper.readTree(SINGLE_LOG_CONFIG); List<String> groupList = JsonUtils.getMatchingListFromJsonArrayNode(node, LOG_GROUP_NAME); Assert.assertEquals(1, groupList.size()); Assert.assertEquals("test_group", groupList.get(0)); }
@Test public void testIsFileLocatedInDirectorySymbolicLinkFromOutsideOk() throws IOException { Assume.assumeTrue (isUnix()); Path symlink = Paths.get(FileUtils.getTempDirectoryPath(), "symlink.txt"); Files.createSymbolicLink(symlink, f); Assert.assertTrue(fileLoader.isFileLocatedInDirectory(dir, symlink)); Files.delete(symlink); }
@Test public void testGetFileObjectWriterInClassOutput() throws Exception { System.out.println("getFileObjectWriterInClassOutput"); String pkg = "PKG"; String name= "NAME"; FileObject fileObject = mock(FileObject.class); Messager messager = mock(Messager.class); Filer filer = mock(Filer.class); Writer writer = mock(Writer.class); BodyWriter bodyWriter = mock(BodyWriter.class); FileWriterServices instance = spy(new FileWriterServices(messager, filer)); instance.bodyWriter = bodyWriter; when(filer.createResource(eq(StandardLocation.CLASS_OUTPUT), eq(pkg), eq(name))).thenReturn(fileObject); when(fileObject.openWriter()).thenReturn(writer); Writer result = instance.getFileObjectWriterInClassOutput(pkg, name); assertThat(result).isEqualTo(writer); }
@Test public void canFactoryProcessViewsShouldBeRobustWithWeirdInput() { Dictionary<String, String> headers = new Hashtable<>(2); headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, ",,,"); assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, ", foo \t\n,,"); assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, ", js \t\n,, bar,"); assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); }
@Test public void test_presentValueSensitivityModelParamsSabr_afterMaturity() { PointSensitivities sensiRec = PRICER.presentValueSensitivityModelParamsSabr( SWAPTION_REC_LONG, RATE_PROVIDER_AFTER_MATURITY, VOLS_AFTER_MATURITY).build(); assertThat(sensiRec.getSensitivities()).hasSize(0); PointSensitivities sensiPay = PRICER.presentValueSensitivityModelParamsSabr( SWAPTION_PAY_SHORT, RATE_PROVIDER_AFTER_MATURITY, VOLS_AFTER_MATURITY).build(); assertThat(sensiPay.getSensitivities()).hasSize(0); }
@Test public void testInvalidSessionTimeout() { System.setProperty(SessionConfiguration.DEFAULT_SESSION_TIMEOUT, "ABC"); SessionConfiguration sc = new SessionConfiguration(); assertEquals(SessionConfiguration.DEFAULT_SESSION_TIMEOUT_VALUE_NUM, sc.getMaxInactiveInterval()); System.getProperties().remove(SessionConfiguration.DEFAULT_SESSION_TIMEOUT); }
@Test public void whenCAExists_andItIsAIntermediateCA_aValidChildCertificateIsGenerated() throws Exception { final KeyPair childCertificateKeyPair = setupKeyPair(); final X500Name intermediateCaDn = new X500Name("O=foo,ST=bar,C=intermediate"); final KeyPair intermediateCaKeyPair = fakeKeyPairGenerator.generate(); final X509CertificateHolder intermediateCaCertificateHolder = makeCert(intermediateCaKeyPair, rootCaKeyPair.getPrivate(), rootCaDn, intermediateCaDn, true); final X509Certificate intermediateX509Certificate = new JcaX509CertificateConverter() .setProvider(BouncyCastleFipsProvider.PROVIDER_NAME) .getCertificate(intermediateCaCertificateHolder); final CertificateCredentialValue intermediateCa = new CertificateCredentialValue( null, CertificateFormatter.pemOf(intermediateX509Certificate), CertificateFormatter.pemOf(intermediateCaKeyPair.getPrivate()), null, true, false, false, false); when(certificateAuthorityService.findActiveVersion("/my-ca-name")).thenReturn(intermediateCa); when(keyGenerator.generateKeyPair(anyInt())).thenReturn(childCertificateKeyPair); final X509CertificateHolder childCertificateHolder = generateChildCertificateSignedByCa( childCertificateKeyPair, intermediateCaKeyPair.getPrivate(), intermediateCaDn ); childX509Certificate = new JcaX509CertificateConverter() .setProvider(BouncyCastleFipsProvider.PROVIDER_NAME) .getCertificate(childCertificateHolder); when( signedCertificateGenerator .getSignedByIssuer(childCertificateKeyPair, inputParameters, intermediateX509Certificate, intermediateCaKeyPair.getPrivate()) ).thenReturn(childX509Certificate); final CertificateCredentialValue certificateSignedByIntermediate = subject.generateCredential(inputParameters); assertThat(certificateSignedByIntermediate.getCa(), equalTo(intermediateCa.getCertificate())); assertThat(certificateSignedByIntermediate.getPrivateKey(), equalTo(CertificateFormatter.pemOf(childCertificateKeyPair.getPrivate()))); assertThat(certificateSignedByIntermediate.getCertificate(), equalTo(CertificateFormatter.pemOf(childX509Certificate))); verify(keyGenerator, times(1)).generateKeyPair(2048); }
@Test public void mapToBestMatchWithStarConfig() { PathTrie<Integer> pathTrie = defaultpathTrieWithStar(); assertThat(pathTrie.get("/a/b/foo"), isValue(2)); assertThat(pathTrie.get("/a/b/foo/bar"), isValue(2)); assertThat(pathTrie.get("/a/c/foo"), isValue(3)); assertThat(pathTrie.get("/a/c/foo/bar"), isValue(3)); assertThat(pathTrie.get("/a/b/c/foo"), isValue(4)); assertThat(pathTrie.get("/a/b/c/foo/bar"), isValue(4)); }
@Test public void testSendMessageHeader() throws Throwable { NCCChannel nCCChannel = new NCCChannel(); ISOMsg m = new ISOMsg(); nCCChannel.sendMessageHeader(m, 100); assertEquals(0, m.getDirection(), "m.getDirection()"); }
@Test public void shouldGetIdleTimeFromSession() throws Exception { long timeIdle = 1234l; given(mockSession.getIdleTime()).willReturn(timeIdle); long result = statelessSSOToken.getIdleTime(); assertThat(result).isEqualTo(timeIdle); }
@Test public void testGetOnEntryScript() { OnEntryScriptType onEntryScript = Mockito.mock(OnEntryScriptType.class); when(onEntryScript.getScript()).thenReturn(SCRIPT); when(onEntryScript.getScriptFormat()).thenReturn(JAVA_FORMAT); List<OnEntryScriptType> onEntryScripts = Collections.singletonList(onEntryScript); EList<ExtensionAttributeValue> extensions = mockExtensions(DroolsPackage.Literals.DOCUMENT_ROOT__ON_ENTRY_SCRIPT, onEntryScripts); when(activity.getExtensionValues()).thenReturn(extensions); assertScript(JAVA, SCRIPT, reader.getOnEntryAction()); }
@Test public void testTwoRecordsInc() { source.setIncrementalMode(true); testTwoRecords(); }
@Test public void testRead() throws IOException { InputStream in = new ByteArrayInputStream( "testString".getBytes()); byte[] result = BinaryRelayBuilder.readAllFromInputSteam(in); Assert.assertNotNull("Couldn't read from the input stream!", result); }
@Test public void testUndertowHttp2Enabled() { props.getHttp().setVersion(JHipsterProperties.Http.Version.V_2_0); UndertowEmbeddedServletContainerFactory container = new UndertowEmbeddedServletContainerFactory(); webConfigurer.customize(container); Builder builder = Undertow.builder(); container.getBuilderCustomizers().forEach(c -> c.customize(builder)); OptionMap.Builder serverOptions = (OptionMap.Builder) ReflectionTestUtils.getField(builder, "serverOptions"); assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isTrue(); }
@Test public void testParseTableReferenceThrowsWhenTableIsEmpty() { assertThrows(IllegalArgumentException.class, () -> BigQueryStrings.parseTableReference(".bar")); }
@Test public void testConvertFromColorString() { Assert.assertEquals(Color.RED, ColorUtilities.convertFromColorString("red")); Assert.assertEquals(Color.RED, ColorUtilities.convertFromColorString("RED")); Assert.assertEquals(new Color(250, 0, 0, 255), ColorUtilities.convertFromColorString("250-0-0-255")); Assert.assertEquals(new Color(250, 0, 0, 254), ColorUtilities.convertFromColorString("250-0-0-254")); Assert.assertEquals(new Color(0, 250, 0, 255), ColorUtilities.convertFromColorString("0-250-0-255")); Assert.assertEquals(new Color(0, 250, 0, 254), ColorUtilities.convertFromColorString("0-250-0-254")); Assert.assertEquals(new Color(0, 0, 250, 255), ColorUtilities.convertFromColorString("0-0-250-255")); Assert.assertEquals(new Color(0, 0, 250, 254), ColorUtilities.convertFromColorString("0-0-250-254")); Assert.assertNull(ColorUtilities.convertFromColorString("")); Assert.assertNull(ColorUtilities.convertFromColorString("255")); }
@Test public void testStaticSetterField() throws Exception { testSetter(staticSetter, FieldAccessor.of(staticSetter.getDeclaredField(FOO))); }
@Test public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception { runJobFailureWhenTaskExecutorTerminatesTest( heartbeatServices, (localTaskManagerLocation, jobMasterGateway) -> jobMasterGateway.disconnectTaskManager( localTaskManagerLocation.getResourceID(), new FlinkException("Test disconnectTaskManager exception.")), (jobMasterGateway, resourceID) -> (ignoredA, ignoredB) -> {}); }
@Test public void primaryRoleWithWhitelistedKsDoSelect() { givenRoleIsWhitelisted("primary", Permission.SELECT, DataResource.fromName("data/ks")); givenRolesOfRequest("primary", "inherited"); AuditEntry auditEntry = givenAuditEntry(Collections.singleton(Permission.SELECT), DataResource.fromName("data/ks/tbl")); assertThat(filter.isWhitelisted(auditEntry)).isTrue(); }
@Test(description = "test buildAPIConfig method with API scopes specified and " + "ensures an APIConfig is created") public void buildApiConfigTestWithScope() throws UserStoreException, APIManagerPublisherException { ServletContext servletContext = new MockServletContext(); APIResourceConfiguration apiDef = new APIResourceConfiguration(); List<APIResource> resources = new ArrayList<>(); APIResource apiResource = new APIResource(); ApiScope apiScope = new ApiScope(); apiScope.setDescription("testing"); apiResource.setScope(apiScope); resources.add(apiResource); apiDef.setResources(resources); apiDef.setTags(new String[]{"windows", "device_management"}); APIConfig apiConfig = buildApiConfig(servletContext, apiDef); Assert.assertNotNull(apiConfig, "API configuration is null."); }
@Test void resolveDestination_withExistentTopicAndMarker_returnsTopicArnFoundWhileListingTopic() throws Exception { AmazonSNS sns = mock(AmazonSNS.class); when(sns.listTopics(new ListTopicsRequest(null))) .thenReturn(new ListTopicsResult().withNextToken("mark")); String topicArn = "arn:aws:sns:eu-west:123456789012:test"; when(sns.listTopics(new ListTopicsRequest("mark"))).thenReturn( new ListTopicsResult().withTopics(new Topic().withTopicArn(topicArn))); DynamicTopicDestinationResolver resolver = new DynamicTopicDestinationResolver( sns); String resolvedDestinationName = resolver.resolveDestination("test"); assertThat(resolvedDestinationName).isEqualTo(topicArn); }
@Test public void testGetParameters() throws Exception { String name = "Extract Me All"; String abbrName = "EML"; StreetType entity = new StreetType(); entity.setName(name); entity.setAbbrName(abbrName); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("name", name); expected.put("abbrName", abbrName); expected.put("status", RowStatus.ACTIVE); expected.put("userGroups", groups); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test public void testToString() { final Node node = new Node(1, 2); assertEquals("Node [x=1, y=2, depth=0, cost=0.0, heuristic=0.0, parent=null]", node.toString()); node.setParent(node); assertEquals("Node [x=1, y=2, depth=1, cost=0.0, heuristic=0.0, parent={x=1, y=2}]", node.toString()); }
@Test public void testCreateGetOfWriteColumnsIndexingPrewriteTs() throws IOException { Get get = lockCleaner.createGetOfWriteColumnsIndexingPrewriteTs(COLUMN, prewriteTs); TestThemisCpUtil.checkReadWithWriteColumns(get.getFamilyMap(), COLUMN); Assert.assertEquals(prewriteTs, get.getTimeRange().getMin()); Assert.assertEquals(Long.MAX_VALUE, get.getTimeRange().getMax()); Assert.assertEquals(Integer.MAX_VALUE, get.getMaxVersions()); }
@Test public void obtainPageSourceFromCache() throws IOException { String jsonInputFile = "src/test/resources/eu/dnetlib/iis/wf/referenceextraction/softwareurl/data/webcrawler/document_to_softwareurl.json"; String jsonOutputFile = "src/test/resources/eu/dnetlib/iis/wf/referenceextraction/softwareurl/data/webcrawler/document_to_softwareurl_with_source.json"; String jsonCacheFile = "src/test/resources/eu/dnetlib/iis/wf/referenceextraction/softwareurl/data/webcrawler/cache_text1.json"; String jsonReportFile = "src/test/resources/eu/dnetlib/iis/wf/referenceextraction/softwareurl/data/webcrawler/report.json"; String jsonReport2File = "src/test/resources/eu/dnetlib/iis/wf/referenceextraction/softwareurl/data/webcrawler/report_from_cache.json"; CacheMetadataManagingProcess cacheManager = new CacheMetadataManagingProcess(); AvroTestUtils.createLocalAvroDataStore( JsonAvroTestUtils.readJsonDataStore(jsonInputFile, DocumentToSoftwareUrl.class), inputPath); executor.execute(buildWebCrawlerJob(inputPath, outputPath, outputFaultPath, outputReportPath)); executor.execute(buildWebCrawlerJob(inputPath, output2Path, outputFault2Path, outputReport2Path, "eu.dnetlib.iis.wf.referenceextraction.softwareurl.ExceptionThrowingContentRetriever")); AvroAssertTestUtil.assertEqualsWithJsonIgnoreOrder(outputPath, jsonOutputFile, DocumentToSoftwareUrlWithSource.class); AvroAssertTestUtil.assertEqualsWithJsonIgnoreOrder(output2Path, jsonOutputFile, DocumentToSoftwareUrlWithSource.class); Configuration conf = new Configuration(); String cacheId = cacheManager.getExistingCacheId(conf, cacheRootDir); assertNotNull(cacheId); AvroAssertTestUtil.assertEqualsWithJsonIgnoreOrder( CachedWebCrawlerJob.getCacheLocation(cacheRootDir, cacheId, CacheRecordType.text), jsonCacheFile, DocumentText.class); assertEquals(0, AvroTestUtils.readLocalAvroDataStore(outputFaultPath).size()); assertEquals(0, AvroTestUtils.readLocalAvroDataStore(outputFault2Path).size()); List<Fault> cachedFaults = AvroTestUtils.readLocalAvroDataStore( CachedWebCrawlerJob.getCacheLocation(cacheRootDir, cacheId, CacheRecordType.fault)); assertEquals(0, cachedFaults.size()); AvroAssertTestUtil.assertEqualsWithJsonIgnoreOrder(outputReportPath, jsonReportFile, ReportEntry.class); AvroAssertTestUtil.assertEqualsWithJsonIgnoreOrder(outputReport2Path, jsonReport2File, ReportEntry.class); }
@Test(expected = IllegalArgumentException.class) public void setAsText_shouldFailOnPartialDate() { ed.setAsText("27/10"); }
@Test public void testSupports() { Assertions.assertThat(helper.supports(originalPath)) .isNotNull() .isTrue(); Path wrongPath = mock(Path.class); when(wrongPath.getFileName()).thenReturn("wrongh.path"); Assertions.assertThat(helper.supports(wrongPath)) .isNotNull() .isFalse(); }
@Test public void testMatchDelegatedTrustAssertionNoRoleMatchWithPattern() { Assertion assertion = new Assertion(); assertion.setAction("ASSUME_ROLE"); assertion.setEffect(AssertionEffect.ALLOW); assertion.setResource("*:role.Role"); assertion.setRole("weather:role.*"); List<Role> roles = new ArrayList<>(); Role role = createRoleObject("coretech", "readers", null); roles.add(role); role = createRoleObject("coretech", "writers", null); roles.add(role); role = createRoleObject("coretech", "updaters", null); roles.add(role); assertFalse(zms.matchDelegatedTrustAssertion(assertion, "coretech:role.Role", null, roles)); }
@Test public void testSplit() { assertAndCheckDocShape("{ $split: [ 'June-15-2013', '-' ] }", split(value("June-15-2013"), value("-")), List.of("June", "15", "2013")); }
@Test public void testGetParametersWithDi() throws Exception { unit.setActive(false); unit.setSecurity(false); String name = "Extract Me All"; String abbrName = "EML"; MarriedType entity = new MarriedType(); entity.setName(name); entity.setAbbrName(abbrName); Map<String, Object> expected = new HashMap<String, Object>(); expected.put("name", name); expected.put("abbrName", abbrName); Map<String, Object> actual = unit.getParameters(entity); assertEquals(expected, actual); }
@Test void testLoad_FirstEventIsSnapshot() { String identifier = UUID.randomUUID().toString(); TestAggregate aggregate = new TestAggregate(identifier); when(mockEventStore.readEvents(identifier)).thenReturn( DomainEventStream.of(new GenericDomainEventMessage<>("type", identifier, 10, aggregate))); assertSame(aggregate, testSubject.load(identifier).getWrappedAggregate().getAggregateRoot()); }
@Test public void testControlListener() { configurationHelper = Mockito.mock(ConfigurationHelper.class); ReflectionTestUtils.setField(herdJmsMessageListener, "configurationHelper", configurationHelper); MessageListenerContainer mockMessageListenerContainer = Mockito.mock(MessageListenerContainer.class); when(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_ENABLED)).thenReturn("false"); JmsListenerEndpointRegistry registry = ApplicationContextHolder.getApplicationContext() .getBean("org.springframework.jms.config.internalJmsListenerEndpointRegistry", JmsListenerEndpointRegistry.class); when(registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING)).thenReturn(mockMessageListenerContainer); when(mockMessageListenerContainer.isRunning()).thenReturn(false); herdJmsMessageListener.controlHerdJmsMessageListener(); verify(mockMessageListenerContainer, Mockito.times(0)).stop(); verify(mockMessageListenerContainer, Mockito.times(0)).start(); when(mockMessageListenerContainer.isRunning()).thenReturn(true); herdJmsMessageListener.controlHerdJmsMessageListener(); verify(mockMessageListenerContainer).stop(); when(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_ENABLED)).thenReturn("true"); when(mockMessageListenerContainer.isRunning()).thenReturn(true); herdJmsMessageListener.controlHerdJmsMessageListener(); verify(mockMessageListenerContainer, Mockito.times(0)).start(); when(mockMessageListenerContainer.isRunning()).thenReturn(false); herdJmsMessageListener.controlHerdJmsMessageListener(); verify(mockMessageListenerContainer).start(); }
@Test(expected = IllegalReferenceCountException.class) public void testReadBytesAfterRelease7() { releasedBuffer().readBytes(ByteBuffer.allocate(8)); }
@Test public void testDerivative(){ for(int i = 0; i < INPUT_VALUES.length; i++){ if (INPUT_VALUES[i] < 0) { double functOutput = function.derivative(INPUT_VALUES[i]); assertEquals("The function derivation output is not as expected.", EXPECTED_FUNCT_DERIVATIVE_VALUES[i], functOutput, DOUBLES_EQUAL_DELTA); } } }
@Test public void globalTxIsNotSet() throws Throwable { omegaContext.setGlobalTxId(null); try { aspect.advise(joinPoint, compensable); fail("Expect exception here"); } catch (OmegaException ex) { assertThat(ex.getMessage(), is("Cannot find the globalTxId from OmegaContext. Please using @SagaStart to start a global transaction.")); } }
@Test public void invokeParamsCantBeCompared() { FunctionTestUtil.assertResultError( afterFunction.invoke("a", BigDecimal.valueOf(2) ), InvalidParametersEvent.class ); }
@Test public void serializeOneAnnotated() throws Exception { Gson gson = new Gson(); JsonSerializer serializer = new JsonSerializer(gson); Invokable<?, Object> method = Invokable.from(Methods.class.getMethod("oneAnnotated", Pojo.class)); Parameter[] parameters = Iterables.toArray(method.getParameters(), Parameter.class); Pojo pojo = new Pojo("Hello world!", 42); byte[] bytes = serializer.serialize(parameters, new Object[] { pojo }); String expected = gson.toJson(Collections.singletonMap("value", pojo)); JSONAssert.assertEquals(expected, new String(bytes, Charsets.UTF_8), true); }
@Test public void testGetHostString() throws Exception { InetSocketAddress unresolvedAddress = InetSocketAddress.createUnresolved("example.com", 5555); String host = Utils.getHostStringWithoutNameLookup(unresolvedAddress); assertEquals("example.com", host); InetSocketAddress resolvedAddress = new InetSocketAddress("localhost", 5555); assertFalse(resolvedAddress.isUnresolved()); host = Utils.getHostStringWithoutNameLookup(resolvedAddress); assertEquals("127.0.0.1", host); }
@Test public void testgetClustersDetails() { Object obj = StubFactory.getClustersDetails(); assertTrue("Expected Clusters object", obj instanceof Clusters); }
@Test public void testValidateIncorrectCharacters() { String description = "[ string(\"\") , string(\"abc \u00A0 123\") , string(\"\") ]"; List<String> actualErrors = new ArrayList<>(); validator.validate(description, 0, makeDecision(), actualErrors); List<String> expectedErrors = Arrays.asList( "Description of rule 0 in decision 'Test' contains illegal sequence 'NO-BREAK SPACE'" ); assertEquals(expectedErrors, actualErrors); }
@Test public void testGetSchemaFromStringWithMissingName() { String fields = "[{'type': 'STRING'}," + "{'name': 'Number', 'type': 'INTEGER', 'mode': 'sample'}]"; assertThrows(IllegalArgumentException.class, () -> BigQueryUtils.getSchemaFromString(fields)); }
@Test public void testInitialize() { final CardComponent card = mock(CardComponent.class); doNothing().when(cardFrame).refreshView(); cardFrame.initialize(grid, card); assertEquals(card, cardFrame.getCard()); verify(cardFrame).refreshView(); }
@Test public void convertToLongNull() { assertNull(byteConverter.toLong(null)); }
@Test public void testWritableTypes() throws Exception { assertThat(provider.isWriteable(JsonArray.class, null, null, null), equalTo(true)); assertThat(provider.isWriteable(JsonStructure.class, null, null, null), equalTo(true)); assertThat(provider.isWriteable(JsonObject.class, null, null, null), equalTo(true)); assertThat(provider.isWriteable(JsonValue.class, null, null, null), equalTo(false)); }
@Test public void testCreateMultiSigOutputScript() { assertTrue(ScriptPattern.isSentToMultisig( ScriptBuilder.createMultiSigOutputScript(2, keys) )); }
@Test @SuppressWarnings("all") public void getCampaignBidModifierTest() { String resourceName2 = "resourceName2625949903"; CampaignBidModifier expectedResponse = CampaignBidModifier.newBuilder().setResourceName(resourceName2).build(); mockCampaignBidModifierService.addResponse(expectedResponse); String formattedResourceName = CampaignBidModifierServiceClient.formatCampaignBidModifierName( "[CUSTOMER]", "[CAMPAIGN_BID_MODIFIER]"); CampaignBidModifier actualResponse = client.getCampaignBidModifier(formattedResourceName); Assert.assertEquals(expectedResponse, actualResponse); List<AbstractMessage> actualRequests = mockCampaignBidModifierService.getRequests(); Assert.assertEquals(1, actualRequests.size()); GetCampaignBidModifierRequest actualRequest = (GetCampaignBidModifierRequest) actualRequests.get(0); Assert.assertEquals(formattedResourceName, actualRequest.getResourceName()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }
@Test(expectedExceptions = {IllegalArgumentException.class}) public void failed() throws InvocationTargetException, IllegalAccessException { extractor.setObjectValue(null,null,null,null); }
@Test public void testDumpBindings() throws Exception { String input = "$x : property > value"; String expected = "property > value"; ConstraintConnectiveDescr descr = parse( input ); MVELDumperContext ctx = new MVELDumperContext(); String result = dumper.dump( descr, ctx ); assertEquals( expected, result ); assertEquals( 1, ctx.getBindings().size() ); BindingDescr bind = ctx.getBindings().get( 0 ); assertEquals( "$x", bind.getVariable() ); assertEquals( "property", bind.getExpression() ); }
@Test public void testConvertToStackRequestWhenAwsPresentedWithSubnet() { NetworkV1Request networkV1Request = awsNetworkV1Request(); DetailedEnvironmentResponse environmentNetworkResponse = awsEnvironmentNetwork(); NetworkV4Request networkV4Request = underTest .convertToNetworkV4Request(new ImmutablePair<>(networkV1Request, environmentNetworkResponse)); Assert.assertEquals(networkV4Request.createAws().getVpcId(), VPC_ID); Assert.assertEquals(networkV4Request.createAws().getSubnetId(), SUBNET_ID); }
@Test(expected = NullPointerException.class) public void shouldThrowNullPointerOnOuterJoinWhenMaterializedIsNull() { table.outerJoin(table, MockValueJoiner.TOSTRING_JOINER, (Materialized) null); }
@Test public void fullyCompliantVirtLimitStackWithUnlimited() { Consumer c = mockConsumer(PRODUCT_1, PRODUCT_2); for (int i = 0; i < 5; i++) { c.addGuestId(new GuestId("" + i, c, activeGuestAttrs)); } List<Entitlement> ents = new LinkedList<>(); ents.add(mockStackedEntitlement(c, STACK_ID_1, TestUtil.createProduct("Awesome Product"), PRODUCT_1, PRODUCT_2)); ents.add(mockStackedEntitlement(c, STACK_ID_1, TestUtil.createProduct("Awesome Product"), PRODUCT_1, PRODUCT_2)); ents.add(mockStackedEntitlement(c, STACK_ID_1, TestUtil.createProduct("Awesome Product"), PRODUCT_1, PRODUCT_2)); ents.add(mockStackedEntitlement(c, STACK_ID_1, TestUtil.createProduct("Awesome Product"), PRODUCT_1, PRODUCT_2)); for (Entitlement ent : ents) { ent.getPool().getProduct().setAttribute(Product.Attributes.GUEST_LIMIT, "1"); } ents.get(0).getPool().getProduct().setAttribute(Product.Attributes.GUEST_LIMIT, "-1"); mockEntCurator(c, ents); ComplianceStatus status = compliance.getStatus(c, TestUtil.createDate(2011, 8, 30)); assertEquals(0, status.getNonCompliantProducts().size()); assertEquals(2, status.getCompliantProducts().size()); assertEquals(0, status.getPartiallyCompliantProducts().size()); assertTrue(status.getCompliantProducts().keySet().contains(PRODUCT_1.getId())); assertTrue(status.getCompliantProducts().keySet().contains(PRODUCT_2.getId())); assertEquals(4, status.getCompliantProducts().get(PRODUCT_1.getId()).size()); assertEquals(4, status.getCompliantProducts().get(PRODUCT_2.getId()).size()); }
@Test public void testExec_Paris_London_fail() { NodeValue v1 = SpatialIndexTestData.PARIS_GEOMETRY_WRAPPER.asNodeValue(); NodeValue v2 = SpatialIndexTestData.LONDON_GEOMETRY_WRAPPER.asNodeValue(); NodeValue v3 = NodeValue.makeFloat(200); NodeValue v4 = NodeValue.makeString(Unit_URI.KILOMETER_URL); NearbyFF instance = new NearbyFF(); NodeValue expResult = NodeValue.makeBoolean(false); NodeValue result = instance.exec(v1, v2, v3, v4); assertEquals(expResult, result); }
@Test public void _5spaces_alpha_gamma_newline_newline_omega_results_in_three_entries() { List<String> commands = CLITextUtil.convertToList(" alpha gamma\n\nomega"); assertContains(commands, "alpha","gamma","omega"); }
@Test public void testDoesNotRestartAlreadyStartedCurator() throws Exception { CuratorFramework curator = mock(CuratorFramework.class); when(curator.getState()).thenReturn(CuratorFrameworkState.STARTED); ManagedCuratorFramework managed = new ManagedCuratorFramework(curator); managed.start(); verify(curator, never()).start(); }
@Test public void testClear() { cache.add(25, 25.0); cache.add(26, 26.0); assertTrue(cache.contains(25)); assertTrue(cache.contains(26)); cache.clear(); assertFalse(cache.contains(25)); assertFalse(cache.contains(26)); }
@Test void verifyDefaultApiToken() throws JoseException { final JWTService jwtService = new JWTService(resolvedOpenIdConfig, openIdPublicKeysSupplier); final String apiKey = defaultOpenIdCredentials.getApiKey(); Mockito.when(openIdPublicKeysSupplier.get()) .thenReturn(getPublicKeys()); Mockito.when(resolvedOpenIdConfig.getClientId()) .thenReturn(defaultOpenIdCredentials.getOauth2ClientId()); final JwtClaims jwtClaims; try { jwtClaims= jwtService.extractTokenClaims(apiKey); } catch (InvalidJwtException e) { throw new RuntimeException("Token failed verification", e); } try { LOGGER.info("Claims: \n{}", jwtClaims.toJson()); assertThat(jwtClaims.getSubject()) .isEqualTo(defaultOpenIdCredentials.getApiKeyUserEmail()); assertThat(jwtClaims.getAudience()) .contains(defaultOpenIdCredentials.getOauth2ClientId()); LocalDateTime expiryTime = LocalDateTime.ofInstant( Instant.ofEpochMilli(jwtClaims.getExpirationTime().getValueInMillis()), ZoneOffset.UTC); assertThat(Period.between(LocalDateTime.now().toLocalDate(), expiryTime.toLocalDate()).getYears()) .isGreaterThan(1); } catch (MalformedClaimException e) { e.printStackTrace(); } }
@Test public void testLog10WithNegativePowersOfTen() { MathContext mathContext = new MathContext(50); BigDecimal x = new BigDecimal("1"); BigDecimal expectedLog10 = new BigDecimal(0); for (int i = 0; i < 20; i++) { BigDecimal actualLog10 = BigDecimalMath.log10(x, mathContext); assertEquals(true, expectedLog10.compareTo(actualLog10) == 0); x = x.divide(BigDecimal.TEN, mathContext); expectedLog10 = expectedLog10.subtract(BigDecimal.ONE, mathContext); } }
@Test public void testValidatePModeSecurityPModeAuthorizeMandatory () { m_aPMode.getLeg1 ().getSecurity ().setPModeAuthorize (ETriState.UNDEFINED); m_aCompatibilityValidator.validatePMode (m_aPMode, m_aErrorList); assertTrue ("Errors: " + m_aErrorList.toString (), m_aErrorList.containsAny (x -> x.getErrorText (LOCALE).contains ("mandatory"))); }
@Test(expected = ChecksumException.class) public void testPostChecksumFailure() throws Exception { final StorageObject o = new StorageObject("f"); o.setMd5sum("d41d8cd98f00b204e9800998ecf8427f"); try { new SwiftSmallObjectUploadFeature(new SwiftWriteFeature( session, new SwiftRegionService(session))).post( new Path("/f", EnumSet.of(Path.Type.file)), MessageDigest.getInstance("MD5"), o ); } catch(ChecksumException e) { assertEquals("Upload f failed", e.getMessage()); assertEquals("Mismatch between MD5 hash d41d8cd98f00b204e9800998ecf8427e of uploaded data and ETag d41d8cd98f00b204e9800998ecf8427f returned by the server.", e.getDetail()); throw e; } }
@Test public void testMigrateSingleCaseInstanceWithDynamicSubprocessNodeMapping() { String caseId = createCaseInstanceV1(); try { assertCaseInstance(caseId, deploymentUnitV1.getIdentifier(), CASE_DEF_ID_V1); caseService.addDynamicSubprocess(caseId, PROCESS_DEF_ID_V1, null); Collection<ProcessInstanceDesc> pInstances = caseRuntimeDataService.getProcessInstancesForCase(caseId, new QueryContext()); assertEquals(2, pInstances.size()); for (ProcessInstanceDesc instance : pInstances) { assertEquals(deploymentUnitV1.getIdentifier(), instance.getDeploymentId()); } List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(USER, new QueryFilter()); assertNotNull(tasks); assertThat(tasks).hasSize(2); Map<String, TaskSummary> mappedTasks = mapTaskSummaries(tasks); assertThat(mappedTasks).containsKeys("Hello1", "Hello_V1"); Map<String, String> processMapping = new HashMap<>(); processMapping.put(CASE_DEF_ID_V1, CASE_DEF_ID_V2); processMapping.put(PROCESS_DEF_ID_V1, PROCESS_DEF_ID_V3); Map<String, String> nodeMapping = new HashMap<>(); nodeMapping.put("_22", "_33"); CaseMigrationReport report = caseInstanceMigrationService.migrate(caseId, deploymentUnitV2.getIdentifier(), processMapping, nodeMapping); assertNotNull(report); assertThat(report.isSuccessful()).isTrue(); assertThat(report.getReports()).hasSize(2); assertCaseInstance(caseId, deploymentUnitV2.getIdentifier(), CASE_DEF_ID_V2); pInstances = caseRuntimeDataService.getProcessInstancesForCase(caseId, new QueryContext()); assertEquals(2, pInstances.size()); for (ProcessInstanceDesc instance : pInstances) { assertEquals(deploymentUnitV2.getIdentifier(), instance.getDeploymentId()); } tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(USER, new QueryFilter()); assertNotNull(tasks); assertThat(tasks).hasSize(2); mappedTasks = mapTaskSummaries(tasks); assertThat(mappedTasks).containsKeys("Hello1", "Hello_V3"); userTaskService.completeAutoProgress(mappedTasks.get("Hello_V3").getId(), USER, null); caseService.destroyCase(caseId); CaseInstance instance = caseService.getCaseInstance(caseId); Assertions.assertThat(instance.getStatus()).isEqualTo(CaseStatus.CANCELLED.getId()); caseId = null; } catch (Exception e) { logger.error("Unexpected error {}", e.getMessage(), e); fail("Unexpected exception " + e.getMessage()); } finally { if (caseId != null) { caseService.cancelCase(caseId); } } }
@Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2) @Test public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception { context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT"); assertThat(subject.isCalendarAvailable(context)).isFalse(); }
@Test public void testStringToDateWithFormatWrongDate() throws Exception { String stringDate = "Valor Fake"; Date date = DateUtils.stringToDateWithFormat(stringDate, DateFormatConstants.DATE_FORMAT_TIME); Date expectedDate = new Date(0); assertThat(expectedDate, isDateEqualTo(date)); }
@Test public void testReturnSameDelegate() { final MvvmDialogFragment testedFragment = getTestedFragment(); assertSame(testedFragment.getMvvmDelegate(), testedFragment.getMvvmDelegate()); }
@Test public void testGetArrayCopy() { double[][] barray = B.getArrayCopy(); assertEquals("Array has not the correct size", rows, barray.length); assertEquals("Array has not the correct size", cols, barray[0].length); assertTrue("Reference must not be the same array", barray != avals); assertDeepArraysEquals(avals, barray); }
